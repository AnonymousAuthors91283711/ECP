[write_program]
This problem appears to involve solving an algebraic equation related to a parameter `n`, likely representing a percentage or some value constrained between 0 and 100. The equation involves expressions that can be simplified:

\[
(10 \times (1 + \frac{n}{100}) \times 75 \times (1 - \frac{n}{100})) \times (15 \times (1 + \frac{n}{100}) \times 75 \times (1 - \frac{n}{100})) = 345600
\]

We observe the repeated structure, so define:
\[
X = (1 + \frac{n}{100}) \times (1 - \frac{n}{100}) = 1 - (\frac{n}{100})^2
\]

Rewrite each factor:
\[
A = 10 \times 75 \times X = 750 \times X
\]
\[
B = 15 \times 75 \times X = 1125 \times X
\]

The equation simplifies to:
\[
A \times B = (750 X) \times (1125 X) = (750 \times 1125) X^2
\]
Calculate \(750 \times 1125\):
\[
750 \times 1125 = 843,750
\]
Hence:
\[
843,750 \times X^2 = 345,600
\]
Solve for \(X^2\):
\[
X^2 = \frac{345,600}{843,750} \approx 0.410
\]

Since:
\[
X = 1 - \left(\frac{n}{100}\right)^2
\]

then:
\[
\left(1 - \left(\frac{n}{100}\right)^2 \right)^2 \approx 0.410
\]
take square root:
\[
1 - \left(\frac{n}{100}\right)^2 = \pm \sqrt{0.410} \approx \pm 0.640
\]

Now, considering both:
- For positive:
\[
1 - \left(\frac{n}{100}\right)^2 = 0.640 \implies \left(\frac{n}{100}\right)^2 = 1 - 0.640 = 0.360
\]
\[
\frac{n}{100} = \pm \sqrt{0.360} \approx \pm 0.600
\]
\[
n \approx \pm 60
\]
But since \(n\) is constrained between 0 and 100:
\[
n \in \{60\} \quad (\text{taking only positive roots for the problem domain})
\]

- For negative:
\[
1 - \left(\frac{n}{100}\right)^2 = -0.640 \implies \left(\frac{n}{100}\right)^2 = 1 + 0.640 = 1.640
\]
which exceeds 1, giving a \(\left(\frac{n}{100}\right)^2 > 1\), inconsistent with \(|n| \leq 100\).

Thus, the only feasible solution is:
\[
n \approx 60
\]

Verify for exactness:
\[
X = 0.640
\]
then:
\[
\left(\frac{n}{100}\right)^2 = 1 - 0.640 = 0.360
\]
\[
n/100 = \pm \sqrt{0.360} = \pm 0.600
\]
\[
n = \pm 60
\]

Since \(n \ge 0\), the solution is \(n=60\).

Below is a Python script to verify and brute-force this:

```python
# Exhaustive search for n between 0 and 100
import math

for n in range(0, 101):
    X = (1 + n/100) * (1 - n/100)  # = 1 - (n/100)^2
    value = 843750 * (X ** 2)
    if abs(value - 345600) < 1e-2:
        print(f"Candidate n: {n}, value: {value}")

# Found candidate n=60, verify by direct calculation:
n_candidate = 60
X = (1 + n_candidate/100) * (1 - n_candidate/100)
calc_value = (10 * (1 + n_candidate/100) * 75 * (1 - n_candidate/100)) * \
             (15 * (1 + n_candidate/100) * 75 * (1 - n_candidate/100))
print(f"Verification for n={n_candidate}: {calc_value}")
```

This code searches for the value, confirming the approximate solution. The main answer inferred is `n=60`.
