[write_program]
The problem involves finding the number of integer solutions for the roots \( r_1, r_2 \) of a quadratic polynomial \((X - C r_1)(X - C r_2) = X^2 + C k X + C 36\). Expanding, we get:

\[
(X - C r_1)(X - C r_2) = X^2 - C (r_1 + r_2) X + C^2 r_1 r_2,
\]

which should equal:

\[
X^2 + C k X + C 36.
\]

Matching coefficients:

\[
-C(r_1 + r_2) = C k \implies r_1 + r_2 = -k,
\]
\[
C^2 r_1 r_2 = C \times 36 \implies C r_1 r_2 = 36.
\]

Assuming \(C \neq 0\), these reduce to:

- \( r_1 + r_2 = -k \),
- \( r_1 r_2 = \frac{36}{C} \).

Since \(r_1, r_2\) are integers, \(36 / C\) must be an integer, so \(C\) divides 36. For each divisor \(C\) of 36, we consider the possible integral pairs \((r_1, r_2)\) satisfying \(r_1 r_2 = 36 / C\) with \(r_1 \neq r_2\).

We will enumerate divisors and factor pairs to count solutions satisfying these constraints.

```python
# Enumerate divisors of 36
divisors_of_36 = [i for i in range(1, 37) if 36 % i == 0]
solutions = set()

# Loop over divisors C that divide 36
for C in divisors_of_36:
    product = 36 // C
    # Generate all factor pairs (r1, r2) of this product
    for r1 in range(-abs(product), abs(product) + 1):
        if r1 == 0:
            continue
        if product % r1 == 0:
            r2 = product // r1
            if r1 != r2:
                # Compute sum of roots
                r_sum = - (r1 + r2)
                # Store the solution with roots and C
                solutions.add((r1, r2, C))
                # Print the solution immediately
                print(f"Roots: ({r1}, {r2}), C: {C}, Sum: {r_sum}")

# Count the number of solutions
print(f"Total solutions: {len(solutions)}")
# The number of solutions corresponds to the size of the set
answer = len(solutions)
```
