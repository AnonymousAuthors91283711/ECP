[write_program]
This problem asks us to find all positive natural numbers n for which there exists an integer m such that m^3 = n^3 + 2*n^2 + 9*n + 8.

Rearranging the equation: m^3 - n^3 = 2*n^2 + 9*n + 8.

The difference of cubes: m^3 - n^3 = (m - n)(m^2 + m*n + n^2).

We want to find positive n and integer m satisfying this.

By inspecting small values of n, we look for potential solutions.

Let's implement a search over small nâ€™s to find all possible n up to a cutoff (say 1000) with corresponding m.

```python
# Enumerate n from 1 to 1000 and check for an integer m satisfying m^3 = n^3 + 2*n^2 + 9*n +8
# For each n, compute RHS and check if it's a perfect cube
import math

def is_perfect_cube(x):
    if x < 0:
        return False
    cube_root = round(x ** (1/3))
    return cube_root ** 3 == x

answers = []

for n in range(1, 1001):
    rhs = n ** 3 + 2 * n ** 2 + 9 * n + 8
    if is_perfect_cube(rhs):
        m = round(rhs ** (1/3))
        answers.append(n)
        print(f"n={n} => m={m}")

# Output all found n's
```
