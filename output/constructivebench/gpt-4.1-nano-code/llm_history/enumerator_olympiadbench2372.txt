[write_program]
The problem describes a geometric sequence with initial terms and a common ratio, and we need to examine its terms up to n<20. The sequence is defined with parameters a (the first term) and r (the ratio). The sequences satisfy sum conditions for first few terms; from these, we can find a and r. Then, we list the geometric terms as integers and find possible candidates for the answer.

Approach:
- Use the sum conditions to solve for a and r.
- Generate geometric terms for n=0 to 19.
- Check if geometric term at n is an integer.
- Stream output each valid integer.
- The final answer is the count of such integers.

```python
# Using the given sum equations:
# sum up to n=1: a + a*r = 40
# sum up to n=2: a + a*r + a*r^2 = 76
# sum up to n=3: a + a*r + a*r^2 + a*r^3 = 130
# From first two:
# a*(1 + r) = 40
# a*(1 + r + r^2) = 76
# from third:
# a*(1 + r + r^2 + r^3) = 130

# Solve for r:
# Divide second by first:
# (1 + r + r^2)/(1 + r) = 76/40 = 1.9
# numerator:
# (1 + r + r^2)
# denominator:
# (1 + r)

# So, (1 + r + r^2)/(1 + r) = 1.9

# Let's manually test small rational r values to find compatible r:

# It's easier to solve algebraically:
# From first: a = 40 / (1 + r)
# Plug into second:
# (40 / (1 + r))*(1 + r + r^2) = 76
# 40*(1 + r + r^2) = 76*(1 + r)
# 40 + 40 r + 40 r^2 = 76 + 76 r
# Bring all to one side:
# 40 r^2 + 40 r - 76 r + 40 - 76 = 0
# 40 r^2 - 36 r - 36 = 0
# Divide by 4:
# 10 r^2 - 9 r - 9 = 0

# Solve quadratic:
# r = [9 ± sqrt(81 - 4*10*(-9))]/(2*10)
# sqrt discriminant:
# 81 - 4*10*(-9) = 81 + 360 = 441
# sqrt = 21

# So,
# r = (9 ± 21)/20
# r1 = (9 +21)/20=30/20=1.5
# r2 = (9 -21)/20=-12/20=-0.6

# Corresponding a:
# a = 40/(1 + r)

# For r=1.5:
# a=40/(2.5)=16.0
# For r=-0.6:
# a=40/(1 -0.6)=40/0.4=100.0

# Check sums for next:
# sum up to n=3:
# S3=a*(1 + r + r^2 + r^3)
# For r=1.5, a=16:
# sum:
# 16*(1 + 1.5 + 2.25 + 3.375)=16*(8.125)=130 (matches)
# For r=-0.6, a=100:
# 100*(1 -0.6 + 0.36 -0.216)=100* (0.544)=54.4 ≠ 130 (discard)

# So only r=1.5, a=16 valid.

# Now generate terms Geometric n: a * r^n
# For n=0..19, check which are integers.

sequence_terms = []
a = 16
r = 1.5
for n in range(20):
    term = a * (r ** n)
    # check if close to an integer
    if abs(term - round(term))<1e-8:
        term_int = int(round(term))
        print(f"{n}: {term_int}")
        sequence_terms.append(term_int)
```
