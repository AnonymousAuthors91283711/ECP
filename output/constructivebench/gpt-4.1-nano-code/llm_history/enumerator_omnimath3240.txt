[write_program]
The problem defines a sequence \( c : \mathbb{N} \to \mathbb{Z} \) with three conditions:
- \( c(1) = 1 \)
- For \( n > 0 \), \( c(2n) = c(n) \)
- For \( n > 0 \), \( c(2n+1) = (-1)^n c(n) \)

We need to find the sum \( \sum_{n=1}^{2013} c(n) c(n+2) \).

To assist in conjecturing the answer, let's generate values of \( c(n) \) for \( n \leq 21 \) based on these recurrence relations, then check the pattern or compute the sum of \( c(n) c(n+2) \) for \( n \) from 1 to 2013.

I'll implement a recursive computation with memoization to generate \( c(n) \) values, then compute the partial sum.

```python
# Generate sequence c(n) based on given recursions
def generate_c(n, memo={1:1}):
    if n in memo:
        return memo[n]
    if n == 1:
        return 1
    if n % 2 == 0:
        # n is even: c(n) = c(n/2)
        val = generate_c(n // 2)
    else:
        # n is odd and > 1: c(n) = (-1)^((n-1)//2) * c((n-1)//2)
        k = (n - 1) // 2
        val = ((-1) ** k) * generate_c(k)
    memo[n] = val
    return val

# Generate and print c(n) for first few n
sequence = {n: generate_c(n) for n in range(1, 22)}

# For the sum, since c(n) and c(n+2) are known, compute sum for n=1..2013
total_sum = 0
for n in range(1, 2014):
    c_n = generate_c(n)
    c_n_plus_2 = generate_c(n + 2)
    total_sum += c_n * c_n_plus_2

print("Sample c(n) values for n=1..21:", sequence)
print("Sum of c(n)*c(n+2) from n=1 to 2013:", total_sum)
```
