[write_program]
The problem involves finding the smallest positive integer \( n \) such that:
- \( n \) has at least one digit \( d \) (base 10),
- \( k = n - d \times 10^{\text{length of digits in } n - 1} \),
- \( k = n / 29 \).

We want to find the least \( n > 0 \) satisfying these conditions.

Given the structure, the key points are:
- \( n \) is divisible by 29,
- \( n \) minus its leading digit times a power of 10 equals \( n/29 \),
- The leading digit \( d \) is part of the digits of \( n \).

Let's enumerate candidate \( n \) values \( n \) that are multiples of 29, within a reasonable range (from small to some upper limit). We'll decode each \( n \), identify the leading digit, and verify the conditions.

```python
# Enumerate multiples of 29 starting from 29 upwards
# For each candidate n:
# - convert n to string to get digits
# - extract leading digit d
# - compute k as in the problem
# - verify whether k == n // 29
# Output the first such n found

for n in range(29, 10000, 29):
    digits_str = str(n)
    d = int(digits_str[0])  # leading digit
    length = len(digits_str)
    # compute k based on the problem statement
    k = n - d * 10**(length - 1)
    if k == n // 29:
        print(n)
        break
```
