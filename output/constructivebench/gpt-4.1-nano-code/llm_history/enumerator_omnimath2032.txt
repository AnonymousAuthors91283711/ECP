[write_program]
The problem asks us to find the number of integer quadruples (a, b, c, d) with each |a|, |b|, |c|, |d| ≤ 5 that satisfy a certain algebraic equation. The approach is to loop over small small values within the range, check the equation, and count the solutions. We will stream each solution found (though the problem only asks for the total count), but for large counts, just count them efficiently.

Since the main goal is to find the total number of solutions, we will:

- Iterate through all a, b, c, d in [-5, 5].
- For each, check if the equation holds.
- Count solutions and print each as we go.

We will then output the total count at the end.

```python
# Enumerate all integer quadruples (a, b, c, d) with |a|, |b|, |c|, |d| ≤ 5
# Check the given algebraic condition
# Stream each solution found, and finally print total count

count = 0
for a in range(-5, 6):
    for b in range(-5, 6):
        for c in range(-5, 6):
            for d in range(-5, 6):
                numerator = (a**2 + b**2 + c**2 + d**2)**2
                denominator = (a + b + c + d) * (a - b + c - d) * ((a - c)**2 + (b - d)**2)
                # To avoid division, check if numerator == denominator
                if denominator != 0 and numerator == denominator:
                    print((a, b, c, d))
                    count += 1
# Output the total number of solutions
print(f"Total solutions: {count}")
```
