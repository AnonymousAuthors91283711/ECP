[write_program]
The problem involves finding the greatest possible value of the sum \(\sum_{i=0}^9 \cos(3x_i)\) given the constraint \(\sum_{i=0}^9 \cos x_i = 0\). Since it's a high-school level problem, we'll focus on small sample values, perhaps choosing \(x_i\) as multiples of a fixed angle, and aim to maximize the sum. 

One way to approach this is to consider the symmetry of cosine and test some candidates with evenly spaced angles. For simplicity, we'll test some specific angles such as \(x_i = \frac{\pi}{2}\), or \(0, \frac{\pi}{3}, \frac{2\pi}{3}\), etc., and see what sums they produce, verifying whether the sum constraint is met and recording the maximum sum achievable.

We'll iterate over a small grid of possible \(x_i\), for example, multiples of \(\frac{\pi}{6}\), and check the sum \(\sum \cos x_i\); only consider configurations where the sum is approximately zero. Then, for those configurations, compute \(\sum \cos 3x_i\). We print each candidate as soon as found, and finally determine which is maximal.

```python
import math
import itertools

# Define sample angles in radians (multiples of pi/6)
angle_steps = [k * math.pi/6 for k in range(12)]  # 0 to 11*pi/6

max_sum = -float('inf')
max_angles = None

# Generate all possible 10-tuples of angles from the sample set
for x_tuple in itertools.product(angle_steps, repeat=10):
    sum_cos_x = sum(math.cos(x) for x in x_tuple)
    # Check if the sum is approximately zero (to handle floating point)
    if abs(sum_cos_x) < 1e-3:
        sum_cos_3x = sum(math.cos(3 * x) for x in x_tuple)
        print(f"Angles: {x_tuple}, sum cos x_i: {sum_cos_x:.3f}, sum cos 3x_i: {sum_cos_3x:.3f}")
        if sum_cos_3x > max_sum:
            max_sum = sum_cos_3x
            max_angles = x_tuple

print(f"Maximum sum of cos(3x_i): {max_sum:.3f}")
```
