[write_program]
This problem is about finding the least \( N \) greater than 2017 such that the number of integers less than \( N \) starting with digit 1, multiplied by 5, equals twice \( N \).

Restating the problem:
- \( N > 2017 \)
- Count of integers \( k \in [0, N-1] \) with leading digit 1, call this count \( c \)
- Condition: \( 5c = 2N \)

Our goal: find the least \( N > 2017 \) satisfying this.

Approach:
- For small \( N \), approximate the count of numbers starting with 1.
- The count of numbers starting with 1 less than \( N \) corresponds to numbers from powers of 10, e.g., 1, 10-19, 100-199, etc.
- For each block, count how many numbers starting with 1 are in that range.
- Sum counts for ranges less than \( N \).
- Iterate from just below or above 2017 upward, check the condition.

We will:
- Iterate \( N \) starting from 2018 upwards.
- For each \( N \), count how many numbers less than \( N \) start with 1.
- When condition \( 5c = 2N \) is satisfied, output \( N \).

Since we seek the least such \( N \), we will stop at the first found.

```python
def count_leading_one(n):
    # Count how many numbers less than n start with digit 1
    count = 0
    start = 1
    while start <= n:
        end = start * 10
        # Count numbers starting with 1 in [start, min(end - 1, n - 1)]
        low = start
        high = min(end - 1, n - 1)
        if low <= high:
            count += (high - low + 1)
        start = end
    return count

n = 2018
while True:
    c = count_leading_one(n)
    if 5 * c == 2 * n:
        print(n)
        break
    n += 1
```
