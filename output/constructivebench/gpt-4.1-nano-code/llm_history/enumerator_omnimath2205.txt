[write_program]
This problem involves a polynomial and roots, specifically roots of a given polynomial \( f(X) = X^4 - 4 X^3 + 8 X^2 - 7 X + 3 \). We are asked to evaluate the sum

\[
\sum_{i=1}^4 \frac{r_i^2}{\sum_{j \neq i} r_j^2}
\]

where \( r_i \) are roots of \( f \). To analyze this, we can try to find the roots explicitly or at least understand their properties, and then compute the sum.

Given the roots are roots of a quartic polynomial with known coefficients, the roots are algebraic but perhaps not simple rational numbers, so exact roots might be complicated. Instead, sampling the roots numerically for the polynomial's roots will give us approximate values, from which we can compute the sum with high precision.

We will:
- Find the roots numerically (approximations).
- Calculate the sum above for each root.
- Print each value immediately.

Because the roots arenâ€™t rational, the answer is an approximation, but the value should approach a nice constant if the problem has a closed form. 

Let's implement this:

```python
import numpy as np

# Define the polynomial coefficients
coeffs = [1, -4, 8, -7, 3]

# Find roots numerically
roots = np.roots(coeffs)

# For each root, compute the sum
for i, r_i in enumerate(roots):
    # Compute numerator: r_i^2
    numerator = r_i ** 2
    # Compute the denominator: sum of other roots' squares
    denom = sum(r_j ** 2 for j, r_j in enumerate(roots) if j != i)
    value = numerator / denom
    print(f"Root {i+1}: {r_i:.6f}, Sum contribution: {value:.6f}")
```

This code immediately computes the roots numerically, then computes and streams each term of the sum, aiding in conjecture about its overall value.
