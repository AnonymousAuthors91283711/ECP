[write_program]
This problem involves finding all triples (a, b, c) of positive integers satisfying the conditions:
- a * b + 1 is a factorial
- b * c + 1 is a factorial
- c * a + 1 is a factorial

Since factorial growth is rapid, we can limit our search to small values. We'll iterate over plausible small integers for a, b, c, compute the expressions, and check whether they are factorials of some m, n, p. To determine if a number is a factorial of some integer, we'll precompute factorials up to a certain limit (say, 15!) as it's sufficient for small candidates.

The program will:
- Generate all factorials up to 15!
- Check all small combinations of a, b, c (say, 1 to 20)
- For those satisfying the three conditions, print the tuple immediately

Here's the code:

```python
# Generate factorials up to 20
max_factorial = 20
factorials = [1]
for i in range(1, max_factorial + 1):
    factorials.append(factorials[-1] * i)
factor_set = set(factorials)

# Search over small positive integers
for a in range(1, 21):
    for b in range(1, 21):
        prod_ab_plus_one = a * b + 1
        if prod_ab_plus_one not in factor_set:
            continue
        for c in range(1, 21):
            prod_bc_plus_one = b * c + 1
            if prod_bc_plus_one not in factor_set:
                continue
            prod_ca_plus_one = c * a + 1
            if prod_ca_plus_one not in factor_set:
                continue
            # If all three are factorials, output the triple
            print((a, b, c))
```
