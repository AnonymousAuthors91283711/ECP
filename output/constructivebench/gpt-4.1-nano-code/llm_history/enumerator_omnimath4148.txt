[write_program]
The problem involves a sequence `a` defined on natural numbers with initial conditions and a recursive-like relation involving sums over finite set intervals, and the goal appears related to identifying the greatest element in a certain set involving `a_2018 - a_2017`. Given the complexity and recursive relation, an effective approach for enumerating potential answers—especially to observe patterns—is to choose small parameters (like the sequence length) and explicitly evaluate candidate values.

Since the code suggests a recursive definition involving `a` and sums, and asks for the greatest element in the set of `a_2018 - a_2017`, I will simulate possible `a` sequences based on plausible assumptions, especially focusing on the difference `a_2018 - a_2017`. To keep computations manageable, I will consider small `n` values and simple choices, checking the possible range of `a_2018 - a_2017`.

Below, I write a Python program to generate sequences `a` of length 2020 with initial values `a_0=0` and `a_1=1`, considering the relations for small `n` (say, up to 5) to understand the possible differences `a_2 - a_1`, `a_3 - a_2`, etc., and then extend this logic approximately to the target indices.

In particular, I will:
- Enumerate small `k` values for the sum over `i` (taken from 1 to 3)
- For each possible initial sequence that respects the base conditions, compute potential `a_n` for small `n`, thus estimating the range of `a_2018 - a_2017`.
- Output the candidate differences as soon as identified.

```python
# Sequence exploration to estimate the possible values of a_2018 - a_2017
# under the recursive relation for small n, choosing simple k and initial sequences.
# This is a heuristic enumeration to assist in conjecture formation.

# Finite set for small n, simple choices for sum parameters.
# We'll explore possible differences for sequences consistent with initial conditions.

max_n = 5  # small for simplicity
initial_a0, initial_a1 = 0, 1

# Store candidates for a_2018 - a_2017
candidates = set()

# A simple recursive function to simulate the sequence for small n
def simulate_sequence(n, a_list):
    # a_list contains a_0..a_{n-1}
    if n < len(a_list):
        return a_list[n]
    # try different k values
    for k in range(1, min(n, 4)+1):
        # simulate the sum over i in [n-k, n-1]
        sum_val = 0
        count = 0
        for i in range(n - k, n):
            if i < len(a_list):
                sum_val += a_list[i]
                count += 1
            else:
                # Can't compute further without more info; skip
                break
        if count == k:
            a_n = sum_val / k
            new_a_list = a_list + [a_n]
            return simulate_sequence(n, new_a_list)
    # fallback if no k is valid
    return None

# Generate initial sequences with simple increments for a_0 and a_1
# and extend to compute differences at large n
for diff in [0, 0.5, 1, 1.5, 2]:
    a_values = [initial_a0, initial_a1 + diff]
    # simulate up to n=5 for illustration
    for n in range(2, max_n+1):
        a_n = simulate_sequence(n, a_values)
        if a_n is None:
            break
        a_values.append(a_n)
    # Assume the pattern continues; estimate a_2018 and a_2017
    # For simplicity, approximate difference as last computed difference
    diff_value = a_values[-1] - a_values[-2]
    # as we focus on a_2018 - a_2017, approximate it similarly
    # For demonstration, just print the difference pattern
    # In reality, we'd recursively extend the sequence further
    # Here, just output the candidate difference
    print(f"Possible difference a_2018 - a_2017 approximation: {diff_value}")
```
