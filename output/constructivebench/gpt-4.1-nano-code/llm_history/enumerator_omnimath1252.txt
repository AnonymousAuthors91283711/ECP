[write_program]
This problem asks for the smallest positive integer \( n \) that can be expressed as the sum of three cubes in two different ways, with different multisets of summands. 

In simpler terms: find the least \( n > 0 \) such that:
- \( n = a_1^3 + b_1^3 + c_1^3 \)
- \( n = a_2^3 + b_2^3 + c_2^3 \)
- The multisets \(\{a_1, b_1, c_1\}\) and \(\{a_2, b_2, c_2\}\) are not the same.

Known smallest "taxicab-like" number for two different representations as sums of three cubes is 1729 (the Hardyâ€“Ramanujan number). It is famously expressible as:
- \( 1729 = 1^3 + 12^3 = 9^3 + 10^3 \)

However, here we're looking for three cubes, not necessarily two terms, but the known examples of integers with multiple representations typically involve two different sets of three cubes.

Let's verify whether 1729 can be written as three cubes in two distinct ways with three summands each. 

- For 1729:
  - \(1^3 + 12^3 + 0^3\)
  - \(9^3 + 10^3 + 0^3\)

Both sum to 1729 with three integers each, but whether those representations are different multisets is the key.

Since in the classic known case:
- First set: \{1, 12, 0\}
- Second set: \{9, 10, 0\}

These are distinct multisets? The presence of zero as a summand means the sets are \(\{0,1,12\}\) vs \(\{0,9,10\}\), which are different.

Thus, 1729 fits our criteria:
- Exactly in two different sums of three cubes
- The multisets are different
- 1729 is minimal with this property (it's a well-known classic example)

Below, we'll generate candidate \( n \) starting from 1729 up to a threshold, checking sums of three cubes for different multisets, aiming to verify the minimality.

We'll implement enumeration of sums of small integers' cubes up to a threshold (say 2000), storing representations, then find the minimal \( n \) with multiple, distinct multisets.

```python
# Enumerate sums of three cubes for small integers (0 to 15) to find the smallest number 
# that can be expressed as sum of three cubes in two different ways with different multisets.

import itertools

max_a = 15  # small limit for integers
sum_map = {}  # map from sum to list of multisets

# Generate all multisets of size 3 with elements 0..max_a
for combo in itertools.combinations_with_replacement(range(max_a + 1), 3):
    s = sum(x**3 for x in combo)
    multisets = sum_map.setdefault(s, [])
    # Check if combo (as tuple) is already present (to avoid duplicates)
    if combo not in multisets:
        multisets.append(combo)

# Now, find the smallest s with at least two different multisets
for s in sorted(sum_map.keys()):
    multisets = sum_map[s]
    if len(multisets) > 1:
        # Check for two multisets that are different
        for i in range(len(multisets)):
            for j in range(i + 1, len(multisets)):
                if multisets[i] != multisets[j]:
                    print(f"Answer: {s}")
                    print(f"Multiset 1: {multisets[i]}")
                    print(f"Multiset 2: {multisets[j]}")
                    break
            else:
                continue
            break
        break
```
