[write_program]
# The problem appears to involve properties of functions over modular integers ZMod n, specifically about bijections and their shifts. The goal is to find all n that satisfy some conditions involving such functions. Based on the structure, it seems to relate to group automorphisms and additive shifts modulo n.

# To enumerate all candidate values, we will:
# - Use small values of n.
# - For each n, check whether the conditions (existence of a bijection g and the bijectivity of shifted functions) are satisfied.
# - We will print n when the conditions hold.

# Since the problem constraints involve bijections and shifts, and the n involved are small, we will limit n to a manageable range.

# For efficiency, we'll generate permutations for g (since the bijection g: ZMod n -> ZMod n) and test the shifted functions' bijectivity.

# Let's implement this.

```python
import itertools

def is_bijective_in_mod(n, f):
    # Check if function f defined on ZMod n is bijective
    images = set(f(x) for x in range(n))
    return len(images) == n

def check_conditions(n):
    # Generate all permutations g of ZMod n
    for perm in itertools.permutations(range(n)):
        g = dict(zip(range(n), perm))
        # Check if g is bijection (permutation)
        if not is_bijective_in_mod(n, lambda x: g[x]):
            continue
        # Check all k in [0..100], that fun(x) = g[x] + k * x mod n is bijective
        for k in range(101):
            def f(x):
                return (g[x] + k * x) % n
            if not is_bijective_in_mod(n, f):
                break  # For this g, the shift is not bijective for some k
        else:
            # All k in range 0..100 satisfy bijection
            return True
    return False

# Enumerate small n
answers = []
for n in range(2, 50):  # up to 50 for case study
    if check_conditions(n):
        print(n)
        answers.append(n)
```

# This script searches for n in [2..50] satisfying the conditions formulated in the theorem, printing each such n immediately when found.
