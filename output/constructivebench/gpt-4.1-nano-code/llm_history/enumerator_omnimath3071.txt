[write_program]
This problem seems to involve assigning numerical values to characters ('S', 'E', 'T', 'H', 'A', 'M') such that certain equations hold, and then deriving the sum of some variables. The constraints are:

- v('S') + v('E') + v('T') = 2
- v('H') + v('A') + v('T') = 7
- v('T') + v('A') + v('S') + v('T') + v('E') = 3
- v('M') + v('A') + v('T') = 4

The goal is to find values satisfying these constraints and then compute v('M') + v('A') + v('T') + v('H').

Approach:
- Assign small integer values (e.g., 0-10) to each variable.
- Search all combinations that satisfy the constraints.
- For each solution, print the sum according to the expression.

This is a brute-force enumeration over small ranges, which is efficient for such small variable domains. We'll only print solutions as we find them immediately, as per requirements.

```python
# Enumerate possible values for variables: small range considering the sums (0 to 10)
for S in range(11):
    for E in range(11):
        for T in range(11):
            # From first equation: S + E + T = 2
            if S + E + T != 2:
                continue
            for H in range(11):
                # From second equation: H + A + T = 7
                for A in range(11):
                    # From third equation: T + A + S + T + E = 3 -> (S + E + A + 2T) = 3
                    # But since S+E+T=2, then S+E=2 - T, so:
                    # (2 - T) + A + 2T = 3 -> (2 - T) + A + 2T = 3
                    # Simplify: 2 - T + A + 2T = 3 -> 2 + A + T = 3 -> A + T = 1
                    if A + T != 1:
                        continue
                    # Check second equation: H + A + T = 7 -> H = 7 - A - T
                    H_calc = 7 - A - T
                    if H != H_calc:
                        continue
                    # From fourth equation: M + A + T = 4
                    for M in range(11):
                        if M + A + T == 4:
                            total = M + A + T + H
                            print(total)
```
