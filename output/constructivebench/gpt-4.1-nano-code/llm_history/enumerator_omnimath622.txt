[write_program]
The problem appears to involve quadratic functions with integer coefficients and three points with specified function values, leading to the discriminant `b^2 - 4ac`. Our goal is to find the *greatest* such discriminant (or verify its extremal property) among those quadratic functions that pass through certain points and satisfy conditions on their roots.

Given that the problem asks for the greatest disciminant among quadratic functions fitting specified points and roots, a natural approach is to:

- Fix small sample points (u, v, w) with distinct integers.
- Enumerate all quadratic functions passing through points with the given constraints.
- Compute their discriminants.
- Track the maximum discriminant found.

The program ensures:

1. Immediate printing of each candidate discriminant.
2. Exhaustive enumeration with small bounds for efficiency.
3. Clear parameter choices, with printed parameters for clarity.

Here's the Python code:

```python
# Program enumerates quadratic functions passing through specified points with integer coefficients,
# computes their discriminants, and finds the greatest one among them.

# Choose small sample points with distinct integers
sample_points = [(0, 0), (1, 2), (-1, 2)]  # u,v,w and their f-values
max_discriminant = None
max_params = None

for a in range(-10, 11):
    for b in range(-10, 11):
        for c in range(-10, 11):
            # Check if the quadratic passes through the three points
            f_u = a * sample_points[0][0]**2 + b * sample_points[0][0] + c
            f_v = a * sample_points[1][0]**2 + b * sample_points[1][0] + c
            f_w = a * sample_points[2][0]**2 + b * sample_points[2][0] + c
            if (f_u == sample_points[0][1] and
                f_v == sample_points[1][1] and
                f_w == sample_points[2][1]):
                # Compute discriminant
                discriminant = b**2 - 4*a*c
                print(f"Coefficient (a,b,c): ({a},{b},{c}), Discriminant: {discriminant}")
                if (max_discriminant is None) or (discriminant > max_discriminant):
                    max_discriminant = discriminant
                    max_params = (a, b, c)

print("\nMaximum discriminant found:", max_discriminant, "with parameters", max_params)
```
