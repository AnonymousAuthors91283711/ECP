[write_program]
The problem involves finding the value of the sequence \( t(n) \) defined by initial conditions and a recurrence relation for \( n \geq 3 \):

\[
t(n) = \frac{n - 3}{n - 1} \times t(n - 2)
\]

with initial conditions:
\[
t(1) = 1,\quad t(2) = -1
\]

Our goal is to analyze the recurrence to discover a pattern or closed-form expression for \( t(n) \).

Let's trace a few terms:
- \( t(1) = 1 \)
- \( t(2) = -1 \)

Compute:
- \( t(3) = \frac{0}{2} \times t(1) = 0 \)
- \( t(4) = \frac{1}{3} \times t(2) = \frac{1}{3} \times (-1) = -\frac{1}{3} \)
- \( t(5) = \frac{2}{4} \times t(3) = \frac{1}{2} \times 0 = 0 \)
- \( t(6) = \frac{3}{5} \times t(4) = \frac{3}{5} \times (-\frac{1}{3}) = -\frac{1}{5} \)

Sequence:
\[
t(1) = 1,\quad t(2) = -1,\quad t(3)=0,\quad t(4)=-\frac{1}{3},\quad t(5)=0,\quad t(6)=-\frac{1}{5}
\]

Pattern:
- For odd \( n \geq 3 \), \( t(n)=0 \)
- For even \( n \geq 4 \), \( t(n) = - \frac{1}{n - 1} \)

Check \( t(8) \):
\[
t(8) = \frac{7}{9} \times t(6) = \frac{7}{9} \times (-\frac{1}{5}) = -\frac{7}{45}
\]
which matches the pattern \( t(8)= -\frac{1}{7} \). Actually, this isn't matching; let's verify more terms.

Calculate \( t(8) \):
- \( t(8) = \frac{7}{9} \times t(6) = \frac{7}{9} \times -\frac{1}{5} = -\frac{7}{45} \)

Tell me about the pattern:
- For even \( n \geq 4 \), \( t(n) = - \frac{1}{n-1} \) estimate is invalid here because \( t(8) \neq -\frac{1}{7} \)

Wait, our earlier guess was invalid. Let's write code to compute many terms up to large \( n \) and observe the pattern empirically.

Now, implement a Python enumerator to compute \( t(n) \) for \( n \) from 1 up to 2000, and output the pattern found for \( t(1998) \).

```python
# Program to analyze sequence t(n) and compute t(1998)
# Based on recurrence: t(n) = ((n-3)/(n-1)) * t(n-2), with t(1)=1, t(2)=-1

def compute_t(n_max):
    t = dict()
    t[1] = 1
    t[2] = -1
    for n in range(3, n_max + 1):
        t[n] = ((n - 3) / (n - 1)) * t[n - 2]
        # Stream output for each computed value
        print(f"t({n}) = {t[n]}")
    return t

t_values = compute_t(2000)
# Output the specific answer for t(1998)
print(f"t(1998) = {t_values[1998]}")
```
