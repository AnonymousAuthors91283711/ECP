[write_program]
This problem asks us to find the number of real solutions x to the equation \(x^2 + 10000 \lfloor x \rfloor = 10000 x\). 

Rearranged:
\[x^2 + 10000 \lfloor x \rfloor = 10000 x\]

Let \(n = \lfloor x \rfloor\), so \(x \in [n, n+1)\). Then the equation becomes:
\[x^2 + 10000 n = 10000 x\]
which rearranges to:
\[x^2 - 10000 x + 10000 n = 0\]

This quadratic in x has discriminant:
\[\Delta = (10000)^2 - 4 \times 1 \times 10000 n = 100000000 - 40000 n\]

For real solutions:
\[\Delta \ge 0 \implies 100000000 - 40000 n \ge 0 \implies n \le \frac{100000000}{40000} = 2500\]

Since \(\lfloor x \rfloor = n\), solutions for x are:
\[x = \frac{10000 \pm \sqrt{\Delta}}{2}\]

For each integer \(n\) with \(\Delta \ge 0\), check if solutions \(x\) lie in \([n, n+1)\).

Now, let's implement a Python script to enumerate all such solutions and count the total:

```python
# Enumerate n from -infinity to 2500 (practical limit)
# For each n with discriminant >= 0, compute solutions
# Count solutions that lie within [n, n+1)
solutions_count = 0

for n in range(-3000, 2501):  # Explore some lower values as the quadratic could have solutions for smaller n
    discriminant = 100_000_000 - 40_000 * n
    if discriminant < 0:
        continue
    sqrt_discriminant = discriminant ** 0.5
    x1 = (10000 + sqrt_discriminant) / 2
    x2 = (10000 - sqrt_discriminant) / 2

    # Check if x1 is in [n, n+1)
    if n <= x1 < n + 1:
        print(x1)
        solutions_count += 1
    # Check if x2 is in [n, n+1), and distinct from x1 if they are equal
    if discriminant > 0:
        if n <= x2 < n + 1:
            print(x2)
            solutions_count += 1

print("Total solutions:", solutions_count)
```

This script enumerates all possible solutions to the given equation by leveraging the quadratic formula for each integer value of \(\lfloor x \rfloor\), checks whether the solutions are valid in the corresponding intervals, prints each solution immediately, and finally, outputs the total count.
