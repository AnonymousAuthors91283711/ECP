[write_program]
This problem involves a recurrence relation:
\[ a(n) = m (a(n-1) + a(n-2)) - a(n-3) \]
with initial conditions:
\[ a(1)=1, \quad a(2)=1, \quad a(3)=4, \]
and asks to characterize when all \( a(n) \) are perfect squares.

To conjecture the set of \( m \) for which all \( a(n) \) are perfect squares, we will:
- Fix small \( m \) values, starting from \( m=2 \) upwards.
- Generate the sequence \( a(n) \) for several terms.
- Check if all generated \( a(n) \) are perfect squares.
- If so, record that \( m \).

Because the sequence depends heavily on initial terms and the recurrence, and to limit output size, we will test \( m \) in a small range (say, 2 to 5). For each \( m \), generate first, say, 20 terms and check the property.

The code will:
- Enumerate \( m \) in [2..5],
- Calculate \( a(n) \) iteratively,
- Test if each \( a(n) \) is a perfect square,
- Print \( m \) if the sequence contains only perfect squares up to the checked terms.

This is heuristic and partial, aligning with the instructions to assist in conjecture.

```python
import math

def is_perfect_square(x):
    if x < 0:
        return False
    s = int(math.isqrt(x))
    return s * s == x

for m in range(2, 6):
    a = [1, 1, 4]
    all_squares = True
    for n in range(3, 20):
        next_a = m * (a[n-1] + a[n-2]) - a[n-3]
        a.append(next_a)
        if not is_perfect_square(next_a):
            all_squares = False
            break
    if all_squares:
        print(f"m = {m} produces all perfect squares in first 20 terms")
```
