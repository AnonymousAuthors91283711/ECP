[write_program]
The problem involves finding all triples (a, b, c) satisfying the system:
1. \( a b + b c + c a = 1 \)
2. \( a^2 b + c = b^2 c + a \)
3. \( b^2 c + a = c^2 a + b \)

To explore solutions, I will:
- Fix small values for one variable, e.g., \(a \in \{-2, -1, 0, 1, 2\}\),
- For each fixed \(a\), we'll derive conditions on \(b, c\),
- Use enumeration to find all solutions near these small values,
- Stream solutions as tuples.

I will focus on symbolic reasoning but will approximate solutions by iterating over small integers. The code avoids heavy computations and outputs as soon as a valid solution is found, under the assumption that solutions are integer or rational in a small range.

```python
# Enumerate small integer triples to find solutions satisfying the three equations.
import itertools

# Small range for variables
range_vals = range(-3, 4)

# Store solutions
solutions = set()

# Iterate over small integer values of a, b, c
for a, b, c in itertools.product(range_vals, repeat=3):
    # Check the equations
    eq1 = (a*b + b*c + c*a) == 1
    eq2 = (a**2 * b + c) == (b**2 * c + a)
    eq3 = (b**2 * c + a) == (c**2 * a + b)
    if eq1 and eq2 and eq3:
        sol = (a, b, c)
        if sol not in solutions:
            print("Found solution:", sol)
            solutions.add(sol)
```
