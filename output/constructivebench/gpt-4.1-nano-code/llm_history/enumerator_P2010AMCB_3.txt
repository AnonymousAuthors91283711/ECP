[write_program]
The problem involves finding the number of natural numbers \( x \) such that there exist natural numbers \( a, b \) with \( a \times x = 48 \) and \( b \times x = 64 \). This is equivalent to finding common divisors of 48 and 64, because for such an \( x \), both \( 48 / x \) and \( 64 / x \) must be integers.

To enumerate all such \( x \), we can:
- Find the common divisors of 48 and 64, which are divisors of their greatest common divisor (GCD).
- The count of such \( x \) equals the number of divisors of \( \gcd(48, 64) \).

Let's implement this logic efficiently.

```python
# Find the GCD of 48 and 64
import math

gcd_value = math.gcd(48, 64)

# Function to find all positive divisors of a number
def find_divisors(n):
    divisors = []
    for i in range(1, int(math.isqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)
    return sorted(divisors)

# Find all x such that a * x = 48 and b * x = 64 for some a,b
# These x are exactly the divisors of gcd_value
divisors = find_divisors(gcd_value)
for d in divisors:
    print(d)

# The total count of such x
print(len(divisors))
```
