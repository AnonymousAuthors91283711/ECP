[write_program]
This problem involves enumerating primitive Pythagorean triples (i.e., triples with gcd conditions) and calculating a specific expression involving those triples, then selecting the maximal value of that expression. The key points:
- Primitive Pythagorean triples satisfy: \(a^2 + b^2 = c^2\) and gcd conditions.
- We need all such triples and compute \((a + b + c)^2 / (a * b)\).
- Find the greatest value of this expression among all triples.

Given the constraints, we can:
- Generate small primitive Pythagorean triples using Euclid's formula.
- For each, compute the expression.
- Track the maximum value and output the triples generating it.

```python
# Generate primitive Pythagorean triples using Euclid's formula: 
# a = m^2 - n^2, b = 2mn, c = m^2 + n^2 for coprime m > n > 0, not both odd
# Check gcd conditions, compute the value, and keep track of the maximum.

import math

max_value = -math.inf
max_triples = []

# Limit to small m, n to keep the enumeration efficient
for m in range(2, 20):
    for n in range(1, m):
        if (m + n) % 2 == 1 and math.gcd(m, n) == 1:  # coprime and opposite parity
            a = m * m - n * n
            b = 2 * m * n
            c = m * m + n * n

            # gcd conditions are satisfied for primitive triples from Euclid's formula
            # Compute the expression
            sum_trip = a + b + c
            value = (sum_trip * sum_trip) / (a * b)

            print(f"Triple: (a={a}, b={b}, c={c}), value={value}")

            if value > max_value:
                max_value = value
                max_triples = [(a, b, c)]
            elif value == max_value:
                max_triples.append((a, b, c))

# Output the maximum value and the triples achieving it
print(f"\nMaximum value: {max_value}")
for triple in max_triples:
    print(f"Triplet: {triple}")
```
