[write_program]
This problem involves finding the number of positive integer solutions \((a, b, c, d)\) to the linear Diophantine equation:

\[ 12a + 21b + 28c + 84d = 2024 \]

with \(a, b, c, d > 0\).

To do this efficiently, we can iterate over possible values of \(d\), then over \(c\), \(b\), and \(a\), constrained by the sum. For each fixed \(d\), the remaining sum is:

\[ R = 2024 - 84d \]

We only consider \(d\) such that \(84d < 2024\) (and \(d > 0\)), and similarly for the other variables.

Here's the Python code that enumerates all solutions, counts them, and outputs the total number:

```python
# Enumerate all positive solutions (a,b,c,d) satisfying 12a + 21b + 28c + 84d = 2024
# with all variables > 0.

count = 0
for d in range(1, (2024 // 84) + 1):  # d > 0
    rem_d = 2024 - 84 * d
    if rem_d <= 0:
        continue
    for c in range(1, (rem_d // 28) + 1):  # c > 0
        rem_c = rem_d - 28 * c
        if rem_c <= 0:
            continue
        for b in range(1, (rem_c // 21) + 1):  # b > 0
            rem_b = rem_c - 21 * b
            if rem_b <= 0:
                continue
            # now solve for a: 12a = rem_b
            if rem_b % 12 == 0:
                a = rem_b // 12
                if a > 0:
                    print((a, b, c, d))
                    count += 1
print("Total solutions:", count)
```
