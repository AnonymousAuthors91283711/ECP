[write_program]
The problem involves finding the smallest natural number n greater than 0 such that the number of divisors of n^n is at least 1,000,000. To do this efficiently, we focus on small candidate n, compute the number of divisors of n^n, and identify the minimal n satisfying the condition.

The number of divisors of n^n can be computed based on prime factorization. For small n, we explicitly list all n, compute the divisor count, and check against 1,000,000. Since large n will quickly exceed the divisor count threshold, we iterate over a small range and stop once we find the minimal n satisfying the condition.

```python
import math

# Function to compute the number of divisors of n^n
def divisors_count_n_power_n(n):
    # Prime factorization for small n
    # For efficiency, factor only small n explicitly
    factors = {}
    temp = n
    for p in range(2, int(math.sqrt(n)) + 1):
        while temp % p == 0:
            factors[p] = factors.get(p, 0) + 1
            temp //= p
    if temp > 1:
        factors[temp] = factors.get(temp, 0) + 1

    # For n^n, exponents multiply by n
    count = 1
    for e in factors.values():
        count *= (e * n + 1)
    return count

# Search for minimal n > 0 with divisor count >= 1,000,000
threshold = 1_000_000
answer = None
for n in range(1, 100):  # limit upper bound for efficiency
    d_count = divisors_count_n_power_n(n)
    print(f"n={n}, divisors of n^n={d_count}")
    if d_count >= threshold:
        answer = n
        print(f"Found minimal n: {n}")
        break
if answer is None:
    print("No n within range satisfies the condition.")
```
