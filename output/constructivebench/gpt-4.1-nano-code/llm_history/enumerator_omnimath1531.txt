[write_program]
This problem involves understanding the minimal value of an expression involving roots of a certain cubic polynomial. The key steps are recognizing the polynomial's roots' properties and how the symmetric sum relates, then enumerating possible values for the expression given small parameters.

To approach this:
- Fix small values of `a > 0`.
- Find three roots `x1, x2, x3` satisfying the polynomial.
- Compute the expression `x1^3 + x2^3 + x3^3 - 3 * x1 * x2 * x3`.
- Check the minimal value over these configurations.

Since exact symbols and symbolic solving are complex, focus on small sample values and approximate roots for small `a`. We'll output all candidate values of the expression for small `a`, and identify the minimal one.

```python
import numpy as np

# Sample small values of a > 0 to explore roots
sample_as = [0.1, 0.5, 1.0]
results = []

for a in sample_as:
    # Define the polynomial coefficients: x^3 - a*x^2 + a*x - a
    coeffs = [1, -a, a, -a]
    # Find roots numerically
    roots = np.roots(coeffs)
    real_roots = roots[np.isreal(roots)].real
    # Generate all combinations of 3 roots (with repetition)
    for x1 in real_roots:
        for x2 in real_roots:
            for x3 in real_roots:
                s = (x1**3 + x2**3 + x3**3) - 3*x1*x2*x3
                # Save the tuple with the associated a and roots
                results.append((a, (x1, x2, x3), s))
                print(f"a={a:.2f}, roots={x1:.3f},{x2:.3f},{x3:.3f} => s={s:.3f}")
```
