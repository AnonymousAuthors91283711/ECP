[write_program]
The problem involves finding a value for `x + y` given the constraints `-1 < x < y < 1` and the relations `G = x / (1 - y)` and `G' = y / (1 - x)` with the condition `G = G'`.  
Starting from `G = G'`, we analyze:

\[ \frac{x}{1 - y} = \frac{y}{1 - x} \]
Cross-multiplied:
\[ x(1 - x) = y(1 - y) \]
which simplifies to:
\[ x - x^2 = y - y^2 \]
or
\[ (x - y) = (x^2 - y^2) = (x - y)(x + y) \]

If \( x \neq y \), then dividing both sides by \( (x - y) \):

\[ 1 = x + y \]

If \( x = y \), then from \( G = G' \):

\[ \frac{x}{1 - x} = \frac{x}{1 - x} \]

which is always true, but since \( x = y \), the inequality \( -1 < x < y < 1 \) becomes invalid unless strict inequalities are maintained.

Given the boundary conditions `-1 < x < y < 1`, the only consistent solution implies:

\[ x + y = 1 \]

Thus, any pair satisfying the inequalities with the sum equal to 1 is valid.

We can check various sample pairs where \( x + y = 1 \):

- For \( x = 0 \), \( y = 1 \) → invalid because \( y < 1 \) must be strict.
- For \( x = 0.4 \), \( y = 0.6 \) → valid because \( -1 < 0.4 < 0.6 < 1 \).
- For \( x = -0.5 \), \( y = 1.5 \) → invalid because \( y < 1 \).
- For \( x = 0.9 \), \( y = 0.1 \) → invalid because \( y > x \), and the order isn't maintained.

Therefore, the key is to find all \( x \) within \(-1 < x < 1\), \( x < y = 1 - x \), with \( y < 1 \), and \( y > x \). This reduces to:

\[ -1 < x < 1 - x < 1 \Rightarrow -1 < x < 1 - x \quad \text{and} \quad 1 - x < 1 \]

which gives:

\[ -1 < x < 1 - x \Rightarrow x < \frac{1}{2} \]

and

\[ 1 - x < 1 \Rightarrow x > 0 \]

Combining:

\[ 0 < x < 0.5 \]

and \( y = 1 - x \), which then satisfies:

\[ -1 < x \quad \text{(always true)} \]

and

\[ y < 1 \Rightarrow 1 - x < 1 \Rightarrow x > 0 \] (already established).

Thus, for any \( x \in (0, 0.5) \), \( y = 1 - x \), the sum \( x + y = 1 \) is valid, respecting strict inequalities.

**Total summary**:  
Answer: \( \boxed{1} \)

---

```python
# Enumerate x in (0, 0.5) with small steps to confirm the sum tends to 1.
import numpy as np

lower_bound = 0.01
upper_bound = 0.49
step = 0.01

for x in np.arange(lower_bound, upper_bound + step, step):
    y = 1 - x
    if -1 < x < y < 1:
        sum_xy = x + y
        print(f"x: {x:.2f}, y: {y:.2f}, x + y: {sum_xy:.2f}")
        # All these have sum close to 1, aligning with the analysis.
print("Answer:", 1)
```
