[write_program]
This problem involves finding the smallest positive integer n such that for every k in {1, 2, 3, 4}, there exists an m ≤ n with (m * 123) % 360 falling into a specified interval corresponding to k. The key is to analyze the residues of (m * 123) mod 360 and see whether all four angle intervals can be covered simultaneously with some m ≤ n.

Because 123 and 360 are constants, the residues repeat periodically with period dividing 360. We want the minimal n such that the set of residues {(m * 123) % 360 | m = 1..n} covers all four angular intervals.

The approach:
- Generate the sequence (m * 123) % 360 for m from 1 upwards.
- For each m, determine which intervals are covered.
- Check if all four intervals are covered at some m ≤ current n.
- Output the minimal such n.

Let's implement this efficiently by:
- Precomputing residues until all four intervals have been covered by some m ≤ n.
- Comparing residues to interval bounds.

```python
def find_min_n_for_coverage():
    residues = []
    covered_intervals = set()
    # Define interval bounds for k
    intervals = {
        1: (0, 90),
        2: (90, 180),
        3: (180, 270),
        4: (270, 360)
    }

    for m in range(1, 10000):  # arbitrary upper limit to ensure coverage
        residue = (m * 123) % 360
        residues.append(residue)
        # Check which interval this residue falls into
        for k, (low, high) in intervals.items():
            if low < residue <= high:
                covered_intervals.add(k)
        # If all four intervals are covered, return m
        if len(covered_intervals) == 4:
            print(f"Found minimal n: {m}")
            return m
    # If not found within the range (unlikely), indicate failure
    return None

answer = find_min_n_for_coverage()
print("Answer:", answer)
```
