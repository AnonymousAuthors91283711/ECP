[write_program]
This problem appears to involve a cryptarithm-like equation, where W, E, Y, S, C, N are distinct digits (0-9), with W fixed at 3. The key equation is:

(10 * W + E) * (100 * E + 10 * Y + E) = 10000 * S + 1000 * C + 100 * E + 10 * N + E

Given the constraints:
- W=3
- All digits are nonzero and distinct
- Injective mapping (digits are distinct)

To assist in conjecture and proof, we will enumerate all possible small combinations fitting these criteria:

- W fixed at 3
- E, Y, S, C, N in 1..9, distinct, E ≠ 0, S ≠ 0, C ≠ 0, N ≠ 0

The program will systematically iterate over possible assignments, check the equation, and output any solutions immediately.

```python
# Enumerate possible digit assignments for the cryptarithm
for E in range(1, 10):
    for Y in range(1, 10):
        for S in range(1, 10):
            for C in range(1, 10):
                for N in range(1, 10):
                    # Ensure all digits are distinct
                    digits = [3, E, Y, S, C, N]
                    if len(set(digits)) != 6:
                        continue
                    left = (10 * 3 + E) * (100 * E + 10 * Y + E)
                    right = 10000 * S + 1000 * C + 100 * E + 10 * N + E
                    if left == right:
                        print(f"W=3, E={E}, Y={Y}, S={S}, C={C}, N={N}")
```
