[write_program]
This problem appears to involve counting numbers within a given range (1 to 2002) where the number of digit '1's in the base-2 (binary) representation remains constant when we add 1 to the number. To assist in conjecturing the answer, I will enumerate candidate numbers in this range, check their binary digit counts before and after adding one, and count how many satisfy the condition.

To improve efficiency:
- I'll iterate over the range 1 to 2002.
- For each number, compute the binary representation, count '1's, and compare with the count after adding 1.
- Count how many satisfy the property.

I will then output the count directly as the answer.

```python
# Enumerate numbers from 1 to 2002
count = 0
for n in range(1, 2003):
    bin_n = bin(n)[2:]  # binary string of n
    bin_np1 = bin(n+1)[2:]  # binary string of n+1
    if bin_n.count('1') == bin_np1.count('1'):
        print(n)  # print each number satisfying the condition
        count += 1
print("Total count:", count)
```
