[write_program]
The problem asks to find the number of triples \((a, b, c)\) of natural numbers satisfying \(2^a + 2^b = c!\). Since factorial grows very quickly and powers of two are exponential, we can limit the search to small values of \(a, b, c\). 

- For each small \(c\), compute factorial \(c!\).
- For each \(a, b\) up to a certain small limit (say 20), check if \(2^a + 2^b\) equals \(c!\).
- Count the valid triples and print each.

This approach enumerates all possibilities efficiently without hardcoding.

```python
# Enumerate small values of c, a, b to find all solutions to 2^a + 2^b = c!
# We'll limit c to small numbers (up to 15) since factorial grows quickly.
# For a, b, we limit to 20 as an upper bound for powers of two.

from math import factorial

max_c = 15
max_pow = 20
solutions = []

for c in range(max_c + 1):
    c_fact = factorial(c)
    for a in range(max_pow + 1):
        for b in range(max_pow + 1):
            if 2 ** a + 2 ** b == c_fact:
                print((a, b, c))
                solutions.append((a, b, c))
# Total number of solutions
print(f"Total solutions: {len(solutions)}")
```
