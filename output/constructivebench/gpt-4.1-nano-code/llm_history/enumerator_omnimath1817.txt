[write_program]
The problem appears to be about finding the greatest n such that the sum of digit sums of all numbers from 0 to n (including 0) minus 1 equals 10,000. This can be reinterpreted as summing digit sums from 0 to n, then subtracting 1, matching the total to 10,000.

To enumerate candidates, I will:
- Implement a function to compute sum of digit sums up to m efficiently.
- Use binary search or incremental search to find the maximum n for which (sum of digit sums up to n) - 1 â‰¤ 10,000.
- Output candidates when found, then determine the greatest n satisfying the condition.

Below is the Python code to perform this enumeration efficiently.

```python
# Compute sum of digit sums from 0 to m
def digit_sum(n):
    return sum(int(d) for d in str(n))

def sum_digit_sums_upto(m):
    total = 0
    for i in range(m + 1):
        total += digit_sum(i)
    return total

# Since direct summation is slow for large m, use incremental approach
# but for demonstration, we limit search to a manageable upper bound
max_limit = 20000  # arbitrary upper limit for enumeration
candidates = []

current_sum = 0
for n in range(max_limit + 1):
    current_sum += digit_sum(n)
    if current_sum - 1 == 10000:
        print(n)     # streaming partial result when condition matches
        candidates.append(n)

# Output the maximum candidate found
if candidates:
    print("Maximum n:", max(candidates))
else:
    print("No candidate found within limit.")
```
