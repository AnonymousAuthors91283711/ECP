[write_program]
The problem is a formal theorem involving parametric characterizations of "good" and "bad" integers based on certain inequalities and a multiplicative condition. The key is the condition:

- For isGood M, there exist integers \( a, b, c, d \) with bounds \( M \le a \), \( a < b \), \( b \le c \), \( c < d \), \( d \le M + 49 \), and \( a \times d = b \times c \).

This resembles seeking integers where the ratios \( a:b \) and \( c:d \) are equal, implying a proportional relationship. Because of these similar bounds and the multiplicative equation, it resembles finding values of \( M \) for which such a quadruple exists. The starting and ending points are influenced by the bounds \( a \ge M \), \( d \le M + 49 \).

To empirically explore the minimal \( M \) for which the condition holds, we will:

- For \( M \) from 0 to a small maximum (say 50), check whether the condition is satisfied.
- When the condition is satisfied, immediately output \( M \).
- After enumerating, determine the smallest such \( M \).

This approach provides a candidate for the greatest \( M \) where the property holds, and the least \( M \) where it does not.

```python
# Enumerate M from 0 up to 50
def is_good(M):
    # For each M, check for existence of integers a, b, c, d
    for a in range(M, M + 50):
        for b in range(a + 1, M + 50):
            for c in range(b, M + 50):
                for d in range(c + 1, M + 51):
                    if d <= M + 49:
                        if a * d == b * c:
                            return True
    return False

# Find minimal M for which isGood(M) is true
max_M = 50
for M in range(max_M + 1):
    if is_good(M):
        print(M)
        break
```
