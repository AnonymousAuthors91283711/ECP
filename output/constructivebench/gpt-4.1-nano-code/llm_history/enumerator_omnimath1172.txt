[write_program]
This problem involves summing, over all functions from a finite set of size 2021 to itself, the size of the image of the n-th iterate of each function, then taking the sum modulo 2017. To assist in conjecturing and proving, we will enumerate possible values by experimenting with small sample functions, iterates, and sizes.

We will limit our enumeration to small cases, such as functions on small sets (e.g., sizes 2, 3, 4) and simple functions, since exhaustive enumeration for size 2021 is infeasible.

The program:
- Selects small set sizes.
- Enumerates all functions on those sets.
- For each function and each element, computes the iterate (using a simple loop).
- Records the images of all points after iteration.
- Computes the size of the image set.
- Sums over all functions.
- Prints partial results and, for the scaled total sum, attempts to see if partial sums suggest a pattern or conjecture.

```python
import itertools

# Function to compute k-th iterate of f at n
def iterate_f(f, n, k):
    for _ in range(k):
        n = f[n]
    return n

# Generate all functions from set of size n
def generate_functions(n):
    return list(itertools.product(range(n), repeat=n))

# For small set sizes, enumerate all functions
# and sum the sizes of images under iteration
def enumerate_small_cases(max_n=4):
    results = []
    for size in range(2, max_n + 1):
        total_sum = 0
        functions = generate_functions(size)
        print(f"Enumerating functions on set of size {size}")
        for f in functions:
            images = set()
            for n in range(size):
                images.add(iterate_f(f, n, size))
            total_sum += len(images)
        print(f"Total sum of images for size {size}: {total_sum}")
        results.append((size, total_sum))
    return results

# Run enumeration
enumerate_small_cases()
```
