[write_program]
The problem involves determining for which positive integers \( n \), the expression \( 2^n + 12^n + 2011^n \) is a perfect square. To assist, I'll write a Python program that enumerates small positive \( n \), checks whether the sum is a perfect square, and outputs all such \( n \). We focus on small \( n \), as larger \( n \) will grow too large for brute-force checks within reasonable time, and perfect squares typically emerge at small exponents in such problems.

The code will:
- Check each \( n \) from 1 up to a threshold (e.g., 1000).
- Compute the sum \( s = 2^n + 12^n + 2011^n \).
- Check if \( s \) is a perfect square.
- Immediately print each \( n \) where the sum is a perfect square.

```python
import math

# Enumerate small positive integers n
max_n = 1000
for n in range(1, max_n + 1):
    s = 2**n + 12**n + 2011**n
    root = int(math.isqrt(s))
    if root * root == s:
        print(f"n = {n} yields a perfect square: {s} = {root}^2")
```
