[write_program]
The problem involves finding a 3-digit number \( abc \) such that when you append a digit \( d \) to form a 4-digit number \( N = 100 \times abc + d \), certain conditions hold: \( N \) is between 1000 and 9999, \( N^2 \equiv N \pmod{10000} \), and the leading digit of \( N \) is nonzero (which it is, since \( N \ge 1000 \)). This essentially asks for numbers \( N \) with \( N^2 \equiv N \pmod{10000} \), i.e., \( N(N - 1) \equiv 0 \pmod{10000} \).

Let's write a Python script that enumerates all \( N \) from 1000 up to 9999, checks the modular condition, and extracts the \( abc \) part (the first three digits). It will output each candidate immediately for further analysis:

```python
# Enumerate N from 1000 to 9999
# Check if N^2 â‰¡ N mod 10000
# Extract the first three digits as abc
# Output each candidate immediately

for N in range(1000, 10000):
    if (N * N) % 10000 == N % 10000:
        abc = N // 10  # Removing the last digit d
        print(abc)
```

This code efficiently narrows down candidates satisfying the modular condition and streams results directly as they are found.
