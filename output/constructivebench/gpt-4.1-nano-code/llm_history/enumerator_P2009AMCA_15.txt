[write_program]
The problem asks to find the least natural number \( n \) such that the sum \(\sum_{k=0}^{n-1} (k+1) i^{k+1}\) equals \( 48 + 49i \). We will enumerate values of \( n \), compute the partial sums, and check for equality with the target complex number. Once a match is found, we print it as a candidate answer.

**Key points:**
- We only need to test values of \( n \) up to some reasonable limit, such as 100, since the problem is of a combinatorial/series nature.
- Since the sum involves powers of \( i \), which cycle with period 4, we can optimize by using these cycles.
- We output each candidate immediately when the sum matches the target.

```python
# Enumerate n from 1 to 100, compute sum of (k+1)*i^(k+1), check if it equals 48 + 49i
from cmath import phase, isclose

target_real = 48
target_imag = 49
target = complex(target_real, target_imag)

# Precompute powers of i to optimize
i_powers = [1, 1j, -1, -1j]

sum_complex = 0
for n in range(1, 101):
    k = n - 1
    term = (k + 1) * i_powers[(k + 1) % 4]
    sum_complex += term
    if sum_complex == target:
        print(n)
```
