[write_program]
This is a math problem involving finding integers satisfying certain conditions, with the goal to find a specific sum n + t. The conditions relate to sums and products, and the problem appears from the P2016 AIME I contest, specifically problem 5.

Given the problem:
- n, t, k are positive integers
- n + k = 374
- (2 * t + k) * (k + 1) / 2 = 319
- n + t = ?

We can implement a brute-force search over possible values of k and t, then determine n from the first relation, check the second relation, and compute n + t accordingly. Since the problem is from an AIME, values are likely manageable within small ranges.

```python
# Enumerate possible values for k based on the sum (2 * t + k) * (k + 1) / 2 = 319
# The value (2 * t + k) * (k + 1) must be even and result in 638 when divided by 2

# Since k + 1 is involved, try k from 1 up to a reasonable limit
for k in range(1, 100):
    numerator = 2 * 319  # equals 638
    # We want (2 * t + k) * (k + 1) = 638
    if numerator % (k + 1) == 0:
        val = numerator // (k + 1)
        # Now, 2 * t + k = val
        # t = (val - k) / 2
        if (val - k) % 2 == 0:
            t = (val - k) // 2
            if t > 0:  # t positive
                n = 374 - k
                if n > 0:
                    # Condition n + t
                    total = n + t
                    print(f"k={k}, t={t}, n={n}, n + t={total}")
```
