[write_program]
This problem involves finding a collection of sequences \( ns \) and \( as \), with certain properties, such that the sum involving powers of 2 and entries of \( as \) equals 2008. Notably, the sequence \( as \) contains only ±1, and \( ns \) is strictly decreasing and has no duplicates. Our goal is to enumerate possible solutions for \( r \), \( ns \), and \( as \), respecting the constraints.

Here's the reasoning approach:
- Since \( as \) consists of only ±1s, their sum is between \(-r\) and \( r \).
- The sum \(\sum a_i 2^{n_i} = 2008\) suggests examining powers of two around 2008.
- To simplify, choice of \( r \), \( ns \), and \( as \) should be small, with enumeration of potential \( ns \) (strictly decreasing sequences) and \( as \) (sign sequences).

By fixing the length, enumerating small sequences, and checking the sum, a program can attempt to find all solutions.

Here's a Python code that searches for possible solutions with small parameters:

```python
# Enumerate possible sequences ns and as with small sizes to find solutions summing to 2008
def main():
    target = 2008
    max_r = 15  # limit to keep computations feasible
    solutions_found = 0

    for r in range(1, max_r + 1):
        # Generate all decreasing sequences ns of length r with distinct integers
        # For simplicity, assume ns are positive and within a manageable range
        # Generate combinations of r distinct decreasing integers
        # To keep the search manageable, restrict ns to integers between 0 and 11
        from itertools import combinations, product

        for ns in combinations(range(0, 12), r):
            ns_list = sorted(ns, reverse=True)  # ensure decreasing order
            # For each possible sign assignment (each a_i in {-1, 1})
            for signs in product([-1, 1], repeat=r):
                total = sum(signs[i] * (2 ** ns_list[i]) for i in range(r))
                if total == target:
                    # Print solution parameters
                    print(f"r={r}")
                    print(f"ns={ns_list}")
                    print(f"as={list(signs)}")
                    print("-----")
                    solutions_found += 1
    if solutions_found == 0:
        print("No solutions found with specified parameters.")

if __name__ == "__main__":
    main()
```

This code searches for sequences \( ns \) and sign sequences \( as \) with small sizes and values, efficiently exploring the space to find all solutions matching the sum 2008. It prioritizes exact solutions, streams results immediately, and limits complexity for performance.
