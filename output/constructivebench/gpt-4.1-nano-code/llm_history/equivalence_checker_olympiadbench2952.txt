[check_equivalence] Problem: import Mathlib
import Mathlib.Data.Nat.Digits

open Nat

abbrev olympiadbench2952_answer : ℕ := sorry
def isPrimeDigitPair (n : ℕ) : Bool :=
  match n.digits 10 with
  | [a, b] => (a * 10 + b).Prime
  | _ => false

def countPrimePairs (n : ℕ) : ℕ :=
  let digits := n.digits 10
  let pairs := List.zip digits (digits.tail)
  pairs.foldl (fun count (a, b) => 
    if isPrimeDigitPair (a * 10 + b) then count + 1 else count) 0

theorem olympiadbench2952 :
  IsLeast {n : ℕ | 0 < n ∧ countPrimePairs n = 11 ∧ 
    (n.digits 10).head? ≠ some 0} olympiadbench2952_answer := by sorry
Ground Truth Answer: 100337
Proposed Answer: 91727383943474951
<<<False>>>