[write_program]
This problem involves finding the least natural number \( n \) such that the sum of the digits of \( n \) equals five times the sum of the digits of \( n + 2019 \), with the additional condition \( n > 0 \). To assist in devising a proof, I'll write a Python program that enumerates candidates starting from small positive integers, computes the digit sums, and checks the condition. The program will print candidate solutions as soon as they meet the condition and, at the end, identify the least such \( n \).

```python
def digit_sum(x):
    return sum(int(d) for d in str(x))

# Enumerate from 1 upwards
n = 1
found = False
upper_bound = 100000  # Set a limit to prevent infinite loop

while n <= upper_bound:
    sum_digits_n = digit_sum(n)
    sum_digits_n_plus = digit_sum(n + 2019)
    if sum_digits_n == 5 * sum_digits_n_plus:
        print(f"n = {n}, sum of digits(n) = {sum_digits_n}, sum of digits(n+2019) = {sum_digits_n_plus}")
        found = True
        break
    n += 1

# If no candidate found within bounds, indicate so
if not found:
    print("No solution found within the search limit.")
```
