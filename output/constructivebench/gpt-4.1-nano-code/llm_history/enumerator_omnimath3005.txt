[write_program]
The problem asks to find a three-digit number \( N \) with the properties:
- \( 100 \leq N < 1000 \)
- \( N \equiv 7 \ (\text{mod } 10) \)
- \( N \equiv 7 \ (\text{mod } 11) \)
- \( N \equiv 7 \ (\text{mod } 12) \)
and then sum its digits.

Since \( N \equiv 7 \mod 10 \), the units digit of \( N \) is 7.  
Now, the conditions modulo 11 and 12 are also all 7. We can search through all \( N \), from 100 to 999, that satisfy these conditions, and compute their sum of digits.

```python
# Enumerate all 3-digit candidates with last digit 7
for N in range(100, 1000):
    if N % 10 == 7 and N % 11 == 7 and N % 12 == 7:
        # Calculate sum of digits
        digits_sum = sum(int(d) for d in str(N))
        print(f"N = {N}, sum of digits = {digits_sum}")
```
