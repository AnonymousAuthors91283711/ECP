[write_program]
The problem involves finding all positive integers n such that the sum of integers from 1 to n divides 15 times the sum of squares from n+1 to 2n. We aim to explore possible n values by computing both sums explicitly for small n, then check divisibility conditions to find solutions. We will enumerate candidate n values up to some reasonable threshold, print candidates when the divisibility holds, and identify potential solutions.

```python
# Enumerate small n values and check the divisibility condition
max_n = 50  # Choose an upper limit to explore solutions
for n in range(1, max_n + 1):
    sum_1_n = n * (n + 1) // 2
    start = n + 1
    end = 2 * n
    length = end - start + 1
    sum_squares = sum(j ** 2 for j in range(start, end + 1))
    if (15 * sum_squares) % sum_1_n == 0:
        print(f"n = {n} satisfies: (sum 1..n) divides 15 * (sum of squares from n+1..2n)")
        print(f"  sum_1_n = {sum_1_n}")
        print(f"  sum_squares = {sum_squares}")
        print(f"  15 * sum_squares = {15 * sum_squares}")
        print(f"  Divisibility: {(15 * sum_squares) // sum_1_n} is integer\n")
```
