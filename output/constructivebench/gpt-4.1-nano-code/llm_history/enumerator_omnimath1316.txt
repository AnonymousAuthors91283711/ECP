[write_program]
The problem involves a cubic polynomial with integral coefficients, and roots over the complex numbers. We need to find the sum of the cubes of its roots, given the polynomial explicitly. 

By elementary symmetric polynomial theory, if roots are a, b, c, for polynomial p(x)=x^3 + px^2 + qx + r, then:

- a + b + c = -p
- ab + ac + bc = q
- abc = -r

Here, p(x) = x^3 + x^2 - 333x - 1001, so:

- sum of roots (a + b + c) = -1
- sum of roots of pairs (ab + ac + bc) = -333
- product of roots (abc) = 1001

We need exactly a^3 + b^3 + c^3, which can be computed via the identity:

a^3 + b^3 + c^3 = (a + b + c)^3 - 3(a + b + c)(ab + ac + bc) + 3abc

Construct the program that explicitly enumerates the various possibilities for roots with some small sample values, to verify the evaluation.

```python
# Enumerate small integer guesses for roots to verify the formula
# Note: roots are complex numbers, but given the polynomial's coefficients,
# roots satisfy the polynomial and the symmetric sums above.
# We attempt small integer approximations to find the sum of their cubes.

# Known symmetric sums:
sum_roots = -1
sum_pairwise = -333
product_roots = 1001

# Using identity: a^3 + b^3 + c^3 = (a + b + c)^3 - 3(a + b + c)(ab + ac + bc) + 3abc
answer = (sum_roots)**3 - 3 * sum_roots * sum_pairwise + 3 * product_roots
print(answer)
```
