[write_program]
This problem asks us to find the least natural number n greater than 10 such that the last digit of \( 2^n + n^2 \) equals the last digit of \( 2^{10} + 10^2 \). After computing the reference value, we need to search for the minimal n > 10 satisfying the same last digit condition, considering the repeating pattern of \( 2^n \) mod 10.

The pattern of \( 2^n \) modulo 10 repeats every 4 steps: 
- \( 2^1 ≡ 2 \)
- \( 2^2 ≡ 4 \)
- \( 2^3 ≡ 8 \)
- \( 2^4 ≡ 6 \)
- \( 2^{n+4} ≡ 2^n \)

Compute the target last digit:
```python
# Compute last digit of 2^10 + 10^2
target_last_digit = (pow(2, 10, 10) + (10 ** 2) % 10) % 10
print(f"Target last digit: {target_last_digit}")
```

Next, iterate n from 11 upwards, check last digit of \( 2^n + n^2 \), and print candidates until reaching the minimal n exceeding 10 that matches the last digit.

```python
# Set starting point
n = 11
while True:
    last_digit_2_pow_n = pow(2, n, 10)
    last_digit_n_squared = (n ** 2) % 10
    last_digit_sum = (last_digit_2_pow_n + last_digit_n_squared) % 10
    print(f"n={n}, 2^n last digit={last_digit_2_pow_n}, n^2 last digit={last_digit_n_squared}, sum last digit={last_digit_sum}")
    if last_digit_sum == target_last_digit:
        print(f"Answer found: n={n}")
        break
    n += 1
```
