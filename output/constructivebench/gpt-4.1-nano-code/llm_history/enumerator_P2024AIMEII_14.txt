[write_program]
The problem appears to involve finding the smallest base \(b \geq 2\) such that there are more than 10 numbers \(n\) with the property that:
- \(b \leq n\),
- \(n < b^2\),
- the representation of \(n\) in base \(b\) has exactly two digits,
- and the sum of the digits equals \(\sqrt{n}\).

Since \(n < b^2\) and it has exactly two digits in base \(b\), then in base \(b\), \(n\) can be written as:
\[ n = d_1 \times b + d_0 \]
where \(0 \leq d_0, d_1 < b\), and \(d_1 \neq 0\) because it's a two-digit number.

Given the sum of digits:
\[ d_0 + d_1 = \sqrt{n} \]
and
\[ n = d_1 \times b + d_0 \]

From this, \(n\) ranges over all two-digit numbers in base \(b\), i.e., from \(b\) (when \(d_1=1, d_0=0\)) up to \(b^2 - 1\). But since \(n < b^2\), we consider all two-digit numbers in base \(b\). 

The restrictions impose a structure where for each base \(b\), we count how many two-digit numbers \(n\) satisfy the digit sum equalling \(\sqrt{n}\). Our goal is to find the least \(b\) with over 10 such numbers.

Here's a plan:
- For small bases starting from 2 upwards,
- For each possible two-digit number (\(d_1\) from 1 to \(b-1\), \(d_0\) from 0 to \(b-1\)),
- Calculate \(n = d_1 \times b + d_0\),
- Check if the digit sum equals \(\sqrt{n}\),
- Count such \(n\),
- When count exceeds 10, output the base.

Let's implement this logic efficiently:

```python
# Enumerate bases starting from 2 upwards
b = 2
while True:
    count = 0
    for d1 in range(1, b):  # leading digit for two-digit number
        for d0 in range(b):
            n = d1 * b + d0
            s = d1 + d0
            # Check if s = sqrt(n) and n < b^2 (which is guaranteed by construction)
            if s * s == n:
                count += 1
                # Print each candidate n that satisfies conditions
                print(f"Base {b}, digits ({d1},{d0}) => n={n}, sum={s}")
    if count > 10:
        print(f"Found base b={b} with {count} such numbers.")
        break
    b += 1
```
