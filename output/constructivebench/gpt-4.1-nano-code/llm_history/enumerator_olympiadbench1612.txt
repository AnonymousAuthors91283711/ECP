[write_program]
The problem involves counting the difference between the number of integers k in the interval [1, 2^n] with an even vs. odd digit sum when written in base 2, with n = 2017. This is a classic problem related to the parity of the sum of binary digits and involves the properties of binary representations. We can approach this via recursive reasoning or dynamic programming, exploiting the structure of binary numbers.

Given the large n (2017), directly enumerating all numbers is infeasible. Instead, we observe that for each binary number from 1 to 2^n, the parity of the sum of the digits in base 2 (the number of 1s) determines whether it is counted in the "even" or "odd" set. 

Because the numbers span all binary numbers with up to n bits, and the parity of the number of 1s in binary is equally likely to be even or odd, except in the case of the number 0 (which we exclude since the range starts from 1), the counts should be balanced. Specifically, for all numbers except zero, the count of numbers with even number of 1s and with odd number of 1s are equal, each being 2^{n-1}.

However, since we're starting from 1 (excluding zero), the counts are equal: the total number of numbers is 2^n - 1, which is odd, so the difference should be Â±1 depending on whether zero's parity is included or not. Zero is an even parity (sum of digits in binary=0), but it's outside our range. Therefore, the counts are balanced, with their difference being zero.

We can formalize and output this reasoning.

```python
# Since for numbers from 1 to 2^n, the distribution of parity of the sum of binary digits is balanced,
# the difference between counts with even and odd sum of digits is 0.
# This holds because 2^n numbers are evenly split among the parity classes, minus zero which is outside the range.
# Therefore, the answer should be 0 for n=2017.

print(0)
```
