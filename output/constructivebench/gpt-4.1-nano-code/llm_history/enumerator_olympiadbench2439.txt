[write_program]
The problem appears to involve solving a system of linear equations for functions \(f, g:\mathbb{R} \to \mathbb{R}\) based on these equations:

\[
\begin{cases}
f(x) + 3g(x) = x^2 + x + 6 \\
2f(x) + 4g(x) = 2x^2 + 4
\end{cases}
\]

and then finding the set of points \(x\) where \(f(x) = g(x)\).

---

Since \(f,g\) are functions, and their relations are linear in \(f(x), g(x)\), the system at each point \(x\) reduces to solving for \(f(x)\) and \(g(x)\):

\[
\begin{cases}
f + 3g = x^2 + x + 6 \\
2f + 4g = 2x^2 + 4
\end{cases}
\]

Let's solve this system symbolically for \(f, g\):

- Multiply the first eq by 2:

\[
2f + 6g = 2x^2 + 2x + 12
\]

- Subtract the second eq:

\[
(2f + 6g) - (2f + 4g) = (2x^2 + 2x + 12) - (2x^2 + 4)
\]

which simplifies to:

\[
2g = 2x + 8
\]

so:

\[
g = x + 4
\]

- Substitute \(g = x + 4\) into the first original equation:

\[
f + 3(x + 4) = x^2 + x + 6
\]

\[
f + 3x + 12 = x^2 + x + 6
\]

\[
f = x^2 + x + 6 - 3x - 12 = x^2 - 2x - 6
\]

Now, the functions are explicitly:

\[
f(x) = x^2 - 2x - 6
\]
\[
g(x) = x + 4
\]

The set where \(f(x) = g(x)\):

\[
x^2 - 2x - 6 = x + 4
\]

Rearranged:

\[
x^2 - 3x - 10 = 0
\]

Discriminant:

\[
D = 9 + 40 = 49
\]

roots:

\[
x = \frac{3 \pm \sqrt{49}}{2} = \frac{3 \pm 7}{2}
\]

- \(x = \frac{3 + 7}{2} = \frac{10}{2} = 5\)
- \(x = \frac{3 -7}{2} = \frac{-4}{2} = -2\)

So, the set of solutions:

\[
\boxed{\{ -2, 5 \}}
\]

---

Below is a Python program that enumerates these roots based on the algebraic solution, designed to demonstrate the derivation process for similar problems, following your requirements:

```python
# This script solves for x where f(x) = g(x) based on the derived formulas.
# It demonstrates the solution process and enumerates solutions.

import math

# Functions derived from the algebraic solution
def f(x):
    return x**2 - 2*x - 6

def g(x):
    return x + 4

# Equation to solve: f(x) = g(x) => x^2 - 2x -6 = x + 4
# Rearranged: x^2 - 3x - 10 = 0

# Discriminant
D = 9 + 40  # 49

# Roots
roots = []
if D >= 0:
    sqrt_D = math.sqrt(D)
    root1 = (3 + sqrt_D) / 2
    root2 = (3 - sqrt_D) / 2
    roots.extend([root1, root2])

# Streaming answers
for x in roots:
    print(f"x = {x}")
```
