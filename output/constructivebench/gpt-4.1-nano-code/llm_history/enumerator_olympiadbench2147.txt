[write_program]
This problem asks us to find all functions \(f : \mathbb{R} \to \mathbb{R}\) satisfying the functional equation:
\[
f(1 + xy) - f(x + y) = f(x) \cdot f(y)
\]
with the additional condition \(f(-1) \neq 0\).

Given the complexity typical of Olympiad questions, a common approach involves trying specific values to constrain \(f\), then exploring its potential formsâ€”likely constant, linear, or other familiar functions. We need to enumerate candidate functions (probably linear or constant) consistent with the functional equation, and filter those with \(f(-1) \neq 0\), streaming results as they are identified.

The code below:
- Checks constant solutions first,
- Then linear solutions \(f(x) = kx + c\),
- For each candidate, verifies whether it satisfies the functional equation and the condition \(f(-1) \neq 0\),
- Prints each candidate as soon as it is verified to satisfy the conditions,
- Does not assume the ground truth, only testing plausible solutions.

```python
# Define a function to check the main functional equation for given f
def check_f(f):
    # Test the functional equation on some sample points
    test_points = [0, 1, -1, 2, -2]
    for x in test_points:
        for y in test_points:
            lhs = f(1 + x * y) - f(x + y)
            rhs = f(x) * f(y)
            if abs(lhs - rhs) > 1e-8:
                return False
    return True

# Candidate 1: constant functions f(x) = c
for c in [-10, -1, 0, 1, 10]:
    def f_const(x, c=c):
        return c
    if check_f(f_const) and c != 0:
        print(f"Constant function: f(x) = {c}")

# Candidate 2: linear functions f(x) = kx + c
possible_ks = [-10, -5, 0, 1, 5, 10]
possible_cs = [-10, -1, 0, 1, 10]
for k in possible_ks:
    for c in possible_cs:
        def f_lin(x, k=k, c=c):
            return k * x + c
        if check_f(f_lin):
            # Check the condition f(-1) != 0
            if abs(f_lin(-1)) > 1e-8:
                print(f"Linear function: f(x) = {k}x + {c}")
```
