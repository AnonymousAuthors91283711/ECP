[write_program]
The problem involves summing all positive integers n such that there exists an integer m with m² = n² - 3000. Algebraically, this is equivalent to requiring n² - m² = 3000, or (n - m)(n + m) = 3000. Since n > 0, m is an integer, and n > 0, we look for factor pairs of 3000 to compute all such n.

To find all n:
- List all factor pairs of 3000: (a, b) with a*b = 3000, then set n = (a + b)/2, m = (b - a)/2, and check integrality conditions.

We will enumerate the divisors of 3000, find all factor pairs, and compute corresponding n values when they result in integers.

```python
# Program to find all n > 0 such that n^2 - m^2 = 3000 for some m in ℤ
# Express as (n - m)(n + m) = 3000
# For each divisor a of 3000, let b = 3000 / a
# We solve for n = (a + b)/2, m = (b - a)/2 and check if n, m are integers

def find_sum_of_n():
    import math
    target = 3000
    results = set()

    # Enumerate divisors up to sqrt(target)
    for a in range(1, int(math.isqrt(target)) + 1):
        if target % a == 0:
            b = target // a
            # Consider both (a, b) and (b, a) to cover all factor pairs
            for (x, y) in [(a, b), (b, a)]:
                # n = (x + y) / 2, m = (y - x) / 2
                if (x + y) % 2 == 0 and (y - x) % 2 == 0:
                    n = (x + y) // 2
                    m = (y - x) // 2
                    if n > 0:
                        print(n)  # output each candidate n immediately
                        results.add(n)
    return sum(results)

total_sum = find_sum_of_n()
print("Total sum of all such n:", total_sum)
```
