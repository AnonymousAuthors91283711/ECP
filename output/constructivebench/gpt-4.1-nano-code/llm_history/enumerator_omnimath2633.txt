[write_program]
Let's analyze the problem step-by-step:

- The numbers are between 10,000,000 and 99,999,999.
- Their last digit is 3.
- The 8th digit from the start (the digit in the hundreds of thousands place) is 1.
- For each position i from 0 to 6 (indices of the first 7 digits), the second digit from the left (d2) in position i+1 is either one or two more than the first digit (d1), modulo 10.

We need to count such numbers, and ultimately find the total count.

Key observations:
- The number `n` is 8 digits: D1 D2 D3 D4 D5 D6 D7 D8.
- D8 (least significant digit) = 3.
- D1 (most significant) = 1.
- For each pair of consecutive digits in positions (i, i+1), the condition: D_{i+1} = D_i + 1 or D_i + 2 mod 10.

In particular, this recursively constrains the digits D2-D7, given D1=1 and D8=3.

Here's what the code does:

- Fix D1=1 and D8=3.
- Enumerate all possible sequences D2 to D7 matching the condition.
- For each valid sequence, construct the number and output.

The program efficiently leverages recursion with pruning, and counts the total number of such sequences.

```python
# Enumerate all 8-digit numbers between 10,000,000 and 99,999,999
# with last digit 3, first digit 1, and consecutive digits satisfy the given modular conditions.

def enumerate_numbers():
    results = []
    start_digits = [1]  # D1 fixed as 1
    end_digit = 3      # D8 fixed as 3
    
    def recurse(current_digits):
        if len(current_digits) == 7:
            # Append last digit 3
            number_digits = current_digits + [end_digit]
            number = int(''.join(map(str, number_digits)))
            print(number)
            results.append(number)
            return
        last_digit = current_digits[-1]
        for next_digit in [(last_digit + 1) % 10, (last_digit + 2) % 10]:
            recurse(current_digits + [next_digit])
    
    # Initialize recursion with D1=1
    recurse([1])
    return len(results)

if __name__ == "__main__":
    total = enumerate_numbers()
    print("Total count:", total)
```
