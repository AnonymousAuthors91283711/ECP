[write_program]
This problem involves finding the range of possible values for B, given bounds on S and F, subject to the equation S + F - B = 2001, with constraints on S and F. Specifically, we want to determine the minimal (m) and maximal (M) possible values of B, where B ≤ min(S, F). 

We will evaluate possible combinations of S and F within their bounds and compute the corresponding B bounds, then find the minimal and maximal B satisfying all conditions. Since the bounds are linear, we can systematically check the extreme combinations to find the extremal B values. We will choose sample values at bounds to ensure the entire range is covered efficiently.

```python
# Enumerate bounds for S and F with sample points
total = 2001
S_lb = int(0.8 * total)
S_ub = int(0.85 * total)
F_lb = int(0.3 * total)
F_ub = int(0.4 * total)

# Generate key candidate S,F pairs at bounds
candidate_pairs = [
    (S_lb, F_lb),
    (S_lb, F_ub),
    (S_ub, F_lb),
    (S_ub, F_ub),
]

# Store possible B values
B_candidates = []

for S, F in candidate_pairs:
    total_sum = S + F
    # B must satisfy B ≤ min(S, F)
    max_B = min(S, F)

    # Equation: S + F - B = 2001 => B = S + F - 2001
    B_from_eq = total_sum - total

    # B must be ≤ min(S, F), and satisfy B = total_sum - 2001
    # Also, from the constraints:
    # B ≤ min(S, F)
    # Additionally, B ≥ 0 (assuming B counts items, non-negative)
    B_valid = max(B_from_eq, 0)
    B_max_possible = min(max_B, B_from_eq)

    # Append bounds
    B_candidates.append(B_valid)
    B_candidates.append(B_max_possible)

# Determine global min and max B
m = min(B_candidates)
M = max(B_candidates)

# Output the result
print("Minimal B (m):", m)
print("Maximal B (M):", M)
print("Difference M - m:", M - m)
```
