[write_program]
The problem asks to find all pairs of natural numbers \((S_1, S_2)\) such that there exist natural numbers \( n_1, n_2 \) with \( S_1 = n_1^2 \), \( S_2 = n_2^2 \), and the difference of their squares is 1989, i.e., \( n_1^2 - n_2^2 = 1989 \).

Since \( n_1^2 - n_2^2 = (n_1 - n_2)(n_1 + n_2) = 1989 \), the task reduces to finding all positive factor pairs \((a, b)\) of 1989 with \( a = n_1 - n_2 \), \( b = n_1 + n_2 \) and deriving \( n_1, n_2 \) from them: 
\[ n_1 = \frac{a + b}{2}, \quad n_2 = \frac{b - a}{2} \]

Both \( n_1 \) and \( n_2 \) must be integers, so \( a + b \) and \( b - a \) must be even, meaning \( a \) and \( b \) are both even or both odd.

Factor 1989: first, find its divisors, then check which pairs satisfy the parity conditions.

Here's a Python script to find all such pairs:

```python
# Enumerate all factor pairs of 1989
n = 1989
answers = set()

# Find divisors by testing from 1 to sqrt(n)
import math
for a in range(1, int(math.isqrt(n)) + 1):
    if n % a == 0:
        b = n // a
        # Check if (a, b) and (b, a) are both with same parity
        for (x, y) in [(a, b), (b, a)]:
            # Both sum and difference must be even
            if (x + y) % 2 == 0 and (y - x) % 2 == 0:
                n1 = (x + y) // 2
                n2 = (y - x) // 2
                # Ensure n1, n2 are non-negative
                if n1 >= 0 and n2 >= 0:
                    S1 = n1 * n1
                    S2 = n2 * n2
                    print((S1, S2))
                    answers.add((S1, S2))
```

This script enumerates all valid pairs \((S_1, S_2)\) satisfying the equation.
