[write_program]
This problem involves counting permutations of a list with specific ordering constraints on the positions of certain names. We know the initial list contains six unique names: "Bobby", "Peter", "Greg", "Cindy", "Jan", "Marcia". The constraints specify the relative order of some of these names:

- "Greg" appears before "Peter"
- "Peter" appears before "Bobby"
- "Marcia" appears before "Jan"
- "Jan" appears before "Cindy"

We need to count the number of permutations satisfying these constraints.

To do this systematically, we can generate all permutations of the list, check which satisfy the constraints, and count them with early stopping or streaming output when a permutation is valid.

Since the total permutations for 6 items are 720, enumerating all is feasible. We will write code to generate permutations, filter by constraints, and count them, printing each valid permutation's order for illustration.

```python
import itertools

names = ["Bobby", "Peter", "Greg", "Cindy", "Jan", "Marcia"]
count = 0

for perm in itertools.permutations(names):
    idx = {name: i for i, name in enumerate(perm)}
    # Check the constraints:
    # "Greg" < "Peter"
    if not (idx["Greg"] < idx["Peter"]): continue
    # "Peter" < "Bobby"
    if not (idx["Peter"] < idx["Bobby"]): continue
    # "Marcia" < "Jan"
    if not (idx["Marcia"] < idx["Jan"]): continue
    # "Jan" < "Cindy"
    if not (idx["Jan"] < idx["Cindy"]): continue
    # If all constraints hold, count and print the permutation
    count += 1
    print(f"Valid permutation #{count}: {perm}")

print(f"Total number of valid permutations: {count}")
```
