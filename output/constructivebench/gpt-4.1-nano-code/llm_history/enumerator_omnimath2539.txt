[write_program]
The problem involves finding coprime integers \( m, n \) such that the product over \( i \) from 0 to 6 of \((1 - 1/(i + 2))\) equals \( m/n \), and additionally, \( 100m + n = 108 \). 

Since the last condition constrains the sum of the digits, and the product involves small fractions, we can directly approximate the product, then find candidate \( m, n \) values satisfying the fraction and coprimality conditions, and verify the linear relation. 

Because the product simplifies to a fraction, we can compute it exactly by numerator and denominator:  
\[
\prod_{i=0}^{6} \left(1 - \frac{1}{i+2}\right) = \prod_{i=0}^{6} \frac{i+1}{i+2} = \frac{1}{2} \times \frac{2}{3} \times \frac{3}{4} \times \frac{4}{5} \times \frac{5}{6} \times \frac{6}{7} \times \frac{7}{8}
\]
which telescopes to
\[
\frac{1}{8}
\]
This fraction is \( m/n = 1/8 \), with \( m=1, n=8 \).  
Verify whether \( 100m + n = 108 \) holds:
\[
100 \times 1 + 8 = 108
\]
Yes, it does.

Check coprimality: \( \gcd(1,8)=1 \), so \( m \) and \( n \) are coprime. 

Thus, the answer should be \( (1,8) \).

```python
# Enumerate candidates for m/n for the product value, check the conditions
import math

# Since the product telescopes exactly to 1/8, the fractions are straightforward.
m, n = 1, 8

# Verify the relations
assert math.gcd(m, n) == 1
assert 100 * m + n == 108

# Output the found answer
print((m, n))
```
