[write_program]
# This problem involves a binomial coefficient equation with a parameter p in [0,1].
# Our goal is to find all possible solutions for p satisfying:
#   choose(4,2)*p^2*(1-p)^2 = choose(4,3)*p^3*(1-p)
# Without prior assumptions, we will:
# - Convert the equation into a polynomial form.
# - Enumerate candidate solutions by solving the simplified polynomial.
# - Check each candidate and print the solutions immediately.

# The original equation:
# C(4,2)*p^2*(1-p)^2 = C(4,3)*p^3*(1-p)

# Compute binomial coefficients:
# C(4,2) = 6
# C(4,3) = 4

# Simplify the equation:
# 6 * p^2 * (1 - p)^2 = 4 * p^3 * (1 - p)

# Divide both sides by p * (1 - p) (except when p=0 or p=1):
# For p in (0, 1), division is valid:
# 6 * p * (1 - p) = 4 * p^2

# Rearrange:
# 6 * p * (1 - p) - 4 * p^2 = 0
# 6 p (1 - p) - 4 p^2 = 0
# 6 p - 6 p^2 - 4 p^2 = 0
# 6 p - 10 p^2 = 0
# p (6 - 10 p) = 0

# So solutions are p=0 or p=3/5 (since 6 - 10 p = 0 => p=3/5)

# Check p=0:
# Left side original: 6*0^2*1^2=0
# Right side: 4*0^3*1=0
# Equal -> p=0 solution.

# Check p=1:
# Left: 6*1^2*0^2=0
# Right: 4*1^3*0=0
# Equal -> p=1 is also a solution.

# For p in (0,1), only p=3/5 satisfies.

# For p=0 or p=1, both sides are zero, solutions.

# Final solutions: p=0, p=3/5, p=1.

# We will enumerate these solutions in code to match the request.

```python
# Python script to enumerate solutions for p in [0,1]
# Solutions are p=0, p=3/5, p=1

def check_solution(p):
    # Evaluate both sides of the original equation
    left = 6 * p**2 * (1 - p)**2
    right = 4 * p**3 * (1 - p)
    if abs(left - right) < 1e-8:
        print(f"Solution p = {p}")

for p in [0, 3/5, 1]:
    check_solution(p)
```

