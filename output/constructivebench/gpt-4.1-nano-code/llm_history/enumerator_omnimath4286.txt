[write_program]
The problem seems to involve solving the equation \( x^2 (1 + x^2) = -1 + 21^y \) for integers \( x \) and non-negative integers \( y \). We need to find all pairs \((x, y)\) satisfying this equation.

Observations:
- Since \( 21^y \ge 1 \) for all \( y \ge 0 \).
- The left side, \( x^2 (1 + x^2) \), is non-negative for all integers \( x \).
- Set \( S = x^2 \ge 0 \). The equation becomes \( S (1 + S) = 21^y - 1 \).

We can iterate over small \( y \) values to find possible \( S \), then derive \( x = \pm \sqrt{S} \) if \( S \) is a perfect square.

To efficiently scope the solutions:
- Limit \( y \) to small values until \( 21^y - 1 \) exceeds a certain range.
- For each \( y \), check if \( 21^y - 1 \) is of the form \( S(1+S) \):

\[ S(1 + S) = N \implies S^2 + S - N = 0 \]

Solve for \( S \):

\[ S = \frac{ -1 \pm \sqrt{1 + 4N} }{2 } \]

Since \( S \ge 0 \), check if discriminant \( D = 1 + 4N \) is a perfect square, say \( D = k^2 \), and whether \( S \) is integral.

```python
import math

# Initialize the set to store solutions
solutions = set()

# Limit for y to prevent huge calculations; adjust as needed
max_y = 10

for y in range(max_y + 1):
    N = 21 ** y - 1
    D = 1 + 4 * N
    k = int(math.isqrt(D))
    if k * k == D:
        # S = (-1 + k) / 2
        S_num = -1 + k
        if S_num % 2 == 0:
            S = S_num // 2
            if S >= 0:
                x_vals = [int(math.sqrt(S)), -int(math.sqrt(S))] if S > 0 else [0]
                for x in x_vals:
                    solutions.add((x, y))
                    print((x, y))
```

This code enumerates all solutions within the defined bounds, immediately outputs each found pair, and adheres to the problem specifications.
