[write_program]
This problem explores the set \( S(n) = \{ m \mid m \geq 1 \land \exists k \geq 1, m = k \cdot (n+1) \} \) and asks us to find the least \( n \) such that \( 2004 \in S(n) \). 

Given \( 2004 \in S(n) \), by the definition, there exists some \( k \ge 1 \) with \( 2004 = k \cdot (n+1) \). Equivalently, \( n+1 \) divides \( 2004 \), and \( n = \frac{2004}{k} - 1 \). Since \( n \ge 0 \), we have \( \frac{2004}{k} - 1 \ge 0 \rightarrow \frac{2004}{k} \ge 1 \rightarrow k \le 2004 \).

To find the **least** such \( n \), equivalently, **maximize** \( k \) (since \( n = \frac{2004}{k} - 1 \) decreases as \( k \) increases). The maximum \( k \) is the largest divisor of 2004 less than or equal to 2004, which is 2004 itself.

Hence, for \( k = 2004 \),
\[
n = \frac{2004}{2004} - 1 = 1 - 1 = 0.
\]

The minimal \( n \) is 0.

Here's a Python program to verify the divisors and find that the maximum divisor (which yields the minimal \( n \)) is 2004, confirming the solution.

```python
# Enumerate divisors of 2004 to find the maximum divisor k, which gives the minimal n
import math

number = 2004
divisors = []

for i in range(1, int(math.sqrt(number)) + 1):
    if number % i == 0:
        divisors.append(i)
        if i != number // i:
            divisors.append(number // i)

max_divisor = max(divisors)  # This should be 2004
n = number // max_divisor - 1  # n = 2004/2004 - 1 = 0

print("Divisors of 2004:", sorted(divisors))
print("Maximum divisor (k):", max_divisor)
print("Least n such that 2004 in S(n):", n)
```
