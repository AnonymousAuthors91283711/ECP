[write_program]
This problem involves finding three two-digit natural numbers \( a, b, c \) such that their product equals 636,405, and their sum equals some unknown. Given the magnitude of the product, we can perform a brute-force enumeration over all possible two-digit values for \( a, b, c \) (from 10 to 99). We will look for triplets where the product matches and output their sum, which is our target value.

Since the problem asks for an expression of the sum, we will print each candidate sum whenever the product condition is satisfied. The code will execute efficiently because the total number of iterations (90^3 = 729,000) is manageable within the constraints.

```python
# Enumerate all three two-digit numbers a, b, c
# Check if their product is 636405
# If so, print their sum
for a in range(10, 100):
    for b in range(10, 100):
        for c in range(10, 100):
            if a * b * c == 636405:
                print(f"a={a}, b={b}, c={c} -> sum={a+b+c}")
```
