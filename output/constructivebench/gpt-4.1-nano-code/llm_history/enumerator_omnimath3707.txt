[write_program]
The problem involves finding all triples (a, b, c) of non-negative integers such that the sum of their square roots equals √2014. Since the square roots are involved, and the sum is exact, we can attempt a brute-force enumeration over small candidate values, especially since a, b, c are non-negative integers, and √2014 is roughly 44.88, meaning each of a, b, c should be at most around 2014 (since √a ≤ √2014, so a ≤ 2014).

To keep computations feasible, we'll limit the search for a, b, c from 0 up to 2014, but in practice, for efficiency, we can recognize that since square roots grow slowly, the maximum for each of a, b, c is ≈ 2014.

Here's a Python code that enumerates all triples (a, b, c) where the sum of their square roots is approximately √2014, within a small tolerance to account for potential floating point inaccuracies. It streams solutions as soon as they are found.

```python
import math

# Target value and its square root
target_value = 2014
target_sqrt = math.sqrt(target_value)

# Tolerance for floating point comparison
epsilon = 1e-6

# Enumerate possible triples
max_a = max_b = max_c = target_value  # upper bound for search

for a in range(max_a + 1):
    sqrt_a = math.sqrt(a)
    for b in range(max_b + 1):
        sqrt_b = math.sqrt(b)
        sum_ab = sqrt_a + sqrt_b
        # Compute the required sqrt_c for the sum to match target
        sqrt_c = target_sqrt - sum_ab
        if sqrt_c < -epsilon:
            continue  # sum exceeds target, continue
        c = round(sqrt_c ** 2)
        if c < 0 or c > max_c:
            continue
        # Check if the square root of c matches sqrt_c within tolerance
        if abs(math.sqrt(c) - sqrt_c) < epsilon:
            print((a, b, c))
```
