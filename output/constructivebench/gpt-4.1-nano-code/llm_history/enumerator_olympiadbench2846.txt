[write_program]
Let's analyze the problem:

We're looking for a two-digit number N (from 10 to 99) such that:
- The reverse digits of N form a prime number revN.
- The reverse digits of 4*N form a prime number rev4N.
- The reverse digits of 5*N form a prime number rev5N.
- N is the greatest such number.

To solve efficiently, we'll enumerate all two-digit numbers N from 10 to 99, compute the reverse digits, then check the prime conditions.

For each N, check if revN, rev4N, and rev5N are all prime, and record the N. After enumeration, output the greatest N satisfying the conditions if any.

```python
def is_prime(n):
    if n < 2:
        return False
    if n in (2, 3):
        return True
    if n % 2 == 0:
        return False
    r = int(n**0.5) + 1
    for i in range(3, r, 2):
        if n % i == 0:
            return False
    return True

def reverse_digits(n):
    return int(str(n)[::-1])

max_N = None
for N in range(99, 9, -1):  # start from 99 down to 10
    revN = reverse_digits(N)
    rev4N = reverse_digits(4 * N)
    rev5N = reverse_digits(5 * N)
    if (is_prime(revN) and is_prime(rev4N) and is_prime(rev5N)):
        print(N)
        max_N = N
        break  # since we're going downward, first match is the greatest

# Output the result if any
if max_N:
    print(f"The greatest N satisfying the conditions is: {max_N}")
else:
    print("No such N found.")
```
