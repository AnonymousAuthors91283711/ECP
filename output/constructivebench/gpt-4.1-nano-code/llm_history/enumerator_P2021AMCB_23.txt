[write_program]
The problem defines a probability distribution over triples (a, b, c) of natural numbers, with the event requiring a < b < c, b - a = c - b (arithmetic progression), and a ≠ b, b ≠ c (which is redundant given the progression). We need to compute the sum of probabilities over such triples and possibly find their reduced fraction form.

Given the exponential decay `(2)^(-a) * (2)^(-b) * (2)^(-c)`, the sum converges rapidly; thus, finite enumeration is feasible for small values to approximate and identify the probability.

The key points:
- a < b < c
- b - a = c - b, i.e., c = 2b - a
- Probabilities involve exponential weights; enumerate small a, b values, derive c, and sum over valid triples.

Below is a Python code enumerating triples with small a, b, computes total probability, and attempts to find the simplified fractional representation.

```python
from fractions import Fraction

# Enumerate small a, b, derive c, sum probabilities
total_prob = Fraction(0, 1)

# We'll limit to a, b up to 20 for computational feasibility
limit = 20

for a in range(1, limit + 1):
    for b in range(a + 1, limit + 1):
        c = 2 * b - a  # since c = 2b - a
        if c <= limit:
            prob = Fraction(2, 1) ** (-a) * Fraction(2, 1) ** (-b) * Fraction(2, 1) ** (-c)
            total_prob += prob
            print(f"Triple (a={a}, b={b}, c={c}) -> Prob={float(prob):.6f}")

print(f"Total probability approximation with limit {limit}: {float(total_prob):.6f}")
# Since the sum is over all such triples, output exact fractional sum
print(f"Total probability as fraction: {total_prob}")
```
