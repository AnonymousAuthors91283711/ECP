[write_program]
The problem appears to involve finding the least natural number \( n \) such that the 10-adic valuation of \( n! \) is 1987, and then asserting that this \( n \) is 7920. To verify or explore possible solutions, we can write a Python script to compute the 10-adic valuation of factorials for various \( n \) and determine when the valuation equals 1987. We'll search for the minimal \( n \) where this condition holds, possibly confirming whether it is 7920.

Key insight:
- \( v_{10}(n!) = v_{2}(n!) + v_{5}(n!) \)
- \( v_{5}(n!) \) dominates (since \( v_{2}(n!) \) is always larger).
- \( v_{5}(n!) = \sum_{k=1}^\infty \lfloor n / 5^k \rfloor \)

Given the high valuation (1987), we can estimate \( n \) approximately since:
\[ v_{5}(n!) \approx \frac{n}{5} + \frac{n}{25} + \frac{n}{125} + \dots \]
\[
\approx n \left( \frac{1}{5} + \frac{1}{25} + \frac{1}{125} + \dots \right) \approx n \times \frac{1/5}{1 - 1/5} = n \times \frac{1/5}{4/5} = n/4
\]

So, roughly \( n \approx 4 \times 1987 \approx 7948 \). Since the target is 1987, and the estimate suggests \( n \approx 7948 \), we will check around this range.

Here's the code to compute \( v_5(n!) \), find the minimal such \( n \), and verify if it's 7920.

```python
# Compute v_5(n!) using Legendre's formula
def v_5(n):
    count = 0
    divisor = 5
    while divisor <= n:
        count += n // divisor
        divisor *= 5
    return count

# Find minimal n such that v_5(n!) == 1987
target = 1987
# Search range around the estimate
min_n = None
for n in range(7900, 8000):
    val = v_5(n)
    if val == target:
        print(f"n={n} satisfies v_5(n!)=1987")
        if min_n is None or n < min_n:
            min_n = n
    elif val > target:
        # Since v_5(n!) is non-decreasing, can break early
        if min_n is not None:
            break

# Final output
if min_n is not None:
    print(f"Least n with v_5(n!)=1987 is {min_n}")
else:
    print("No n found in range with v_5(n!)=1987")
```
