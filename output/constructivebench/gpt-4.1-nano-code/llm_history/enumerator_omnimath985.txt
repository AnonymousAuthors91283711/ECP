[write_program]
This problem asks us to find all integers n such that:
1. \( n^2 - 4 \neq 0 \) (i.e., \( n \neq \pm 2 \))
2. \( (n^3 + 8) \) is divisible by \( n^2 - 4 \)

Let's analyze the divisibility condition:

Since \( n^2 - 4 = (n-2)(n+2) \), we consider when \( n^3 + 8 \) is divisible by \( (n-2)(n+2) \).

Note that:
\[
n^3 + 8 = n^3 + 2^3 = (n + 2)(n^2 - 2n + 4)
\]
by the sum of cubes factorization.

Therefore, the divisibility condition becomes:
\[
(n-2)(n+2) \mid (n+2)(n^2 - 2n + 4)
\]
For \( n \neq \pm 2 \), \( n+2 \neq 0 \), so we can cancel \( n+2 \) from numerator and denominator:

\[
n-2 \mid n^2 - 2n + 4
\]

Now, we can perform integer division to find all n (except \( n= \pm 2 \)) satisfying this.

Furthermore, note that:

\[
n^2 - 2n + 4 = (n - 1)^2 + 3
\]

Thus, our divisibility condition simplifies to:

\[
n - 2 \mid (n-1)^2 + 3
\]

We proceed to check possible n values near the divisors of this expression. Since we want to implement a finite enumeration, select small values of n, say from -20 to 20, and find all n (excluding \( \pm 2 \)) where \( n-2 \) divides \( (n-1)^2 + 3 \).

Let's write the Python code accordingly.

```python
# Enumerate integers n from -20 to 20, excluding n=±2
# For each n, check if (n-2) divides (n-1)^2 + 3
# Collect and print all such n values
answers = set()

for n in range(-20, 21):
    if abs(n) == 2:
        continue  # skip n = ±2 as per the problem condition
    divisor = n - 2
    numerator = (n - 1) ** 2 + 3
    if divisor != 0 and numerator % divisor == 0:
        print(n)
        answers.add(n)

# Optionally, for verification, print the total count
print(f"Total solutions found: {len(answers)}")
```
