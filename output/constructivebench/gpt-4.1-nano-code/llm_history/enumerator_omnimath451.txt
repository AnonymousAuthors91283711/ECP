[write_program]
The problem asks us to find the number of triples (a, b, c) of natural numbers such that \((a b + 1)(b c + 1)(c a + 1) = 84\). To do this, we'll enumerate small values of \(a, b, c\), compute the product, and check if it equals 84. Since the numbers are natural numbers, we start with small values and use symmetry to reduce computations.

Key points:
- We only consider small values for \(a, b, c\) since the product grows quickly.
- We limit the search range for \(a, b, c\) to reasonable bounds, e.g., up to 20.
- We print each valid triple as soon as it's found.
- After enumeration, we count total solutions with `.encard`.

```python
# Enumerate all triples (a, b, c) with small bounds and check the product condition
limit = 20
solutions = []

for a in range(1, limit+1):
    for b in range(1, limit+1):
        for c in range(1, limit+1):
            # Compute (a*b + 1)*(b*c + 1)*(c*a + 1)
            product = (a * b + 1) * (b * c + 1) * (c * a + 1)
            if product == 84:
                # Immediately print each solution
                print((a, b, c))
                solutions.append((a, b, c))

# Output total number of solutions
print("Total solutions:", len(solutions))
```
