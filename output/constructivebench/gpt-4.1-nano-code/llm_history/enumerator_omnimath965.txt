[write_program]
This problem involves computing a triple integral over the unit cube [0,1]^3 for the function min(a, min(b, c)). To estimate the integral, we can approach it by considering the regions where each variable is the minimum, and then sum over these regions.

Because min(a, min(b, c)) = a when a ≤ b and a ≤ c, and similarly for other variables, the integral essentially sums the measure where each variable is the minimum, multiplied by that minimum value.

To approximate this integral numerically, we'll discretize the domain with small steps, evaluate the minimums, and sum over the grid points, which provides a good estimation. We'll do this with a small step size for efficiency.

```python
import numpy as np

# Define discretization parameters
num_points = 101  # number of sample points in each dimension
x = np.linspace(0, 1, num_points)
total_sum = 0.0
dx = 1.0 / (num_points - 1)

# Compute the integral via grid sampling
for a in x:
    for b in x:
        for c in x:
            total_sum += min(a, b, c) * (dx ** 3)

# Output the approximation
print(total_sum)
```
