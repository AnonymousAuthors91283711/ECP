[write_program]
The problem asks for the greatest natural number less than 1000 that is palindromic in both decimal (base 10) and octal (base 8) representations. 

We'll enumerate all numbers under 1000, check their representations in base 10 and base 8 for palindrome properties, and keep track of the greatest such number.

Here's the Python program to do that:

```python
def is_palindrome(lst):
    return lst == lst[::-1]

def digits_in_base(n, base):
    digits = []
    while n > 0:
        digits.append(n % base)
        n //=base
    return digits[::-1]

max_number = -1
for n in range(1, 1000):  # check all numbers less than 1000
    dec_digits = digits_in_base(n, 10)
    oct_digits = digits_in_base(n, 8)
    # verify both are palindromic
    if is_palindrome(dec_digits) and is_palindrome(oct_digits):
        print(n)  # print valid candidates
        if n > max_number:
            max_number = n
# Answer is the maximum number found
print("Maximum:", max_number)
```
