[write_program]
This problem involves counting the number of triples \( y = (y_1, y_2, y_3) \) with each \( y_i \in \{1, \dots, 6\} \), and summing over \( x \in \{1, \dots, 20\} \), the indicator that \( x > y_1 + y_2 + y_3 \). Then dividing this sum by \( 20 \times 6^3 \).

The goal is to compute this ratio as an exact rational. To do so, we can:
- Enumerate all possible triples \( (y_1, y_2, y_3) \),
- For each, count how many \( x \in \{1,\dots,20\} \) satisfy the condition \( x > y_1 + y_2 + y_3 \),
- Sum these counts,
- Divide by \( 20 \times 6^3 \).

Since \( 6^3=216 \), iterating over all triples (216) is feasible for a script.

Here's the Python code to do that:

```python
# Enumerate all triples (y1, y2, y3)
# For each, count how many x in 1..20 satisfy x > sum
# Sum all such counts and divide by total (20 * 6^3)
# This gives the ratio; for exact rational, use fractions.Fraction

from fractions import Fraction

total_count = 0
total_x = 20
denominator = 20 * 6**3

# Precompute all triples for efficiency
for y1 in range(1,7):
    for y2 in range(1,7):
        for y3 in range(1,7):
            s = y1 + y2 + y3
            count_x = max(0, 20 - s) if s < 20 else 0
            total_count += count_x
            print(f"Triple ({y1},{y2},{y3}), sum={s}, count_x={count_x}")

ratio = Fraction(total_count, denominator)
print(f"Total counts: {total_count}")
print(f"Total denominator: {denominator}")
print(f"Exact ratio: {ratio}")
```

This script systematically enumerates all triples, computes the count of valid \( x \), and outputs the counts as it goes, aligning with the problem's requirements.
