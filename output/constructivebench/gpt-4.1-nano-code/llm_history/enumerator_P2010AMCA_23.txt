[write_program]
This problem involves analyzing the digits of 90! (factorial of 90), specifically identifying the last two non-zero digits in its decimal representation. The approach is:

1. Compute 90! and get its digits in base 10.
2. Drop trailing zeros from the end.
3. Extract the last two non-zero digits.
4. Combine these two digits to form the last two non-zero digits as an integer.

Because directly calculating 90! is computationally feasible with Python's arbitrary precision integers, we can write code that performs these steps and prints the answer.

Here's the program:

```python
# Compute 90! and analyze its last two non-zero digits
import math

def last_two_non_zero_digits(n):
    factorial_value = math.factorial(n)
    digits = list(map(int, str(factorial_value)))
    # Remove trailing zeros
    while digits and digits[-1] == 0:
        digits.pop()
    # Take last two digits after removing zeros
    last_two = digits[-2:] if len(digits) >= 2 else digits
    # Combine into integer
    return last_two[0] + 10 * last_two[1] if len(last_two) == 2 else last_two[0]

answer = last_two_non_zero_digits(90)
print("The last two non-zero digits of 90! form the number:", answer)
```

This code computes 90!, strips trailing zeros, extracts the last two digits, and then combines them into a single integer. The result can be verified to assist in forming a conjecture about the last two non-zero digits.
