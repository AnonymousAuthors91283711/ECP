[write_program]
The problem involves a set \( S \subseteq \mathbb{N} \) where each element \( s \in S \) is greater than 0, and every divisor \( p \) of \( s \) satisfies \( p=2 \) or \( p=2017 \). Collecting such \( s \), they are made up of only the prime factors 2 and 2017, specifically \( s = 2^a \cdot 2017^b \) with \( a, b \ge 0 \).

We need to compute \(\sum_{s \in S} \frac{1}{s}\):
\[
\sum_{a=0}^{\infty} \sum_{b=0}^{\infty} \frac{1}{2^a 2017^b} = \left(\sum_{a=0}^{\infty} \frac{1}{2^a}\right) \left(\sum_{b=0}^{\infty} \frac{1}{2017^b}\right).
\]

Each sum is a geometric series:

\[
\sum_{a=0}^\infty \frac{1}{2^a} = \frac{1}{1 - \frac{1}{2}} = 2,
\]
\[
\sum_{b=0}^\infty \frac{1}{2017^b} = \frac{1}{1 - \frac{1}{2017}} = \frac{2017}{2016}.
\]

Therefore, the TOTAL sum is:
\[
2 \times \frac{2017}{2016} = \frac{2 \times 2017}{2016}.
\]

This result is exact. To match the program's design, we will output the sum as a rational number.

```python
# Enumerate the sum of reciprocals over set S where S consists of numbers with only prime factors 2 and 2017.
# The sum of reciprocals of all such numbers is the product of two geometric series.

# sum over powers of 2: sum_{a=0}^∞ (1/2)^a = 2
# sum over powers of 2017: sum_{b=0}^∞ (1/2017)^b = 2017/2016
# Total sum = 2 * (2017/2016) = (2*2017)/2016

answer_numerator = 2 * 2017  # numerator
answer_denominator = 2016    # denominator

print(f"{answer_numerator}/{answer_denominator}")  # Prints the exact sum as a fraction
```
