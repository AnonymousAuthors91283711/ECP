[write_program]
This problem involves enumerating three-digit numbers \( n \) (from 100 to 999) that satisfy a specific condition: there exists an integer \( k \) such that 

\[
n + \text{reversed}(n) = k^2,
\]

where \(\text{reversed}(n)\) is the number formed by the digits of \( n \) in reverse order.

To solve this, we will:
- Iterate over all three-digit numbers \( n \).
- Compute \( \text{reversed}(n) \).
- Check if \( n + \text{reversed}(n) \) is a perfect square.
- For each such \( n \), immediately print it.

```python
# Enumerate all 3-digit numbers from 100 to 999
for n in range(100, 1000):
    # Extract digits
    hundreds = n // 100
    tens = (n // 10) % 10
    units = n % 10
    # Compute the reversed number
    rev_n = units * 100 + tens * 10 + hundreds
    s = n + rev_n
    # Check if s is a perfect square
    root = int(s**0.5)
    if root * root == s:
        print(n)
```
