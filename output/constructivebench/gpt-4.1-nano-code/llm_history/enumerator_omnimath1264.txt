[write_program]
This problem involves finding the minimal natural number \(k\) such that there exist positive real numbers \(a, b, c\) satisfying the sum involving floor functions:

\[
k = \left\lfloor\frac{a + b}{c}\right\rfloor + \left\lfloor\frac{b + c}{a}\right\rfloor + \left\lfloor\frac{c + a}{b}\right\rfloor
\]

To find the minimal \(k\), we can systematically test small positive values, trying different small values of \(a, b, c\). Because the problem's nature involves floor functions, it's most promising to test small combinations, especially since larger values tend to increase the sum.

Here's the approach:
- Fix small positive \(a, b, c\) values (like 1, 2, 3).
- For each, compute the sum.
- Record any observed sums, remember the minimal sum.
- Because the sum involves floors, small values are enough to find the minimal sum.

Let's limit ourselves to small integers (1 to 5), to keep computation manageable and find minimal sums streamingly.

```python
# Enumerate small positive real numbers for a, b, c within 1 to 5
# For simplicity, test integer values, as floors are sensitive to fractional parts, 
# but for minimal sum, integers suffice.
min_k = None
for a in range(1, 6):
    for b in range(1, 6):
        for c in range(1, 6):
            sum_k = (a + b) // c + (b + c) // a + (c + a) // b
            print(f"a={a}, b={b}, c={c} => sum={sum_k}")
            if (min_k is None) or (sum_k < min_k):
                min_k = sum_k
print(f"Minimal sum found: {min_k}")
```
