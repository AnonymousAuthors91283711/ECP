[write_program]
The problem involves analyzing a sequence defined recursively and identifying the numbers `n` for which `a_sequence(n-1)` equals `n^2`, with the additional condition `n > 0`.

Given the sequence:
- `a_sequence(0) = 1`
- `a_sequence(1) = 1`
- `a_sequence(2) = 2`
- For `n â‰¥ 3`, `a_sequence(n) = a_sequence(n-1) + a_sequence(n-2) + a_sequence(n-3)`

We need to find all `n` such that `a_sequence(n-1) = n^2` for `n > 0`. The recursive sequence resembles a tribonacci-like sequence, which grows exponentially, but specific values might match perfect squares at particular points.

Approach:
- Generate the sequence for `n` up to a certain small threshold.
- Check whether `a_sequence(n-1)` equals `n^2`.
- Output all such `n` when found.

This direct enumeration approach efficiently finds candidate solutions without complex formula derivations.

```python
# Python code to enumerate n where a_sequence(n-1) = n^2 for n > 0
def a_sequence(n):
    seq = [1, 1, 2]
    for i in range(3, n+1):
        seq.append(seq[i-1] + seq[i-2] + seq[i-3])
    return seq

# Generate sequence up to a reasonable limit
limit = 50
sequence = a_sequence(limit+1)  # ensure coverage for n up to limit
for n in range(1, limit+1):
    if sequence[n-1] == n**2:
        print(n)
```
