[write_program]
The problem asks to find the least positive integer n such that there exist positive integers b and r with b + r = n, and satisfying the equation (b * r * (b + r - 2)) / 2 = 25. We need to enumerate all candidates for b, r with their sum n, and check the given condition, then identify the least n that satisfies it.

I'll implement a brute-force enumeration for small positive integers b and r, compute n = b + r, check the equation, and print all valid n to determine the minimum.

```python
# Enumerate small positive integers b and r
found_ns = set()

# We'll go up to a reasonable limit to find all candidates
limit = 50

for b in range(1, limit):
    for r in range(1, limit):
        n = b + r
        # Compute the left side of the equation
        numerator = b * r * (b + r - 2)
        if numerator % 2 == 0 and numerator // 2 == 25:
            # Valid candidate found
            print(f"b={b}, r={r}, n={n}")
            found_ns.add(n)

# If multiple n satisfy the conditions, find the minimum
if found_ns:
    min_n = min(found_ns)
    print(f"Least n satisfying conditions: {min_n}")
else:
    print("No candidate found within limits.")
```
