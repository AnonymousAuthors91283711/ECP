[write_program]
The problem involves enumerating triplets (a, b, c) with constraints involving their sum, order, and triangle inequality, and counting how many satisfy these conditions for specific n values. To assist in conjecturing or verifying a pattern, we will write a Python script that enumerates such triplets for small n, particularly n=10, 11, 12, checking all triplets with a, b, c in [1, n], and satisfying the constraints.

The script will:
- Iterate over all triplets (a, b, c) with 1 ≤ a ≤ b ≤ c ≤ n.
- Check if the sum is n, if the triangle inequality (a + b > c) holds, and if the order constraints (a ≤ b ≤ c) are satisfied.
- Count the matching triplets for each n in {10, 11, 12}.
- Print each matching triplet immediately when found.
- Report total counts for each n to identify potential patterns or formulas.

This approach is efficient for small n, avoids hardcoded answers, and streams partial results as per the requirement.

```python
# Enumerate and count triplets (a,b,c) satisfying constraints for specific n values
def enumerate_triplets(n):
    count = 0
    for a in range(1, n+1):
        for b in range(a, n+1):
            for c in range(b, n+1):
                if a + b + c == n and a + b > c:
                    print(f"Triplet: ({a}, {b}, {c}) for n={n}")
                    count += 1
    return count

# List of specific n values to test
test_ns = [10, 11, 12]

for n in test_ns:
    print(f"\nEnumerating for n={n}")
    total = enumerate_triplets(n)
    print(f"Total triplets for n={n}: {total}")
```
This code streams each valid triplet immediately, helping to guess the pattern of solutions and potentially guiding a formal proof.
