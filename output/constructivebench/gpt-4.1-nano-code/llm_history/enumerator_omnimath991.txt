[write_program]
The problem involves finding the minimal value of the sum \(s = 1/p + 2/q + 3/r\), given the polynomial conditions with roots \(p, q, r\) and the restriction \(0 < p < q < r\). The polynomial is of the form:

\[
(X - p)(X - q)(X - r) = X^3 - aX^2 + bX - 48
\]

Matching coefficients yields:

\[
a = p + q + r,
\]
\[
b = pq + pr + qr,
\]
\[
pqr = 48.
\]

Given the constraints, to explore the minimum of \(s\), I will choose small sample values for \(p\), then find compatible \(q, r\) satisfying the polynomial roots conditions, especially the product \(pqr=48\).

```python
# Enumerate possible p, q, r with p < q < r and p * q * r = 48, p > 0
# For each valid triple, compute s = 1/p + 2/q + 3/r, print the value
# Focus on small integer or rational candidates for p (like p=1, 2, 3, 4, 6, 8, 12)
# For each p, find divisors of 48/p that can be split into q, r with q<r>p.

import math

min_s = float('inf')
min_triplet = None

# Candidate p values (small divisors of 48)
p_candidates = [1, 2, 3, 4, 6, 8, 12]

for p in p_candidates:
    if 48 % p != 0:
        continue
    remaining = 48 // p
    # q and r should satisfy q < r, q > p, r > q
    for q in range(p+1, int(math.sqrt(remaining)) + 2):
        if remaining % q != 0:
            continue
        r = remaining // q
        if q < r:
            s_value = 1/p + 2/q + 3/r
            print(f"p={p}, q={q}, r={r}, s={s_value}")
            if s_value < min_s:
                min_s = s_value
                min_triplet = (p, q, r)

# Output the minimal s found and corresponding (p,q,r)
print("Minimum s:", min_s, "at p,q,r =", min_triplet)
```
