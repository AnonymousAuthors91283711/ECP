[write_program]
This problem, inspired by a formal theorem in Lean with Mathlib, involves finding the least natural number n such that there exist natural numbers c and v satisfying both c + v = n and 2*c*v*(c² + v²) = 4800. The task is to enumerate all such pairs (c,v) with their sums, then identify the minimal n.

To do this, we choose small bounds for c and v for manageable enumeration, print pairs when conditions hold, and output the minimal n once found.

```python
# Enumerate possible c and v within a small range, check for the conditions,
# and track the minimal sum n = c + v satisfying the equation.
max_c_v = 100  # limit for enumeration, can be increased if needed
solutions = []

for c in range(1, max_c_v + 1):
    for v in range(1, max_c_v + 1):
        if 2 * c * v * (c**2 + v**2) == 4800:
            n = c + v
            solutions.append(n)
            print(f"Found pair c={c}, v={v}, sum n={n}")

if solutions:
    min_n = min(solutions)
    print(f"Minimal n satisfying the conditions: {min_n}")
else:
    print("No solutions found within the given bounds.")
```
