[write_program]
Let's analyze the problem:

- We have permutations of 6 elements.
- For each permutation p, check the sums of p(i), p(i+1), p(i+2) for i = 0..3 (since Fin 4 indexes 0..3).
- We want to count permutations where each such sum mod 3 ≠ 0, i.e., sum mod 3 ≠ 0, meaning the sum mod 3 is either 1 or 2.

Our task is to find the size of such permutations, then declare it.

Approach:
- Generate all permutations of {1, 2, 3, 4, 5, 6}.
- For each, check the four triplet sums mod 3.
- Count how many satisfy the condition (all four sums not 0 mod 3).

Given performance constraints, we'll implement an efficient filtering.

Here's the code:

```python
from itertools import permutations

# Generate all permutations of 1..6
perms = permutations(range(1, 7))
count = 0

for p in perms:
    # Check the four triplet sums mod 3:
    # Indices: 0..3
    valid = True
    for i in range(4):
        triplet_sum = p[i] + p[i+1] + p[i+2]
        if triplet_sum % 3 == 0:
            valid = False
            break
    if valid:
        print(p)  # streamline: print each valid permutation
        count += 1

# Assign the count to the answer
mathodyssey128_answer = count
print(f"The total number of permutations is: {count}")
```
