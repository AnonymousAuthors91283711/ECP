[write_program]
This problem involves deducing the sum of a set S based on the provided average conditions involving the set and its extensions with specific elements. To assist in conjecturing the exact value, I will write a Python program that:

- Uses small sample values for the set size `n`.
- Enumerates all possible sums of `S` for each `n` in the reasonable range.
- Checks the conditions involving insertions of 1 and 2001 into `S`.
- Finds solutions that satisfy these conditions, and prints the average of `S` (i.e., sum of `S` divided by its size).

Since the problem seems to connect the sum before and after insertions, and involves specific numeric offsets (-13 and +27), the program uses brute-force enumeration over small `n` and sums to reconstruct candidate solutions efficiently.

```python
# Enumerate candidate sums for small set sizes, check conditions
def enumerate_solutions():
    results = []
    max_n = 20  # limit set size for feasibility
    for n in range(1, max_n + 1):
        for sum_s in range(n * -100, n * 100 + 1):  # reasonable bounds on sums
            # Check first condition with insert 1
            total_with_1 = sum_s + 1
            avg_with_1 = total_with_1 / (n + 1)
            avg_s = sum_s / n

            # Condition 1: (sum + 1)/(n+1) == (sum/n) - 13
            if abs(avg_with_1 - (avg_s - 13)) > 1e-9:
                continue

            # Check second condition with insert 2001
            total_with_2001 = sum_s + 2001
            avg_with_2001 = total_with_2001 / (n + 1)

            # Condition 2: (sum + 2001)/(n+1) == (sum/n) + 27
            if abs(avg_with_2001 - (avg_s + 27)) > 1e-9:
                continue

            # If both conditions are met, record the average
            results.append(avg_s)
            print(f"Found solution: n={n}, sum_s={sum_s}, average={avg_s}")

    if results:
        median_avg = sorted(results)[len(results)//2]
        print(f"\nEstimated average sum of S: {median_avg}")
    else:
        print("No solutions found within the search bounds.")

if __name__ == "__main__":
    enumerate_solutions()
```
