[write_program]
The problem defines a set S of triples (a, b, c) of natural numbers such that their sum is 2006, and the sum b + c is even. We need to find the number of such triples.

Key observations:
- Since a + b + c = 2006, fixing a determines b + c = 2006 - a.
- The parity condition (b + c) % 2 = 0 means 2006 - a is even.
- Because 2006 is even, a must also be even, so that 2006 - a is even.
- For each fixed even a, b and c are non-negative integers with b + c = 2006 - a, and the number of solutions is (2006 - a + 1), since b can vary from 0 to (2006 - a).

The plan:
- Iterate over even a from 0 to 2006.
- For each such a, add (2006 - a + 1) to the total count.
- Sum over all valid a.

Practical implementation:
- Only consider even a to limit computation.
- Sum all possibilities.

Here's the code:

```python
# Enumerate number of triples (a, b, c) with a + b + c = 2006 and (b + c) even
total_count = 0
for a in range(0, 2007, 2):  # a even
    total_count += (2006 - a + 1)
    print(f"Trying a={a}: partial sum={total_count}")

print(f"Total number of solutions: {total_count}")
```

This code efficiently computes the total and streams partial results as it progresses.
