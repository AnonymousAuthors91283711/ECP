[write_program]
The problem involves calculating the sum of squares of a sequence and then finding its last digit (mod 10). Specifically, it sums (k * 49)^2 for k from 1 to 49.

Since 49 is fixed, and the sum involves modular arithmetic, we can explicitly compute each term for k=1 to 49 and then sum everything, tracking the last digit. To verify the last digit, we only need the last digit of each term, which depends on (k * 49)^2 % 10.

Key observations:
- 49 mod 10 is 9.
- So, (k * 49) mod 10 is (k * 9) mod 10.
- We can explicitly compute (k * 9)^2 mod 10 for each k.

Let's enumerate all k from 1 to 49, compute (k * 9)^2 mod 10, sum these, and conclude the last digit.

```python
# Enumerate k from 1 to 49
total_last_digit = 0
for k in range(1, 50):
    term_mod = ((k * 9) % 10) ** 2 % 10
    total_last_digit += term_mod

# Final last digit of the sum
answer = total_last_digit % 10
print(answer)
```
