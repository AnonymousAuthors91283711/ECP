[write_program]
This problem involves defining a sequence with specific initial conditions and a recursive rule based on the infimum of certain values. Due to the complexity and the abstract nature of the rule, an exact enumeration for such a sequence requires simulating the process step by step and exploring candidate values for `s(n)`.

The recursion states: for \( n \geq 4 \),
\[ s(n) = \inf \left\{ k \in \mathbb{N} \ \middle| \ k > s(n-1) \text{ and } \forall i,j < n, \ i<j, \ s(i)+s(j) \neq k \right\} \]

This formulation implies that \( s(n) \) is the smallest integer greater than \( s(n-1) \) that does not appear as the sum of two earlier terms.

To approximate this, we'll:
- Start with initial terms
- For each subsequent \( n \), find the minimal \( k > s(n-1) \) avoiding sums of previous pairs
- Continue up to \( n=99 \)
- Report the value for \( s(99) \) at the end to support the conjecture.

We'll implement this process in Python.

```python
# Sequence initial conditions
s = [1, 2, 4, 6]

# Generate sequence up to n=99
for n in range(4, 100):
    prev = s[-1]
    # Generate all pair sums of previous terms
    sums = set()
    for i in range(n):
        for j in range(i+1, n):
            sums.add(s[i] + s[j])
    # Find minimal k > s(n-1) not in sums
    candidate = prev + 1
    while candidate in sums:
        candidate += 1
    s.append(candidate)
    # Stream results
    if n == 99:
        answer = s[-1]
        print(f's(99) = {answer}')
```
