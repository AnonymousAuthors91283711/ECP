[write_program]
This problem involves finding the smallest positive integer n ≠ 0, along with parameters a and r, such that a geometric sequence t_k = a * r^(k-1) satisfies certain conditions: the product of t_1 and t_n equals 3, and the product of t_{k+1} over k in range n equals 59049.

We must find minimal n satisfying:
- a * r^{0} * a * r^{n-1} = 3 → a^2 * r^{n-1} = 3
- ∏_{k=1 to n} t_{k+1} = ∏_{k=1 to n} a * r^k = a^n * r^{n(n+1)/2} = 59049

To eliminate variables, express a in terms of r:
- a^2 * r^{n-1} = 3 → a^2 = 3 / r^{n-1}
- → a = sqrt(3 / r^{n-1})

Substitute into the second:
a^n = (sqrt(3 / r^{n-1}))^n = (3 / r^{n-1})^{n/2} = 3^{n/2} * r^{- (n(n-1))/2}

and the product condition:
a^n * r^{n(n+1)/2} = 59049

Plugging in for a^n:
(3^{n/2} * r^{ - (n(n-1))/2 }) * r^{n(n+1)/2} = 59049

Simplify:
3^{n/2} * r^{[ - (n(n-1))/2 + n(n+1)/2 ]} = 59049

Calculate the exponent for r:
- (n(n-1))/2 + n(n+1)/2 = (n(n-1) + n(n+1)) / 2 = (n^2 - n + n^2 + n)/2 = (2n^2)/2 = n^2

Thus:
3^{n/2} * r^{n^2} = 59049

Note that 59049 = 3^{10} (since 3^10=59049).

So:
3^{n/2} * r^{n^2} = 3^{10}
→ r^{n^2} = 3^{10 - n/2}

Since r^{n^2} must be positive real, and the right side is 3^{(20 - n)/2}, we can write:
r^{n^2} = 3^{(20 - n)/2}

Therefore:
r = 3^{(20 - n)/(2 n^2)}

Recall a in terms of r:
a = sqrt(3 / r^{n-1}) = 3^{1/2} / r^{(n-1)/2}

All these parameters are real, and we seek the smallest positive integer n satisfying these conditions, with r finite and real.

We can now check small values of n starting from 1 upwards, computing r, then test if a is real (which it will be):

- For n in small positive integers, compute r.
- For r to be real and positive, the exponential should be positive.
- Since n^2 > 0 always, and the exponent (20 - n)/(2 n^2), for some small n, r is positive and real.

Let's implement this enumeration for n=1..10 to find the minimal n:

```python
import math

# The main enumeration to find minimal n satisfying the conditions
for n in range(1, 20):
    numerator = 20 - n
    denominator = 2 * n * n
    exp_r = numerator / denominator
    # r = 3^{(20 - n)/(2 n^2)}
    r = 3 ** exp_r

    # Check for r being positive real
    if r > 0:
        # Compute a
        a = math.sqrt(3) / (r ** ((n - 1) / 2))
        # Verify a is real
        if not math.isfinite(a):
            continue
        # Verify the product constraints
        # Check if a^2 * r^{n-1} ≈ 3
        left = a ** 2 * r ** (n - 1)
        # Check if close to 3
        if abs(left - 3) < 1e-6:
            # Check the second condition
            # a^n * r^{n(n+1)/2} ≈ 59049
            product = (a ** n) * r ** (n * (n + 1) / 2)
            if abs(product - 59049) < 1e-3:
                print(f"n = {n}, a ≈ {a:.5f}, r ≈ {r:.5f}")
                # Since we want minimal n, we stop at first match
                break
```

This code finds the smallest n that meets the conditions by explicit enumeration, testing small n values, ensuring the parameters are consistent with the mathematical constraints, and printed immediately when found.
