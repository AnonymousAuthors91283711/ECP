[write_program]
This problem asks us to find the smallest positive integer n such that 3^n ≡ 1 (mod 143^2), where 143 = 11 * 13. To solve this, we analyze the order of 3 modulo 143^2, using the Chinese Remainder Theorem and properties of multiplicative orders modulo prime powers.

We'll:
- Compute the order of 3 modulo 11^2 and 13^2.
- Use lcm of these orders for the mod 143.
- Check the minimal n such that 3^n ≡ 1 mod 143^2.

Below is the Python code to compute these step-by-step, listing minimal candidates until the least n is found.

```python
# Import necessary functions
import math

# Function to compute the order of a modulo p^k
def order_mod_prime_power(a, p, k):
    modulus = p ** k
    order = 1
    current = a % modulus
    while True:
        current = (current * a) % modulus
        order += 1
        if current == 1:
            return order

# Compute order of 3 modulo 11^2
order_11_sq = order_mod_prime_power(3, 11, 2)
print(f"Order of 3 mod 11^2: {order_11_sq}")

# Compute order of 3 modulo 13^2
order_13_sq = order_mod_prime_power(3, 13, 2)
print(f"Order of 3 mod 13^2: {order_13_sq}")

# Compute the least common multiple for order modulo 143 = 11 * 13
order_mod_143 = (order_11_sq * order_13_sq) // math.gcd(order_11_sq, order_13_sq)
print(f"Order of 3 mod 143: {order_mod_143}")

# Now, by Carmichael function, the order mod 143^2 divides lcm of orders
# Test candidates for minimal n, starting from shortest lengths
limit = 200  # set a threshold
for n in range(1, limit + 1):
    if pow(3, n, 143**2) == 1:
        print(f"Candidate n: {n}")
        # Since we are looking for least n, break at first found
        print(f"Least n satisfying 3^n ≡ 1 mod 143^2: {n}")
        break
```
