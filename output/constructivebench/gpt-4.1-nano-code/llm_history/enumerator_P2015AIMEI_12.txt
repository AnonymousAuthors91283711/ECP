[write_program]
This problem appears to involve combinatorial sums and gcd calculations involving binomial coefficients. To approximate the answer, we'll enumerate values of the sum `p` for smaller parameters, observe the pattern, and compute the fraction `p/d + q/d` where `d` is the gcd of `p` and `q`.

Given the large values of `n=2015` and `k=1000`, exact computation may be infeasible here, so we'll test with smaller sample values, for example `n=10`, `k=5`, and see the simplified behavior.

The goal is to find the sum `p = âˆ‘_{m=0}^{n-1} choose(n - m, k - 1)`, then compute `q= choose(n,k)` and visualize the sum divided by gcd, adding scaled portions.

Here's a Python code that enumerates small cases instead of large, to conjecture the pattern:

```python
import math
from math import comb, gcd

# Small sample parameters to observe pattern
n = 10
k = 5

# Compute q = choose(n, k)
q = comb(n, k)

# Compute p = sum_{m=0}^{n-1} choose(n - m, k - 1)
p = sum(comb(n - m, k - 1) for m in range(n))

# Compute gcd to reduce the fraction
d = gcd(p, q)
# Compute the sum p/d + q/d
answer = p // d + q // d

print("n =", n, "k =", k)
print("sum p =", p)
print("q =", q)
print("gcd =", d)
print("answer (p/g + q/g) =", answer)
```

This will output a conjecture based on small parameters, which might correspond to the pattern for large `n` and `k`.
