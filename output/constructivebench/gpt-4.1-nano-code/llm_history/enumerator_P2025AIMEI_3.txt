[write_program]
This problem models a scenario where we assign 3 types of chocolates (chocolate, vanilla, strawberry) to 9 people, with each person assigned exactly one type. The constraints specify that each type has at least one person, with the counts decreasing in order: chocolate > vanilla > strawberry. The task is to find, modulo 1000, the total number of valid assignments satisfying these conditions.

To solve it, we will:
- Enumerate all possible distributions (n_c, n_v, n_s) with n_c + n_v + n_s = 9.
- Respect the constraints: 0 < n_s < n_v < n_c.
- For each valid triplet, count the arrangements, then sum over all.

This approach is manageable since the total sum is only 9, so enumeration is feasible.

```python
# Enumerate all possible distributions of chocolates, vanilla, and strawberry
# satisfying 1 <= n_s < n_v < n_c and n_c + n_v + n_s = 9

from math import comb

total = 0
for n_s in range(1, 8):  # n_s at least 1, at most 7
    for n_v in range(n_s + 1, 9):  # n_v > n_s
        n_c = 9 - (n_s + n_v)
        if n_c <= n_v:
            continue
        # Count arrangements: permutations given counts
        arrangements = (comb(9, n_c) * comb(9 - n_c, n_v))
        total += arrangements

print(total % 1000)
```
