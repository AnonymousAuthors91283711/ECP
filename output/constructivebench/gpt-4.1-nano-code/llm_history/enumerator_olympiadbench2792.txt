[write_program]
This problem involves finding the smallest positive integer \( n \) such that for every pair of distinct integers \( k, l \in \{1,2,3,4,5,6,7,8\} \), the floors of \( n^{1/k} \) and \( n^{1/l} \) are different. In other words, the \( \lfloor n^{1/k} \rfloor \) values are all distinct for \( k = 1, 2, ..., 8 \). We want the minimal such \( n \).

Since this is an enumeration problem and the functions involved are monotonic, we can brute-force candidates starting from 1, checking if the floors are all distinct. To optimize, we only check up to a certain large \( n \), noting that \( n^{1/k} \) grows slow and the floors will eventually stabilize or repeat.

Below, I write a Python script that:
- Checks all \( n \) starting from 1 upwards,
- For each \( n \), computes \( \lfloor n^{1/k} \rfloor \) for each \( k \),
- Verifies if all these values are distinct,
- Stops when the smallest \( n \) satisfying this is found and outputs it immediately.

This approach balances efficiency and clarity; it avoids unnecessary computations and stops early.

```python
import math

def is_valid(n):
    # Compute floors of nth root for each k
    floors = set()
    for k in range(1, 9):
        val = math.floor(n ** (1 / k))
        if val in floors:
            return False
        floors.add(val)
    return True

n = 1
while True:
    if is_valid(n):
        print(n)  # Immediately output the minimal n
        break
    n += 1
```
