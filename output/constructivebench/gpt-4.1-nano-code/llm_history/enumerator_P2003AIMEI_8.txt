[write_program]
The problem involves solving a system of inequalities and equations involving four positive integers \(a, b, c, d\):

- \(0 < a < b < c < d\)
- \(2b = a + c\)
- \(c^2 = b \times d\)
- \(d - a = 30\)
- Sum \(a + b + c + d\) to be determined

To find all solutions efficiently, we'll parameterize and iterate over small candidate values, extracting possible solutions until we identify consistent sets satisfying all conditions.

```python
# Enumerate possible values of a, b, c, d based on given equations and inequalities
# Constraints:
# 1) 0 < a < b < c < d
# 2) 2b = a + c
# 3) c^2 = b * d
# 4) d - a = 30

solutions = []

# Since a < b < c < d and d = c^2 / b, with d - a = 30, we can bound a
for a in range(1, 50):
    for b in range(a+1, 100):
        c = 2 * b - a  # from 2b = a + c => c = 2b - a
        if c <= b:
            continue
        # Compute d from c^2 = b * d => d = c^2 / b
        if c ** 2 % b != 0:
            continue
        d = c ** 2 // b
        if d <= c:
            continue
        # Check d - a = 30
        if d - a != 30:
            continue
        # Check the inequalities
        if a < b < c < d:
            sum_abcd = a + b + c + d
            solutions.append((a, b, c, d, sum_abcd))
            print(f"Solution: a={a}, b={b}, c={c}, d={d}, sum={sum_abcd}")

# Optionally, find the solution with minimal sum if needed
if solutions:
    min_solution = min(solutions, key=lambda x: x[4])
    print(f"Minimum sum solution: a={min_solution[0]}, b={min_solution[1]}, c={min_solution[2]}, d={min_solution[3]}, sum={min_solution[4]}")
```
