[write_program]
This problem involves finding primes \( p \) such that there exists an integer \( k \) with \( k^3 = p^2 - p + 1 \). To assist in conjecture, we will enumerate small primes \( p \), check whether \( p^2 - p + 1 \) is a perfect cube, and print solutions immediately when found.

Implementation plan:
- Generate small primes up to a threshold.
- For each prime \( p \), compute \( p^2 - p + 1 \).
- Check if this value is a perfect cube.
- If yes, print \( p \) and \( k \).
- Record all solutions for analysis; do not hardcode answers.

Code:

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.isqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def is_perfect_cube(n):
    if n < 0:
        return False
    c = round(n ** (1/3))
    if c ** 3 == n:
        return c
    # Check neighbors to avoid floating point errors
    for candidate in [c-1, c, c+1]:
        if candidate ** 3 == n:
            return candidate
    return None

solutions = []

# Generate primes up to a certain small limit, e.g., 1000
limit = 1000
for p in range(2, limit):
    if is_prime(p):
        val = p * p - p + 1
        k = is_perfect_cube(val)
        if k is not None:
            # p is prime, k integer, cube matched
            print(f"Prime p={p}, p^2 - p + 1={val} = {k}^3")
            solutions.append((p, k))
```
