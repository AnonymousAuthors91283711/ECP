[write_program]
This problem involves finding quadruples \((a, b, c, p)\) of natural numbers with positive \(a, b, c\) and prime \(p\), satisfying the equation:
\[ 2^a \cdot p^b = (p + 2)^c + 1 \]

Since exploring all possibilities directly is complicated, we'll test small values systematically:
- \(a, b, c\) up to a threshold (say 20 for brevity)
- small prime \(p\): starting from 2, 3, 5, 7, 11,...

We'll enumerate solutions, prioritizing straightforward cases, and stream answers as they are found.

```python
# We will iterate over small values of a, b, c and small primes p
# To avoid infinite loops, limit ranges sensibly

import itertools

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Generate small primes up to a limit
def generate_primes(limit):
    return [p for p in range(2, limit+1) if is_prime(p)]

solutions_found = []

# Define bounds for search
a_max = 20
b_max = 20
c_max = 20
prime_limit = 20

primes = generate_primes(prime_limit)

# Enumerate over all combinations within limits
for a in range(1, a_max + 1):
    for b in range(1, b_max + 1):
        for c in range(1, c_max + 1):
            for p in primes:
                lhs = 2**a * p**b
                rhs = (p + 2)**c + 1
                if lhs == rhs:
                    print((a, b, c, p))
```
