[write_program]
The problem involves analyzing a set of real numbers \( m \) satisfying certain algebraic equations involving the parameter \( n \). It appears to originate from a problem involving parameterized quadratic equations, with two different cases. To explore solutions systematically, I will implement a Python script that searches for real values of \( n \) in a small range and computes corresponding \( m \)-values satisfying the conditions.

The code will:
- Use a small sample range for \( n \), such as \([-10, 10]\), with a fine granularity.
- For each \( n \), verify if either of the two conditions in the problem holds true by computing \( m \) in real numbers.
- Check for solutions to each quadratic equation exactly, avoiding floating-point approximation issues as much as possible.
- Stream outputs immediately when solutions are found.

This should help us conjecture the set of \( m \) values satisfying the conditions, supported by explicit solutions.

```python
import math

# Define the range and step for n
n_min, n_max, step = -10, 10, 0.1

# Store solutions to avoid duplicates
solutions = set()

def quadratic_solutions(a, b, c):
    """Compute real solutions to a quadratic equation a*x^2 + b*x + c=0."""
    disc = b**2 - 4*a*c
    if disc < 0:
        return []
    sqrt_disc = math.sqrt(disc)
    sol1 = (-b + sqrt_disc) / (2 * a)
    sol2 = (-b - sqrt_disc) / (2 * a)
    return [sol1, sol2] if disc > 0 else [sol1]  # one or two solutions

n = n_min
while n <= n_max:
    # Condition 1: 3 * n^2 + 1 = m^2 and m^2 + 1 = 2 * (n + 1)^2
    # From the first equation: m^2 = 3 * n^2 + 1
    candidate_m_squares_1 = 3 * n**2 + 1
    if candidate_m_squares_1 >= 0:
        m_candidates = [math.sqrt(candidate_m_squares_1), -math.sqrt(candidate_m_squares_1)]
        for m in m_candidates:
            # Check second condition: m^2 + 1 == 2*(n+1)^2
            if abs(m**2 + 1 - 2 * (n + 1)**2) < 1e-8:
                solutions.add(round(m, 8))
                print(f"Condition 1 solution at n={n:.2f}: m={m:.4f}")

    # Condition 2: 3 * n^2 - 1 = m^2 and m^2 - 1 = 2 * (n + 1)^2
    candidate_m_squares_2 = 3 * n**2 - 1
    if candidate_m_squares_2 >= 0:
        m_candidates = [math.sqrt(candidate_m_squares_2), -math.sqrt(candidate_m_squares_2)]
        for m in m_candidates:
            # Check second condition for case 2
            if abs(m**2 - 1 - 2 * (n + 1)**2) < 1e-8:
                solutions.add(round(m, 8))
                print(f"Condition 2 solution at n={n:.2f}: m={m:.4f}")
    n += step
```
