[write_program]
The problem asks to find the least natural number n such that the difference between the square roots of n+99 and n is less than 1. 

This involves solving the inequality: sqrt(n + 99) - sqrt(n) < 1.

Rearranged, the difference squared would give an insight:
(sqrt(n + 99) - sqrt(n))^2 < 1^2
=> (n + 99) + n - 2*sqrt(n + 99)*sqrt(n) < 1
=> 2n + 99 - 2*sqrt(n(n + 99)) < 1
=> 2n + 98 < 2*sqrt(n(n + 99))
Divide by 2:
n + 49 < sqrt(n(n + 99))
Square both sides:
(n + 49)^2 < n(n + 99)

Now, enumerate n starting from 0 upwards to find the least n satisfying the inequality.

```python
import math

# Function to check the inequality
def check(n):
    left = (n + 49)**2
    right = n * (n + 99)
    return left < right

# Enumerate n to find the least n satisfying the inequality
n = 0
while True:
    if check(n):
        print(n)
        break
    n += 1
```
