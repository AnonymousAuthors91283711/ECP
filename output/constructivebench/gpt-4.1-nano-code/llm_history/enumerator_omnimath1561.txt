[write_program]
The goal appears to involve analyzing the sequences `a_sequence` and `b_sequence` defined recursively, and then computing their greatest common divisor (gcd). Given the recursive definitions resemble linear recurrence relations, it's useful to find closed-form formulas or at least generate candidate values for large `n`. 

Since directly computing `a_sequence 5000` and `b_sequence 501` is infeasible, we should investigate patterns, especially for small `n`, to conjecture the behavior. We can generate many terms of both sequences for small `n`, check their gcds, and look for a pattern or particular values that could be the gcd result.

We prioritize small sample values, then examine their gcd for increasing `n`, stopping at a reasonable threshold to find potential gcd values.

```python
# Program to generate small terms of a_sequence and b_sequence,
# compute their gcd, and observe patterns for large n.

import math

# Generate sequence values for small n
def generate_sequences(max_n):
    a = [0, 1, 8]
    b = [0, 1, 2]
    # Generate sequences up to max_n
    for n in range(3, max_n + 1):
        a_n = 7 * a[n - 1] - a[n - 2]
        b_n = 3 * b[n - 1] - b[n - 2]
        a.append(a_n)
        b.append(b_n)
        # Print current values for monitoring
        print(f"n={n}: a={a_n}, b={b_n}, gcd={math.gcd(a_n, b_n)}")
        # For large n, only keep relevant info
        if n % 50 == 0:
            print(f"At n={n}: a={a_n}, b={b_n}, gcd={math.gcd(a_n, b_n)}")

# Run for small n to analyze gcd
generate_sequences(100)
```
