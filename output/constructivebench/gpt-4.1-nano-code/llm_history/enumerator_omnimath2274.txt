[write_program]
The problem involves counting four-digit natural numbers (from 1000 to 9999) that satisfy multiple conditions:
- The number \(n\) is between 1000 and 9999.
- \(n\) is divisible by 11.
- The sum of its decimal digits is divisible by 11.

Since any number between 1000 and 9999 can be represented as a four-digit number \(ABCD\), where \(A, B, C, D\) are its digits, the conditions become:
- \(A \neq 0\),
- \(11 \mid ABCD\),
- \(11 \mid (A+B+C+D)\).

Given the number's divisibility by 11, the divisibility rule for 11 states:
\[
(A + C) - (B + D) \equiv 0 \pmod{11}
\]
which implies:
\[
A + C \equiv B + D \pmod{11}
\]

And the sum of digits:
\[
A + B + C + D \equiv 0 \pmod{11}
\]

Considering these, and enumerating all candidates that satisfy the conditions, we can proceed as follows:
- Fix digits \(A, B, C, D\),
- Check if these satisfy the divisibility conditions,
- Check if the number \(ABCD\) lies within the required range and is divisible by 11.

The code will enumerate over all four-digit numbers, check conditions, and print valid ones quickly.

```python
# Enumerate four-digit numbers from 1000 to 9999
# Check the conditions: divisible by 11, sum of digits divisible by 11, number divisible by 11
# Print all candidates that satisfy the conditions

for n in range(1000, 10000):
    if n % 11 == 0:
        digits = [int(d) for d in str(n)]
        if sum(digits) % 11 == 0:
            print(n)
```
