[write_program]
The problem asks for the greatest value of \( y \) satisfying specific conditions involving squares and intervals. Specifically, it involves finding \( y \) between the maximum of \( d \) and \( s \), and the minimum of \( d+110 \) and \( s+110 \), with additional square conditions on \( y - d \) and \( y - s \). The parameters \( d \) and \( s \) lie within ranges 1300–1399 and 1400–1499 respectively, both are perfect squares.

Approach:
- Enumerate all \( d \) in 1300–1399, check if \( d \) is a perfect square.
- Enumerate all \( s \) in 1400–1499, check if \( s \) is a perfect square.
- For each pair, determine the interval for \( y \), constrained by \(\max(d, s)\) and \(\min(d+110, s+110)\).
- For each \( y \) in that interval, check if \( y - d \) and \( y - s \) are perfect squares.
- Keep track of the maximum \( y \).

Given constraints, small ranges, and the necessity for efficiency, we'll generate all candidates systematically and output the maximum found.

```python
import math

def is_square(n):
    root = int(math.isqrt(n))
    return root * root == n

max_y = -1

# Enumerate d in [1300, 1399], check if d is a perfect square
for d in range(1300, 1400):
    if not is_square(d):
        continue
    # Enumerate s in [1400, 1499], check if s is a perfect square
    for s in range(1400, 1500):
        if not is_square(s):
            continue
        low_bound = max(d, s)
        high_bound = min(d + 110, s + 110)
        if low_bound > high_bound:
            continue
        # For each y in [low_bound, high_bound], check the conditions
        for y in range(low_bound, high_bound + 1):
            if is_square(y - d) and is_square(y - s):
                print(y)
                if y > max_y:
                    max_y = y
print(f"Maximum y found: {max_y}")
```
