[write_program]
This problem involves finding primes p, q, r such that their sum is 1000 and computing \((p^2 \times q^2 \times r^2) \bmod 48\). We want to enumerate all possible prime triplets with \(p+q+r=1000\), then compute the value and print each result.

Because the sum is 1000, and p, q, r are prime, the smallest prime is 2, and the largest prime roughly around 1000. To optimize, we can iterate p from small primes upward, q from p upward, and determine r accordingly. Only consider cases where all are prime and sum to 1000.

We prioritize finding the exact result, but in the enumeration, just print each computed result immediately for possible triplets.

```python
def is_prime(n):
    if n < 2:
        return False
    if n in (2, 3):
        return True
    if n % 2 == 0:
        return False
    r = int(n**0.5) + 1
    for i in range(3, r, 2):
        if n % i == 0:
            return False
    return True

# Generate primes up to 1000 for efficiency
primes = [x for x in range(2, 1001) if is_prime(x)]

for p in primes:
    for q in primes:
        if q < p:
            continue  # ensure q >= p
        r = 1000 - p - q
        if r < q:
            continue  # ensure r >= q
        if r in primes:
            # Compute the value and print
            result = (p**2 * q**2 * r**2) % 48
            print(f"p={p}, q={q}, r={r} => Result: {result}")
```
