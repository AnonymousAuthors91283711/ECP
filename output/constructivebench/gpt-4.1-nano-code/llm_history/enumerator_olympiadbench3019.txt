[write_program]
The problem asks for the greatest integer `c` such that there exist integers `a, b, d` with `a + b*c = 20` and `-a + c*d = 19`. To find this, we can eliminate variables and analyze possible `c` values systematically. 

We will:
- Fix small bounds for `c`, e.g., from -50 to 50.
- For each `c`, check if the system has integer solutions for `a, b, d`.
- Print all valid `c` values, and then identify the greatest.

This enumerates candidate `c` values efficiently, avoiding unnecessary computations.

```python
# Enumerate all candidate c values in a small range
# Check for the existence of integers a, b, d satisfying the equations
# a + b*c = 20
# -a + c*d = 19
# For each c, attempt to find solutions, print valid c's
# Finally, determine and print the greatest valid c

valid_c_values = []

for c in range(-50, 51):  # small sample bounds
    found_solution = False
    for a in range(-100, 101):  # moderate bounds for a
        # From first eq: b = (20 - a) / c if c != 0
        if c != 0:
            if (20 - a) % c != 0:
                continue
            b = (20 - a) // c
        else:
            # c == 0, then a must be 20
            if a != 20:
                continue
            b = None  # b not determined
        # From second eq: -a + c*d =19 => c*d = 19 + a
        if c != 0:
            numerator = 19 + a
            if numerator % c != 0:
                continue
            d = numerator // c
            # For c != 0, solution exists
            valid_c_values.append(c)
            print(c)
            found_solution = True
            break
        else:
            # c==0, second eq: -a + 0*d =19 => -a=19 => a=-19
            if a == -19:
                # first eq: a + b*0=20 => -19 + 0=20? no
                continue
    # For c=0, no solution unless a=-19 and first eq: -19=20? no
    
if valid_c_values:
    max_c = max(valid_c_values)
    print("Maximum c:", max_c)
else:
    print("No solutions found")
```
