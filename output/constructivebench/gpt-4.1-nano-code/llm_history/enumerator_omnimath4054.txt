[write_program]
The problem appears to relate to permutations of a range of numbers and the properties of their partial sums modulo n. It looks for all n for which there exists some permutation l of {0, 1, ..., n-1} such that the sums of initial segments are all distinct modulo n.

To help analyze this, we will:
- Consider small values of n,
- Generate permutations of [0, 1, ..., n-1],
- Check the property involving partial sums modulo n,
- Find all n that satisfy the existence condition.

Because the condition involves the permutation and the sums, and we seek all solutions, we will write an enumerator that:
- Limits n to a small range for computational feasibility,
- Checks permutations efficiently,
- Prints each n that satisfies the condition immediately upon discovery.

```python
import itertools

def check_permutation_property(n):
    """Check if there's a permutation of range(n) with distinct partial sums modulo n."""
    for perm in itertools.permutations(range(n)):
        partial_sum_mods = []
        total = 0
        for i, val in enumerate(perm):
            total += val
            mod_value = total % n
            if mod_value in partial_sum_mods:
                break
            partial_sum_mods.append(mod_value)
        else:
            # If we didn't break, all partial sums modulo n are unique
            return True
    return False

def main():
    max_n = 15
    omnimath4054_answer = set()
    for n in range(1, max_n + 1):
        if check_permutation_property(n):
            print("n =", n)
            omnimath4054_answer.add(n)

if __name__ == "__main__":
    main()
```
