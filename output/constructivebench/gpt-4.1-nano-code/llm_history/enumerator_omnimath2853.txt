[write_program]
The problem involves enumerating all 8-tuples of elements from ZMod 5 that satisfy a set of linear equations. Since ZMod 5 has 5 elements, itâ€™s feasible to brute-force all 5^8=390625 combinations, check the conditions, and count the valid solutions. To optimize, we leverage the equations to reduce the search space where possible, but a direct brute-force should be adequate and straightforward here.

The approach:
- Generate all 8-tuples of ZMod 5.
- Check the `valid_grid` conditions for each.
- Count the valid solutions.
- Since the theorem asks for the number mod 100, we compute that and print it.

Below is the implementation adhering to the specifications.

```python
# Enumerate all possible 8-tuples over ZMod 5 and count solutions satisfying valid_grid.
def main():
    mod = 5
    total = 0
    for a in range(mod):
        for b in range(mod):
            for c in range(mod):
                for d in range(mod):
                    for e in range(mod):
                        for f in range(mod):
                            for g in range(mod):
                                for h in range(mod):
                                    # Check the equations
                                    if (a + b + c) % mod == 0 and \
                                       (d + 5 + e) % mod == 0 and \
                                       (f + g + h) % mod == 0 and \
                                       (a + d + f) % mod == 0 and \
                                       (b + 5 + g) % mod == 0 and \
                                       (c + e + h) % mod == 0 and \
                                       (a + 5 + h) % mod == 0 and \
                                       (c + 5 + f) % mod == 0:
                                        print((a, b, c, d, e, f, g, h))
                                        total += 1
    print("Number of solutions mod 100:", total % 100)

if __name__ == "__main__":
    main()
```
