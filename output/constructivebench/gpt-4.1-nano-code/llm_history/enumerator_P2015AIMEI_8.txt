[write_program]
Given the problem's structure, we want to find the least positive integer n such that:

- sum of digits of n (in base 10) is 20
- sum of digits of n + 864 (in base 10) is also 20

We will systematically search small positive integers, checking their digit sums, and those that meet the conditions. To streamline the search:

- Use small n, stop at a threshold (e.g., 50,000) for efficiency.
- For each candidate n, check the sum of digits.
- Check the sum of digits of n + 864.
- Yield n immediately upon verification.

Since the smallest n satisfying both conditions is needed, we iterate from 1 upwards, stopping after reaching a reasonable limit.

```python
def digit_sum(x):
    return sum(int(d) for d in str(x))

LIMIT = 50000
result = None

for n in range(1, LIMIT + 1):
    if digit_sum(n) == 20:
        if digit_sum(n + 864) == 20:
            print(n)  # stream candidate answer immediately
            result = n
            break

if result is not None:
    print(f"Least n: {result}")
else:
    print("No suitable n found within limit")
```
