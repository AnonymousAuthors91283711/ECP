[write_program]
This problem involves finding all natural numbers \(n \ge 1\) such that there exists an integer \(k\) with the property \(k^2 = n \cdot 2^{n+1} + 1\). We want to enumerate candidate values of \(n\) and check whether the right-hand side is a perfect square, to identify all solutions.

Given the nature of the equation, for small values of \(n\), we can compute \(n \cdot 2^{n+1} + 1\) and check if it's a perfect square. We limit our search to a reasonable small range, e.g., \(n \le 50\), for demonstration.

```python
import math

# Enumerate n from 1 to 50
solutions = []
for n in range(1, 51):
    val = n * 2**(n+1) + 1
    sqrt_val = int(math.isqrt(val))
    if sqrt_val * sqrt_val == val:
        solutions.append(n)
        print(f"n = {n}, value = {val}, perfect square of k = {sqrt_val}")
# Output the solutions
if not solutions:
    print("No solutions found in range.")
```
