[write_program]
This problem involves finding the greatest natural number n with a specific property involving divisors and differences. The property states: for each k > 0 and k ≤ n/2, there exist divisors d₁, d₂ of n such that d₂ - d₁ = k.

By carefully analyzing, the key is to identify the largest n where for every k ≤ n/2, such divisors exist.

Let's check small numbers systematically to find candidates, focusing on their divisors and differences.

```python
# Python program to find the greatest n satisfying the condition:
# For every k in 1..n/2, exist divisors d1,d2 of n with d2 - d1 = k

def divisors(n):
    """Return sorted list of divisors of n."""
    divs = []
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            divs.append(i)
            if i != n // i:
                divs.append(n // i)
    return sorted(divs)

def check(n):
    """Check the property for given n."""
    divs = divisors(n)
    divs_set = set(divs)
    max_d = max(divs)
    for k in range(1, n // 2 + 1):
        # For each k, check if exists d1,d2 with d2 - d1 = k
        found = False
        for d1 in divs:
            d2 = d1 + k
            if d2 in divs_set:
                found = True
                break
        if not found:
            return False
    return True

max_n = 0
# We empirically test n up to 200; increase if needed.
for n in range(1, 201):
    if check(n):
        print(f"Candidate n={n} satisfies the property.")
        max_n = n

print(f"Greatest such n (up to 200): {max_n}")
```
