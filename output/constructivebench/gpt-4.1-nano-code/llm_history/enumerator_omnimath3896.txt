[write_program]
Given the problem, it seems to be asking for all natural numbers \( n \geq 2 \) such that the following holds for all \( a, b \in \mathbb{N} \) with \( \gcd(a, n) = 1 \) and \( \gcd(b, n) = 1 \):

\[
a \equiv b \pmod{n} \iff a \times b \equiv 1 \pmod{n}
\]

This condition is known to hold precisely when the multiplicative group modulo \( n \) is *cyclic of order 2*, which is deeply connected to the behavior of units modulo \( n \).

For the enumeration:
- For \( n \geq 2 \), common known values where the property holds are \( n=2,3,4,6,8,12 \).
- Since the problem asks for all such \( n \), we will enumerate small \( n \) up to a limit (say 20) and check whether the property holds.

We will:
- Sample small \( n \),
- Verify the condition by checking all coprime pairs \( (a, b) \),
- If the property holds, output \( n \).

```python
def is_property_holds(n):
    # Check the property for all pairs (a, b) with gcd(a, n)=1 and gcd(b, n)=1
    for a in range(1, n):
        if math.gcd(a, n) != 1:
            continue
        for b in range(1, n):
            if math.gcd(b, n) != 1:
                continue
            # Check if a ≡ b mod n iff a*b ≡ 1 mod n
            left = (a - b) % n
            right = (a * b) % n
            if (left == 0) != (right == 1):
                return False
    return True

import math
max_n = 20
for n in range(2, max_n + 1):
    if is_property_holds(n):
        print(n)
```
