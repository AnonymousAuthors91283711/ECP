[write_program]
The problem involves finding all natural numbers \( n \) with the following properties:

- The decimal representation of \( n \) has at least 6 digits.
- The least significant digit (units digit) is 2.
- The digit in the 6th position from the right (i.e., the 6th digit from the end) is 2.
- \( n \) can be expressed as \( n = (2k) \times (2(k+1)) \times (2(k+2)) \) for some integer \( k \).

Given these properties, the goal is to enumerate possible \( n \) satisfying the above. Specifically:

- \( n \) must be a multiple of 4 (since it's a product involving multiples of 2).
- \( n \) should have at least 6 digits.
- The last digit must be 2, so \( n \equiv 2 \pmod{10} \).
- The digits in specific positions must be 2, especially the units digit and the sixth digit from the right.

The approach:
- Loop over plausible \( k \) values to generate candidate \( n \).
- Check if \( n = 2k \times 2(k+1) \times 2(k+2) \) satisfies the digit constraints.
- For efficiency, limit \( k \) so that \( n \) is within a reasonable number range (since the problem deals with high-digit counts, we can pick a large enough upper bound).

Here's an implementation that enumerates candidate \( n \):

```python
# Since n = 8 * k*(k+1)*(k+2), iterate over k to generate candidates
# Enforce the number to have at least 6 digits
# And satisfy digit constraints: units digit = 2, 6th digit from right = 2

def digits(n):
    return list(map(int, str(n)))

# Generate candidates
limit = 10**7  # limit to keep runtime manageable
for k in range(1, 10**5):
    n = 8 * k * (k + 1) * (k + 2)
    if n < 10**5:
        # number has fewer than 6 digits
        continue
    ds = digits(n)
    # Ensure at least 6 digits
    if len(ds) < 6:
        continue
    # Check least significant digit == 2
    if ds[-1] != 2:
        continue
    # Check sixth digit from the right (index -6) == 2 if it exists
    if len(ds) >=6 and ds[-6] != 2:
        continue
    # If all constraints satisfied, print n
    print(n)
```

This code generates plausible candidates based on the product formula, filters for the digit constraints, and prints each matching \( n \).
