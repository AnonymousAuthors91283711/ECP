[write_program]
This problem asks us to find the size of the set of pairs (a, b) of natural numbers such that a > 0, b > 0, and (gcd(a, b)) * a + b^2 = 10000. We want to enumerate all possible (a, b) satisfying this, then determine how many such pairs exist.

Approach:
- For each a > 0, determine possible gcd values that make the right side manageable.
- For each gcd g, set a = g * k, with k ≥ 1.
- Rewrite the equation in terms of g and k: g * (g * k) + b^2 = 10000
- Since b^2 ≥ 1, limit b by sqrt(10000).
- For each b, check if (10000 - b^2) is divisible by g * a, and whether gcd(a, b) is g.

Efficiently, we'll:
- Iterate over a: since a > 0, up to a maximum based on the equation.
- For each a, iterate over b: 1 ≤ b ≤ 100.
- Check the equation.

```python
import math

# We look for all (a, b) with positive integers, where a > 0, b > 0
# satisfying the equation: gcd(a, b)*a + b^2 = 10000

count = 0
max_a = 100  # limit to a feasible range, since b^2 ≤ 10000 
for a in range(1, max_a + 1):
    for b in range(1, 101):  # b up to 100
        val = (10000 - b ** 2)
        if val <= 0:
            continue
        g = math.gcd(a, b)
        if val % (g * a) == 0:
            # confirm gcd
            if math.gcd(a, b) == g:
                print((a, b))
                count += 1
print("Total solutions:", count)
```
