[write_program]
The problem involves counting arrangements of digits 1 through 9 arranged around a circle, such that certain sum conditions modulo 3 hold. Because this involves permutations and modular conditions, we can enumerate permutations and check the condition efficiently, especially since the set size is small (9 elements).

Steps:
- Define vertices as numbers 0..8 representing positions.
- Digits are 1..9 mapped to 0..8 (since finishing at 0-based for convenience).
- For each permutation, check if the sum of three consecutive digits (mod 3) is 0.
- Count all valid permutations.

Constraints:
- Enumerate permutations explicitly.
- Stream output for each valid permutation.
- Avoid unnecessary calculations by pruning early when conditions fail.

Here's the plan:
- Generate permutations of 0..8.
- Check the sum modulo 3 condition for each.
- Print each valid arrangement immediately.
- Count total.

```python
import itertools

digits = list(range(1, 10))
digits_mod = [d % 3 for d in digits]
valid_perm_count = 0

for perm in itertools.permutations(digits):
    # Check the condition for all consecutive triplets in circular manner
    valid = True
    for i in range(9):
        triplet_sum = digits_mod[perm[i % 9]-1] + digits_mod[perm[(i+1) % 9]-1] + digits_mod[perm[(i+2) % 9]-1]
        if triplet_sum % 3 != 0:
            valid = False
            break
    if valid:
        valid_perm_count += 1
        print(perm)

print(f"Total arrangements: {valid_perm_count}")
```
