[write_program]
The problem asks us to find the smallest natural number \( n \) such that there exists a set of scores meeting specific criteria. Specifically:
- For some \( n \), we have scores \( scores_i \) for \( i \in Fin n \),
- Each score \( scores_i \geq 60 \),
- There is an injective function from 5 students (or items) to these scores, each with score exactly 100,
- The total sum of all scores is \( 76 \times n \),
- We need to find the least such \( n \).

Given the constraints, the main challenge is to find the minimal \( n \) with such a configuration.

Key insights:
- There are 5 scores of 100 each, sum to 500.
- All scores are at least 60.
- Total sum is \( 76 \times n \).
- Since \( 76 \times n \) must at least be as large as the sum of the 5 fixed scores of 100, and scores are at least 60, \( n \) must be at least enough so that the total sum matches the sum of all scores.

Let's set up the enumeration:
- \( n \) starts from the minimal plausible value, i.e., when sum is just enough to accommodate 5 scores of 100 plus the minimal scores of 60 elsewhere.
- We will iterate over \( n \), compute total sum \( 76 \times n \), and see if it's feasible to partition this sum into \( n \) scores, each ≥ 60, with at least 5 scores exactly 100.

Check for the minimal \( n \):

- Total sum = \( 76 n \).
- Sum of 5 scores = 500.
- Remaining scores = \( n - 5 \).
- Sum of remaining scores = \( 76 n - 500 \).
- To assign scores of at least 60 to each remaining one, the total for remaining scores must be at least \( 60 \times (n - 5) \).

Now, for the configuration to be possible:
\[ 76 n - 500 \geq 60 (n - 5) \]
\[ 76 n - 500 \geq 60 n - 300 \]
\[ 16 n \geq 200 \]
\[ n \geq 12.5 \]

Since \( n \in \mathbb{N} \), minimal feasible \( n \geq 13 \).

Let's check \( n = 13 \):
- Sum = \( 76 \times 13 = 988 \),
- Sum of remaining scores = \( 988 - 500 = 488 \),
- Remaining scores count = 8,
- Minimal total for remaining scores = \( 8 \times 60 = 480 \),
- Our total sum of remaining scores (488) ≥ 480, feasible.

Since minimal constraints are satisfied at \( n=13 \), check if we can assign scores:

- For the remaining 8 scores:
  - Assign all scores to 60, total = 480,
  - We have 8 points of excess (488 - 480 = 8), distribute these by increasing some scores above 60, still ≥ 60.

Example assignment:
- 5 scores = 100 (fixed),
- Remaining 8 scores: assign each 60, distribute the remaining 8 points evenly, e.g., leave as is or put some slightly higher, all ≥ 60.

This is feasible.

Similarly, check \( n=12 \):
- Sum = \( 76 \times 12 = 912 \),
- Remaining sum: \( 912 - 500 = 412 \),
- Remaining scores: 7,
- Minimal total for remaining: \( 7 \times 60 = 420 \),
- 412 < 420, impossible.

So, \( n=12 \) isn't feasible. \( n=13 \) is minimal.

Here's an enumeration code that confirms this quickly.

```python
# Enumerate n from 13 upwards until we find the minimal feasible n
for n in range(13, 30):
    total_sum = 76 * n
    fixed_sum = 5 * 100  # sum of the 5 scores fixed at 100
    remaining_scores_count = n - 5
    remaining_sum = total_sum - fixed_sum
    min_remaining = remaining_scores_count * 60
    max_remaining = remaining_scores_count * 100  # assuming upper bounds, not strictly necessary here
    if remaining_sum >= min_remaining:
        # Feasible configuration exists
        print(f"Possible n={n}: total sum={total_sum}, remaining sum={remaining_sum}, remaining count={remaining_scores_count}")
        # Construct example scores
        remaining_scores = [60] * remaining_scores_count
        excess = remaining_sum - min_remaining
        for i in range(excess):
            remaining_scores[i] += 1  # distribute excess
        scores = [100] * 5 + remaining_scores
        print(f"Score configuration example: {scores}")
        # Confirm minimality
        break
```
