[write_program]
The problem appears to involve finding natural numbers n â‰¥ 1 such that the sum of the squares of the digits of n equals n itself. This is related to "autogram" numbers, where the number is equal to some function of its own digits. The typical approach is to check all numbers within reasonable bounds, since the sum of digit squares grows more slowly than n itself for large n, limiting the search space.

We will:
- Generate numbers from 1 upwards,
- Compute the sum of squares of their digits,
- Check if this equals the number,
- Collect all such numbers and print each as they are found.

Since numbers grow large, and the relation tends to hold only for small numbers (only known cases are 1, 89, etc., in related problems), limit the search to a manageable range (say 1 to 1000).

```python
# Enumerate candidates for n from 1 to 1000
# For each n, compute the sum of squares of its digits
# Print n if it satisfies sum of digit squares == n

def sum_of_digit_squares(n):
    return sum(int(d)**2 for d in str(n))

# Search range
max_n = 1000
omnimath3722_answer = []

for n in range(1, max_n + 1):
    sum_sq = sum_of_digit_squares(n)
    if sum_sq == n:
        print(n)
        omnimath3722_answer.append(n)

# Just for verification (not printed): print(omnimath3722_answer)
```
