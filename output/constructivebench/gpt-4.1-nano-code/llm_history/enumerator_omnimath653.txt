[write_program]
This problem involves finding integer pairs (m, n) with m > 0, n > 0, such that k = (m * n + 1) / (m + n), and then counting how many such k values lie in the interval [1, 2004]. We need to enumerate possible k values by systematically trying small m and n, then identify the valid k's.

We'll:
- Iterate over small positive m and n.
- Compute k = (m*n + 1) / (m + n) only if (m + n) divides (m*n + 1) exactly (to get integer k).
- Collect all unique k values within [1, 2004].
- Output each valid k immediately when found.
- At the end, print the count of such k values.

By limiting m and n to a reasonable range, say up to 200, the enumeration remains efficient and manageable.

```python
# Enumerate pairs (m, n) with m, n > 0 up to a threshold
max_mn = 200
valid_ks = set()

for m in range(1, max_mn + 1):
    for n in range(1, max_mn + 1):
        s = m + n
        numerator = m * n + 1
        # Check divisibility to ensure k is integer
        if numerator % s == 0:
            k = numerator // s
            if 1 <= k <= 2004:
                print(k)
                valid_ks.add(k)

# Output the total count of distinct valid k's
print("Total count:", len(valid_ks))
```
