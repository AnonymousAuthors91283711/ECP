[write_program]
The problem involves a sequence defined by a recurrence relation involving the square root of 3, which suggests a connection to rotation or complex numbers. Given the initial condition at n=100, the sequences likely follow a pattern similar to the real parts of a rotated complex number. To find \(a_1 + b_1\), we need to analyze the recurrence backwards or find a closed-form.

Approach:
- Assume sequences are generated by a rotation matrix.
- Forward, the sequences evolve via a rotation by an angle related to \(\sqrt{3}\).
- We can parameterize the sequence using complex numbers for convenience: \(z_n = a_n + i b_n\). The recurrence translates to multiplication by \(e^{i \theta}\).

Given the recurrence:
\[
a_{n+1} = \sqrt{3} a_n - b_n,\quad b_{n+1} = \sqrt{3} b_n + a_n
\]
which corresponds to multiplying \(z_n = a_n + i b_n\) by \(e^{i \theta}\), where \(\tan \theta = 1/\sqrt{3}\), i.e., \(\theta = \pi/6\).

Therefore:
\[
z_{n} = z_{100} \times (e^{i \pi/6})^{n - 100}
\]

We are given \(a_{100} = 2, b_{100} =4\), so:
\[
z_{100} = 2 + 4i
\]

Our goal:
\[
a_1 + b_1 = \Re(z_1) + \Im(z_1)
\]

Calculate:
\[
z_1 = z_{100} \times (e^{i \pi/6})^{1-100} = z_{100} \times e^{i \pi/6 \times (1-100)} = z_{100} \times e^{i \pi/6 \times (-99)}
\]

Now, compute this explicitly.

```python
import math
import cmath

# Known initial at n=100
z_100 = complex(2, 4)

# Rotation angle for each step
theta = math.pi / 6

# Exponent for the rotation from n=100 down to n=1
exponent = 1 - 100  # -99

# Calculate z_1
z_1 = z_100 * cmath.exp(1j * theta * exponent)

# Sum of real and imaginary parts of z_1
result = z_1.real + z_1.imag

print(f"a_1 + b_1 = {result}")
```
