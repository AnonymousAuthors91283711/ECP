[write_program]
The problem asks to find all natural numbers n between 1 and 999 inclusive such that the number of proper divisors of n (excluding n itself, but including 1) is exactly 29. 

Since the set of proper divisors excluding n itself has size exactly 29, this means that the total number of divisors d of n is 30 (because the total divisor count includes n, so proper divisors count is total divisors minus 1).

The key insight is: To have exactly 30 divisors, n must be of a form that yields 30 for the divisor count. The divisor count for n with prime factorization:

n = p1^a1 * p2^a2 * ... * pk^ak

is:

(divisor count) = (a1 + 1) * (a2 + 1) * ... * (ak + 1)

We want this product to be 30.

Factorizations of 30 into integer factors greater than or equal to 2:

- 30 = 30
- 30 = 15 * 2
- 30 = 10 * 3
- 30 = 6 * 5
- 30 = 5 * 3 * 2

Corresponding to these:

1. (a1 + 1) = 30  => a1 = 29, n = p^29
2. (a1 + 1) = 15, (a2 + 1) = 2 => exponents: 14, 1; n = p^14 * q^1
3. (a1 + 1) = 10, (a2 + 1) = 3 => exponents: 9, 2; n = p^9 * q^2
4. (a1 + 1) = 6, (a2 + 1) = 5 => exponents: 5, 4; n = p^5 * q^4
5. (a1 + 1) = 5, (a2 + 1) = 3, (a3 + 1) = 2 => exponents: 4, 2, 1; n = p^4 * q^2 * r^1

Assuming small primes for enumeration (2,3,5,7,...), we generate all such n with n < 1000.

Here's the code:

```python
# Enumerate n with divisor count 30 (i.e., 29 proper divisors) and n < 1000
from itertools import combinations, permutations
from math import prod

primes = [2, 3, 5, 7, 11, 13]

answers = set()

# Form 1: p^29
for p in primes:
    n = p ** 29
    if n < 1000:
        print(n)
        answers.add(n)

# Form 2: p^14 * q^1
for p in primes:
    for q in primes:
        if p != q:
            n = p ** 14 * q
            if n < 1000:
                print(n)
                answers.add(n)

# Form 3: p^9 * q^2
for p in primes:
    for q in primes:
        if p != q:
            n = p ** 9 * q ** 2
            if n < 1000:
                print(n)
                answers.add(n)

# Form 4: p^5 * q^4
for p in primes:
    for q in primes:
        if p != q:
            n = p ** 5 * q ** 4
            if n < 1000:
                print(n)
                answers.add(n)

# Form 5: p^4 * q^2 * r^1
for p in primes:
    for q in primes:
        for r in primes:
            if len({p,q,r}) == 3:
                n = p ** 4 * q ** 2 * r
                if n < 1000:
                    print(n)
                    answers.add(n)
```
