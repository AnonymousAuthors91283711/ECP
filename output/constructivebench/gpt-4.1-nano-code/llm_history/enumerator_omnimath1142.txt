[write_program]
This problem involves complex numbers \(z = x + iy\), with real parts \(x\) and imaginary parts \(y\). The conditions relate to expressions involving \(x\) and \(y\), and the goal is to find triples \((z_1, z_2, z_3)\) satisfying these conditions, and then compute a product involving their real and imaginary parts.

The key observations:
1. The equations involve the symmetric forms:
   \[
   x^3 - 3xy^2 = 2005
   \]
   \[
   y^3 - 3x^2 y = 2004
   \]
2. Recognizing these expressions in terms of \(z = x + iy\):
   \[
   \Re(z^3) = x^3 - 3xy^2
   \]
   \[
   \Im(z^3) = y^3 - 3x^2 y
   \]
   
   So, the points \(\{z_1, z_2, z_3\}\) satisfy:
   \[
   \Re(z)^3 - 3 \Re(z) \Im(z)^2 = 2005,
   \]
   \[
   \Im(z)^3 - 3 \Re(z)^2 \Im(z) = 2004.
   \]
   which implies:
   \[
   z^3 = 2005 + 2004i \quad \text{for each } z \in \{z_1, z_2, z_3\}.
   \]

3. Therefore, the \(z_i\) are the cube roots of \(2005 + 2004i\). The problem reduces to finding all three cube roots of the complex number \(2005 + 2004i\).

4. The product of the three roots is:
   \[
   z_1 z_2 z_3 = (2005 + 2004i),
   \]
   since for polynomial \(w^3 = c\), the roots' product is \(c\).

5. The target expression:
   \[
   (1 - \frac{\Re z_1}{\Im z_1}) (1 - \frac{\Re z_2}{\Im z_2}) (1 - \frac{\Re z_3}{\Im z_3}) 
   \]
   involves the roots' real and imaginary parts.

6. Note that:
   \[
   \frac{\Re z}{\Im z} = \cot \theta,
   \]
   where \(z = r(\cos \theta + i \sin \theta)\). The roots are equally spaced multiples of an argument of the root, differing by \(2\pi/3\).

7. We can explicitly compute the cube roots, considering the principal root and the rotations.

Here's a clear, efficient code to enumerate the three roots of \(2005 + 2004i\), then compute the required product:

```python
import cmath
import itertools

# The complex number we're taking cube roots of
c = complex(2005, 2004)

# Compute the three cube roots of c
roots = []
r, theta = cmath.polar(c)
# The magnitude of cube roots
root_r = r ** (1/3)
# The principal argument
for k in range(3):
    angle = (theta + 2 * cmath.pi * k) / 3
    root = cmath.rect(root_r, angle)
    roots.append(root)

# For each root, compute real and imaginary parts
root_parts = []
for z in roots:
    re_z, im_z = z.real, z.imag
    root_parts.append((re_z, im_z))
    print(f"Root: {re_z} + {im_z}i")

# Compute the product in the target expression
product = 1.0
for re_z, im_z in root_parts:
    if im_z != 0:
        term = 1 - (re_z / im_z)
        product *= term
    else:
        # Handle imaginary part zero: skip or assign large value (unlikely in this context)
        # To keep consistent, we skip roots with zero imaginary part
        pass

print("Product:", product)
```

This code:
- Finds all three cube roots of \(2005 + 2004i\).
- Prints each root immediately as computed.
- Computes the given product involving their real and imaginary parts.
- Avoids hardcoding solutions; enumerates all roots explicitly for the specific complex number.

Note: The exact numeric outputs vary due to floating-point precision, but the code's structure guarantees exploring all possible roots, fulfilling the enumerating condition.
