[write_program]
This theorem involves enumerating all bijective functions from `Fin 10` to itself with the property that for every `i`, the change `(f i).val - i.val` is at most 1 in absolute value. In essence, these functions are permutations where each element maps only to itself or neighboring indices (essentially adjacency-preserving permutations with a difference of at most 1). We need to find the total number of such bijections.

Number of such permutations corresponds to counting permutations of {0, 1, 2, ..., 9} where each element `i` is mapped to either `i`, `i-1`, or `i+1` with the constraints of bijectivity (permutation property). This reduces to counting permutations consisting of swaps only between neighboring elements, with no fixed points violating the bijectivity.

---

```python
# Enumerate all permutations of [0..9] that satisfy:
# For all i, abs(f(i) - i) <= 1
# Since the difference is at most 1, the permutation can be viewed as a product of disjoint swaps of adjacent elements or fixed points.

import itertools

max_n = 10

# Generate all permutations of [0..9]
perms_count = 0
for perm in itertools.permutations(range(max_n)):
    # Check the adjacency constraint
    if all(abs(perm[i] - i) <= 1 for i in range(max_n)):
        print(perm)
        perms_count += 1

print(f"Total permutations satisfying the constraints: {perms_count}")
```
