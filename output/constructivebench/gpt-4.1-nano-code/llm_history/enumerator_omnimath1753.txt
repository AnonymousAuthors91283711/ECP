[write_program]
This appears to be a formal statement of a calculus or optimization problem involving continuous functions, potentially maximization over an interval. However, the code suggests a function `omnimath1753_answer` that returns a pair (possibly an extremum point and value), and the theorem wants to verify that the point `p` maximizes `(p - c)*(1 - p/u)` on `[c, u]`, with some conditions.

For an executable Python script, we need to:
- Choose specific small sample parameters: `u > 0`, `c ≥ 0`, `c ≤ u`.
- Define the function: `f(p) = (p - c) * (1 - p/u)`
- Find its maximum over `[c, u]`.
- Enumerate candidate points (like endpoints plus critical points) to identify the maximum.
- Print each candidate answer immediately as found.

Given the quadratic form, the critical point is where derivative = 0. That derivative is:

`f'(p) = (1 - p/u) - (p - c)/u = 1 - p/u - p/u + c/u = 1 + c/u - 2p/u`

Set `f'(p) = 0`:
`1 + c/u - 2p/u = 0`  
`2p/u = 1 + c/u`  
`p = (u/2) * (1 + c/u) = u/2 + c/2`

Because `p` must lie in `[c, u]`, we check if this critical point is inside `[c, u]`.

Implementation:
- Enumerate `p` at `[c, u, critical_point]` (if valid).
- Compute `f(p)` at these points.
- Print each candidate with its value immediately.
- Identify the maximum value.

Here's the code:

```python
# Choose small sample parameters
u = 10
c = 3
assert u > 0 and c >= 0 and c <= u

# Define the function
def f(p, c, u):
    return (p - c) * (1 - p / u)

# Critical point calculation
critical_p = (u / 2) * (1 + c / u)

# Candidates to check
candidates = [c, u]
if c <= critical_p <= u:
    candidates.append(critical_p)

# Enumerate and print answers
max_value = float('-inf')
max_point = None
for p in candidates:
    val = f(p, c, u)
    print(f"p = {p:.4f}, f(p) = {val:.4f}")
    if val > max_value:
        max_value = val
        max_point = p
print(f"Maximum at p = {max_point:.4f} with value {max_value:.4f}")
```
