[write_program]
The problem asks us to find the greatest natural number \( d \) such that there exists an \( x > 0 \) with \( d = \) sum of digits of \( x + 2019 \) minus the sum of digits of \( x \). 

To approach this, note that the difference depends on how digit sums change when adding 2019. Since adding a small number or crossing digit boundaries can influence the sum, we look for values of \( x \) where the sum difference is maximized. Typically, the digit sum decreases dramatically when crossing a power of 10 boundary or involves carries.

Let's test some candidate values around numbers ending with 999, as they often cause the sum of digits to reset or drop when crossing such boundaries.

Here is the enumeration strategy:
- Choose \( x \) starting from numbers ending with 999 (e.g., 999, 1999, 2999, ...) up to a small upper limit.
- For each \( x \), calculate \( x+2019 \), and compute the difference in digit sums.
- Print each difference to find the maximum candidate.

Since only small samples suffice to conjecture the maximum, we limit checks to \( x \leq 10000 \).

```python
# Enumerate candidate x values near digit boundaries to find the maximum difference in digit sums.
def digit_sum(n):
    return sum(int(d) for d in str(n))

max_diff = 0
max_x = None
# Sample x values around digit boundaries, especially ending with 999.
for x in range(999, 10000, 1000):  # 999, 1999, 2999, ...
    x_plus = x + 2019
    diff = digit_sum(x_plus) - digit_sum(x)
    print(f"x = {x}, x+2019 = {x_plus}, diff = {diff}")
    if diff > max_diff:
        max_diff = diff
        max_x = x
print(f"Maximum difference found: {max_diff} at x = {max_x}")
```

This script enumerates candidate \( x \) values and computes the corresponding digit sum difference, streaming the results to conjecture the maximum \( d \).
