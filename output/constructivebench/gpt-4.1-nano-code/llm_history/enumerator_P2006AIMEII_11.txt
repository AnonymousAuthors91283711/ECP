[write_program]
The problem involves a sequence \(a(n)\) defined recursively with initial conditions, and known values at \(a(28)\), \(a(29)\), and \(a(30)\). We need to find the sum \(\sum_{k=1}^{28} a(k)\) modulo 1000.

Given the recursive relation:
\[
a(n+3) = a(n+2) + a(n+1) + a(n)
\]

with initial conditions:
\[
a(1)=a(2)=a(3)=1
\]

and known values:
\[
a(28)=6,090,307,\quad a(29)=11,201,821,\quad a(30)=20,603,361
\]

We will implement the recurrence to simulate the sequence up to \(a(28)\), and sum the terms \(a(1)\) through \(a(28)\). Since the sequence is defined by recursive relations and the initial terms, we can generate the sequence forward to verify the sum.

The goal is to compute \(\sum_{k=1}^{28} a(k) \bmod 1000\).

Here's the Python code:

```python
# Initialize known initial terms
a = [1, 1, 1]  # a(1), a(2), a(3)
# Known values at indices 28, 29, 30 (just verification)
a_target = {28: 6090307, 29: 11201821, 30: 20603361}

# Generate sequence up to a(28)
for n in range(3, 28):
    next_val = a[n-1] + a[n-2] + a[n-3]
    a.append(next_val)

# Sum from a(1) to a(28)
total_sum = sum(a[:28])

# Output the sum modulo 1000
print(total_sum % 1000)
```

This script:
- Initializes the sequence.
- Computes up to \(a(28)\).
- Sums the sequence.
- Prints the sum modulo 1000 immediately.

Running this code will provide the answer directly.
