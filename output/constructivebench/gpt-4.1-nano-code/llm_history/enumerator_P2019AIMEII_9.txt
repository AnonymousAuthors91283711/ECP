[write_program]
Given the problem, we need to compute the sum over integers \(n\) from 1 to 2018 where the number of divisors of \(n\) is 20 and \(20 \mid n\). For each such \(n\), sum its value, then divide by 20. We need to find the value, but will enumerate candidates and partial solutions.

Steps:
- Enumerate \(n\) from 1 to 2018.
- Check if \(\tau(n) = 20\), where \(\tau(n)\) is the number of divisors.
- Check if \(20 \mid n\).
- Sum these \(n\).

We avoid unnecessary calculations by using prime factorization to find \(\tau(n)\) values efficiently. Since 20 has divisor structures, we can factor potential \(n\) accordingly.

```python
import math

# Function to compute the number of divisors of n
def divisor_count(n):
    count = 1
    for p in range(2, int(math.sqrt(n)) + 1):
        exponent = 0
        while n % p == 0:
            n //= p
            exponent += 1
        if exponent > 0:
            count *= (exponent + 1)
    if n > 1:
        count *= 2
    return count

sum_n = 0
# Enumerate over n from 1 to 2018
for n in range(1, 2019):
    if n % 20 == 0:
        d_count = divisor_count(n)
        # For debugging and understanding, print candidates where d(n) = 20
        if d_count == 20:
            print(f"n = {n} has 20 divisors")
            sum_n += n

print(f"Sum over all such n: {sum_n}")
print(f"Given sum / 20 = {sum_n // 20}")
```

This program:
- Checks each \(n\) for the divisor count using prime factorization.
- Filters \(n\) divisible by 20.
- Sums all qualifying \(n\), then outputs the total and divides by 20 as required.
