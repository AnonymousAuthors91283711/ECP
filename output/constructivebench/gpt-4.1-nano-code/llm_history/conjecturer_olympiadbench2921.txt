[conjecture_answer] Formal Problem Statement: import Mathlib

open Nat

abbrev olympiadbench2921_answer : ℕ := sorry
def digitsMatch (n : ℕ) : Prop := 
  let base2 := n.digits 2
  let base5 := n.digits 5
  base2.length ≥ 4 ∧ base5.length ≥ 4 ∧ 
  base2.take 4 = base5.take 4

instance : DecidablePred digitsMatch := fun n => by
  unfold digitsMatch
  infer_instance

theorem olympiadbench2921 :
  (∑ n in Finset.filter digitsMatch (Finset.range 10000), n) % 10000 = olympiadbench2921_answer := by sorry. Enumerated answers: 0
1
630
631
632
633
634
650
651
652
653
654
3900
3901
3902
3903
3904
3905
3906
3907
3908
3909
3910
3911
3912
3913
3914
3915
3916
3917
3918
3919
3920
3921
3922
3923
3924
Sum of matching numbers modulo 10000: 4221. Expected Answer Type: ℕ
<<<4221>>>