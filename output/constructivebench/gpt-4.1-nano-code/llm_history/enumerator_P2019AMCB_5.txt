[write_program]
This problem involves finding the least natural number `n` such that there exist non-negative integers `r`, `g`, and `b` satisfying the proportional relations: `12 * r = 20 * n`, `14 * g = 20 * n`, and `15 * b = 20 * n`. Essentially, we are looking for the smallest `n` where all three ratios are integral, meaning `r`, `g`, and `b` are integers.

We can rewrite each condition:
- `r = (20/12) * n = (5/3) * n`
- `g = (20/14) * n = (10/7) * n`
- `b = (20/15) * n = (4/3) * n`

For each to be an integer, `n` must be a multiple of the denominators' least common multiple (lcm) to clear the fractions: denominators are 3, 7, and 3 again.

- `r` is integer when `n` multiple of 3
- `g` is integer when `n` multiple of 7
- `b` is integer when `n` multiple of 3

Thus, the minimal `n` where all three are integers is the lcm of 3 and 7, which is 21.

Now, we want to confirm and find the minimal such `n` and corresponding `r`, `g`, `b`:

- At `n = 21`
  - `r = (5/3)*21 = 5*7 = 35`
  - `g = (10/7)*21 = 10*3 = 30`
  - `b = (4/3)*21= 4*7=28`

All are integers. The minimal `n` satisfying the conditions is 21.

Here's the code to verify and enumerate values up to a small number to confirm minimality:

```python
# Python script to find minimal n satisfying the ratio conditions
import math

# Initialize the minimal n as None
min_n = None
min_r, min_g, min_b = None, None, None

# Search up to a reasonable small limit
limit = 50
for n in range(1, limit + 1):
    # Check if r, g, b are integers
    r_num, r_den = 5, 3
    g_num, g_den = 10, 7
    b_num, b_den = 4, 3

    if (r_num * n) % r_den == 0 and \
       (g_num * n) % g_den == 0 and \
       (b_num * n) % b_den == 0:
        r = (r_num * n) // r_den
        g = (g_num * n) // g_den
        b = (b_num * n) // b_den
        print(f"n={n}: r={r}, g={g}, b={b}")

        if min_n is None or n < min_n:
            min_n = n
            min_r, min_g, min_b = r, g, b

print(f"Minimal n = {min_n} with r={min_r}, g={min_g}, b={min_b}")
```
