[write_program]
This problem involves finding the least natural number \( n \) less than 1000 such that:

- \( s_1 = 2n \),
- \( b_2 = s_1 + 50 = 2n + 50 \),
- \( s_2 = 2b_2 = 2(2n + 50) = 4n + 100 \),
- \( s_2 \geq 1000 \),
- and \( 2 (s_2 + 50) \geq 1000 \).

From these, the inequalities:
- \( 4n + 100 \geq 1000 \implies 4n \geq 900 \implies n \geq 225 \),
- \( 2 (4n + 100 + 50) \geq 1000 \implies 2 (4n + 150) \geq 1000 \implies 8n + 300 \geq 1000 \implies 8n \geq 700 \implies n \geq 87.5 \).

The more restrictive inequality is \( n \geq 225 \). We seek the minimal \( n \geq 225 \), less than 1000, satisfying these.

Also, the digits sum condition (sum of digits of \( n \)) gives additional info, and we want to compute the sum of digits for the chosen \( n \).

Let's write a program that tests all \( n \) from 225 up to 999, finds the least \( n \) satisfying the conditions, and outputs it along with its digit sum.

```python
def digits_sum(n):
    return sum(int(d) for d in str(n))

for n in range(225, 1000):
    s1 = 2 * n
    b2 = s1 + 50
    s2 = 2 * b2
    if s2 >= 1000 and 2 * (s2 + 50) >= 1000:
        # Found the candidate; check the digit sum condition
        if digits_sum(n) == n:
            # Implemented for case if their digit sum equals the number itself
            pass
        # According to problem: answer includes sum of digits
        print(f"n = {n}, sum of digits = {digits_sum(n)}")
        # Since it's the minimal n satisfying the inequalities, break
        break
```
