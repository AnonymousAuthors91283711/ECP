[write_program]
The problem asks to find the number of functions \( a : \mathrm{Fin}_7 \to \mathbb{Z} \) such that:
- For each \( i \), \( -1 \leq a(i) \leq 1 \);
- The sum \( \sum_{i=0}^{5} a(i) \times a(i+1) = 4 \).

Given these constraints, the possible values for each \( a(i) \) are \(-1, 0, 1\). Small search space suggests enumerating all functions.

We focus on small integers since large values would violate the sum condition; in particular, only \( -1, 0, 1 \) are feasible. We then check the sum condition and count valid tuples.

```python
# Enumerate all possible sequences of length 7 with elements in {-1,0,1}
# Check the sum of products of consecutive elements up to index 5 equals 4
# Count and print all valid sequences

def main():
    count = 0
    values = [-1, 0, 1]
    for a0 in values:
        for a1 in values:
            for a2 in values:
                for a3 in values:
                    for a4 in values:
                        for a5 in values:
                            for a6 in values:
                                a = [a0, a1, a2, a3, a4, a5, a6]
                                sum_products = sum(a[i] * a[i+1] for i in range(6))
                                if sum_products == 4:
                                    print(a)
                                    count += 1
    print(f"Total valid sequences: {count}")

if __name__ == "__main__":
    main()
```
