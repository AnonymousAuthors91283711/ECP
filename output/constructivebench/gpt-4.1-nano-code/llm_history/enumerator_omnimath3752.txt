[write_program]
This problem involves finding natural numbers \(n\) such that \(30 \mid n\) and the set of divisors of \(n\) has exactly 30 elements. We aim to enumerate candidates, test small values where these conditions may hold, and output possible solutions. The key points:
- \(30 \mid n\) means \(n\) is a multiple of 30.
- The number of divisors of \(n\), denoted \(d(n)\), equals 30.
- We list \(n\) that satisfy these and are multiples of 30.
- To keep code efficient, check candidate \(n\) up to a reasonable threshold.

```python
# Enumerate multiples of 30 and check their number of divisors
import math

def count_divisors(n):
    count = 0
    sqrt_n = int(math.isqrt(n))
    for d in range(1, sqrt_n + 1):
        if n % d == 0:
            count += 2 if d * d != n else 1
    return count

# Set threshold for enumeration
max_n = 1000
for n in range(30, max_n + 1, 30):
    d = count_divisors(n)
    if d == 30:
        print(f"n = {n}, number of divisors = {d}")
```
