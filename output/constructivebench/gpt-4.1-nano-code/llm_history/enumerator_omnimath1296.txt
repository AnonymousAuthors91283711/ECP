[write_program]
The problem defines a set of natural numbers \( s \) associated with functions \( n : \mathbb{N} \to \mathbb{N} \), satisfying a particular sum condition over a range, and asks for the greatest such \( s \). To support conjecturing, I'll implement a Python script that enumerates candidate functions \( n(i) \) with small values, computes the sums, and checks which \( s \) can be formed, streaming solutions immediately when they satisfy the conditions. Since the problem involves sums from 1 to 2003 and an affine relation, I'll limit ranges to small values to find candidates for the maximum \( s \).

```python
# Enumerate possible functions n(i) for i in [1..max_i], with small values
# Compute sum over range(1, 2004) and sum over Icc[2..2003], i.e. [2..2003]
# For simplicity, assume n(i) can be 0 or 1, as higher values likely scale sums above small integers
# We look for functions n(i) satisfying sum_{i=1}^{2003} (i)*(n(i)) = 2003
# and compute s = sum_{i=2}^{2003} (i-1)*n(i)

max_i = 10  # Small sample size for enumeration
best_s = -1
best_n = None

# Generate binary functions n(i) in [0,1] for i in [1..max_i]
from itertools import product
for n_vals in product([0, 1], repeat=max_i):
    total_sum = sum((i+1) * n_val for i, n_val in enumerate(n_vals))
    if total_sum == 2003:
        # Compute s
        s = sum((i - 1) * n_vals[i] for i in range(1, max_i))
        print(f"n(i): {n_vals}, sum: {total_sum}, s: {s}")
        if s > best_s:
            best_s = s
            best_n = n_vals

# Print the maximum found s
print(f"Maximum s found: {best_s} with n: {best_n}")
```
