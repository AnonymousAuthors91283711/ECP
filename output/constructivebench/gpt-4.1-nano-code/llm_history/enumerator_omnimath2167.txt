[write_program]
This problem involves roots of unity and integer coefficients, seeking the minimal absolute value of a complex expression involving roots of unity and integers when \(\omega\) is a primitive 3rd root of unity. Since \(\omega^3=1\), and \(\omega \neq 1\), \(\omega\) is either \(\exp(2\pi i/3)\) or \(\exp(4\pi i/3)\), both complex conjugates with \(\text{Re}(\omega) = -1/2\) and \(\text{Im}(\omega) = \pm \sqrt{3}/2\).

The goal is to find integers \(a, b, c\) such that \(a b c=60\), and minimize \(|a + b \omega + c \omega^2|\).

We can fix \(\omega = e^{2\pi i/3} \approx -0.5 + 0.866i\). Enumerate small factor combinations of 60 into integers, compute the complex absolute value, and find the minimum.

```python
import itertools
import math

# Define the primitive 3rd root of unity
from math import cos, sin, sqrt

omega = complex(-0.5, sqrt(3)/2)
omega_conj = complex(-0.5, -sqrt(3)/2)

# All divisors of 60 (positive and negative)
divisors = [-60, -30, -20, -15, -12, -10, -6, -5, -4, -3, -2, -1,
             1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60]

min_abs_value = None
min_params = None

# Generate all factorizations of 60 into three integers (a, b, c)
for a in divisors:
    for b in divisors:
        if a * b == 0:  # avoid zero to prevent zero product
            continue
        c = 60 // (a * b)
        if a * b * c == 60 and c in divisors:
            # Evaluate the complex magnitude
            value = a + b * omega + c * omega_conj
            abs_value = abs(value)
            print(f'a={a}, b={b}, c={c}, |value|={abs_value:.4f}')
            if (min_abs_value is None) or (abs_value < min_abs_value):
                min_abs_value = abs_value
                min_params = (a, b, c)

print(f"\nMinimum absolute value: {min_abs_value:.4f}")
print(f"Achieved with a={min_params[0]}, b={min_params[1]}, c={min_params[2]}")
```
