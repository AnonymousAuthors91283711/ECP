[write_program]
The problem is to find the least positive integer `c` such that:
- `c > 0`
- There exist two numbers `a` and `b` that are cubes sums (each `a` and `b` can be expressed as `x^3 + y^3`)
- Their product `a * b = c`
- `c` itself cannot be expressed as a sum of two cubes (it's not a sum of two cubes).

This resembles classic problems related to sums of two cubes, notably involving numbers that can be written as sums of two cubes in more than one way (such as Ramanujan's number 1729), but with an additional condition that `c` itself cannot be expressed as a sum of two cubes.

I'll write a Python program to:
- Generate all `a` and `b` which are sums of two cubes with small integers.
- Check their product `a * b`.
- Filter for the minimal such `c` where `c` is not a sum of two cubes.

We'll limit the search to small integers for efficiency (e.g., x, y, in -10..10):

```python
# Enumerate sums of two cubes within small range, store in a dictionary for quick lookup
# Aim to find the smallest positive c = a * b where a and b are sum of two cubes,
# but c is not a sum of two cubes itself.

def is_sum_of_two_cubes(n, limit=10):
    # Check if n can be represented as x^3 + y^3 for some integers x,y with |x|, |y| <= limit
    for x in range(-limit, limit+1):
        for y in range(-limit, limit+1):
            if x**3 + y**3 == n:
                return True
    return False

# Generate all sums of two cubes with small integers
sums_of_cubes = set()
for x in range(-10, 11):
    for y in range(-10, 11):
        sums_of_cubes.add(x**3 + y**3)

# Collect candidates where both a and b are sums of two cubes, and their product is positive
candidates = []

for a in sums_of_cubes:
    for b in sums_of_cubes:
        c = a * b
        if c > 0:
            # Check if c can be be expressed as sum of two cubes
            if not is_sum_of_two_cubes(c):
                # Immediate print for partial results
                print(f"Found candidate c = {c} = {a} * {b}, both a, b are sums of two cubes, c not sum of two cubes.")
                candidates.append(c)

if candidates:
    min_c = min(candidates)
    print(f"\nThe smallest such c is {min_c}")
else:
    print("No candidate found within parameters.")
```
