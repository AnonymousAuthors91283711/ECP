[write_program]
This problem involves finding pairs \((n, p)\) of positive integers such that the sum of integers from 1 to \(n\) equals three times the sum of squares of integers from 1 to \(p\). Formally, 

\[
\sum_{i=1}^n i = 3 \sum_{j=1}^p j^2,
\]

with the additional constraints:
- \(n > 0\),
- \(p > 0\),
- \(p\) is prime.

We can use the formulas:
\[
\sum_{i=1}^n i = \frac{n(n+1)}{2},
\]
\[
\sum_{j=1}^p j^2 = \frac{p(p+1)(2p+1)}{6}.
\]

Hence, the main equation simplifies to:
\[
\frac{n(n+1)}{2} = 3 \cdot \frac{p(p+1)(2p+1)}{6} \implies n(n+1) = p(p+1)(2p+1)/1,
\]
or more precisely,
\[
n(n+1) = p(p+1)(2p+1)/2,
\]
since the original sums are scaled by denominators.

Let's iterate over small prime \(p\) values and find integer \(n\) satisfying the equation.

```python
from sympy import prime, primerange, isprime
import math

# Enumerate small prime p
primes = list(primerange(2, 50))  # small sample for p

for p in primes:
    # Compute the RHS of the equation: p*(p+1)*(2p+1)/2
    rhs = p * (p + 1) * (2 * p + 1) // 2
    
    # We need n(n+1) = rhs
    # Solve quadratic n^2 + n - rhs = 0
    discriminant = 1 + 4 * rhs
    
    sqrt_discriminant = math.isqrt(discriminant)
    if sqrt_discriminant ** 2 == discriminant:
        # roots: (-1 +- sqrt_discriminant) / 2
        for sign in (-1, 1):
            numerator = -1 + sign * sqrt_discriminant
            if numerator % 2 == 0:
                n = numerator // 2
                if n > 0:
                    print(f"p={p} (prime), n={n}")
```
