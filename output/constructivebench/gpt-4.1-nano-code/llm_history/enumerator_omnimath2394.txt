[write_program]
The problem asks to compute a ratio of counts of certain derangements with restrictions. To assist in conjecturing and proving the true answer, I will enumerate all derangements of 0..100 (n=101), then filter for the specified conditions, and compute the ratio. Since full enumeration for 101 is infeasible, I'll demonstrate with small n (e.g., n=5) to infer the pattern. The code will dynamically handle the small sample, then estimate or conjecture for the larger case.

```python
from itertools import permutations

# For small n, we will enumerate all permutations, identify derangements,
# then filter by the specific conditions.

def is_derangement(p):
    return all(i != p[i] for i in range(len(p)))

def counts_for_small_n(n):
    perms = permutations(range(n))
    derangements = []
    valid_assignments = []
    for p in perms:
        if is_derangement(p):
            derangements.append(p)
            # Conditions: f 0 ≠ 1 and f 0 ≠ 2, f⁻¹ 1 ≠ 0 and f⁻¹ 2 ≠ 0
            # Convert to Python indexing for f
            # f0 = p[0]
            f0 = p[0]
            # f_inv(1) = index of 1 in p
            f_inv_1 = p.index(1)
            # f_inv(2) = index of 2 in p
            f_inv_2 = p.index(2)
            if f0 != 1 and f0 != 2 and f_inv_1 != 0 and f_inv_2 != 0:
                valid_assignments.append(p)
    total_der = len(derangements)
    total_valid = len(valid_assignments)
    ratio = total_valid / total_der if total_der > 0 else 0
    print(f"n={n}: total derangements={total_der}, valid={total_valid}, ratio={ratio}")
    return ratio

# Test small sample n=5
ratio_small = counts_for_small_n(5)
print(f"Estimated ratio for n=5: {ratio_small}")

# For larger n=101, the pattern might approach a certain limit.
# But since enumeration is impossible for n=101 directly, 
# we conjecture based on small n results.
```

This code will output the ratios for small samples, assisting in formulating a conjecture about the ratio for n=101.
