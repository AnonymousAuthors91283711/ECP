[write_program]
The problem is to find the number of functions \( a: \text{Fin } 5 \to \mathbb{N} \), where each \( a(i) \le 7 \), and the sum \( \sum_{i=0}^4 2^{a(i)} \) is divisible by 5. We want to count how many such functions exist.

Since the domain is finite and small, the enumeration approach is feasible:

- \( a(i) \) ranges from 0 to 7.
- For each assignment, check the sum's divisibility by 5.
- Count all functions satisfying these conditions.

We will generate all possible functions \( a \), compute the sums, check divisibility, and keep count.

To make the code efficient, we'll use list comprehensions and immediate output during enumeration.

```python
# Enumerate all functions a: 5 elements with values from 0 to 7
# Count how many have sum of 2^(a(i)) divisible by 5

count = 0
for a0 in range(8):
    for a1 in range(8):
        for a2 in range(8):
            for a3 in range(8):
                for a4 in range(8):
                    total = sum(2 ** a for a in [a0, a1, a2, a3, a4])
                    if total % 5 == 0:
                        count += 1
                        print(f"a = {[a0, a1, a2, a3, a4]}, sum = {total}")
print("Total count:", count)
```
