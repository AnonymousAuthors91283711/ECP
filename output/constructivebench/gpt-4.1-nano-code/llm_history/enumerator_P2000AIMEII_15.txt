[write_program]
This problem involves analyzing a sum involving cotangent functions for n ∈ ℕ, where the sum's value equals 1 for the least n satisfying the conditions. The key is recognizing a pattern or known identity involving cotangent sums, especially related to roots of unity or angles partitioned by π/(n+1) and π/n.

Given the sum's structure:  
∑_{i=1}^n (1 / [cot(iπ/(n+1)) - cot(iπ/n)])

and the requirement to find the least n for which this sum equals 1, the approach is to test small values of n, compute the sum, and identify when it hits 1 exactly.

We'll do this by enumerating small n values, computing the sum with high precision, and stopping at the first n where the sum equals 1. The code will also print each candidate sum as it is evaluated to stream partial results.

```python
import math

def cot(x):
    return 1 / math.tan(x)

def evaluate_sum(n):
    total = 0.0
    for i in range(1, n+1):
        angle1 = i * math.pi / (n + 1)
        angle2 = i * math.pi / n
        denom = cot(angle1) - cot(angle2)
        if abs(denom) < 1e-14:
            # Handle potential division by zero or very small denominator
            return None
        total += 1 / denom
    return total

n = 1
while True:
    sum_value = evaluate_sum(n)
    if sum_value is not None:
        print(f"n={n}, sum={sum_value}")
        if abs(sum_value - 1) < 1e-12:
            answer = n
            print(f"Found n={n} where sum is approximately 1.")
            break
    n += 1
```
