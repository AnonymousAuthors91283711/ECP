[write_program]
This problem involves number theory, specifically divisors and divisibility related to the natural number `n`. From the hypotheses, `n` has exactly 60 divisors, and `7 * n` has exactly 80 divisors.

Key observations:
- The number of divisors function, when applied to prime factorization, is multiplicative.
- The change from `n` to `7 * n` suggests the exponent of 7 in `n` plays a crucial role.
- The set `{k | 7^k ∣ n}` contains all `k` such that `7^k` divides `n`.

Goal:
- Find the greatest `k` such that `7^k` divides `n`.

Approach:
- Assume `n = 7^a * m`, where `gcd(m, 7) = 1`.
- Prime divisor counts: For `n`, divisors count is `(a + 1) * D_m`, where `D_m` is the divisor count of `m`.
- For `7 * n = 7^{a+1} * m`, divisors count is `(a + 2) * D_m`.
- Given `|divisors(n)| = 60`, `|divisors(7 * n)| = 80`.

Set up equations:
- `(a + 1) * D_m = 60`
- `(a + 2) * D_m = 80`

Subtract:
- `(a + 2) * D_m - (a + 1) * D_m = 20`
- `D_m = 20`

Back to first:
- `(a + 1) * 20 = 60` → `a + 1 = 3` → `a = 2`

Check:
- `D_m = 20`
- `a = 2`, so the highest power of 7 dividing `n` is 2.

Answer:
- The greatest `k` with `7^k ∣ n` is `2`.

---

```python
# Enumerate possible exponents 'a' for 7^a dividing n based on divisor count constraints
possible_a = []

# For a, find values that satisfy (a+1)*D_m=60 and (a+2)*D_m=80
# Divisibility counts are integers and D_m > 0
for a in range(0, 60):
    D_m1 = 60 // (a + 1)
    if 60 % (a + 1) != 0:
        continue
    D_m2 = 80 // (a + 2)
    if 80 % (a + 2) != 0:
        continue
    if D_m1 == D_m2:
        possible_a.append(a)

# Find the maximum 'a' among possible candidates
if possible_a:
    max_a = max(possible_a)
    print(max_a)
else:
    print("No solution found")
```
