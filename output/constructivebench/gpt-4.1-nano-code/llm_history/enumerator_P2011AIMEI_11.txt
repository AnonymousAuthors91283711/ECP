[write_program]
The problem asks to find the sum of all distinct remainders `r` obtained from `2^n % 1000` for all natural numbers `n`, then analyze the sum modulo 1000.

Since the remainders repeat periodically due to modular exponentiation properties, the task is to:

- Determine the cycle length of `2^n mod 1000`.
- Sum all unique remainders in one full cycle.
- The sum of all remainders in all cycles is the sum of that cycle repeated.
- Find the sum modulo 1000 to get the answer.

Let's proceed with:
- Computing the cycle of remainders.
- Summing the distinct remainders.
- Watching for the cycle repetition to optimize.

Here's the Python code:

```python
# Enumerate the cycle of remainders of 2^n mod 1000
# and compute the sum of the unique residuals.
# Exploit the periodicity due to modular exponentiation.

def main():
    mod = 1000
    seen = set()
    cycle = []
    base = 2
    current = 1
    n = 0

    while True:
        current = (current * base) % mod
        if current in seen:
            break
        seen.add(current)
        cycle.append(current)
        n += 1
    
    total_sum = sum(cycle)
    print(total_sum)

    # Calculate the answer as total sum mod 1000
    answer = total_sum % 1000
    print(f"Answer = {answer}")

if __name__ == "__main__":
    main()
```
