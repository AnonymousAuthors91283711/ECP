[write_program]
The problem involves three two-digit numbers p, q, r, each with distinct digits, and certain sum and product conditions involving their digits. To aid in conjecture and potential proof, I'll write a Python script to generate all triplets (p, q, r) satisfying the digit uniqueness and the conditions specified, within the range 10 to 99, and print each candidate as soon as it meets the criteria. For efficiency, I will precompute digit sums, check digit uniqueness, and verify both conditions. The script will not perform hardcoded checks, just enumeration and filtering.

```python
# Enumerate possible (p, q, r) triplets with two-digit numbers, unique digits, and satisfying the conditions.

def digits(n):
    return [int(d) for d in str(n)]

def is_unique_digits(numbers):
    used = set()
    for num in numbers:
        d = digits(num)
        if len(d) != len(set(d)):
            return False
        if used.intersection(set(d)):
            return False
        used.update(d)
    return True

for p in range(10, 100):
    for q in range(10, 100):
        for r in range(10, 100):
            # Check digit uniqueness across p, q, r
            d_p = digits(p)
            d_q = digits(q)
            d_r = digits(r)
            if len(set(d_p + d_q + d_r)) != 6:
                continue
            sum_p = sum(d_p)
            sum_q = sum(d_q)
            sum_r = sum(d_r)
            product = p * q * r
            sum_digits_product = sum_p + sum_q + sum_r

            # Condition: p * q * (digits 10 r).sum = p * (digits 10 q).sum * r
            cond1 = p * q * sum_r == p * sum_q * r
            # Condition: p * (digits 10 q).sum * r = (digits 10 p).sum * q * r
            cond2 = p * sum_q * r == sum_p * q * r

            if cond1 and cond2:
                print((p, q, r))
```
