[write_program]
This problem involves finding all numbers less than 1000 that can be expressed as the product of squares of two distinct primes, i.e., \( n = p^2 q^2 \) with \( p, q \) primes and \( p \neq q \). Our goal is to enumerate all such \( n \), then determine the total count.

Here's the reasoning:
- Generate small prime numbers.
- For each pair of distinct primes, compute \( p^2 q^2 \).
- Check if the result is less than 1000.
- Collect all such numbers, print each as it's found.
- Count the total number of such numbers, then print this number as the answer.

No hardcoded answers; instead, we do full enumeration and print intermediate results.

```python
# Enumerate primes up to a limit where p^2*q^2 < 1000
# Small primes: 2, 3, 5, 7, 11, 13, 17, 19 (since 23^2=529, and 529*n >= 1000 for larger primes)

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

primes = [p for p in range(2, 20) if is_prime(p)]
numbers_found = set()

for i, p in enumerate(primes):
    p2 = p ** 2
    for q in primes[i+1:]:
        q2 = q ** 2
        n = p2 * q2
        if n < 1000:
            print(n)
            numbers_found.add(n)

# Output total count
print("Count:", len(numbers_found))
```
