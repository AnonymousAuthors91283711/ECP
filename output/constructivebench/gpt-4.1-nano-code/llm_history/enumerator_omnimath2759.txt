[write_program]
Let's analyze the problem: we want to count the number of divisors \(d\) of 128 such that:
- \(d\) divides 128 (\(d \mid 128\))
- \(d\) is a perfect square (\(d = k^2\))
- \(d > 1\)

Since 128 = \(2^7\), its divisors are \(2^k\) with \(k=0,\dots,7\). The divisors are: 1, 2, 4, 8, 16, 32, 64, 128.

The perfect square divisors are those where \(k\) is even: \(k=0,2,4,6\).
Corresponding divisors: \(2^0=1\), \(2^2=4\), \(2^4=16\), \(2^6=64\).

Excluding \(d>1\), we consider 4, 16, 64.

Thus, there are 3 such divisors.

We will write a Python script that enumerates these divisors programmatically for small, clear elucidation.

```python
# Enumerate divisors of 128 that are perfect squares greater than 1
def count_square_divisors(n, max_div):
    result = 0
    # divisors of n are powers of 2 up to 2^7 for 128
    for k in range(max_div + 1):
        d = 2 ** k
        if n % d == 0 and d > 1:
            # check if d is a perfect square
            root = int(d ** 0.5)
            if root * root == d:
                print(d)  # stream each found divisor
                result += 1
    return result

# Parameters for 128: divisors are 2^k, with k=0..7
count = count_square_divisors(128, 7)
print(f"Total count: {count}")
```
