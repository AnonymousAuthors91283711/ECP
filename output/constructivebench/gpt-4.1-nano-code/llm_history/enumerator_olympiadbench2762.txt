[write_program]
This problem involves counting how many 6-digit numbers between 100000 and 999999 have digits forming two decreasing triplets: the first three digits (d1 > d2 > d3) and the last three digits (d4 > d5 > d6). The task is to enumerate all such numbers.

Approach:
- For each valid decreasing triplet (d1, d2, d3) and (d4, d5, d6), combine them to form a 6-digit number.
- Generate all decreasing triplets, then combine them, and count the valid combinations.

Because the constraints are small (digits 0-9), we enumerate all decreasing triplets and generate the numbers directly.

```python
# Enumerate all decreasing triplets for the first three digits
first_triplets = []
for d1 in range(9, 0, -1):  # d1 from 9 to 1
    for d2 in range(d1 - 1, -1, -1):
        for d3 in range(d2 - 1, -1, -1):
            first_triplets.append((d1, d2, d3))

# Enumerate all decreasing triplets for the last three digits
second_triplets = []
for d4 in range(9, -1, -1):
    for d5 in range(d4 - 1, -1, -1):
        for d6 in range(d5 - 1, -1, -1):
            second_triplets.append((d4, d5, d6))

# Combine and count valid numbers
count = 0
for (d1, d2, d3) in first_triplets:
    for (d4, d5, d6) in second_triplets:
        number = d1 * 100000 + d2 * 10000 + d3 * 1000 + d4 * 100 + d5 * 10 + d6
        if 100000 <= number <= 999999:
            print(number)
            count += 1
print("Total count:", count)
```
