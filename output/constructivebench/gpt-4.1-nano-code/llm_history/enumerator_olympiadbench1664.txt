[write_program]
The problem involves analyzing a coloring of points {0,...,n-1} into two colors and counting certain triples with conditions. To explore possible values, we'll generate colorings and count the specified triples, aiming to find n satisfying the total == 2007 condition. We'll focus on small n for computability and check their triples. This code attempts small n (from 1 to 20) with all possible 2-colorings.

```python
from itertools import product

# Function to count triples summing to zero mod n with same color
def count_triples(n, coloring):
    red = [i for i, c in enumerate(coloring) if c]
    blue = [i for i, c in enumerate(coloring) if not c]
    red_count = len(red)
    blue_count = len(blue)
    same_color_triples = red_count**3 + blue_count**3

    total = 0
    # Generate all triples
    for t in product(range(n), repeat=3):
        s = (t[0] + t[1] + t[2]) % n
        c1, c2, c3 = coloring[t[0]], coloring[t[1]], coloring[t[2]]
        if c1 == c2 == c3:
            total += 1
    return same_color_triples, total

# Explore small n with all colorings
for n in range(1, 21):
    found = False
    for coloring in product([False, True], repeat=n):
        red_count = sum(coloring)
        blue_count = n - red_count
        same_color_triples, total = count_triples(n, coloring)
        if total == 2007:
            print(f"n={n}, coloring={coloring}, red={red_count}, blue={blue_count}")
            print(f"Same color triples={same_color_triples}, total={total}")
            found = True
    if found:
        # If any such coloring produces total=2007, record n as a candidate
        print(f"Candidate n={n} found.")
```
