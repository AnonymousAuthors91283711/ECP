[write_program]
The problem asks for the number of integer-coordinate points \((p_1,p_2)\) within a circle of radius 2009 centered at the origin, i.e., the number of integer solutions to \(p_1^2 + p_2^2 \leq 2009^2\). Computing this exactly by brute force enumeration of all lattice points within the bounds is feasible given the radius.

Here's an efficient approach:
- Fix \(p_1\) in the range \(-2009\) to \(2009\).
- For each \(p_1\), compute the maximum \(|p_2|\) such that \(p_1^2 + p_2^2 \leq 2009^2\).
- Sum over all valid \(p_2\) for each \(p_1\).

This approach relies on integer bounds and avoids unnecessary calculations. The code will print each count contribution as it goes, then output the total.

```python
# Enumerate all integer points within the circle of radius 2009.
radius = 2009
radius_sq = radius * radius
total_points = 0

for p1 in range(-radius, radius + 1):
    max_p2 = int((radius_sq - p1 * p1) ** 0.5)
    # Number of integer p2 satisfying p1^2 + p2^2 <= radius^2 is 2*max_p2 + 1 (including zero)
    count_for_p1 = 2 * max_p2 + 1
    total_points += count_for_p1
    print(f"p1={p1}, count={count_for_p1}")

print("Total number of lattice points:", total_points)
```
