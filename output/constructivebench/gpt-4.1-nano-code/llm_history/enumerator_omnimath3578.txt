[write_program]
This problem appears to be a mathematical theorem involving natural numbers, greatest common divisors, and some inequalities. The goal is to find all possible natural numbers n for which the specified conditions hold, specifically where 0 < n and there exist positive integers a, b, c such that:
- gcd(gcd(a, b), c) = 1
- n = gcd(a*b + c, a*c - b)
- n = a + b + c

Given this, the task is to enumerate all such n, focusing on small values, and print solutions inline, without hardcoding. To do this efficiently, we'll:
- Fix small ranges for a, b, c (say 1 to 20)
- For each combination, check the conditions
- When conditions are satisfied, print n and the tuple (a, b, c)

Here's the code:

```python
# We will brute-force over small a, b, c to find all possible n satisfying the conditions.
# Prioritize exact values of n, and only output once all conditions are checked.
# This approach ensures we explore small candidates efficiently.

from math import gcd

# Define a small search space
max_value = 20

# Use a set to record found solutions
solutions = set()

for a in range(1, max_value + 1):
    for b in range(1, max_value + 1):
        for c in range(1, max_value + 1):
            # Check if a, b, c satisfy the conditions
            g = gcd(gcd(a, b), c)
            n_candidate = gcd(a * b + c, a * c - b)
            sum_abc = a + b + c
            if g == 1 and n_candidate == sum_abc and sum_abc > 0:
                print(f"Found n = {sum_abc} for (a, b, c) = ({a}, {b}, {c})")
                solutions.add(sum_abc)

# Stream all solutions immediately as they are found during iteration
# No specific extraction of min/max needed unless the problem asks.
```
