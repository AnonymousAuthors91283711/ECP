[write_program]
The problem involves analyzing a set of positive integers \( K \) derived from a function involving \(\theta\) with \(0 < \theta < \frac{\pi}{2}\). Specifically, for each \(\theta\), a side length and a value \(K_{val}\) are defined, then \(K\) is either the floor or ceiling of \(K_{val}\). The goal is to enumerate possible integer values of \(K\) that satisfy the property for some \(\theta\), and find the total count.

Since the problem is complex and continuous over \(\theta\), we sample \(\theta\) over a small interval, compute \(K_{val}\), and then determine whether \(\lfloor K_{val} \rfloor\) or \(\lceil K_{val} \rceil\) produces valid \(K\). To keep calculations manageable, I will iterate over \(\theta\) in a small step size, evaluate the values, and output the potential \(K\).

---

```python
import math

# Small step size to sample theta between a small positive and pi/2 (excluding endpoints)
theta_steps = [i * 0.01 for i in range(1, int((math.pi/2) / 0.01))]
K_values = set()

for theta in theta_steps:
    sin_theta = math.sin(theta)
    if sin_theta == 0:
        continue
    side = math.sqrt(math.sqrt(2006) / sin_theta)
    K_val = side**2 * math.sin(math.pi/2 - 2*theta)  # sin(pi/2 - 2θ) = cos(2θ)
    cos_2theta = math.cos(2*theta)
    # The value is likely close to this K_val
    floor_K = math.floor(K_val)
    ceil_K = math.ceil(K_val)
    # Add to set if positive
    if floor_K > 0:
        print(f"theta={theta:.2f}, K≈{K_val:.2f}, floor={floor_K}")
        K_values.add(floor_K)
    if ceil_K > 0:
        print(f"theta={theta:.2f}, K≈{K_val:.2f}, ceil={ceil_K}")
        K_values.add(ceil_K)

# Output the total count of unique K candidates
print(f"Total distinct candidates: {len(K_values)}")
```
