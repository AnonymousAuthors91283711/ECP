[write_program]
This problem involves finding a unique quadruple (A, B, C, D) of digits satisfying specific inequalities and an algebraic equation related to rearrangements of these digits. The main goal is to enumerate possible quadruples that satisfy the conditions, particularly for a given A in the range 1 to 9.

Key observations:
- A is a single digit, with 1 ≤ A ≤ 9.
- B, C, D are digits with 0 < D < C < B < A, ensuring strict inequalities.
- The difference between the two 4-digit numbers formed from (A, B, C, D) in different orders equals a third number's permutation sum.  
- The problem asks for the *unique* such quadruple and the sum B + C + D.

Approach:
- Iterate over A from 1 to 9
- For each A, iterate over B, C, D respecting the inequalities
- Check the specified equation
- If valid, print and keep track of the sum B + C + D
- Since the problem states "exactly one" solution, once found, output the sum

This will help determine the answer without hardcoding, in a more efficient manner for this enumeration.

```python
# Enumerate possible quadruples matching the constraints
for A in range(1, 10):
    for B in range(1, A):
        for C in range(1, B):
            for D in range(1, C):
                # Construct the numbers
                num1 = A * 1000 + B * 100 + C * 10 + D
                num2 = D * 1000 + C * 100 + B * 10 + A
                num3 = B * 1000 + D * 100 + A * 10 + C
                diff = num1 - num2
                if diff == num3:
                    print(f"Solution found for A={A}, B={B}, C={C}, D={D}")
                    answer = B + C + D
                    print(f"B + C + D = {answer}")
```
