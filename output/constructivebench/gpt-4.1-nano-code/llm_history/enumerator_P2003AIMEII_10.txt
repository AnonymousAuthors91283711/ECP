[write_program]
The problem seems to involve finding the greatest integer \( s \) such that there exist non-negative integers \( a, b \) with \( a + b = s \), \( a - b = 60 \), and the sum of their square roots equals the square root of some non-square \( k \). 

Step-by-step:
- From \( a + b = s \) and \( a - b = 60 \), solving these give:
  \[
  a = \frac{s + 60}{2}, \quad b = \frac{s - 60}{2}
  \]
- Both \( a \) and \( b \) must be integers \(\Rightarrow s + 60 \) and \( s - 60 \) are even, so \( s \) must be even.
- Constraints:
  - \( a, b \ge 0 \Rightarrow s \ge 60 \)
  - \( a = \frac{s+60}{2} \ge 0 \Rightarrow s \ge -60 \), but since \( s \ge 60 \), this is always true.
- Sum of square roots:
  \[
  \sqrt{a} + \sqrt{b} = \sqrt{k}
  \]
  and \( k \) is not a perfect square.

To find the greatest \( s \), iterate downwards from the maximum reasonable value, checking whether the sum of roots is a perfect square of some \( k \) that is not a perfect square itself.

Implementing:
- Check for \( s \) starting from a large value downward.
- For each \( s \), compute \( a, b \).
- Compute \( r = \sqrt{a} + \sqrt{b} \), check if \( r^2 = k \) for some integer \( k \), then verify if \( k \) is not a perfect square.
- If conditions satisfy, output \( s \).

```python
import math

# Start from a large candidate and go downward
max_s = 1000  # arbitrary large for testing
max_found = None

for s in range(max_s, 59, -2):  # s must be >=60 and even
    a = (s + 60) / 2
    b = (s - 60) / 2
    if a < 0 or b < 0:
        continue
    sqrt_a = math.sqrt(a)
    sqrt_b = math.sqrt(b)
    sum_roots = sqrt_a + sqrt_b
    k = sum_roots ** 2
    # Check if k is close to an integer within a tolerance
    k_int = round(k)
    if abs(k - k_int) < 1e-9:
        # Check if k_int is a perfect square
        if int(math.isqrt(k_int)) ** 2 != k_int:
            # Found a candidate
            print(f"s = {s}, a = {a}, b = {b}, sqrt sum = {sum_roots:.6f}, k = {k_int}")
            max_found = s
            break  # If only want the greatest, break after first found
```
