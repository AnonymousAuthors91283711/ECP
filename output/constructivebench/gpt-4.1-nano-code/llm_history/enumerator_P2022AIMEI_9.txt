[write_program]
This problem deals with counting arrangements and their fractions, suggesting combinatorial calculations and simplifications. To approach this, Iâ€™ll implement a Python script that computes:

- total arrangements: \( \frac{12!}{2^6} \)
- even arrangements: \( 5 \times 2^5 \times 6! \)
- the fraction \(\frac{\text{even arrangements}}{\text{total arrangements}}\)

Then, the program simplifies the fraction to its lowest terms (using gcd) and prints the numerator and denominator immediately, satisfying the streaming requirement.

Here is the program:

```python
import math

# Compute factorials
fact_12 = math.factorial(12)
fact_6 = math.factorial(6)

# Calculate total arrangements = 12! / 2^6
total_arrangements = fact_12 // (2 ** 6)

# Calculate even arrangements = 5 * 2^5 * 6!
even_arrangements = 5 * (2 ** 5) * fact_6

# Simplify the fraction even_arrangements / total_arrangements
g = math.gcd(even_arrangements, total_arrangements)
m = even_arrangements // g
n = total_arrangements // g

# Output the answer immediately
print("m =", m)
print("n =", n)
```
