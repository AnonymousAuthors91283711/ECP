[write_program]
The problem appears to involve solving a linear equation to find a specific number of points ("nextPoints") that satisfy a relation involving the number of previous games. Let's analyze the given equation:

Given:
\[ 20 \times \text{previousGames} + 36 = 21 \times (\text{previousGames} + 1) \]

From this, we can find the value of previousGames:
\[ 20 \times previousGames + 36 = 21 \times previousGames + 21 \]
\[ 20 \times previousGames - 21 \times previousGames = 21 - 36 \]
\[ -1 \times previousGames = -15 \]
\[ previousGames = 15 \]

Now, the theorem states:
\[ 20 \times previousGames + 36 + nextPoints = 22 \times (previousGames + 2) \]

Substituting previousGames = 15:
\[ 20 \times 15 + 36 + nextPoints = 22 \times (15 + 2) \]
\[ 300 + 36 + nextPoints = 22 \times 17 \]
\[ 336 + nextPoints = 374 \]
\[ nextPoints = 38 \]

Now, to match the problem's instruction: we should write code that, given a previousGames satisfying the initial equation, computes nextPoints, and potentially verify or enumerate solutions.

Here's the Python code:

```python
# The code calculates previousGames based on the initial equation
# and then computes the nextPoints accordingly.

# Find previousGames satisfying the first condition
# 20 * previousGames + 36 = 21 * (previousGames + 1)
# Solve for previousGames
for previousGames in range(1, 100):  # arbitrary upper bound for exploration
    if 20 * previousGames + 36 == 21 * (previousGames + 1):
        nextPoints = 22 * (previousGames + 2) - (20 * previousGames + 36)
        print(f"previousGames: {previousGames}, nextPoints: {nextPoints}")
        # Since the equation is linear, only one solution is expected; break if found
        break
```
