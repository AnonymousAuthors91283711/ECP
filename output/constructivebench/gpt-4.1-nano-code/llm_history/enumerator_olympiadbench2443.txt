[write_program]
This problem asks us to find 2-digit prime numbers (from 10 to 99) satisfying the condition (t^2 + 10u = u^2 + 10t), where t = n / 10 (tens digit) and u = n % 10 (units digit). To solve efficiently, we will enumerate all 2-digit numbers, check the condition, and filter primes.

Key points:
- Enumerate n from 10 to 99.
- Extract t and u.
- Check the given equation.
- Check primality.
- Print each candidate as soon as it qualifies.
- Use small sample values to verify.

```python
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

for n in range(10, 100):
    t = n // 10
    u = n % 10
    # Check the condition: t^2 + 10*u == u^2 + 10*t
    if t**2 + 10*u == u**2 + 10*t:
        if is_prime(n):
            print(n)
```
