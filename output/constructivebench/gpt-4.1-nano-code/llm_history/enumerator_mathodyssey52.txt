[write_program]
The problem involves a recurrence relation that defines a sequence \(a_n\):

\[
a_{n+1} = \frac{\sqrt{3}\, a_n + 1}{\sqrt{3} - a_n}
\]

with initial condition \(a_1 = 1\), and we need to evaluate the sum:

\[
\sum_{n=1}^{2022} a_n
\]

Since the sequence has a pattern defined via a rational recurrence, a typical approach involves examining the sequence's behavior or transforming it to simplify the recurrenceâ€”possibly by substitution or recognizing a pattern.

For the purpose of enumerating possible values, observe the sequence for small n, then check if a pattern emerges. Because a direct closed-form might be complicated, we can generate the sequence terms numerically, printing each \(a_n\), and summing as we go, to help conjecture the sum's behavior.

Here's the Python code that:
- Defines the recurrence,
- Generates the sequence up to \(n=2022\),
- Prints each term as it is computed,
- Keeps track of the sum.

This allows us to see the sequence's values step-by-step and gain insight into the sum.

```python
import math

# Initialize variables
a = 1.0  # a_1 = 1
sqrt3 = math.sqrt(3)
sum_a = 0.0

# Number of terms
N = 2022

# Generate sequence and sum
for n in range(1, N+1):
    print(f"a_{n} = {a}")
    sum_a += a
    # Compute next term
    numerator = sqrt3 * a + 1
    denominator = sqrt3 - a
    a = numerator / denominator

print(f"Sum of first {N} terms: {sum_a}")
```
