[write_program]
This problem asks to compute the sum of ⌊2012/d⌋ for d from 1 to 2012. A common approach is to recognize that the sum involves divisors and the floor function, which can be efficiently computed using the property that the values ⌊2012/d⌋ change only at certain points. We can implement an efficient enumeration over these point segments.

We'll use the idea that for each integer value v = ⌊2012/d⌋, the range of d where this is constant is [floor(2012/(v+1))+1, floor(2012/v)]. By looping over these ranges, we can sum all contributions without iterating over all d individually, enhancing efficiency.

The code directly computes the sum and prints the value.

```python
# Enumerates the sum of floor(2012/d) for d in 1..2012 efficiently
def sum_floor_divisions(n):
    total = 0
    d = 1
    while d <= n:
        val = n // d
        # The maximum d for current floor value
        max_d = n // val
        if max_d > n:
            max_d = n
        total += val * (max_d - d + 1)
        d = max_d + 1
    return total

# Compute and print the sum
answer = sum_floor_divisions(2012)
print(answer)
```
