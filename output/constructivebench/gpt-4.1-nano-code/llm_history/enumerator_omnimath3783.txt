[write_program]
The problem asks us to find all integer pairs (a, b) with a > 0, b > 0 satisfying the divisibility conditions: \(b^{619} \mid a^{1000} + 1\) and \(a^{619} \mid b^{1000} + 1\).

Given the nature of the problem and the high exponents, directly enumerating all solutions is infeasible. Instead, we can consider small positive values for a and b, check the conditions for each pair, and see if there are any solutions.

Key points:
- Both a and b are positive integers.
- For small test values, check divisibility conditions.
- Since the exponents are large, small values are most feasible.
- We will limit to a small range (e.g., 1 to 10) for quick enumeration.

Here's the program:

```python
# Enumerate small positive integer pairs (a, b)
# Check the divisibility conditions:
# b^619 divides a^{1000} + 1 and a^619 divides b^{1000} + 1
# Due to large exponents, only small a, b are feasible to test.

import math

def divisible(divisor, dividend):
    return dividend % divisor == 0

# Limit for enumeration
LIMIT = 10

for a in range(1, LIMIT + 1):
    for b in range(1, LIMIT + 1):
        # Compute b^619 and check divisibility
        b_pow = b ** 619
        a_pow = a ** 619
        a_pow_1000 = a ** 1000
        b_pow_1000 = b ** 1000

        # Check conditions
        # To handle large exponents safely, check divisibility directly
        if divisible(b_pow, a_pow + 1) and divisible(a_pow, b_pow + 1):
            print((a, b))
```

This code quickly enumerates small pairs, tests the conditions, and prints solutions. It leverages simple divisibility checks without attempting to handle extremely large numbers beyond the small limit, aligning with the problem's enumeration and partial result streaming requirement.
