[write_program]
This problem asks to find all primes \( p \) such that within the interval \( [1, p] \), there exists exactly one \( a \), with \( 1 \leq a \leq p \), satisfying \( (a^3 - 3a + 1) \equiv 0 \pmod{p} \). We need to enumerate prime \( p \), check for solutions \( a \), and find primes with exactly one such \( a \).

Since directly enumerating for all \( p \) up to infinity isn't feasible, and "exactly one" solution is required, we will:
- Generate primes within some small range.
- For each prime, check all \( a \in [1, p] \) for solutions.
- Record those with exactly one solution.

This code:

- Uses a small bound like \( p \leq 100 \) for demonstration.
- Prints each qualifying prime immediately, as per the requirements.

```python
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def enumerate_primes(limit):
    for n in range(2, limit+1):
        if is_prime(n):
            yield n

# Set an upper bound for enumeration
UPPER_BOUND = 100

for p in enumerate_primes(UPPER_BOUND):
    solutions = []
    for a in range(1, p+1):
        if (a**3 - 3*a + 1) % p == 0:
            solutions.append(a)
    if len(solutions) == 1:
        print(p)
```
