[write_program]
The problem asks for the smallest n such that there exists a function \(a : \mathrm{Fin}\, n \to \mathbb{N}\), with each \(a_i\) between 1 and 15, satisfying the sum of their factorials modulo 10000 equals 2001. We need to find the minimal such n and explicitly construct one candidate when possible.

Approach:
- Test increasing values of n starting from 1,
- For each n, generate all possible n-tuples with entries in 1..15,
- Check if the sum of factorials modulo 10000 equals 2001,
- Output the first (smallest n) satisfying conditions along with an example \(a\).

Because of combinatorial explosion, limit sample generation to small n (say up to 6) and not all combinations. Use a heuristic: fix n, generate some combinations randomly or systematically, and check if the condition is met. For simplicity, enumerate all combinations up to a certain small n.

Here's the Python code:

```python
import math
from itertools import product

# Precompute factorials for 1..15 to avoid repetition
factorials = [math.factorial(i) % 10000 for i in range(16)]

# Function to compute sum of factorials mod 10000
def sum_factorials_mod(a):
    return sum(factorials[x] for x in a) % 10000

# Search for minimal n, up to a small limit (e.g., 6)
max_n = 6
target = 2001

for n in range(1, max_n + 1):
    # Generate all possible tuples in [1..15]^n
    # For larger n, this quickly becomes huge; so limit to small n
    found = False
    for a in product(range(1, 16), repeat=n):
        if sum_factorials_mod(a) == target:
            print(f"n = {n}")
            print(f"Sequence: {a}")
            # Since we're searching for minimal n, stop when found
            found = True
            break
    if found:
        break
```

This code efficiently searches for the smallest n with a candidate sequence where the sum of factorials modulo 10000 equals 2001. It prints the first such solution found for minimal n, fulfilling the requirements.
