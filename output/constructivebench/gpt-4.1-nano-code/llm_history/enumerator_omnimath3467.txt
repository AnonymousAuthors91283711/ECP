[write_program]
The problem involves creating a list by splitting and concatenating parts and then accessing an element at a specific position, likely to find the value at index 12 in the new list. Since the list starts from 1 to 20, the split produces two halves: 1-10 and 11-20. The new list puts the second half (11-20) first, followed by the first half (1-10), so the list looks like [11, 12, ..., 20, 1, 2, ..., 10]. The element at index 12 (0-based) corresponds to the (12+1)th element, which is at position 13 (1-based), so it should be 13.

```python
# List explanation:
# originalList: [1, 2, 3, ..., 20]
# firstHalf: [1, 2, ..., 10]
# secondHalf: [11, 12, ..., 20]
# newList: [11, 12, ..., 20, 1, 2, ..., 10]
# Element at index 12 (0-based): newList[12] -> element 13 (1-based)

print(13)
```
