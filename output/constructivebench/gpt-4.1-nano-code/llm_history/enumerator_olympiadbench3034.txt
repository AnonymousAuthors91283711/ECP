[write_program]
This problem asks us to find all natural numbers \( N \) such that:
- \( N > 0 \),
- the number of digits of \( 2N \) in base 10 is exactly one more than the number of digits of \( N \),
and the total count of such \( N \) up to our answer is 2011.

Since the number of digits in base 10 for a number \( N \) is \( \lfloor \log_{10} N \rfloor + 1 \), the condition can be rewritten:

\[ \text{digits 10}(2N) = \text{digits 10}(N) + 1 \]

which implies:

\[ \text{length of } 2N = \text{length of } N + 1 \]

The lengths of \( N \) and \( 2N \) in decimal indicate:

\[ 10^{k} \leq N < 10^{k+1} \]
and for \( 2N \):

\[ 10^{k+1} \leq 2N < 10^{k+2} \]

From the inequalities:

\[ 2N \geq 10^{k+1} \Rightarrow N \geq \frac{10^{k+1}}{2} \]
\[ 2N < 10^{k+2} \Rightarrow N < \frac{10^{k+2}}{2} \]

Since \( N \) is in the range:

\[ 10^{k} \leq N < 10^{k+1} \]

the intersection of these ranges for each \( k \) gives the candidate \( N \) values.

Implementing this reasoning, we will:

- For each digit length \( k \), find the intersection range for \( N \),
- Count how many \( N \) satisfy this,
- Continue until we've enumerated 2011 numbers.

We will generate all such \( N \) up to the point where we reach the 2011th answer.

```python
# Enumerate numbers N satisfying the digit length condition:
# digits(2N) = digits(N) + 1, i.e., length(2N) = k + 1 when length(N) = k
# For each length k, find N in [10^k, 10^{k+1}) that satisfy:
# N >= 10^{k} and N >= (10^{k+1})/2
# N < 10^{k+1} and N < (10^{k+2})/2

limit = 400  # total tokens limit
answers = []
count = 0
k = 1  # start with 1-digit numbers
while count < 2011:
    start_N = max(10**k, int((10**(k+1))/2))
    end_N = 10**(k+1)
    for N in range(start_N, end_N):
        answers.append(N)
        count += 1
        print(N)
        if count >= 2011:
            break
    k += 1
```
