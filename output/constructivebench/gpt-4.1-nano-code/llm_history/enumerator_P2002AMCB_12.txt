[write_program]
This problem involves finding all integers n such that (n / (20 - n)) is a perfect square rational number, with the condition that 20 - n ≠ 0. To enumerate solutions, we can select small integer candidates around 0 to 40 (because of the denominator 20 - n). We consider the rational number n/(20 - n) and check whether it is a perfect square (i.e., equals (k)^2 for some rational k). We can limit k to small denominators, say |k| ≤ 10, since larger values produce fractions that might be less relevant in a high school context.

The approach:
- Iterate n from, say, -10 to 50 (to include possible negative and small positive values).
- For each n, ensure 20 - n ≠ 0.
- For each candidate n, test rational squares (k) within a small range.
- Check whether n/(20 - n) equals k^2, and if so, output n and the corresponding k.

This efficiently enumerates potential solutions with minimal computations and immediately streams each solution.

```python
# Enumerate possible integer n around the region of interest
limit = 50
solutions = []

for n in range(-10, limit + 1):
    denom = 20 - n
    if denom == 0:
        continue
    val = n / denom  # rational value of n/(20 - n)
    # Check small rational squares k^2 with numerator and denominator in small range
    for num in range(0, 11):
        for den in range(1, 11):
            k_squared = num / den
            # To compare, cross-multiplied:
            # n/denom == k_squared
            # n/denom == num/den --> (n * den) == (num * denom) ??
            # But better to check if val == k_squared directly
            if abs(val - k_squared) < 1e-9:
                print(f"n={n}, k=({num}/{den})^{0.5}")
                solutions.append((n, num, den))
```
This code streams solutions for n where n/ (20 - n) is a perfect square rational with small numerator and denominator for k.
