[write_program]
This problem asks to find the number of integer solutions (p.1, p.2) to the equation p.1² - p.2² = 2000². This reduces to factoring the difference of squares:

p.1² - p.2² = (p.1 - p.2)*(p.1 + p.2) = 2000².

Thus, for each factor pair of 2000², say (d, k) with d * k = 2000², we have:

p.1 - p.2 = d  
p.1 + p.2 = k

Adding the two:

2 p.1 = d + k => p.1 = (d + k)/2,

and similarly,

p.2 = (k - d)/2.

For p.1 and p.2 to be integers, (d + k) and (k - d) must be even, so d and k must be both even or both odd.

Given 2000² is a perfect square, and 2000 is even, 2000² is divisible by 4, ensuring certain parity considerations.

Since 2000 = 2³ * 5³, 2000² = 2⁶ * 5⁶.

The total number of divisors is: (6+1)*(6+1) = 7 * 7 = 49.

Each divisor d pairs with k = (2000²)/d.

To find all solutions:

- Iterate over divisors d of 2000².
- Compute k = 2000² / d.
- Check if d and k are both even or both odd.
- If yes, compute p.1 and p.2 and verify they are integers.

Finally, count all such solutions.

Let's implement this in Python with small sample divisors for efficiency, focusing on divisors of 2000².

```python
# Enumerate all divisors of 2000^2 efficiently
# 2000 = 2^3 * 5^3, so 2000^2 = 2^6 * 5^6
from math import prod

# Generate divisors from prime factorization
prime_factors = [(2, 6), (5, 6)]
divisors = [1]

for prime, exponent in prime_factors:
    new_divisors = []
    for d in divisors:
        for e in range(exponent + 1):
            new_divisors.append(d * (prime ** e))
    divisors = new_divisors

solutions_count = 0
for d in divisors:
    k = (2000 ** 2) // d
    # Check parity condition: both d and k are even or both odd
    if (d + k) % 2 == 0:
        p1 = (d + k) // 2
        p2 = (k - d) // 2
        # p1, p2 are integers by construction
        solutions_count += 1
        print((p1, p2))
print("Total solutions:", solutions_count)
```
