[write_program]
The problem appears to analyze functions \(f: \mathbb{Z} \to \mathbb{Z}\) satisfying a certain relation involving the sum of three integers summing to zero and the sum of their images. To understand the possible functions, we need to find all \(f\) such that:

\[
a + b + c = 0 \implies f(a) + f(b) + f(c) = a^2 + b^2 + c^2
\]

This is a common functional equation that often implies certain linearity or quadratic constraints.

**Approach:**
- Test small integer triples satisfying \(a + b + c = 0\).
- Enumerate possible functions \(f\) on small values to infer the general pattern.
- Because the problem involves quadratic sums, a natural guess is that \(f(n) = n^2\). Checking this guess against the condition.

Due to the properties, functions like \(f(n) = n^2\) or \(f(n) = -n^2\) are candidate solutions, possibly along linear functions.

Let's implement an enumeration for small integer values to conjecture solutions.

```python
# Enumerate candidate functions f: Z -> Z with small outputs to observe patterns
# We test for functions f(n) = n^k with small k to see which satisfy the condition on small triples

def check_f(f, triples):
    for a, b, c in triples:
        if a + b + c != 0:
            continue
        lhs = f(a) + f(b) + f(c)
        rhs = a**2 + b**2 + c**2
        if lhs != rhs:
            return False
    return True

# Generate small triples with sum zero
triples = []
for a in range(-2, 3):
    for b in range(-2, 3):
        for c in range(-2, 3):
            if a + b + c == 0:
                triples.append((a,b,c))

# Candidate functions: quadratic (square), negative quadratic, linear
# Check for f(n)=n^2
def f_square(n): return n**2
print("Testing f(n) = n^2")
if check_f(f_square, triples):
    print("f(n) = n^2 satisfies the condition.")

# Check for f(n) = -n^2
def f_neg_square(n): return -n**2
print("Testing f(n) = -n^2")
if check_f(f_neg_square, triples):
    print("f(n) = -n^2 satisfies the condition.")

# Check for f(n)=k*n for some small k
for k in [-2, -1, 1, 2]:
    def f_linear(n, k=k): return k * n
    print(f"Testing f(n) = {k}*n")
    if check_f(f_linear, triples):
        print(f"f(n) = {k}*n satisfies the condition.")

# The code outputs which candidate functions satisfy the property for small integers.
# The actual proof would involve algebraic analysis globally.
```

This code tests small degrees of functions to find those compatible with the condition, aiding in conjecture.
