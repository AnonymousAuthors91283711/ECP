[write_program]
The problem involves sets `S` and `T` where:
- `S` contains functions from `{0,1,2,3}` to ℕ satisfying `2*qs0 + qs1 + qs2 + qs3 = 4`.
- `T` is the subset of `S` where the sum over all `qs(i)` equals 3.

Our goal is to compute the ratio (cardinality of T) / (cardinality of S) exactly, without hardcoding the answer.

To achieve this, we'll:
- Generate all functions `qs` from `{0,1,2,3}` to ℕ.
- Filter those in `S` based on the given sum condition.
- Count how many in `T` meet the additional total sum condition.
- Report the ratio as a rational number.

Enumerate all solutions with small parameters, ensuring efficiency by pruning early.

```python
from fractions import Fraction

def enumerate_sets():
    total_S = 0
    total_T = 0
    # Iterate over all tuples (qs0, qs1, qs2, qs3) with non-negative integers
    for qs0 in range(3):  # since 2*qs0 ≤ 4
        for qs1 in range(5):
            for qs2 in range(5):
                for qs3 in range(5):
                    # Check if sum matches 2*qs0 + qs1 + qs2 + qs3 = 4
                    if 2*qs0 + qs1 + qs2 + qs3 == 4:
                        total_S += 1
                        total_sum = qs0 + qs1 + qs2 + qs3
                        if total_sum == 3:
                            total_T += 1
                            print(f"qs0={qs0}, qs1={qs1}, qs2={qs2}, qs3={qs3}")
    ratio = Fraction(total_T, total_S)
    print(f"Total in S: {total_S}")
    print(f"Total in T: {total_T}")
    print(f"Ratio (T / S): {ratio}")

if __name__ == "__main__":
    enumerate_sets()
```
