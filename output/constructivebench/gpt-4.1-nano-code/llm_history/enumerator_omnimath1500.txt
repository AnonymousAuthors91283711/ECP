[write_program]
This problem defines a recursive sequence \(a(n)\) for \(n \ge 1\), with initial condition \(a(1) = 1\). For \(n > 1\), it states:

\[ a(n) = \left\lfloor \frac{n^3}{a(n-1)} \right\rfloor \]

The goal is to compute \( a(999) \). Since the sequence is defined by a recursive relation involving the previous term, we can simulate this sequence starting from \(a(1) = 1\).

By computing the sequence iteratively for each \(n\) from 2 up to 999, we can determine \(a(999)\). This approach is efficient and straightforward.

Below is a Python program that performs this calculation efficiently and prints the value of \(a(999)\):

```python
# Initialize the sequence with the first term
a = [0, 1]  # Using 1-based indexing; a[1] = 1

# Compute the sequence up to n=999
for n in range(2, 1000):
    prev = a[n-1]
    # Compute the next term using the given relation
    next_val = (n**3) // prev
    a.append(next_val)
    # Print each intermediate term if desired (not necessary here)
    # print(f"a({n}) = {next_val}")

# Output the value at n=999
print("a(999) =", a[999])
```
