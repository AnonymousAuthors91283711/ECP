[write_program]
The problem appears to involve finding specific coefficients \(a\) and \(b\) such that the polynomial \(X^3 - a X^2 + b X - a\) has certain properties related to its roots, with a minimal \(a\), and a unique \(b\) satisfying the polynomial equation at its roots.

Given the structure, the key is to:
- Explore small values of \(a\),
- For each \(a\), find \(b\) such that the polynomial has roots with specific properties,
- Identify the minimal \(a\) satisfying these constraints,
- For that minimal \(a\), determine the corresponding \(b\).

Because the polynomial depends on roots and parameters, and the problem appears to focus on minimal \(a\), we can iterate over small values of \(a\) (like from near zero upwards), solve for \(b\), and check the root conditions.

Here's an efficient enumeration approach:

```python
import numpy as np

# Explore small positive values for a to find minimal a satisfying conditions
# For each a, solve the polynomial for roots and check conditions on b

# Range of 'a' values to scan
a_values = np.linspace(0.01, 10, 1000)  # small start, up to 10

for a in a_values:
    # Polynomial coefficients: X^3 - a X^2 + b X - a
    # For each a, find candidate b based on roots
    # We look for b such that the polynomial has roots satisfying certain conditions
    # There is a relation between coefficients and roots (Vieta):
    # sum_roots = a
    # product_of_roots = -a
    # sum_of_pairwise_products = b

    # For each possible root x, b must satisfy:
    # eval x(...) = 0
    # Translate into relations for roots

    # Since the polynomial is cubic, we can try candidate roots from approximations
    # For simplicity, try roots in some small range
    for root_guess in np.linspace(-10, 10, 200):
        # Compute b based on the root
        # From the polynomial: root^3 - a*root^2 + b*root - a = 0
        # => b*root = -root^3 + a*root^2 + a
        if root_guess != 0:
            b_candidate = (-root_guess**3 + a*root_guess**2 + a) / root_guess
            # Check if b_candidate > 0 for the problem condition
            if b_candidate > 0:
                # Verify if the polynomial with these b and a has roots matching the conditions
                # Roots of the polynomial: do they satisfy the symmetry?
                # Since it's symmetric, check roots numerically
                coeffs = [1, -a, b_candidate, -a]
                roots = np.roots(coeffs)
                # Check if roots satisfy the polynomial
                if np.allclose(np.polyval(coeffs, roots), 0, atol=1e-8):
                    # Additional conditions:
                    # For the minimal a, store answer
                    # For the problem's structure, once found, output immediately
                    print(f"a: {a:.3f}, b: {b_candidate:.3f}")
                    # Assuming minimal a is wanted, break upon first such found
                    # To find the minimal a, continue scanning until no smaller a matches
                    # Here, just break after first found for the smallest a
                    break
    else:
        continue
    break
```
