[write_program]
This problem asks us to find all natural numbers \( n \geq 1 \) such that there exists an integer \( m \) satisfying \( m^2 = n^2 + 3^n \). Essentially, for each \( n \), we want to see if \( n^2 + 3^n \) is a perfect square.

Let's analyze the problem:
- For each \( n \geq 1 \), compute \( S = n^2 + 3^n \).
- Check if \( S \) is a perfect square, i.e., if there exists an integer \( m \) with \( m^2 = S \).

We'll limit \( n \) to small values to find solutions, as the problem appears computationally manageable for small \( n \).

```python
# Enumerate candidate n values from 1 up to a reasonable bound (e.g., 20)
# For each, check if n^2 + 3^n is a perfect square
# Print all solutions found

import math

def is_perfect_square(x):
    root = int(math.isqrt(x))
    return root * root == x

for n in range(1, 21):
    S = n**2 + 3**n
    if is_perfect_square(S):
        m = int(math.isqrt(S))
        print(f"n = {n}, m = {m}, m^2 = {m**2}, n^2 + 3^n = {S}")
```
This code tests small \( n \) to find solutions where \( n^2 + 3^n \) is a perfect square, assisting in conjecturing the general solution.
