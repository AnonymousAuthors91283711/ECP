[write_program]
The problem involves computing the measure of a subset A of the square I × I, where I = [-20, 10], specifically the measure of points where the product p.1 * p.2 > 0. (i.e., the quadrants outside the axes). The key is to analyze the geometric region and compute its Lebesgue measure explicitly. Since A consists of two diagonal strips in the rectangle, and the total measure of I × I is straightforward, we can approximate what the measure should be.

Given the symmetry and the fact that measure of product sets is the product of measures, we only need to compute the measure of parts where p.1 > 0, p.2 > 0, and p.1 < 0, p.2 < 0, then sum these areas.

```python
# Program to compute the measure (area) of regions in the rectangle [-20,10] x [-20,10]
# where p.1 * p.2 > 0, i.e., both positive or both negative.

# Define interval bounds
x_min, x_max = -20, 10
y_min, y_max = -20, 10

# Length of the interval
x_length = x_max - x_min  # 30
y_length = y_max - y_min  # 30

# Compute areas of quadrants within I:
# Quadrant 1: p.1 > 0 and p.2 > 0
# p.1 in [0,10], p.2 in [0,10]
area_q1 = max(0, min(x_max, 10) - max(x_min, 0)) * max(0, min(y_max, 10) - max(y_min, 0))
# Quadrant 3: p.1 < 0 and p.2 < 0
# p.1 in [-20,0], p.2 in [-20,0]
area_q3 = max(0, min(x_max, 0) - x_min) * max(0, min(y_max, 0) - y_min)

# Total area where p.1 * p.2 > 0
total_area = area_q1 + area_q3

# Total area of I × I
full_area = x_length * y_length

# Since measure.prod is the product measure with the Lebesgue measure, the measure of A is total_area.
# The measure over I × I is full_area.

# Compute ratio
ratio = total_area / full_area

print("Quadrant 1 area:", area_q1)
print("Quadrant 3 area:", area_q3)
print("Total area where p.1 * p.2 > 0:", total_area)
print("Total area of I × I:", full_area)
print("Ratio of measure:", ratio)
```

This code estimates the measure of the set where p.1 * p.2 > 0 within the square [-20,10] × [-20,10], which can be used to approximate the original measure calculation.
