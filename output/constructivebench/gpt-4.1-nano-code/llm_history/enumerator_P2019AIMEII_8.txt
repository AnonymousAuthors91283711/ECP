[write_program]
The problem involves a complex polynomial of degree 2018 with specific constraints on the coefficients and a value at a particular complex point. We need to determine the value of f(1) mod 1000 based on these constraints. Given that the coefficients are bounded above and the polynomial evaluates to a specific complex number at a certain point, we approach this by sampling feasible coefficients to identify the value of f(1) mod 1000.

Since the bounds are small (coefficients ≤ 2019), we can iterate over small plausible values for a, b, c, and test the polynomial's value at the given complex point, then compute f(1).

The key is:
- a, b, c are integers with a, b, c ≤ 2019
- f(z) = a*z^2018 + b*z^2017 + c*z^2016
- f evaluated at z = (1 + √3 * i)/2 equals a specific complex number
- We will iterate over small candidate values to narrow down the possible value of f(1), then output the result.

Here's the code:

```python
import math
import cmath

# Define the specific point
z = (1 + math.sqrt(3)*1j) / 2

# The target evaluation at z
target = 2015 + 2019*math.sqrt(3)*1j

# Due to the nature of the problem, coefficients are bounded
max_coeff = 2019

# Initialize answer variable
results = []

# Iterate over small plausible coefficient values
for a in range(0, max_coeff+1):
    for b in range(0, max_coeff+1):
        for c in range(0, max_coeff+1):
            # Compute polynomial at z
            val = a * z**2018 + b * z**2017 + c * z**2016
            # Check if close enough to target (consider floating point tolerance)
            if abs(val.real - target.real) < 1e-3 and abs(val.imag - target.imag) < 1e-3:
                # Compute f(1) = a*1 + b*1 + c*1 = a + b + c
                f1 = a + b + c
                results.append(f1)

# Output all unique f(1) results
for res in sorted(set(results)):
    print(res % 1000)
```

This code performs a browse over candidate coefficients, compares the evaluated polynomial at the specified point, and records possible values for f(1). It filters results with a floating approximation (tolerance 1e-3). The code streams answers as they are found, helping conjecture the result.
