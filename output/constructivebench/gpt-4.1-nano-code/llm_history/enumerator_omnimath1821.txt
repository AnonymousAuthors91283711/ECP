[write_program]
This problem involves finding how many integers n in the range [1, 10^4] satisfy the condition: the sum of digits of 11 * n equals twice the sum of digits of n. To enumerate solutions efficiently, we generate candidates n, compute the digit sums, check the condition, and count the matches. We do not know the answer; thus, we count and print each valid n as we find it to assist in conjecturing.

```python
# Enumerate integers from 1 to 10^4
# For each, compute digit sums of n and 11 * n
# Check if digitSum(11 * n) == 2 * digitSum(n)
# Print each such n as found, and count them
def digit_sum(n):
    return sum(int(d) for d in str(n))

def main():
    count = 0
    for n in range(1, 10**4 + 1):
        ds_n = digit_sum(n)
        ds_11n = digit_sum(11 * n)
        if ds_11n == 2 * ds_n:
            print(f"n = {n}")
            count += 1
    print(f"Total count: {count}")

if __name__ == "__main__":
    main()
```
