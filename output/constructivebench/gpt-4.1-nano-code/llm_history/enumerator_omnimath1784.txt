[write_program]
This problem involves finding the greatest value of \(b\) such that there exist real numbers \(a, m, n, p, r, s, t\) satisfying a set of polynomial relations. The key insights are:

- The roots \(r, s, t\) satisfy a cubic polynomial \(x^3 + m x^2 + n x + p\), with roots related via the factorization involving their squares.
- The equations link sums and symmetric products of roots to the coefficients of a polynomial.
- The goal is to find the maximum \(b\) covered by such configurations.

Given the algebraic symmetry, an effective approach is to:
1. Fix particular plausible values for \(r, s, t\) that satisfy the common symmetries.
2. For each, derive \(a, m, n, p\) and compute \(b\).
3. Enumerate over feasible combinations and keep track of the maximum \(b\).

Since the problem involves constraints like the polynomial evaluated at \(-1\) to be \(-5\), and relations between roots, selecting small sample roots simplifies the enumeration.

```python
import itertools

# We'll consider roots r, s, t in a small range, say from -3 to 3
roots_range = [-3, -2, -1, 0, 1, 2, 3]

max_b = float('-inf')
max_b_solution = None

# Function to check polynomial relations and compute b
for r, s, t in itertools.product(roots_range, repeat=3):
    # Conditions: r + s + t, r*s + s*t + t*r, r*s*t
    sum_rst = r + s + t
    sum_prod = r*s + s*t + t*r
    prod = r*s*t
    
    # Derive a from the sum of roots: since roots relate to polynomial with leading coefficient 1
    a = -sum_rst
    
    # The polynomial roots: x^3 + m x^2 + n x + p
    # Roots are r^2, s^2, t^2, and given the polynomial: (x - r^2)(x - s^2)(x - t^2)
    # Expand to find m, n, p
    roots_squared = [r**2, s**2, t**2]
    roots_squared.sort()
    r2, s2, t2 = roots_squared
    
    # Elementary symmetric sums for roots squared
    sum_r2s2t2 = r2 + s2 + t2
    sum_products = r2*s2 + s2*t2 + t2*r2
    product_r2s2t2 = r2 * s2 * t2
    
    # Coefficients for the cubic with roots r^2, s^2, t^2
    m = - (r2 + s2 + t2)
    n = sum_products
    p = -product_r2s2t2
    
    # Check the conditions involving the polynomial at x = -1
    # Polynomial evaluated at -1: (-1)^3 + m * (-1)^2 + n * (-1) + p
    poly_at_minus_one = -1 + m * 1 + n * (-1) + p
    if poly_at_minus_one != -5:
        continue
    
    # Now, compute b = r*s + s*t + t*r
    # But the problem wants the greatest such b, so update max
    if sum_prod > max_b:
        max_b = sum_prod
        max_b_solution = (r, s, t, a, m, n, p, sum_prod)

# Output the maximum found
print("Maximum b =", max_b)
print("Corresponding roots r, s, t:", max_b_solution[:3])
print("Corresponding a, m, n, p:", max_b_solution[4:])
print("b (sum of pairwise products):", max_b_solution[7])
```
