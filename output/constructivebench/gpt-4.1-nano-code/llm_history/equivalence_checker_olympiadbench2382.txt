[check_equivalence] Problem: import Mathlib

open Nat

abbrev olympiadbench2382_answer : ℕ → ℕ := sorry
def T (n : ℕ) : ℕ :=
  Finset.card (Finset.filter (fun (a, b, c) => 
    a + b + c = n ∧ 
    a ≤ b ∧ b ≤ c ∧ 
    a + b > c) (Finset.Icc 1 n ×ˢ Finset.Icc 1 n ×ˢ Finset.Icc 1 n))

theorem olympiadbench2382 (n : ℕ) (h : n = 10 ∨ n = 11 ∨ n = 12) :
    T n = olympiadbench2382_answer n := by sorry
Ground Truth Answer: fun n => match n with
    | 10 => 2
    | 11 => 4
    | 12 => 3
    | _ => 0
Proposed Answer: fun n : ℕ => if n ∈ [10,11,12] then match n with
 | 10 => 2
 | 11 => 4
 | 12 => 3
 | _ => 0
 else 0
<<<True>>>
The proposed answer is equivalent to the ground truth answer. Both answers return the same values for n = 10, 11, 12 (2, 4, 3 respectively) and 0 for all other values of n. The proposed answer just adds an explicit check for n ∈ [10,11,12] before doing the pattern matching, but the behavior is identical to the ground truth answer which uses pattern matching directly. The else 0 case in the proposed answer is redundant since the match already has a catch-all case (_ => 0), but it doesn't affect the correctness.