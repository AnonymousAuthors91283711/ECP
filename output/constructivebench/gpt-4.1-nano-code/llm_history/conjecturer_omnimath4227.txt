[conjecture_answer] Formal Problem Statement: import Mathlib

open Function Nat

abbrev omnimath4227_answer : ℕ → ℕ := sorry
def Adjacent {n : ℕ} (c d : Fin n × Fin n) : Prop :=
  (c.1 = d.1 ∧ (d.2 = Fin.succ c.2 ∨ c.2 = Fin.succ d.2)) ∨
  (c.2 = d.2 ∧ (d.1 = Fin.succ c.1 ∨ c.1 = Fin.succ d.1))

def IsNordicSquare {n : ℕ} (f : Fin n → Fin n → Fin (n^2)) : Prop :=
  let vals : Set (Fin (n^2)) := {x | ∃ i j, f i j = x}
  vals = Set.univ ∧ ∀ i j i' j', f i j = f i' j' → i = i' ∧ j = j'

def IsValley {n : ℕ} (f : Fin n → Fin n → Fin (n^2)) (i j : Fin n) : Prop :=
  ∀ i' j', Adjacent (i, j) (i', j') → f i' j' > f i j

def IsUphillPath {n : ℕ} (f : Fin n → Fin n → Fin (n^2)) (p : List (Fin n × Fin n)) : Prop :=
  match p with
  | [] => False
  | [(i,j)] => IsValley f i j
  | (i,j)::(i',j')::rest => IsValley f i j ∧ Adjacent (i,j) (i',j') ∧ f i j < f i' j' ∧ IsUphillPath f ((i',j')::rest)

instance {n : ℕ} (f : Fin n → Fin n → Fin (n^2)) : Fintype {p : List (Fin n × Fin n) | IsUphillPath f p} := by
  sorry -- Noncomputable instance, but exists since the type is finite

theorem omnimath4227 (n : ℕ) (hn : n > 0) :
  IsLeast {k : ℕ | ∃ f : Fin n → Fin n → Fin (n^2), 
    IsNordicSquare f ∧ Fintype.card {p : List (Fin n × Fin n) | IsUphillPath f p} = k} 
  (omnimath4227_answer n) := by sorry. Enumerated answers: Candidate 28: {(0, 0): 0, (0, 1): 1, (1, 0): 2, (1, 1): 3}, uphill paths: 4
Candidate 31: {(0, 0): 0, (0, 1): 1, (1, 0): 3, (1, 1): 2}, uphill paths: 4
Candidate 40: {(0, 0): 0, (0, 1): 2, (1, 0): 1, (1, 1): 3}, uphill paths: 4
Candidate 46: {(0, 0): 0, (0, 1): 2, (1, 0): 3, (1, 1): 1}, uphill paths: 4
Candidate 55: {(0, 0): 0, (0, 1): 3, (1, 0): 1, (1, 1): 2}, uphill paths: 4
Candidate 58: {(0, 0): 0, (0, 1): 3, (1, 0): 2, (1, 1): 1}, uphill paths: 4
Candidate 76: {(0, 0): 1, (0, 1): 0, (1, 0): 2, (1, 1): 3}, uphill paths: 4
Candidate 79: {(0, 0): 1, (0, 1): 0, (1, 0): 3, (1, 1): 2}, uphill paths: 4
Candidate 100: {(0, 0): 1, (0, 1): 2, (1, 0): 0, (1, 1): 3}, uphill paths: 4
Candidate 109: {(0, 0): 1, (0, 1): 2, (1, 0): 3, (1, 1): 0}, uphill paths: 4
Candidate 115: {(0, 0): 1, (0, 1): 3, (1, 0): 0, (1, 1): 2}, uphill paths: 4
Candidate 121: {(0, 0): 1, (0, 1): 3, (1, 0): 2, (1, 1): 0}, uphill paths: 4
Candidate 136: {(0, 0): 2, (0, 1): 0, (1, 0): 1, (1, 1): 3}, uphill paths: 4
Candidate 142: {(0, 0): 2, (0, 1): 0, (1, 0): 3, (1, 1): 1}, uphill paths: 4
Candidate 148: {(0, 0): 2, (0, 1): 1, (1, 0): 0, (1, 1): 3}, uphill paths: 4
Candidate 157: {(0, 0): 2, (0, 1): 1, (1, 0): 3, (1, 1): 0}, uphill paths: 4
Candidate 178: {(0, 0): 2, (0, 1): 3, (1, 0): 0, (1, 1): 1}, uphill paths: 4
Candidate 181: {(0, 0): 2, (0, 1): 3, (1, 0): 1, (1, 1): 0}, uphill paths: 4
Candidate 199: {(0, 0): 3, (0, 1): 0, (1, 0): 1, (1, 1): 2}, uphill paths: 4
Candidate 202: {(0, 0): 3, (0, 1): 0, (1, 0): 2, (1, 1): 1}, uphill paths: 4
Candidate 211: {(0, 0): 3, (0, 1): 1, (1, 0): 0, (1, 1): 2}, uphill paths: 4
Candidate 217: {(0, 0): 3, (0, 1): 1, (1, 0): 2, (1, 1): 0}, uphill paths: 4
Candidate 226: {(0, 0): 3, (0, 1): 2, (1, 0): 0, (1, 1): 1}, uphill paths: 4
Candidate 229: {(0, 0): 3, (0, 1): 2, (1, 0): 1, (1, 1): 0}, uphill paths: 4. Expected Answer Type: ℕ → ℕ
<<<fun n : ℕ => 4>>>
