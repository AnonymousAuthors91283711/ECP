[write_program]
This problem involves summing over a specific subset of integers less than 200, where for each n, the condition \(0 < n\) and \(\phi(n) + 4 \cdot \tau(n) = n\) holds (with \(\phi(n)\) Euler's totient and \(\tau(n)\) the number of divisors). To aid in conjecturing and verifying the sum, we will enumerate all such n and compute the sum.

Here's a Python program that:
- Checks the condition for each n in 1..199,
- Calculates \(\phi(n)\) and \(\tau(n)\),
- Checks if \(\phi(n) + 4 \times \text{divisors_count}(n) = n\),
- Prints each n that satisfies this condition,
- Sums all such n and prints the total after processing.

Efficiently, it avoids recomputation, uses simple divisor counting, and streams partial solutions.

```python
def totient(n):
    count = 0
    for k in range(1, n + 1):
        if gcd(k, n) == 1:
            count += 1
    return count

def divisors_count(n):
    count = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            count += 1
            if i != n // i:
                count += 1
    return count

from math import gcd

total_sum = 0
for n in range(1, 200):
    if 0 < n:
        phi_n = totient(n)
        tau_n = divisors_count(n)
        if phi_n + 4 * tau_n == n:
            print(n)
            total_sum += n
print(f"Sum of all such n: {total_sum}")
```
