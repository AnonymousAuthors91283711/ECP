[write_program]
The problem defines a set of four-digit numbers n (from 1000 to 9999) with the following properties:

- Their digits: A, B, C, D, with A > 0.
- n equals the sum of factorials of digits B, C, D (i.e., n = factorial B + factorial C + factorial D).
- The goal is to find the greatest such n within these constraints.

We analyze all candidates where n is between 1000 and 9999, compute digits, and check the factorial sum condition. We prioritize finding the maximum valid number by enumeration.

```python
import math

# Precompute factorials of digits 0-9 for efficiency
factorials = [math.factorial(i) for i in range(10)]

max_n = None
max_value = -1

# Iterate over the range of four-digit numbers
for n in range(1000, 10000):
    A = n // 1000
    B = (n % 1000) // 100
    C = (n % 100) // 10
    D = n % 10
    # Check if n equals the sum of factorials of B, C, D
    sum_factorials = factorials[B] + factorials[C] + factorials[D]
    if n == sum_factorials:
        print(n)
        # Update maximum if current candidate is larger
        if n > max_value:
            max_value = n
            max_n = n

# Output the greatest solution found
if max_n is not None:
    print(f"The greatest number satisfying the conditions is {max_n}")
```
