[write_program]
This problem involves finding the smallest natural number \( p \) for which there exist pairs \((a_1, b_1)\) and \((a_2, b_2)\) satisfying a set of algebraic conditions. 

Given the complexity, we'll:
- Fix small values for \( b_1 \) and \( b_2 \) because they multiply to 56 (since \( b_1 * b_2 = 8 * 7 = 56 \))
- For each pair, compute potential \( a_1, a_2 \) based on the constraints.
- Check the equality involving square roots, which suggests a Pythagorean relation.

To stream results efficiently and avoid unnecessary calculations, we will:
- Iterate over small candidate \( b_1, b_2 \) (factors of 56)
- For each, systematically test \( a_1, a_2 \) within reasonable bounds for the problem size
- When the conditions are satisfied, output \( p = a_1 + a_1 + b_1 = 2 a_1 + b_1 \)

Let's implement this:

```python
# Enumerate all pairs (b1, b2) with b1 * b2 = 56
# For each pair, test possible (a1, a2)
# Check conditions and print candidate p when conditions are satisfied

import math

def main():
    target_product = 56
    results = []

    # Possible factor pairs of 56
    for b1 in range(1, target_product + 1):
        if target_product % b1 == 0:
            b2 = target_product // b1
            # Explore a1, a2 in a small range
            for a1 in range(1, 50):
                for a2 in range(1, 50):
                    if a1 == a2:
                        continue
                    # Check the square root condition
                    lhs1 = 4 * a1 ** 2 - b1 ** 2
                    lhs2 = 4 * a2 ** 2 - b2 ** 2
                    if lhs1 <= 0 or lhs2 <= 0:
                        continue
                    sqrt1 = math.isqrt(lhs1)
                    sqrt2 = math.isqrt(lhs2)
                    if sqrt1 ** 2 == lhs1 and sqrt2 ** 2 == lhs2:
                        # Check the proportionality condition
                        if b1 * sqrt1 == b2 * sqrt2:
                            p = 2 * a1 + b1
                            print(f"Found p={p} with (a1={a1}, b1={b1}), (a2={a2}, b2={b2})")
                            results.append(p)
    if results:
        print(f"Minimal p: {min(results)}")
    else:
        print("No solutions found in the tested range.")

main()
```

**Note:**  
- This code searches for solutions over small ranges, assuming the problemâ€™s solutions are small due to typical contest constraints.
- It outputs all small solutions and indicates the minimal found \( p \).

This approach helps conjecture the smallest \( p \) satisfying the conditions without hardcoding solutions.
