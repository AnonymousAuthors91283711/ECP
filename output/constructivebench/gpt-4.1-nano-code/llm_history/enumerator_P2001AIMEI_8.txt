[write_program]
This problem asks to find the greatest natural number \( N \) such that:
1. \( N > 0 \)
2. The number formed by the digits '7' followed by the digits of \( N \) (in base 10) equals \( 2N \).

Concretely, if \( N \) has \( d \) digits, then "ofDigits 10 (digits 7 N)" forms the number with a leading '7' and the digits of N afterward, which equals \( 7 \times 10^d + N \). The condition is:
\[ 7 \times 10^d + N = 2N \]
which simplifies to:
\[ 7 \times 10^d = N \]

Since \( N > 0 \), and the number formed has length \( d + 1 \), the only case where \( N \) equals \( 7 \times 10^d \) is when the number with digit '7' followed by \( N \) equals \( 2N \). This leads to the equation:
\[ 7 \times 10^d + N = 2N \Rightarrow 7 \times 10^d = N \]

Checking this:
\[ N = 7 \times 10^d \]
and substituting back:
\[ 7 \times 10^d = N \]

But we must verify whether this \( N \) satisfies the digit condition:
\[ \text{digits}(7 N) = 2 \times N \]
and whether the formed number matches.

Let's consider \( N \) of the form \( 7 \times 10^d \):

For each candidate \( d \), compute \( N = 7 \times 10^d \) and check if the "ofDigits 10 (digits 7 N)" equals \( 2N \), which forms:

- the number with '7' followed by digits of \( N \): this is a concatenation, i.e., \( 7 \) then the digits of \( N \),
- \( 2N \),
- check if the formed number matches this pattern.

Here's an efficient plan:
- For small \( d \), generate \( N = 7 \times 10^d \),
- Form the number \( \text{combined} = 10^{d+1} + N \),
- check if \( \text{combined} = 2N \),
- keep track of valid \( N \).

Let's implement this for small \( d \).

```python
# Enumerate possible N values based on the pattern N = 7 * 10^d
# For small d, check if the number formed by '7' followed by digits N equals 2 * N.

max_d = 9  # limit search to reasonable number of digits to avoid overrun
candidates = []

for d in range(1, max_d + 1):
    N = 7 * 10**d
    # Number formed by '7' followed by digits of N:
    combined_number = 10**(d+1) + N
    if combined_number == 2 * N:
        print(N)
        candidates.append(N)

# Find the greatest candidate
if candidates:
    answer = max(candidates)
    print(f'Greatest N satisfying condition: {answer}')
else:
    print('No solutions found within given range.')
```
