[write_program]
The problem involves finding the least rational number \( r = \frac{a b + c}{a + b + c} \) for integers \( a, b, c \in [1, 2011] \). The task is to programmatically enumerate candidates to identify the minimal value of this ratio, primarily focusing on exact values and avoiding hardcoding or ground-truth assumptions.

We will systematically explore combinations of \( a, b, c \) within the given bounds, calculate the ratio, and keep track of the minimum value found, printing each candidate ratio immediately. Since the bounds are quite large, to maintain efficiency, we will iterate over a small subset or implement early pruning if necessary, but here we'll enumerate all triples for demonstration.

The goal is to find the minimal ratio \( r \), considering all \( a, b, c \) in [1, 2011], and print each candidate as soon as it's evaluated.

```python
# Enumerate all possible (a, b, c) within [1, 2011]
# Compute r = (a*b + c) / (a + b + c)
# Keep track of and emit each candidate ratio immediately
# Output the minimal found after completing enumeration

min_ratio = None
min_triplet = None

for a in range(1, 2012):
    for b in range(1, 2012):
        for c in range(1, 2012):
            numerator = a * b + c
            denominator = a + b + c
            r = numerator / denominator
            print(f"a={a}, b={b}, c={c}, ratio={r}")  # Streamed output
            if min_ratio is None or r < min_ratio:
                min_ratio = r
                min_triplet = (a, b, c)

print(f"Minimum ratio found: {min_ratio} with a={min_triplet[0]}, b={min_triplet[1]}, c={min_triplet[2]}")
```
