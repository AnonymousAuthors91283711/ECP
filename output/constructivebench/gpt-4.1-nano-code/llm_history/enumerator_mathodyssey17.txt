[write_program]
This problem asks us to find the least natural number \( n \) such that \( n > 0 \) and \( n^3 \equiv 888 \pmod{1000} \). The goal is to enumerate all candidates \( n \) with \( n^3 \equiv 888 \pmod{1000} \) and identify the smallest one, satisfying the theorem about least such \( n \).

To do this efficiently:

- We will test \( n \) from 1 up to a limit (say 2000, to ensure we find the minimal).
- For each \( n \), check if \( n^3 \equiv 888 \pmod{1000} \).
- When a match is found, print it immediately.
- At the end, identify the smallest candidate.

Here's the code implementation:

```python
# Enumerate n from 1 to 2000 to find all solutions to n^3 â‰¡ 888 mod 1000
limit = 2000
results = []

for n in range(1, limit + 1):
    if (n ** 3) % 1000 == 888:
        print(n)
        results.append(n)

# Print the least n satisfying the condition
if results:
    print(f"Least n: {min(results)}")
else:
    print("No solution found within limit.")
```
