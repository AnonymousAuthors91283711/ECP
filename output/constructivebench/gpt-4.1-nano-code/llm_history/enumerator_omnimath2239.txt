[write_program]
This problem involves analyzing the given system of equations involving parameters a, b, c, and x, with the conditions on the fractions. It looks like the goal is to find the value of x that satisfies the three equations under the given constraints.

To assist in conjecturing the true value of x, I will choose some sample small values for a, b, c satisfying the conditions, and then compute the corresponding x candidates based on the equations. I will systematically vary the parameters to cover different possible scenarios and verify the solutions.

The key aspects:
- The equations relate the squares of variables divided by sums, with constants 20 and 14 and the parameter x.
- The denominators are all non-zero, so parameters should be chosen accordingly.
- We will attempt small integer values for a, b, c, and compute the potential x values.

Here's the Python code that:
- Fixes small sample values to generate solutions.
- Checks the consistency of the equations.
- Prints candidate values for x as they are found.

```python
# Enumerate small integer values for a, b, c
# Compute x from each equation and check for consistency

def main():
    solutions = []
    # Define small integer ranges for parameters
    for a in range(1, 21):
        for b in range(1, 21):
            for c in range(1, 21):
                # Ensure denominators are non-zero
                if a + b == 0 or a + c == 0 or b + c == 0:
                    continue
                # Compute x from equation (h1)
                numerator1 = a**2 / (a + c) - a**2 / (a + b)
                if abs(numerator1 - 20) < 1e-8:
                    # Potential candidate for x from h1
                    # Now check equation (h2)
                    numerator2 = b**2 / (b + a) - b**2 / (b + c)
                    if abs(numerator2 - 14) < 1e-8:
                        # Compute x from (h3)
                        numerator3 = c**2 / (c + b) - c**2 / (c + a)
                        if abs(numerator3 - 0) < 1e-8:
                            # x from h3
                            x_value = numerator3
                            # We can also directly get x from h3
                            x_candidate = numerator3
                            x_value = x_candidate
                            print(f"a={a}, b={b}, c={c}, x={x_value}")
                            solutions.append(x_value)
    # After enumeration, present unique solutions
    unique_solutions = sorted(set(solutions))
    print("Unique candidate values for x:", unique_solutions)

if __name__ == "__main__":
    main()
```
