[write_program]
This problem involves finding all natural numbers `n` such that `(number_of_divisors(n))^3 = 4 * n`, with the condition `0 < n`. To approach this, we'll generate candidate `n` values, compute their number of divisors, and check the given equation. We will:

- Iterate over a reasonable range for `n` (since the problem is high school level, small integers).
- Calculate the number of divisors efficiently.
- Check if the condition holds and print each valid `n`.

Let's implement a straightforward enumeration:

```python
# Enumerate small positive integers n and check the condition:
# (number_of_divisors(n))^3 == 4 * n

def number_of_divisors(n):
    count = 0
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            count += 2 if i != n // i else 1
    return count

max_n = 1000  # limit to keep runtime reasonable within high school context
for n in range(1, max_n + 1):
    d = number_of_divisors(n)
    if d ** 3 == 4 * n:
        print(n)
```
