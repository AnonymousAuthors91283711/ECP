[write_program]
The problem revolves around the function \( k(n) = \text{digits}_2(2023 \times n) \), where \(\text{digits}_2(x)\) gives the binary representation of \(x\), and we count how many '1's it contains. The theorem asserts that the number of '1's obtained from \( 2023 \times n \) for positive \( n \) attains a least element, which we are to find. 

We'll generate candidate values of \(k(n)\) for small \(n\), compute the number of '1's in their binary representations, and find the minimal among those values, as we're asked to find the least such \(m\).

Since \( 2023 \times n \) can grow large, but we're only interested in small \(n\)â€™s for this enumeration, we'll make \( n \) from 1 up to, say, 100, and record the counts along with the values.

```python
# Enumerate values of n from 1 to 100
# For each, compute 2023 * n, convert to binary, count '1's.
# Keep track of minimal count and corresponding n.
# Print each count to stream results.

min_count = None
min_n = None

for n in range(1, 101):
    value = 2023 * n
    binary_rep = bin(value)[2:]  # Convert to binary (string)
    count_ones = binary_rep.count('1')
    print(f"n={n}, 2023*n={value}, binary={binary_rep}, count_1={count_ones}")
    if min_count is None or count_ones < min_count:
        min_count = count_ones
        min_n = n

# Output the least count found and corresponding n
print(f"The minimal number of '1's is {min_count}, achieved at n={min_n}")
```
