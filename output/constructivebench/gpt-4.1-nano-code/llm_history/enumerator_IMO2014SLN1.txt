[write_program]
This problem involves finding the greatest value of a sum over finite sets with certain constraints. To assist, we'll enumerate candidate sums for small `n` (e.g., `n=2,3,4`) and find the maximum sums, which will help to conjecture the pattern or the true answer.

We'll:
- Fix small `n` values.
- Generate all subsets of `{0,1,...,n-1}` with sums of `2^n - 2^k`.
- Find the maximum such sum for each `n`.
- Print each maximum immediately.

```python
from itertools import combinations

# For small n, enumerate subsets of {0, ..., n-1}
# sum of 2^n - 2^k over elements of subset
def enumerate_max_sum(n):
    max_sum = None
    elements = list(range(n))
    for r in range(len(elements)+1):
        for subset in combinations(elements, r):
            current_sum = sum(2**n - 2**k for k in subset)
            print(f"n={n}, subset={subset}, sum={current_sum}")
            if max_sum is None or current_sum > max_sum:
                max_sum = current_sum
    print(f"Maximum sum for n={n}: {max_sum}")
    return max_sum

# Enumerate for small n values
for n in range(2, 6):
    enumerate_max_sum(n)
```
