[write_program]
This problem involves finding pairs \((x, p)\) of positive integers where \(p\) is prime, \(x \le 2p\), and \(p - 1\) divides \(\left( p - 1 \right)^x + 1\), with the divisibility condition involving an exponential expression. To assist in conjecturing the full set of solutions, we'll conduct a systematic enumeration over small values of \(p\) and \(x\), verifying the divisibility condition, and printing each solution immediately when found. 

For efficiency, we limit \(p\) to small primes (e.g., 2, 3, 5, 7, 11, 13) and for each \(p\), iterate \(x\) from 1 up to \(2p\). We'll use a helper function to check primality and divisibility without unnecessary heavy computations. Since the problem involves potentially large exponents, we'll rely on modular exponentiation to keep calculations efficient.

```python
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def list_primes_upto(limit):
    return [n for n in range(2, limit+1) if is_prime(n)]

def main():
    max_p = 13  # limit for small prime exploration
    primes = list_primes_upto(max_p)
    for p in primes:
        for x in range(1, 2*p + 1):
            if (pow(p - 1, x, p - 1) + 1) % (p - 1) == 0:
                # Check divisibility: (p - 1) divides (p - 1)^x + 1
                val = pow(p - 1, x) + 1
                if val % (p - 1) == 0:
                    print((x, p))
                    
if __name__ == "__main__":
    main()
```
