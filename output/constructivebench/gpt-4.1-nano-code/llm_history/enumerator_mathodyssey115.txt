[write_program]
This problem involves enumerating 6-digit numbers with certain digit constraints specifically: each digit from 1 to 6, no repeated digits, and no two adjacent digits differing by 1. To find the total count, we generate all permutations of [1, 2, 3, 4, 5, 6] because each digit appears exactly once and the length is 6. Then, we filter those that satisfy the no-adjacent-difference-by-1 condition. Since permutations of 6 elements are only 720, enumeration is efficient.

```python
from itertools import permutations

count = 0
for perm in permutations([1, 2, 3, 4, 5, 6]):
    # Check the adjacent difference condition
    if all(abs(perm[i] - perm[i+1]) != 1 for i in range(5)):
        count += 1
        print(count)  # Streaming output for each valid permutation count
print("Total count:", count)
```
