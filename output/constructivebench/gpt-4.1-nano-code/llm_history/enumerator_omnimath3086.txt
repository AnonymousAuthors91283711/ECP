[write_program]
The problem involves finding the number of sums of subsets (of size 1, 2, or 3) from the set {2, 5, 7, 12, 19, 31, 50, 81} that are less than or equal to 100. The initial goal is to enumerate all such sums to help determine the exact count. We will generate all subset sums of size 1, 2, and 3, filter those ≤ 100, and count them.

The program:
- Uses itertools to generate subsets.
- Sums each subset.
- Filters sums ≤ 100.
- Prints each unique sum found immediately, for streaming.
- At the end, counts and prints the total number of such sums, which could be the answer.

This approach ensures partial results are streamed, with efficiency and without hardcoded answers.

```python
import itertools

# The given set of numbers
numbers = [2, 5, 7, 12, 19, 31, 50, 81]

# Store all sums that are <= 100
found_sums = set()

# Generate subset sums for sizes 1, 2, 3
for r in [1, 2, 3]:
    for subset in itertools.combinations(numbers, r):
        subset_sum = sum(subset)
        if subset_sum <= 100:
            # Immediately print each sum when found
            print(f"Sum: {subset_sum} from subset {subset}")
            found_sums.add(subset_sum)

# Output the total count of unique sums ≤ 100
print(f"Total sums ≤ 100: {len(found_sums)}")
```
