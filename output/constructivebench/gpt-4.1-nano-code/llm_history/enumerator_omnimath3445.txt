[write_program]
This problem involves finding the least natural number \( n \) such that \( 100 \times 2^n > 10000 \times (1/2)^n \). Simplifying the inequality:

\[ 100 \times 2^n > 10000 \times (1/2)^n \]
\[ 2^n > 100 \times (1/2)^n \]
\[ 2^n > 100 / 2^n \]
\[ (2^n)^2 > 100 \]
\[ 2^{2n} > 100 \]

Thus, \( 2^{2n} > 100 \). We can now find the smallest \( n \) satisfying this.

```python
# Enumerate n until 2^(2n) > 100
n = 0
while True:
    power_value = 2 ** (2 * n)
    print(f"n = {n}: 2^(2*{n}) = {power_value}")
    if power_value > 100:
        print(f"Answer: n = {n}")
        break
    n += 1
```
