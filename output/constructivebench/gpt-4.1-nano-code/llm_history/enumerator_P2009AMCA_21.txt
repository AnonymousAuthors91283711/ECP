[write_program]
This problem appears to involve polynomial roots over complex numbers, particularly focusing on the roots of the two polynomials \( p(x) = x^3 + a x^2 + b x + c \) and \( q(x) = x^{12} + a x^8 + b x^4 + c \). The key is to determine the number of non-real roots of \( q \), possibly related to the coefficients \( a, b, c \).

Given the structure, we want to analyze \( q \)â€™s roots and find how many are non-real, in terms of \( a, b, c \). For a concrete exploration, we can assume specific small values for \( a, b, c \), analyze the roots numerically, and check how many roots of \( q \) have non-zero imaginary parts.

The case reduces to assigning small parameters, computing roots of \( q \), and counting non-real roots. We observe that \( q \) is a degree-12 polynomial with coefficients depending on the parameters; choosing small trials allows us to see patterns (for example, with \( a = b = c = 0 \), or small integers).

We proceed with enumeration over small parameters, print parameters used, compute roots numerically, and count the non-real roots. This aligns with the constraints of efficiency and streaming output.

Here's the Python script that performs this analysis:

```python
import numpy as np

# Enumerate small values for a, b, c
params = [(a, b, c) for a in range(-2, 3) for b in range(-2, 3) for c in range(-2, 3)]

for a, b, c in params:
    # Define coefficients for q: x^12 + a x^8 + b x^4 + c
    coeffs = [1] + [0]*3 + [a] + [0]*3 + [b] + [0]*3 + [c]
    # Compute roots numerically
    roots = np.roots(coeffs)
    # Count roots with non-zero imaginary part
    non_real_count = sum(1 for z in roots if abs(z.imag) > 1e-8)
    # Print parameters and count
    print(f"a={a}, b={b}, c={c} -> non-real roots: {non_real_count}")
```

This script enumerates small parameter sets, calculates polynomial roots, and reports the number of non-real roots, aiding in forming conjectures about the original problem.
