[write_program]
This problem involves finding the count of natural numbers \( n \) with the properties:
- \(0 < n < 1000\)
- \( n = 6 \times \) sum of the digits of \( n \)

Let's analyze the possible range:
- \( n \) is between 1 and 999
- \( n = 6 \times \) sum of digits of \( n \), so \( n \) must be divisible by 6
- sum of digits of \( n \) is at most 27 (for 999), so \( n \le 6 \times 27 = 162 \)

Thus, possible \( n \) are multiples of 6 less than or equal to 162 and satisfy \( n = 6 \times \) sum of digits.

Let's enumerate \( n \) from 1 to 162, check divisibility by 6, and verify if \( n = 6 \times \) sum of digits.

```python
# Enumerate all n from 1 to 162, check the condition
count = 0
for n in range(1, 163):
    if n % 6 == 0:
        digit_sum = sum(int(d) for d in str(n))
        if n == 6 * digit_sum:
            print(n)  # output each candidate
            count += 1

# Output total count as the answer
print("Total count:", count)
```
