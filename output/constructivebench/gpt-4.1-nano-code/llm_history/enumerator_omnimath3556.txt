[write_program]
This problem involves finding a specific integer \( n \) between 100 and 1997 such that there exists an integer \( k \) with the property:
\[
k = \frac{2^n + 2}{n}
\]
and this \( n \) is unique within that range.

Since the problem asks us to find the unique such \( n \), and the expression involves powers of 2, waiting for \( 2^n \) to be divisible by \( n \) makes it likely that \( n \) divides \( 2^n + 2 \). To construct the enumeration, we focus on small sample values within the given range, verify divisibility, and check whether \( (2^n + 2) \) is divisible by \( n \) with an integer quotient.

Here's a Python implementation that enumerates \( n \) from 100 to 1997, checks for divisibility of \( 2^n + 2 \) by \( n \), and prints valid \( n \). Since the numbers could be very large (exponential in \( n \)), we use modular arithmetic to check divisibility efficiently, rather than computing \( 2^n \).

```python
# Enumerate n from 100 to 1997
# For each n, check if (2^n + 2) is divisible by n using modular exponentiation
# If divisible, print n and the corresponding k = (2^n + 2) // n

def main():
    for n in range(100, 1998):
        # Check divisibility without computing 2^n directly
        # Use pow with modulus to compute 2^n mod n
        rem = pow(2, n, n)  # 2^n mod n
        # (2^n + 2) mod n == (rem + 2) mod n
        if (rem + 2) % n == 0:
            k = (pow(2, n, n * 10**18) + 2) // n  # compute k exactly with large exponentiation
            # To get exact k, compute 2^n directly (might be large but for demonstration)
            # In case of large n, use pow with precise calculation:
            # Since the division is exact, compute 2^n directly (may be big)
            # Alternatively, compute 2^n with pow and BigInt support
            # Python can handle large integers
            positive_power = pow(2, n)
            if (positive_power + 2) % n == 0:
                print(f"n = {n} yields k = {(positive_power + 2)//n}")

main()
```
