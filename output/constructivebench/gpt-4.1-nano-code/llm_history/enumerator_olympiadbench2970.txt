[write_program]
This problem involves examining the recursive function A(n) defined by:

- A(0)=A(1)=A(2)=1
- For n ≥ 0: A(n+3) = A(n) + A(n+2)

We need to find the least n such that A(n) ≥ K, where K is the sum of the digits of T=98721.

First, let's compute K by summing the digits of T, then generate A(n) iteratively to find the smallest n fulfilling that condition.

I will implement an efficient generator for A(n), compute K, and iterate until we find the minimal n satisfying the condition.

```python
# Compute the sum of digits of T
T = 98721
K = sum(int(d) for d in str(T))
print(f"K (sum of digits of {T}) = {K}")

# Generate sequence A(n) based on the recurrence
A_values = [1, 1, 1]  # A(0), A(1), A(2)

n = 3
# Iterate until we find A(n) >= K
while True:
    A_n = A_values[-1] + A_values[-3]
    A_values.append(A_n)
    if A_n >= K:
        print(f"n = {n}, A(n) = {A_n}")
        break
    n += 1
```
