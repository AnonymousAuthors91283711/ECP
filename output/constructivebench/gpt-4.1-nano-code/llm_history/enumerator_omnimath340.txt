[write_program]
The problem involves analyzing the behavior of the distance to the nearest integer for sequences involving powers of algebraic numbers. Since sqrt(2)+1 and sqrt(2)+3 are quadratic irrationalities, their powers tend to be well-studied in Diophantine approximation; in particular, their multiples can be dense modulo 1 or have certain recurrence properties depending on the multiplicative factor.

To explore the existence of a non-zero scalar `s` that makes `(sqrt 2 + 1)^n * s` tend to integers (distance to nearest integer goes to zero), and whether the same is false for `(sqrt 2 + 3)^n * s`, we can examine candidate values of `s`. Because rational multiples of algebraic irrationals may exhibit specific patterning, testing a small set of candidate `s` values can clarify the statement.

Here's a Python program to enumerate small candidate values for `s` (like reciprocals of small integers) and check the behavior of `dist_to_int` sequences, focusing on the first several `n` values to approximate the limits.

The program will:
- fix small `s` candidates,
- compute `dist_to_int` for several `n`,
- check if the sequence seems to tend to 0,
- print candidates where the sequence appears to tend to 0 (for the first sequence), and
- print no results for the second, indicating the absence of such `s`.

Because the formal logic involves limits, actual convergence might be approximated by small values over many `n`. This code is intended for conjecture, not proof.

```python
import math

def dist_to_int(r):
    """Compute the distance from r to the nearest integer."""
    return abs(r - round(r))

# Constants
sqrt2_plus_1 = math.sqrt(2) + 1
sqrt2_plus_3 = math.sqrt(2) + 3

# Candidate s values (reciprocals of small integers)
candidate_s = [1/1, 1/2, 1/3, 2, 3, 1/4, 4]

# Number of iterations to test convergence
N = 50

def test_sequence(base, s):
    # Check if dist tends to 0 over N n's
    for n in range(1, N+1):
        value = (base ** n) * s
        d = dist_to_int(value)
        # If at any point the distance is not small, break
        if d > 0.1:
            return False
    return True

print("Testing potential s for (sqrt(2)+1)^n * s:")
for s in candidate_s:
    if test_sequence(sqrt2_plus_1, s):
        print(f"s = {s} seems to cause (sqrt(2)+1)^n * s to tend to integers.")

print("\nTesting potential s for (sqrt(2)+3)^n * s:")
for s in candidate_s:
    if test_sequence(sqrt2_plus_3, s):
        print(f"s = {s} seems to cause (sqrt(2)+3)^n * s to tend to integers.")
# Expected: likely none will tend to integers due to properties of these algebraic irrationals.
```
