[write_program]
The problem appears to be about finding the smallest natural number \( m \) such that for any non-negative integers \( s_1, s_2, s_3 \), if the average \(\frac{m + s_1 + s_2 + s_3}{4} = 20\), then each of \( s_1, s_2, s_3 \) must be less than 20. 

Translating the condition, the key is to find the minimal \( m \) ensuring that no matter the \( s_i \), if the average is 20, the \( s_i \) are all less than 20. To find this, look for the minimal \( m \) such that when the total sum \( m + s_1 + s_2 + s_3 = 80 \) (since \( 4 \times 20 = 80 \)), if the \( s_i \) were 20 or more, it would violate the condition. 

- If \( s_i \geq 20 \), then the maximum sum of \( s_1 + s_2 + s_3 \), with each \( s_i \geq 20 \), is at least \( 3 \times 20 = 60 \). 
- The minimal \( m \) should prevent \( s_i \geq 20 \) when the total sum is 80, i.e., for the sum to be exactly 80, \( m + s_1 + s_2 + s_3 = 80 \).
- To allow \( s_i = 19 \), the sum of the three \( s_i \) can be at most \( 3 \times 19 = 57 \).
- So, if \( s_i \) are all less than 20, then the sum \( s_1 + s_2 + s_3 \leq 57 \).

The key is that if \( m \) is too small, some \( s_i \) could be 20 or more for the total to be 80:

\[ m + s_1 + s_2 + s_3 = 80 \]

Suppose \( s_i = 20 \):

\[ m + 20 + 20 + 20 = 80 \]

so:

\[ m = 80 - 60 = 20 \]

At \( m=20 \), if the total sum is 80, then \( s_i = 20 \) is possible, which would violate the condition since \( s_i \) are not all less than 20. We want the minimal \( m \) such that \( s_i \geq 20 \) cannot happen when the total is 80, i.e., \( m > 20 \).

Testing \( m=21 \):

\[ 21 + s_1 + s_2 + s_3 = 80 \Rightarrow s_1 + s_2 + s_3 = 59 \]

Maximum sum with all \( s_i < 20 \) is:

\[ 19 + 19 + 19 = 57 \]

But \( 59 > 57 \), so at \( m=21 \), sums where \( s_i \geq 20 \) are possible for total 80, which violates the condition. But the condition "if the average is 20, then each \( s_i < 20 \)" only prohibits the total sum being 80 with some \( s_i \geq 20 \). 

Actually, at \( m=20 \):

- If \( s_i=20 \), total sum = 80, satisfying the average condition, but \( s_i=20 \) actually violates the "less than 20" condition, so the candidate \( m=20 \) does not satisfy the predicate: the theorem is about the **least** \( m \) where the stated property (that all \( s_i \) are less than 20 when average is 20) holds.

Therefore, the minimal \( m \) is 20 if the statement is to be true. But the theorem claims this is the *least* such \( m \); the answer is 20, but to meet the strict scoring, at 20, the \( s_i \) can be equal to 20.

Thus, the minimal such \( m \) should be **greater than 20**, i.e., 21, to guarantee that the sum of \( s_i \) cannot reach or exceed 20 simultaneously when the total sum is 80, thus ensuring all \( s_i<20 \). 

However, at \( m=20 \), \( s_i=20 \) is possible, thus violating the property.

Let's check \( m=20 \):

- Can \( s_i=20 \) satisfy the average? Yes:

\[ 20 + 20 + 20 + 20 = 80 \Rightarrow \frac{80}{4} = 20 \]

and \( s_i=20 \), which does **not** satisfy the strict inequality \( s_i<20 \).

Hence, the minimal \( m \) where the property is true is **at least 21**.

At \( m=21 \):

\[ 21 + s_1 + s_2 + s_3 = 80 \Rightarrow s_1 + s_2 + s_3 = 59 \]

Maximum of three less than 20:

\[ 19 + 19 + 19 = 57 \]

which is less than 59, so impossible for \( s_i<20 \), meaning the property holds.

**Conclusion:** The minimal \( m \) is 21, as for all \( s_i<20 \), the total sum would be less than 80, but with \( m=21 \), the total sum being 80 would force some \( s_i \geq 20 \), violating the property. Conversely, for \( m=20 \), the scenario exists where the total sum is 80 with \( s_i=20 \), violating the property.

---

```python
# Python code to verify the minimal m
# We verify for m starting from 20 upwards
# For each m, check if there is a total sum of 80 with some s_i >=20
# If not, then m is the minimal satisfying value

def verify_m(m, threshold=80):
    # For the total sum to be 80:
    total = threshold
    # s1, s2, s3 are non-negative integers summing to total - m
    sum_s = total - m
    # Check if there exists any s_i >= 20 and sum s_i = sum_s
    for s1 in range(20, sum_s+1):
        for s2 in range(20, sum_s - s1 + 1):
            s3 = sum_s - s1 - s2
            if s3 >= 20:
                return False  # Found violating scenario
    return True  # No violating scenario found

# Find the minimal m
for m in range(20, 40):
    if verify_m(m):
        print(f"Answer: {m}")
        break
```

---

This code tests successive values of \( m \), confirming that starting once \( m \geq 21 \), the conditions are satisfied, so the smallest such \( m \) is **21**.
