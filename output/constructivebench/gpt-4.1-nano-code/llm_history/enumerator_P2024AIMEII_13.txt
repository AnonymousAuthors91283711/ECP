[write_program]
The problem involves roots of unity: ω is a 13th root of unity, not equal to 1, and we are asked to compute a product involving ω^k terms for k=0 to 12. The key expression in the product is:

\[
2 - 2ω^k + ω^{2k}
\]

From the given, ω^13 = 1, and ω ≠ 1. The goal is to evaluate:

\[
\prod_{k=0}^{12} (2 - 2ω^k + ω^{2k}) \mod 1000
\]

Since ω is a primitive 13th root of unity, the set {ω^k | k=0,...,12} contains all 13th roots of unity. To simplify, examine the expression:

\[
A_k = 2 - 2ω^k + ω^{2k}
\]

Notice for k=0:

\[
ω^0=1, \quad A_0 = 2 - 2*1 + 1 = 2 - 2 +1=1
\]

For other k, treat \( z = ω^k \), then:

\[
A(z) = 2 - 2z + z^2
\]

The product over all roots (excluding k=0 where ω^0=1) can be approached by considering the polynomial behavior.

However, an efficient way is to evaluate the entire product directly numerically, given that 13 is small:

- For each \( k = 0,\dots,12 \),
- Compute \( ω^k \),
- Compute \( A_k \),
- Multiply all \( A_k \),
- Save the product modulo 1000.

Because of the symmetry, and since we know \( ω^{13} = 1 \), we can programmatically generate \( ω^k \) as \( e^{2πi k/13} \).

```python
import cmath
import math

# Number of roots
n = 13

product = 1
for k in range(n):
    # ω^k = e^{2πi k/13}
    omega_k = cmath.exp(2j * math.pi * k / n)
    value = 2 - 2 * omega_k + omega_k ** 2
    # multiply into product
    product *= value

# Get the real part (should be real, but with floating error)
final_value = product.real
# Cast to integer mod 1000
answer = int(round(final_value)) % 1000

print(answer)
```
