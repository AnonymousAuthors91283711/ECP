[write_program]
The problem involves counting functions \(f : \text{Fin } 5 \to \text{Sym}^2(\text{Fin } 5)\) satisfying certain conditions:
- \(f(i) \neq \text{Sym}^2(\text{diag}\ i)\),
- each element in the image has exactly 2 preimages,
- \(f\) is injective.

Since the problem uses the notion of symmetric 2-forms on Fin 5, and the conditions specify perfect matchings and restrictions avoiding diagonals, the set of functions resembles partitions of the set \(\{1, 2, 3, 4, 5\}\) into pairs, avoiding fixed points.

The enumeration reduces to counting the number of perfect matchings of 5 elements where each element must be part of a pair (excluding pairs with the same element i.e., diagonals), and all pairs are disjoint. Given that 5 is odd, no perfect matching covers all 5 elements exactly; the problem likely implicitly reduces to counting matchings between the 4 elements (since each pair covers 2, and the remaining element can be "fixed" or excluded).

To approximate, for sample matching counts, choose small sample values and enumerate possible pairings.

Let's implement enumeration considering the 5 elements, exclude pairs with same element, count matchings with the given constraints.

```python
import itertools

# We consider the elements 1..5
elements = list(range(1, 6))

# Generate all possible pairs (unordered)
pairs = list(itertools.combinations(elements, 2))

# Generate all partitions of the set into pairs, avoiding fixed points
# Since 5 elements can't be perfectly matched into pairs without leftovers,
# we consider matchings of 4 elements, leaving one fixed, then assign one "single".
count = 0
for subset in itertools.combinations(elements, 4):
    remaining = set(elements) - set(subset)
    # Generate all pairing partitions of these 4 elements
    # Count the number of ways to split 4 elements into 2 disjoint pairs
    for pair1 in itertools.combinations(subset, 2):
        rest = set(subset) - set(pair1)
        pair2 = tuple(rest)
        # Only consider valid pairs
        if set(pair2) != set():
            # Count each pairing configuration
            # Since pairs are unordered, avoid duplicates
            pairing = [tuple(sorted(pair1)), tuple(sorted(pair2))]
            # Check that no pair contains identical elements
            if pair1[0] != pair1[1] and pair2[0] != pair2[1]:
                count +=1
                print(f"Matching: {pairing} with leftover element {list(remaining)}")
print("Total matchings (including no fixed points scenario):", count)
```
