[write_program]
The problem asks us to find all positive integers n for which there exists an integer m satisfying m^2 = (n^3 - 1989)/n. Simplifying the equation:

m^2 = (n^3 - 1989)/n = n^2 - 1989/n

For m^2 to be an integer, (1989/n) must be an integer, i.e., n divides 1989. Also, since n > 0, and we need m and n to satisfy the equation, we'll iterate over the positive divisors of 1989, check whether (n^3 - 1989)/n is a perfect square (which is (n^2 - 1989/n)), and if so, yield n.

Let's factor 1989 to find its divisors:
1989 = 3 * 13 * 53

All divisors are products of these primes:
Possible divisors are {1, 3, 13, 39, 53, 159, 689, 1989}

We check each divisor n > 0 (which are all of these), verify if n divides 1989, and check if (n^2 - 1989/n) is a perfect square.

```python
def is_perfect_square(x):
    if x < 0:
        return False
    root = int(x**0.5)
    return root * root == x

# Divisors of 1989
divisors = [1, 3, 13, 39, 53, 159, 689, 1989]

answers = []

for n in divisors:
    k = 1989 // n
    val = n**2 - k
    if is_perfect_square(val):
        answers.append(n)
        print(n)
```
