[write_program]
This problem relates to finding the greatest element satisfying certain properties: a finite sequence of primes in an arithmetic progression with positive initial term and positive common difference, all less than 1,000,000, and the sequence length might be maximized. The theorem asks to identify the greatest such `n` (sequence length) satisfying the property `P n`.

Our goal: write a Python program to enumerate possible `n` values, based on parameters `a` and `d`, to find the maximum `n` for which the sequence (a, a + d, ..., a + (n-1) d) consists of primes under `10^6`.

### Approach:
- Fix small values for `a` and `d`.
- For each, find the maximum `n` such that all terms are prime and less than `1,000,000`.
- Print each sequence length when valid, and after enumerating, output the maximum.

### Implementation:
- To improve efficiency, cache primality checks.
- Limit search space for `a` and `d`.
- Stream each valid sequence length found.

```python
import sympy

max_limit = 10**6
max_length_found = 0

# Choose small sample values for starting points and differences
for a in range(2, 5000, 100):  # small starting values
    for d in range(1, 5000, 100):  # small differences
        n = 0
        while True:
            term = a + n * d
            if term >= max_limit:
                break
            if not sympy.isprime(term):
                break
            n += 1
        if n > max_length_found:
            max_length_found = n
            print(f"New max sequence length: {n} with a={a}, d={d}")
        # Also print each found sequence length for current parameters
        if n > 0:
            print(f"Sequence length {n}: a={a}, d={d}")
print(f"Maximum sequence length found: {max_length_found}")
```
