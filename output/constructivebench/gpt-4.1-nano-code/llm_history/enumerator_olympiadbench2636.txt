[write_program]
This problem involves a natural number \( n \) between 1000 and 9999 (inclusive lower bound, exclusive upper bound) such that the square root of \( n \) equals three times the sum of the decimal digits of \( n \). Our goal is to find candidate values for \( n \) satisfying this relation by enumerating possible \( n \) in the given range.

Key points:
- \( 1000 \leq n < 10000 \)
- \( \sqrt{n} = 3 \times \text{sum of digits of } n \)
- Since \( n \geq 1000 \), \( \sqrt{n} \geq \sqrt{1000} \approx 31.6 \)
- Since \( n < 10000 \), \( \sqrt{n} < 100 \)
- Therefore, the candidate \( \sqrt{n} \) lies in roughly [32, 99]
- Because the right side is \( 3 \times \text{sum of digits} \), and sum of digits of a 4-digit number is at most 36 (9999: digits sum = 9+9+9+9=36), the right side maximum is \( 3 \times 36=108 \). But since \( \sqrt{n} < 100 \), the maximum candidate for \( \sqrt{n} \) is 99, which matches well.

We can thus iterate over candidate square roots \( s \) from 32 to 99, compute \( n = s^2 \), and verify whether the sum of its digits equals \( s/3 \). Because the sum of digits needs to be an integer, \( s/3 \) must be an integer, meaning \( s \) is divisible by 3. For each valid \( s \), check if \( n = s^2 \) and if the sum of digits matches \( s/3 \).

```python
# Enumerate potential candidates based on square roots from 32 to 99
# Only consider s divisible by 3 to ensure sum of digits = s/3 is integer
for s in range(32, 100):
    if s % 3 != 0:
        continue
    n = s * s
    # Ensure n is within the range
    if n < 1000 or n >= 10000:
        continue
    # Calculate sum of digits
    digits_sum = sum(int(d) for d in str(n))
    # Check if sum of digits matches s/3
    if digits_sum == s // 3:
        print(n)
```
