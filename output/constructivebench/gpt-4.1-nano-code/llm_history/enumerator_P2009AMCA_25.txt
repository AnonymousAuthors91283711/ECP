[write_program]
The problem defines a recurrence sequence \(a(n)\) with initial conditions: \(a(1)=1, a(2)=1/\sqrt 3\), and recurrence relation \(a(n+2) = (a(n+1))^2 - a(n)\). The task is to evaluate \( |a(2009)| \).

Given the nature of the recurrence, it’s a second-order nonlinear recurrence, which can generate complex sequences. To assist conjecture and potential proof, we'll approximate the first several terms numerically, observe the pattern, and then estimate the value at \(n=2009\).

Since the sequence can grow or oscillate, I will:
- Generate the sequence for early \(n\) until the pattern stabilizes or terms become very small.
- Record these terms.
- Use these to make an educated guess of the limiting behavior or magnitude at \(n=2009\).

Let's implement this in Python, estimating and printing each value up to a certain number of terms, and then providing an approximation or pattern.

```python
# This script computes terms of the recurrence and prints them for conjecture.
# The recurrence: a(n+2) = (a(n+1))^2 - a(n)
# Initial conditions: a(1)=1, a(2)=1/√3 (~0.577)

import math

# Initialize the sequence
a = [0, 1, 1 / math.sqrt(3)]  # a[1], a[2]
max_terms = 50  # Generate first 50 terms to observe pattern

for n in range(2, max_terms):
    next_a = a[n]**2 - a[n-1]
    print(f"a({n+1}) = {next_a}")
    a.append(next_a)

# Based on the initial terms, anticipate the behavior at large n.
# The sequence is nonlinear; at large n, terms may stabilize or diverge.
# For a rough estimate, observe last terms after 50 iterations.
# Since the sequence may oscillate or tend toward certain values,
# the magnitude of a(50) can be a candidate for the value at n=2009.
# For more refined conjecture, further analysis can be done.
```

This code computes the sequence’s first 50 terms, printing each immediately. The pattern in these early terms can inform a conjecture about the magnitude at \(n=2009\).
