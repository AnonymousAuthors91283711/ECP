[write_program]
This problem involves finding the greatest natural number \( n \) between 10 and 99 (inclusive) such that when written as digits \( a \) and \( b \) (with \( a \) as the tens digit and \( b \) as the units digit), the number obtained by swapping the digits (i.e., \( 10b + a \)) equals \( \frac{7}{4} \) times the original number \( 10a + b \).

To approach this, I will:
- Enumerate all two-digit numbers \( n \) from 10 to 99.
- For each \( n \), determine digits \( a = n // 10 \) and \( b = n \ % 10 \).
- Check if \( 10b + a = \frac{7}{4} \times (10a + b) \).
- Collect all solutions satisfying the condition.
- Output candidates as they are discovered, focusing on the greatest candidate at the end.

Here's a Python program to perform this enumeration efficiently and streaming partial results:

```python
# Enumerate all two-digit numbers from 10 to 99
# For each, extract digits and check the given fractional condition
# Print each candidate when found, then identify the greatest at the end

candidates = []

print("Checking numbers from 10 to 99...")
for n in range(10, 100):
    a = n // 10
    b = n % 10
    lhs = 10 * b + a
    rhs = (7/4) * (10 * a + b)
    # Check if lhs equals rhs within a small tolerance (to avoid floating point issues)
    if abs(lhs - rhs) < 1e-9:
        print(f"Found candidate: {n} (digits {a}, {b}) where {lhs} = (7/4) * {10*a + b}")
        candidates.append(n)

# Output the greatest candidate found
if candidates:
    answer = max(candidates)
    print(f"\nThe greatest candidate number is: {answer}")
else:
    print("No candidate found.")
```
