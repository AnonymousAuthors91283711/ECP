[write_program]
This problem involves finding positive integer triples (a, b, c) satisfying two conditions:
1. a + b + c < 2 * p * sqrt(p)
2. 1/a + 1/b + 1/c = 1/p

Given p is prime, we are to explore all such triples, emphasizing exact solutions.

To do this efficiently:
- Fix p.
- Enumerate small positive integers for a, b, c.
- For each candidate, check if that candidate satisfies the sum and reciprocal sum conditions.
- Since the sum condition provides an upper bound, limit a, b, c to, say, 2 * p, which is reasonable for small p.
- Print each solution immediately, filtering for solutions satisfying the equations.

Here's a program that does this:

```python
# Enumerate triples (a, b, c) with positive integers up to 2*p
# Check the sum condition and the reciprocal sum condition
# Print valid solutions immediately

import math

def find_solutions(p):
    max_val = 2 * p  # upper limit for a, b, c
    solutions_found = 0
    for a in range(1, max_val + 1):
        for b in range(1, max_val + 1):
            # Compute c from the reciprocal sum equation if possible
            denom_c_inv = 1/p - (1/a + 1/b)
            if denom_c_inv == 0:
                continue  # avoid division by zero
            c = 1 / denom_c_inv
            if c.is_integer() and c > 0:
                c_int = int(c)
                # Check sum condition
                if a + b + c_int < 2 * p * math.sqrt(p):
                    # Output candidate
                    print((a, b, c_int))
                    solutions_found += 1

# Test with small prime p
p = 3
print(f"Solutions for p={p}, prime: {p}")
find_solutions(p)
```

This code searches for solutions for p=3, with the upper limit set at 2*p (i.e., 6). It finds all integer triples satisfying the conditions, printing each as it is discovered. Adjust `p` or `max_val` as needed for larger p or more extensive searchers.
