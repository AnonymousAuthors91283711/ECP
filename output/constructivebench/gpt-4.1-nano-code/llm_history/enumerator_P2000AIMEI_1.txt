[write_program]
The problem appears to relate to the 2000 AIME I problem, which involves understanding whether the digits of factors of a power of 10 contain a zero. Specifically, the problem asks for the smallest positive integer \( n \) such that for every pair \((a, b)\) with \( a \times b = 10^n \), at least one of \( a \) or \( b \) contains the digit zero.

To approach this, we need to find the minimal \( n \) with the property that any factorization of \( 10^n \) into positive integers includes a factor with a zero digit in its decimal representation. For smaller \( n \), examples show the reverse, but as \( n \) grows, factors involve only 1s and 0s, and their digit compositions become relevant.

---

Here's the Python code to search for such \( n \), checking factorizations of \( 10^n \) and whether the factors contain zeros. The code tests each \( n \), examining all divisor pairs of \( 10^n \), and verifies the digit conditions.

```python
def has_zero_digit(x):
    return '0' in str(x)

def all_factor_pairs(n):
    # Generate pairs (a, b) such that a * b = 10^n
    # Since 10^n = 2^n * 5^n, divisors are of the form 2^k * 5^m with 0 <= k, m <= n
    # Iterate over k, m to generate all divisors
    for k in range(n + 1):
        for m in range(n + 1):
            a = (2 ** k) * (5 ** m)
            b = (2 ** (n - k)) * (5 ** (n - m))
            yield a, b

def check_property(n):
    for a, b in all_factor_pairs(n):
        # ensure the product is 10^n
        if a * b != 10 ** n:
            continue
        if not (has_zero_digit(a) or has_zero_digit(b)):
            return False
    return True

# Find minimal n satisfying the property by increasing n
max_n = 20  # limit for efficiency
for n in range(1, max_n + 1):
    if check_property(n):
        print(f"n = {n} satisfies the property.")
        # Since we want the least n, stop at first success
        break
```
