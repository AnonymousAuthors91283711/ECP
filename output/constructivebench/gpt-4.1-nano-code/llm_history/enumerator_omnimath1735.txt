[write_program]
The problem involves a variable \( p(k) \) defined based on a parameter \( n = 2014 \) and a sum \( E = \sum_{k} k p(k) \). The expression for \( p(k) \) resembles the probability mass function of a hypergeometric-like distribution or a related binomial model. To help find the value of \( E \), we'll examine the structure of \( p(k) \) for small sample values, compute the expectations numerically, and determine the rounded value scaled by 100.

Here's what we'll do:
- Assign \( n = 2014 \).
- For \( k \) from 0 to a small threshold (say 20), compute \( p(k) \).
- Sum \( k p(k) \) to approximate the expectation \( E \).
- Output the scaled value \( 100 * E \), rounded.

This code efficiently enumerates relevant \( p(k) \) and sums the expected values.

```python
# Enumerate p(k) for small k and estimate E = sum k * p(k)
import math

n = 2014
max_k = 20  # small sample to approximate expectation

def p(k):
    # Calculate product of (n - i)/n for i in 0..k-1
    prod = 1.0
    for i in range(k):
        prod *= (n - i) / n
    return prod * (k / n)

E = 0.0
for k in range(max_k + 1):
    value = k * p(k)
    E += value
    print(f"k={k}, p(k)={p(k):.6f}, k*p(k)={value:.6f}")

# Approximate the scaled expectation
scaled_E = round(100 * E)
print(f"Approximate 100 * E: {scaled_E}")
```
