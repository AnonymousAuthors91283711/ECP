[write_program]
The problem involves finding the number of functions \( f: n \to n \to n \) for \( n \in [3, 12] \), that are symmetric, idempotent (\(f(a,a)=a\)), and associative. We need to count the number of such functions for each \( n \) in this range. This is a classic problem related to semilattice operations (commutative, idempotent, associative binary operations).

The approach:
- For each \( n \), enumerate all functions \(f: n \times n \to n\).
- Check the properties: symmetry, idempotency, associativity.
- Count the number of functions satisfying all conditions.
- Sum over \( n \in [3, 12] \).

Since enumerations over all \( n^ {n^2} \) functions for larger \( n \) are infeasible, we optimize:
- For small \( n \), brute force enumeration.
- For larger \( n \), recognize structure: in the class of semilattice operations, the functions correspond to choosing a partial order or a set of join-irreducibles. For simplicity, limit to small \( n \).

In code, we'll:
- For each \( n \), generate all symmetric, idempotent candidates.
- Check for associativity.
- Count and sum them.

Due to potential combinatorial explosion, we'll limit brute-force to a small subset (say \( n=3 \)) explicitly and approximate for larger \( n \).

```python
import itertools

def is_symmetric(f, n):
    for a in range(n):
        for b in range(n):
            if f[a][b] != f[b][a]:
                return False
    return True

def is_idempotent(f, n):
    for a in range(n):
        if f[a][a] != a:
            return False
    return True

def is_associative(f, n):
    for a in range(n):
        for b in range(n):
            for c in range(n):
                if f[f[a][b]][c] != f[a][f[b][c]]:
                    return False
    return True

def generate_candidates(n):
    # Generate all symmetric, idempotent matrices
    # Initialize with identity
    candidates = []
    # For each pair (a,b) with a<=b, assign a value in 0..n-1
    pairs = [(a,b) for a in range(n) for b in range(a, n)]
    for vals in itertools.product(range(n), repeat=len(pairs)):
        f = [[-1]*n for _ in range(n)]
        # fill diagonal with a
        for i in range(n):
            f[i][i] = i
        # assign symmetric pairs
        for (a,b), val in zip(pairs, vals):
            f[a][b] = val
            f[b][a] = val
        # fill remaining with arbitrary (but will check for correctness)
        # For simplicity, skip to testing
        candidates.append(f)
    return candidates

def count_semilattice(n):
    count = 0
    # Generate all symmetric, idempotent functions
    for f in generate_candidates(n):
        if is_symmetric(f, n) and is_idempotent(f, n):
            if is_associative(f, n):
                count += 1
    return count

total_answers = 0
for n in range(3, 13):
    count = count_semilattice(n)
    print(f"n={n}, count={count}")
    total_answers += count

print("Total sum:", total_answers)
```
