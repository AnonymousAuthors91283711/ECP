[write_program]
This problem involves analyzing the function \(f(x) = \frac{1}{x+1} + \frac{1}{x} + \frac{1}{x-1}\) and the set of \(x\) where \(f(x) > 1\), within specified intervals. For an enumeration program, I'll focus on checking the values of \(f(x)\) over key intervals, especially at boundary points and sample points within each interval, to identify where \(f(x) > 1\).

Since the problem asks to verify the subset relations involving these intervals and the set \(S\), and check the sum of the lengths of these intervals, I will:
- Enumerate \(f(x)\) at boundary points and interior points
- Verify if \(f(x) > 1\) at those points
- Identify which sub-intervals are contained in \(S\)
- Sum the lengths of those intervals

The key is to approximate \(f(x)\) efficiently at sample points and determine whether the intervals are included.

```python
import math

# Define the function f(x)
def f(x):
    try:
        return 1/(x+1) + 1/x + 1/(x-1)
    except ZeroDivisionError:
        return float('inf')

# Check if f(x) > 1 at a point
def is_in_S(x):
    val = f(x)
    return val > 1

# Define intervals
intervals = [
    (-1 + 1e-8, 1 - math.sqrt(2) - 1e-8),  # Ioo(-1, 1 - sqrt(2))
    (0 + 1e-8, 0.5 - 1e-8),                # Ioo(0, 1/2)
    (1 + 1e-8, 1 + math.sqrt(2) - 1e-8)    # Ioo(1, 1 + sqrt(2))
]

# Sample points within each interval to test
samples = [
    (a + b)/2 for (a, b) in intervals
]

# Check each interval and sample point
for idx, (a, b) in enumerate(intervals):
    mid = (a + b)/2
    in_interval = True
    in_S_boundary = is_in_S(a) or is_in_S(b)
    in_S_middle = is_in_S(mid)
    print(f"Interval {idx+1}: ({a:.5f}, {b:.5f})")
    print(f"  f at start {a:.5f}: {f(a):.5f} > 1? {is_in_S(a)}")
    print(f"  f at middle {mid:.5f}: {f(mid):.5f} > 1? {is_in_S(mid)}")
    print(f"  f at end {b:.5f}: {f(b):.5f} > 1? {is_in_S(b)}")
    # Determine if entire interval is in S based on samples
    if in_S_boundary or in_S_middle:
        print("  Sub-interval appears in S based on samples.")
    else:
        print("  Sub-interval may not be fully in S.")
# Sum of lengths for intervals confirmed in S
lengths_in_S = sum((b - a) for (a, b) in intervals)
print(f"Sum of lengths of intervals: {lengths_in_S:.5f}")
```
