[write_program]
The problem involves finding specific sums of series involving natural numbers and their powers, with a condition that sums of certain polynomially scaled natural numbers equal fixed constants. Given the code structure, it appears to involve summations like \(\sum_{k=0}^{n} k^3\) and \(\sum_{k=0}^{n} k^4\), with relationships between these sums.

The key points:
- \(\sum_{k=0}^{n} 110 k^3 = 110\)
- We need to find \(\sum_{k=0}^{n} 81 k^4\)

Given the properties:
\[
\sum_{k=0}^{n} k^3 = \left(\frac{n(n+1)}{2}\right)^2
\]
and
\[
\sum_{k=0}^{n} k^4 = \frac{n(n+1)(2n+1)(3n^2+3n-1)}{30}
\]
but to keep it simple and code-focused, we will enumerate small \(n\) and check the conditions directly.

```python
# Program to find n such that sum of k^3 scaled by 110 equals 110
# and then compute the sum of k^4 scaled by 81 for the same n

# Using known formulas:
# sum_{k=0}^n k^3 = (n(n+1)/2)^2
# sum_{k=0}^n k^4 = n(n+1)(2n+1)(3n^2+3n-1)/30

def sum_k_cubed(n):
    return ((n * (n + 1)) // 2) ** 2

def sum_k_fourth(n):
    numerator = n * (n + 1) * (2 * n + 1) * (3 * n ** 2 + 3 * n - 1)
    return numerator // 30

# Enumerate small n to find those satisfying the condition
for n in range(1, 100):
    # sum_{k=0}^n 110 * k^3
    sum_cubed_scaled = 110 * sum_k_cubed(n)
    if sum_cubed_scaled == 110:
        # compute the sum of scaled k^4
        sum_fourth_scaled = 81 * sum_k_fourth(n)
        print(f"n = {n}")
        print(f"Sum of 110 * k^3: {sum_cubed_scaled}")
        print(f"Sum of 81 * k^4: {sum_fourth_scaled}")
        print(f"Corresponding sum of 81 * n^4 (for n={n}): {sum_fourth_scaled}")
```
