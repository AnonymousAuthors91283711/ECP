[write_program]
The problem involves finding integer pairs (p.1, p.2) satisfying the equation:
\[ p.1^2 - 2009 \times p.2 + 2 \times p.2^2 = 0 \]

This is a quadratic in \( p.1 \) with respect to \( p.2 \). For each integer \( p.2 \), we can find possible \( p.1 \) values by checking if the quadratic formula yields integer solutions.

Specifically:
\[ p.1^2 = 2009 p.2 - 2 p.2^2 \]
=> \( p.1^2 = p.2 (2009 - 2 p.2) \)

The right side must be a perfect square for \( p.1 \) to be integer.

Algorithm:
- Loop over small integer \( p.2 \) values within a range (say, -20 to 20).
- For each \( p.2 \), compute \( right = p.2 \times (2009 - 2 p.2) \).
- Check if \( right \) is a perfect square.
- If so, record \( p.1 = \pm \sqrt{right} \).

This approach efficiently enumerates all solutions within a small sample space to hypothesize about the full solution set.

```python
import math

solutions = []

# Enumerate p2 within a small range (adjust if needed)
for p2 in range(-20, 21):
    right = p2 * (2009 - 2 * p2)
    if right >= 0:
        root = int(math.isqrt(right))
        if root * root == right:
            # p1 can be Â± root
            solutions.append((root, p2))
            solutions.append((-root, p2))
            print((root, p2))
            print((-root, p2))
```
