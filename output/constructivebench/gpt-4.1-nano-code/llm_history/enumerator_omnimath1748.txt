[write_program]
This problem asks for the least natural number \(b > 1\) such that \(1 + b + b^2 + b^3\) is a perfect square. The goal is to enumerate small values of \(b > 1\) and check whether the sum is a perfect square, then determine the least such \(b\).

Here's the approach:
- Loop over small values of \(b\) starting from 2.
- Compute the sum \(S = 1 + b + b^2 + b^3\).
- Check if \(S\) is a perfect square by comparing \(\sqrt{S}\) rounded down squared to \(S\).
- When found, print \(b\) and \(S\).

This allows analysis of possible solutions without hardcoding.

```python
import math

# Enumerate b starting from 2, small upper limit for efficiency
for b in range(2, 50):
    S = 1 + b + b**2 + b**3
    root = int(math.isqrt(S))
    if root * root == S:
        print(f"b = {b}, sum = {S} = {root}^2")
        # Since we're searching for the least b, break after the first hit
        break
```
