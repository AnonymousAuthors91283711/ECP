[write_program]
This problem involves finding the greatest difference `d` between two integers \( m, n \) such that in the interval \([m, n)\), the number of multiples of 2021 exceeds the number of multiples of 2000.

Given the complexity, a practical approach is to:
- Fix small values for \( m \) near zero and increment \( n \).
- For each pair, count the multiples of 2021 and 2000 in \([m, n)\).
- Record differences where the count of 2021-multiples exceeds that of 2000-multiples.
- Track the maximum observed difference.

Since these are large numbers, we'll restrict search range for computational feasibility and number of checks. 

```python
# Enumerate pairs (m, n) with small m, n up to a certain limit
max_m = 20000
max_n = 25000

max_diff = -1
max_d_value = None

for m in range(max_m):
    for n in range(m+1, max_n):
        # Count multiples of 2021 in [m, n)
        count_2021 = (n - 1) // 2021 - (m - 1) // 2021
        # Count multiples of 2000 in [m, n)
        count_2000 = (n - 1) // 2000 - (m - 1) // 2000
        if count_2021 > count_2000:
            d = n - m
            print(d)  # stream partial results
            if d > max_diff:
                max_diff = d
                max_d_value = d
print("Maximum difference:", max_d_value)
```
