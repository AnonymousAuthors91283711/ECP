[write_program]
The problem involves finding the minimal value of a + b given constraints on a and b, where those constraints relate to divisibility conditions involving 77 and 79. We want to enumerate possible pairs (a, b) satisfying:

- a > 0, b > 0,
- 79 divides (a + 77b),
- 77 divides (a + 79b).

After substitution into these divisibility conditions, one approach is to parametrize the solutions. Since 77 and 79 are coprime, we can analyze the divisibility conditions to find integer solutions efficiently by fixing small values for b and deriving corresponding a.

```python
# Program to find minimal sum a + b given the divisibility constraints:
# 79 | (a + 77b)
# 77 | (a + 79b)
# with a > 0, b > 0

def main():
    results = []
    max_b = 100  # limit to explore small values for b
    for b in range(1, max_b + 1):
        # From 79 | (a + 77b), so a ≡ -77b mod 79
        a_mod_79 = (-77 * b) % 79
        # From 77 | (a + 79b), so a ≡ -79b mod 77
        a_mod_77 = (-79 * b) % 77
        # We need a ≡ a_mod_79 mod 79 and a ≡ a_mod_77 mod 77
        # Solve the system using Chinese Remainder Theorem
        # Since 77 and 79 are coprime, there is a unique solution mod (77*79)
        # We search for all such a ≥ 1 that satisfy the system

        for a_candidate in range(a_mod_79, 77*79+1, 79):
            if a_candidate >= 1:
                if a_candidate % 77 == a_mod_77:
                    total = a_candidate + b
                    print(total)
                    results.append(total)
    if results:
        print("Minimum sum:", min(results))
    else:
        print("No solutions found within limit.")

if __name__ == "__main__":
    main()
```
