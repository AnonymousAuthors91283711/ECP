[write_program]
The problem involves summing \( \sum_{i=0}^{2015} \frac{2^i}{25} \), then taking the result modulo 100, and finding the answer. Since directly summing over 2016 terms is large, focus on the pattern in the sum:

\[
\sum_{i=0}^{n} 2^i = 2^{n+1} - 1
\]

Dividing by 25 and reducing modulo 100 involves examining the sum modulo 2500 (since 25 divides the sum).

Observe:
\[
\sum_{i=0}^{2015} 2^i = 2^{2016} - 1
\]

The sum divides by 25:
\[
S = \frac{2^{2016} - 1}{25}
\]

To find \( S \bmod 100 \), compute \( 2^{2016} \bmod 2500 \), then divide and reduce.

Since \( \gcd(2, 2500) = 2 \), and for powers we focus on \( 2^{2016} \bmod 2500 \).

Calculate \( 2^{2016} \bmod 2500 \). Use Chinese Remainder Theorem by splitting \( 2500 = 4 \times 625 \).

- \( 2^{2016} \bmod 4 = 0 \) (since power is large, divisible by 4).
- \( 2^{2016} \bmod 625 \): using Euler's theorem:

Euler's totient \( \phi(625) = 625 \times (1 - \frac{1}{5})= 500 \).

Since \( 2^{500} \equiv 1 \bmod 625 \):

\[
2^{2016} \equiv 2^{2016 \bmod 500} \bmod 625
\]

Calculate \( 2016 \bmod 500 \):
\[
2016 \mod 500 = 16
\]

Compute \( 2^{16} \bmod 625 \):

\[
2^{16} = 65536
\]

And \( 65536 \bmod 625 \):

\[
625 \times 104 = 65000
\]
\[
65536 - 65000 = 536
\]

So:

\[
2^{16} \equiv 536 \bmod 625
\]

Now, I have the system:

\[
2^{2016} \equiv 0 \pmod{4}
\]
\[
2^{2016} \equiv 536 \pmod{625}
\]

Solve for \( 2^{2016} \bmod 2500 \):

Find \( x \equiv 0 (\bmod 4) \), \( x \equiv 536 (\bmod 625) \).

Write:

\[
x = 536 + 625k
\]

Require \( x \equiv 0 \pmod{4} \):

\[
(536 + 625k) \equiv 0 \pmod{4}
\]

Calculate \( 536 \bmod 4 \):
\[
4 \times 134 = 536
\implies 536 \equiv 0 \pmod{4}
\]

Calculate \( 625k \bmod 4 \):
\[
625 \equiv 1 \pmod{4}
\]
\[
625k \equiv k \pmod{4}
\]

Sum:

\[
0 + k \equiv 0 \pmod{4} \Rightarrow k \equiv 0 \pmod{4}
\]

k is divisible by 4: \( k = 4m \).

Set \( k=0 \):

\[
x = 536 + 625 \times 0= 536
\]

This satisfies the congruence.

Hence:

\[
2^{2016} \equiv 536 \pmod{2500}
\]

Now:

\[
S = \frac{2^{2016} - 1}{25}
\]

Calculate numerator modulo 2500:

\[
2^{2016} - 1 \equiv 536 - 1 = 535 \pmod{2500}
\]

Since \( 2^{2016} - 1 \equiv 535 \pmod{2500} \) and \( 2^{2016} - 1 \) is divisible by 25 (because \( 2^{2016} \equiv 0 \pmod{4} \) and the sum is divisible by 25), dividing:

\[
S \equiv \frac{2^{2016} - 1}{25} \pmod{100}
\]

Calculating:

\[
(2^{2016} - 1) / 25
\]

As \( 2^{2016} \equiv 536 \pmod{2500} \), then:

\[
2^{2016} - 1 \equiv 535 \pmod{2500}
\]

Divide both sides by 25:

\[
\frac{2^{2016} - 1}{25} \equiv \frac{535}{25} \pmod{100}
\]

But since division modulo requires care, note that:

\[
(2^{2016} - 1) = 25 \times Q \implies Q = S
\]

And:

\[
(2^{2016} - 1)/25 \equiv Q \pmod{100}
\]

Calculate \( Q \):

\[
Q \equiv \frac{2^{2016} - 1}{25} \equiv \frac{2^{2016} \bmod 2500 - 1}{25}
\]

Since \( 2^{2016} \equiv 536 \pmod{2500} \):

\[
Q \equiv \frac{536 - 1}{25} = \frac{535}{25} = 21.4
\]

but fractions modulo integers aren't straightforward.

Instead, better to note:

\[
S = \frac{2^{2016} - 1}{25}
\]

and \( 2^{2016} \equiv 536 \pmod{2500} \).

Express \( 2^{2016} = 536 + 2500k \).

So:

\[
2^{2016} - 1 = 536 + 2500k - 1 = 535 + 2500k
\]

Divide both sides by 25:

\[
S = \frac{2^{2016} - 1}{25} = \frac{535 + 2500k}{25} = \frac{535}{25} + 100k = 21.4 + 100k
\]

Thus, \( S \equiv 21.4 + 100k \).

We want \( S \bmod 100 \):

\[
S \equiv 21.4 \pmod{100}
\]

This fractional part indicates that the original approach needs refinement; perhaps it's better to directly compute the sum modulo 100.

Alternative: since the sum is \(\sum_{i=0}^{2015} 2^i / 25\), and the numerator sum is \(2^{2016} - 1\). Modulo 100, the sum is:

\[
\left(\frac{2^{2016} - 1}{25}\right) \bmod 100
\]

which can be computed by considering \( 2^{2016} \bmod 2500 \) as above.

From previous calculations, \( 2^{2016} \equiv 536 \pmod{2500} \).

Therefore:

\[
2^{2016} - 1 \equiv 535 \pmod{2500}
\]

Dividing numerator and denominator:

\[
S = \frac{2^{2016} - 1}{25} \approx \frac{535}{25} + \text{integer}
\]

and since 535 is 25*21 + 10, 535/25 = 21 + 10/25.

Leading to fractional parts, but since the original sum sums powers of 2 divided by 25 and the sum is designed to be an integer (since sum of powers of 2 is \(2^{2016} - 1\), divisible by 25? Let's check divisibility.

Check \( 2^{2016} - 1 \) mod 25:

\[
2^{2016} \bmod 25
\]

Because:

\[
2^{\text{lcm of orders}} \bmod 25
\]

We know Euler's theorem applies:

\[
2^{20} \equiv 1 \pmod{25}
\]
(since \( \phi(25)=20 \)).

Express \( 2016 \bmod 20 \):

\[
2016 \div 20 = 100 \times 20 = 2000\), remainder 16.

\[
2016 \equiv 16 \pmod{20}
\]

Calculate:

\[
2^{16} \bmod 25
\]

from earlier, \( 2^{16} = 65536 \), \( 65536 \bmod 25 \):

\[
25 \times 2621 = 65525
\]
\[
65536 - 65525 = 11
\]

So:

\[
2^{16} \equiv 11 \pmod{25}
\]

Thus:

\[
2^{2016} \equiv 11 \pmod{25}
\]

which means:

\[
2^{2016} - 1 \equiv 10 \pmod{25}
\]

Since it's congruent to 10 mod 25, it's **not** divisible by 25, so the sum \( (2^{2016} - 1)/25 \) is not an integer.

Therefore, the sum is not an integer.

But in the problem statement, the sum involves division by 25, and then the modulo is taken: the sum may need to be considered as a real number and then reduced mod 100.

Alternatively, perhaps the sum is the fractional sum, and the goal is just to find the fractional part times 1 or the approximate value modulo 100.

Given the details and complexity, perhaps more straightforward is to approximate the sum numerator \( 2^{2016} - 1 \), then divide by 25, then find modulo 100.

Because \( 2^{2016} \bmod 10^4 \) could be computed via fast exponentiation.

Let's do that in code.

Based on all above, the simplest way is to compute \( 2^{2016} \bmod 2500 \), as outlined, then compute the sum accordingly.

Here's the plan:

- Compute \( 2^{2016} \bmod 2500 \) using fast exponentiation.
- Calculate \( (2^{2016} - 1) // 25 \), then find that value mod 100.

Let's implement that now.

```python
# Python code to compute the sum modulo 100 as per problem.

def fast_pow(base, exp, mod):
    result = 1
    base %= mod
    while exp > 0:
        if exp & 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exp >>= 1
    return result

# Compute 2^2016 mod 2500
pow_mod = fast_pow(2, 2016, 2500)

# 2^2016 ≡ pow_mod mod 2500
# 2^2016 - 1 ≡ pow_mod - 1 mod 2500
# Sum = (2^2016 - 1) / 25
# Since (2^2016 - 1) ≡ pow_mod - 1 mod 2500 and not necessarily divisible by 25,
# we need to perform integer division carefully.

# But numerator may not be divisible by 25, so the fractional part is ignored?

# Alternatively, consider that the sum is (2^2016 - 1)/25 as a real number.
# We can compute:

sum_value = (pow_mod - 1) / 25

# Now, take sum_value mod 100
answer = sum_value % 100

# Output the integer part for simplicity (since problem asks for modulo 100)
int_answer = int(answer)
print(int_answer)
```

This code calculates the approximate value of the sum and reduces it modulo 100, providing a candidate answer stream.

---

**Final answer:**

```python
def fast_pow(base, exp, mod):
    result = 1
    base %= mod
    while exp > 0:
        if exp & 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exp >>= 1
    return result

pow_mod = fast_pow(2, 2016, 2500)

sum_value = (pow_mod - 1) / 25

answer = sum_value % 100

print(int(answer))
```
