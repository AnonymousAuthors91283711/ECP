[write_program]
This problem asks to find the number of integers n between 1 and 100 inclusive such that the number of divisors of 10 * n is exactly 3 times the number of divisors of n. We need to enumerate all such n and count them, then output the count as `omnimath1929_answer`.

Plan:
- For each n from 1 to 100:
  - Compute the number of divisors of n.
  - Compute the number of divisors of 10 * n.
  - Check if the latter is exactly 3 times the former.
- Count how many satisfy this condition.
- Output the count.

```python
def divisor_count(x):
    count = 0
    for i in range(1, int(x**0.5) + 1):
        if x % i == 0:
            count += 2 if i != x // i else 1
    return count

answer = 0
for n in range(1, 101):
    divisors_n = divisor_count(n)
    divisors_10n = divisor_count(10 * n)
    if divisors_10n == 3 * divisors_n:
        print(n)  # Stream the valid n if needed
        answer += 1

print(f"omnimath1929_answer := {answer}")
```
