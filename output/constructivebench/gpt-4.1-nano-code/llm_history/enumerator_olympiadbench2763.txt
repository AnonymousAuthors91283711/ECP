[write_program]
This problem involves exploring values of n to find the least n > 0 such that P(n+23) = P(n) + 23, where P(n) is the product of the digits of n. We can do this by:
- Defining P(n)
- Checking candidate n starting from small values upward
- Finding the first n that satisfies P(n+23) = P(n) + 23
- Because multitasking with all natural numbers is infeasible, we'll accumulate candidates up to some threshold (say 1000), then select the minimal n satisfying the condition, and output it immediately upon discovery

Here's an efficient approach:
- Enumerate n from 1 up to 1000
- For each n, check the condition
- When the condition is met, print n immediately
- Finally, output the minimum such n

```python
# Python code to emulate the enumeration for the given problem
def prod_digits(n):
    prod = 1
    for d in map(int, str(n)):
        prod *= d
        if prod == 0:  # Early stop if a zero digit is encountered
            return 0
    return prod

found_n = None
for n in range(1, 1001):
    if prod_digits(n + 23) == prod_digits(n) + 23:
        print(n)
        found_n = n
        break
if found_n:
    print(f"Least n satisfying condition: {found_n}")
else:
    print("No n found within range")
```
