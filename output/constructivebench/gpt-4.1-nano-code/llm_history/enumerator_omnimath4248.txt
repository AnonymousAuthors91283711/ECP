[write_program]
The problem involves finding all triples \((a, b, c)\) of real numbers satisfying the two equations:
\[ a + b + c = \frac{1}{a} + \frac{1}{b} + \frac{1}{c} \]
and
\[ a^2 + b^2 + c^2 = \frac{1}{a^2} + \frac{1}{b^2} + \frac{1}{c^2}. \]

We can approach the enumeration by simplifying the problem:
- Recognize that the equations are symmetric in \(a, b, c\).
- Check for solutions where some variables are equal for simplicity.
- For a small sample, test simple rational values \(\pm 1, \pm 2, \pm 1/2\) for possible solutions, ensuring denominators are non-zero.

The key is that the equations imply symmetric relationships, and the equations balance when all three variables are equal or form specific triplets.

Let's implement a Python script that:
- Selects small rational sample values for \(a, b, c\).
- Checks whether they satisfy the equations.
- Prints solutions when they do.

This will help in conjecturing and possibly confirming some solutions.

```python
# Enumerate over small rational values for potential solutions
import itertools

# Candidate values (excluding zero to avoid division by zero)
values = [-2, -1, -0.5, 0.5, 1, 2]

# To reduce computation, check only triplets where a <= b <= c
for a, b, c in itertools.product(values, repeat=3):
    if a == 0 or b == 0 or c == 0:
        continue
    # Check the first equation: sum of variables equals sum of their reciprocals
    eq1_left = a + b + c
    eq1_right = 1/a + 1/b + 1/c
    # Check the second equation: sum of squares equals sum of reciprocals of squares
    eq2_left = a**2 + b**2 + c**2
    eq2_right = 1/(a**2) + 1/(b**2) + 1/(c**2)
    # Use a tolerance for floating-point comparison
    if abs(eq1_left - eq1_right) < 1e-10 and abs(eq2_left - eq2_right) < 1e-10:
        print(f"Solution: (a, b, c) = ({a}, {b}, {c})")
```
