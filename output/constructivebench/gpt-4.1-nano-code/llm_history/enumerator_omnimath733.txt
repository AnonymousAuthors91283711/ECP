[write_program]
The problem involves analyzing a number `n` with specific conditions:
- It is divisible by 210 (since `(n+1) % 210 = 0` implies `n + 1` is divisible by 210),
- The sum of its digits equals twice the number of digits,
- The number of digits is at most 12,
- Evenness conditions on indices and digits.

Since `(n + 1)` is divisible by 210, we have `n ≡ -1 ≡ 209 (mod 210)`. The possible `n` are of the form `n = 210k - 1`. Given the small digit sum relation and digit length constraints, we can focus on small multiples and check the digit sum conditions.

The key is to find all `n` with:
- `n` in `210k - 1`,
- `digits(n).sum = 2 * digits(n).length`,
- length ≤ 12,
- and the parity condition on digit positions.

We enumerate candidate `k` from 1 up to the maximum number to keep the number length ≤ 12, i.e., `n < 10^{12}`. That is, `210k - 1 < 10^{12}` → `k < (10^{12} + 1)/210`.

We generate numbers, check digit sum, length, and the parity condition.

```python
import itertools

def digits_of(n):
    return [int(d) for d in str(n)]

answers = []

# Upper bound for k to ensure number length ≤ 12
max_k = (10**12 + 1) // 210 + 1

for k in range(1, max_k):
    n = 210 * k - 1
    n_digits = digits_of(n)
    length = len(n_digits)
    # Check length constraint
    if length > 12:
        continue
    digit_sum = sum(n_digits)
    # Check the digit sum condition
    if digit_sum == 2 * length:
        # Check the parity condition:
        # For all i: even i (0-based) implies digit[i] even =
        # For all even i, digit[i] must be even, and vice versa.
        # To check if for all i: even i <=> digit[i] even
        parity_matches = True
        for i in range(length):
            if (i % 2 == 0) != (n_digits[i] % 2 == 0):
                parity_matches = False
                break
        if parity_matches:
            print(n)
            answers.append(n)

# The set 'answers' contains all such n satisfying the conditions.
```
