[write_program]
This problem asks for the least three-digit number \( n \) (i.e., \( 100A + 10B + C \)) with digits \( A, B, C \in \{1,\dots,9\} \), such that 
\[ n = B^{C} - A. \]
Since \( n \) is three-digit, \( A \in [1,9], B, C \in [1,9] \). We want to find the minimal \( n \) satisfying these conditions.

To find the least such \( n \), we can iterate over all possible digit combinations from smallest to largest, check the condition, and print solutions immediately.

Here's the Python code to do that efficiently:

```python
# Search for minimal n = 100*A + 10*B + C with A, B, C in 1..9 such that n = B^C - A
# We iterate over A, B, C in ascending order to find the smallest n quickly
import math

def main():
    min_n = None
    answer = None
    for A in range(1, 10):
        for B in range(1, 10):
            for C in range(1, 10):
                n_candidate = B ** C - A
                # Check if n_candidate is three-digit and matches the pattern n = 100*A + 10*B + C
                if 100 <= n_candidate <= 999:
                    n_str = str(n_candidate)
                    if int(n_str[0]) == A and int(n_str[1]) == B and int(n_str[2]) == C:
                        print(n_candidate)
                        # Update answer if it's the smallest found so far
                        if min_n is None or n_candidate < min_n:
                            min_n = n_candidate
                            answer = (A, B, C)
    if answer:
        print(f"Minimal n: {min_n} with digits A={answer[0]}, B={answer[1]}, C={answer[2]}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
```

This script enumerates all combinations, filters correct three-digit numbers matching the pattern, and prints each candidate immediately when found, effectively streaming solutions. It stops at the smallest solution.
