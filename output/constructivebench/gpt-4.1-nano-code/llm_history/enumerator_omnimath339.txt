[write_program]
This problem involves finding positive integers \(L\) such that the sum \(S(L) = \sum_{n=1}^{L} \left\lfloor \frac{n}{2} \right\rfloor \) is a perfect square. To analyze this, we can compute \(S(L)\) explicitly for small \(L\), observe the pattern, and identify which values of \(L\) produce perfect squares.

The sum \(S(L)\) can be expressed in closed form:
- For \(L\) even, say \(L=2m\):
  \[
  S(2m) = m^2
  \]
- For \(L\) odd, say \(L=2m+1\):
  \[
  S(2m+1) = m^2 + m
  \]

Thus, \(S(L)\) takes on the following values:
- When \(L\) even:
  \[
  S(L) = \left(\frac{L}{2}\right)^2
  \]
- When \(L\) odd:
  \[
  S(L) = \left\lfloor \frac{L}{2} \right\rfloor^2 + \left\lfloor \frac{L}{2} \right\rfloor
  \]

We want \(S(L) = k^2\) for some integer \(k\). From the expressions:

- For even \(L=2m\):
  \[
  S(L) = m^2 \implies \text{always a perfect square}
  \]
- For odd \(L=2m+1\):
  \[
  S(L) = m^2 + m = m(m+1)
  \]
  
\(m(m+1)\) is a product of consecutive integers, which is a perfect square only if \(m=0\) (trivial).

Thus, **the only solutions are at even \(L\),** and all such \(S(L) = (L/2)^2\) are perfect squares for any positive even \(L\).

---

Below is a Python script that enumerates \(L\) from 1 to 50, checking for when \(S(L)\) is a perfect square, efficiently, based on the derived formulas.

```python
import math

# Since S(L) for even L = (L//2)^2, always a perfect square for L > 0 and even.
# For odd L, S(L) = (L//2)^2 + (L//2), which is not always a perfect square.
# We only need to verify the even case for solutions.

# Set range limits for L
max_L = 50

for L in range(1, max_L + 1):
    if L % 2 == 0:
        k = L // 2
        sum_value = k * k
        print(f"L={L} (even), S(L)={sum_value} = ({k})^2 (perfect square)")
    else:
        m = L // 2
        sum_value = m * m + m
        # check if sum_value is perfect square
        root = int(math.isqrt(sum_value))
        if root * root == sum_value:
            print(f"L={L} (odd), S(L)={sum_value} = {root}^2")
        # else, do not print
```
