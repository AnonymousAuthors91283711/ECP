[write_program]
The problem involves finding all natural numbers \( n \) such that there exist natural numbers \( a, b \) with \( b > n \), and the division \((a^2 + n^2) \) is divisible by \( (b^2 - n^2) \), which itself is positive. Our goal is to enumerate possible solutions for \( n \) within a manageable range and to understand the conditions better.

Since it's high-school level, we will test values of \( n \) from 1 to 30, look for \( a, b \) satisfying the conditions, and then output all \( n \) that satisfy the condition. To maximize efficiency, we only iterate over reasonable ranges for \( b \) relative to \( n \), and for each \( b \), over \( a \) up to a limit tied to \( b \).

```python
# Enumerate small values of n, b, a to find all n satisfying the condition
max_n = 30
results = []

for n in range(1, max_n + 1):
    found = False
    # b must be greater than n, choose b up to n+50 for feasibility
    for b in range(n + 1, n + 51):
        denom = b * b - n * n
        if denom <= 0:
            continue  # ensure positivity
        # a can be roughly up to b, since a^2 + n^2 should be divisible by denom
        for a in range(0, b + 20):
            numerator = a * a + n * n
            if numerator % denom == 0:
                print(f"n={n}, a={a}, b={b} => (a^2 + n^2) divisible by (b^2 - n^2)")
                if n not in results:
                    results.append(n)
                found = True
    # Optional: stop early if all n are checked
# Output all n satisfying the condition
print("Solutions for n:", sorted(results))
```
