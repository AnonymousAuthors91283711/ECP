[write_program]
This problem involves counting numbers between 0 and 9999 (inclusive) that have digits with at most two distinct digits. To enumerate all such numbers efficiently, we will:

- Generate all pairs of digits (from 0 to 9) that can form the number.
- For each pair, generate all numbers with digits only from this pair.
- Count those numbers within the range 0 to 9999 (including leading zeros).

We will print each valid number immediately during generation. The programming approach:

- Iterate over all digit pairs (d1, d2).
- Generate all numbers with digits only from the pair.
- Filter those within 0 to 9999.
- Print each number as it's found.
- Count total such numbers.

Because of constraints, this approach is manageable and maintains efficiency, focusing on small digit sets.

```python
def main():
    counted = 0
    for d1 in range(10):
        for d2 in range(d1, 10):  # Avoid duplicate pairs (d1, d2) and (d2, d1)
            digits = [d1, d2]
            # Generate all numbers with digits only from this pair, leading zeros allowed
            for length in range(1, 5):  # length from 1 to 4 digits (since 0 to 9999)
                for number_digits in product(digits, repeat=length):
                    # Convert to integer - leading zeros are handled naturally
                    num = int(''.join(map(str, number_digits)))
                    if 0 <= num <= 9999:
                        print(num)
                        counted += 1

from itertools import product

main()
```
