[write_program]
The problem asks us to compute the sum \(\sum_{k=0}^{100} \left\lfloor \frac{2^{100}}{2^{50} + 2^k} \right\rfloor\). We can analyze the behavior of the summand for different \(k\) values, especially noting how the denominator compares to \(2^{100}\), and approximate or compute explicitly.

Since the sum involves powers of 2, we can generate the terms for \(k=0\) to \(100\), compute each floor precisely, and accumulate the sum, streaming each answer as we go. This approach is efficient and straightforward.

```python
# Enumerate over k from 0 to 100
total_sum = 0
for k in range(101):
    numerator = 2 ** 100
    denominator = 2 ** 50 + 2 ** k
    value = numerator // denominator  # floor division ensures exact floor
    print(value)
    total_sum += value
print("Total sum:", total_sum)
```
