[write_program]
The problem involves characterizing the maximum of the expression \( y = \frac{b}{a} + \frac{c}{b} + \frac{a}{c} \) subject to conditions on \( a, b, c \). The constraints specify \( a, b, c > 0 \), with \( a \leq b \leq c \leq 2a \).

To find the maximum, I'll analyze the problem heuristically:

- Because \( c \leq 2a \), the upper bound for \( c \) relative to \( a \).
- The expression involves ratios of \( a, b, c \), so increasing \( c \) while maintaining constraints might increase the sum.
- The extremal case likely occurs at boundary points: either \( c = 2a \) or \( a \), similarly for \( b \).

Choosing small \( a \), e.g., \( a = 1 \), and maximal \( c \), \( c = 2a = 2 \), and setting \( b \) as either minimal or maximal within constraints, to maximize the sum.

Implementation enumerates discrete candidates for \( a \), \( b \), \( c \) in a small range, respecting the inequalities, computes candidates for \( y \), and outputs maxima found.

```python
# Enumerate small values for a, b, c under the constraints to find the maximum y
max_y = None
max_candidates = []

for a in [1, 2, 3]:
    for b in range(a, 2*a+1):  # b in [a, 2a]
        for c in range(b, 2*a+1):  # c in [b, 2a]
            # Convert to float for ratio calculations
            a_f, b_f, c_f = float(a), float(b), float(c)
            y = b_f / a_f + c_f / b_f + a_f / c_f
            print(f'Candidate a={a}, b={b}, c={c} => y={y}')
            if max_y is None or y > max_y:
                max_y = y
                max_candidates = [(a, b, c, y)]
            elif y == max_y:
                max_candidates.append((a, b, c, y))
print(f'Maximum y found: {max_y} with candidates: {max_candidates}')
```
