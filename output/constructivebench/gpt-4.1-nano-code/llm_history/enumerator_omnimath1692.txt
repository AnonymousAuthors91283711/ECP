[write_program]
The problem involves finding a list of integers `l` such that:
- All elements are non-zero.
- Every 7-element sublist has a sum > 0.
- Every 11-element sublist has a sum < 0.
And we want the greatest such list according to some order (likely lexicographical).

This is complex, so weâ€™ll try small constructed lists with integer values, test all relevant sublists, and record those that satisfy the conditions.

Here's the approach:
- Use small integers like `-1`, `1`, and `2` (since sums over sublists must be positive or negative).
- Generate candidate lists with different lengths.
- Check all sublists of length 7 and 11.
- Record those that satisfy the conditions.
- Select the maximum (lexicographically).

This code enumerates candidates up to a reasonable length (e.g., 15). It stops when it finds the maximum satisfying list.

```python
# Enumerate candidate lists with small integers to satisfy conditions:
# All elements non-zero, sums of 7-element sublists > 0, sums of 11-element sublists < 0.
from itertools import product, combinations

def check_conditions(lst):
    n = len(lst)
    # Check all 7-element sublists
    for start in range(n - 6):
        if sum(lst[start:start+7]) <= 0:
            return False
    # Check all 11-element sublists
    for start in range(n - 10):
        if sum(lst[start:start+11]) >= 0:
            return False
    # All conditions satisfied
    return True

# Search parameters
max_length = 15
elements = [-2, -1, 1, 2]
best_list = []

# Generate candidate lists of lengths from 7 to max_length
for length in range(7, max_length+1):
    for candidate in product(elements, repeat=length):
        lst = list(candidate)
        # Check that all elements are non-zero (already in elements set)
        if check_conditions(lst):
            print(lst)  # print immediately when candidate satisfies conditions
            if lst > best_list:
                best_list = lst

print("Maximum list:", best_list)
```
