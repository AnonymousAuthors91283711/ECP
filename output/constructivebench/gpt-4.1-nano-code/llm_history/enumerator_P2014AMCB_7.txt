[write_program]
This math problem involves counting natural numbers \( n \) between 0 and 30 that satisfy the equation \( n = k \times (30 - n) \) with \( k > 0 \). We need to find all such \( n \) and determine how many there are. 

Let's analyze: For each \( n \), check if there exists \( k > 0 \) such that \( n = k (30 - n) \). This implies \( n / (30 - n) = k \), and \( k \) must be a positive integer, so \( (30 - n) \) must divide \( n \) evenly, with quotient \( k > 0 \).

We'll enumerate \( n \) from 1 to 29 (since \( n < 30 \) and \( n > 0 \) per the set description), both inclusive. For each \( n \), check if \( 30 - n \) divides \( n \), and if yes, verify \( k = n / (30 - n) > 0 \). Count such \( n \).

```python
# Enumerate n from 1 to 29, check if (30 - n) divides n and k = n / (30 - n) > 0
answers = []
for n in range(1, 30):
    divisor = 30 - n
    if n % divisor == 0:
        k = n // divisor
        if k > 0:
            answers.append(n)
            print(f"Found n={n} with divisor={divisor}, k={k}")

# Count of such n
print("Total solutions:", len(answers))
```
