[write_program]
This problem involves finding the greatest integer \( n \) such that \( n^2 = (m+1)^3 - m^3 \) for some integer \( m \). We note that \( (m+1)^3 - m^3 = 3m^2 + 3m + 1 \). Therefore, the key is to analyze the equation:

\[ n^2 = 3m^2 + 3m + 1 \]

We want to find all integer solutions \( (m, n) \), then identify the greatest such \( n \).

Approach:
- For small \( m \), compute \( n^2 = 3m^2 + 3m + 1 \).
- Check if the RHS is a perfect square.
- Collect all solution \( n \) values.
- Output the maximum \( n \) found.

Since the problem asks for the greatest such \( n \), we'll check \( m \) within a certain bounds, say \(-50 \leq m \leq 50\), sufficient to find any maximum given the quadratic growth.

```python
# Enumerate m in a range, check if 3m^2 + 3m + 1 is a perfect square.
# Collect all such n and then find the maximum n.

import math

possible_ns = []

for m in range(-50, 51):
    val = 3 * m * m + 3 * m + 1
    root = int(math.isqrt(val))
    if root * root == val:
        # n = Â± root
        possible_ns.extend([root, -root])

max_n = max(possible_ns) if possible_ns else None

# Output all found n values in order
for n in sorted(possible_ns):
    print(n)
# Output the maximum n
print(f"Maximum n: {max_n}")
```
