[write_program]
The problem defines a set of real numbers \( z \) where there exist positive real numbers \( x, y \) satisfying \( x + y \leq 1 \), and \( z \) equals \( x^4 + y^4 - x^2 y - x y^2 \). The theorem asks for the least such \( z \).

To find the minimal \( z \), we can explore pairs \( (x, y) \) within \( (0, 1] \), especially near 0 and close to 1, as extreme values often occur at boundary points or critical points within the constraints. For simplicity, sample small, medium, and large values of \( x \) and \( y \) under the constraint \( x + y \leq 1 \), and compute the corresponding \( z \). We will look for the minimum.

```python
# Enumerate pairs (x, y) with small, medium, and large values under x + y <= 1
# and compute z = x^4 + y^4 - x^2*y - x*y^2.
# We print each computed z that could be the minimal candidate.

import itertools

step = 0.1  # step size for sampling
min_z = float('inf')
min_pair = None

for x in [i * step for i in range(0, 11)]:  # x from 0 to 1
    for y in [j * step for j in range(0, 11)]:  # y from 0 to 1
        if x + y <= 1 + 1e-8:  # allow for floating point tolerance
            # Compute z
            z = x**4 + y**4 - x**2 * y - x * y**2
            print(f"x={x:.2f}, y={y:.2f} => z={z:.6f}")
            if z < min_z:
                min_z = z
                min_pair = (x, y)

print(f"\nApproximate minimal z is {min_z:.6f} at (x, y) = ({min_pair[0]:.2f}, {min_pair[1]:.2f})")
```
