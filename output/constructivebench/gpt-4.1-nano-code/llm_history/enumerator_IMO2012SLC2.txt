[write_program]
This problem involves finding the maximum number of pairs of integers (a, b), each sum ≤ n, such that no two pairs share the same coordinate or sum. We want to enumerate possible maximal sizes for small n to observe the pattern and conjecture the formula.

Approach:
- For small n (say up to 20), generate all feasible sets satisfying the constraints.
- Store the maximum size for each n.
- Since the problem involves combinatorics and constraints, a brute-force enumeration over all subsets is possible for small n.
- We'll iterate over all subsets of candidate pairs, check constraints, and keep track of the maximum size found.

The code performs:
- For n from 1 to 20,
- Generate all possible pairs (a, b) with a, b ≥ 1 and a+b ≤ n,
- Check that no two pairs share any coordinate or sum,
- Keep track of the maximum size,
- Print each answer immediately upon discovery.

This allows us to observe the pattern and conjecture the formula.

```python
from itertools import combinations, product

# Generate all pairs with a, b ≥ 1 and a+b ≤ n
def generate_pairs(n):
    return [(a, b) for a in range(1, n) for b in range(1, n) if a + b <= n]

# Check if a set of pairs satisfies the constraints
def valid_set(pairs):
    coords = set()
    sums = set()
    for a, b in pairs:
        if (a in coords) or (b in coords) or ((a + b) in sums):
            return False
        coords.add(a)
        coords.add(b)
        sums.add(a + b)
    return True

# For each n, find the maximum size of such a set
for n in range(1, 21):
    candidates = generate_pairs(n)
    max_size = 0
    # Generate all subsets up to size len(candidates)
    for r in range(len(candidates)+1):
        for subset in combinations(candidates, r):
            if valid_set(subset):
                if len(subset) > max_size:
                    max_size = len(subset)
    print(f'n={n}, maximum number of pairs = {max_size}')
```
