[write_program]
The problem seems to involve finding the minimal number of friendships (edges) in a graph with n = 2000 nodes, where each node has exactly k = 1000 friends, and the friendship relationship is symmetric (bi-directional). The goal is to compute the smallest possible size of such a symmetric friendship set.

Since the problem hints at a highly symmetric scenario, it is akin to a regular graph with degree k and n nodes. For a k-regular graph on n nodes, the total number of friendship edges is (n * k) / 2. We will enumerate possible answers for different small values close to that bound, then identify the minimal.

Key points:
- The total number of edges in a k-regular graph with n nodes is (n * k) / 2.
- For n=2000, k=1000, total edges = (2000 * 1000) / 2 = 1,000,000.
- We will enumerate possible answer candidates around this value and print the minimal.

```python
# Enumerate possible number of edges in the symmetric friendship graph for given n=2000, k=1000
# Since the graph must be regular with degree k, total edges = n*k/2 = 1,000,000
# Our goal: find the minimum total number of edges satisfying the regularity constraints.
# For simplicity, we explore values close to the ideal 1,000,000, in case of feasibility.

def enumerate_friendship_counts():
    n = 2000
    k = 1000
    # total edges in a perfect k-regular graph
    ideal_edges = (n * k) // 2
    candidates = []

    # Enumerate as min just the ideal, plus nearby values for robustness
    for edges in range(ideal_edges - 10, ideal_edges + 11):
        if edges >= 0 and edges <= n*(n-1)//2:
            print(edges)
            candidates.append(edges)
    # Output the minimal, which is the smallest candidate
    print("Minimum edges:", min(candidates))

if __name__ == "__main__":
    enumerate_friendship_counts()
```
