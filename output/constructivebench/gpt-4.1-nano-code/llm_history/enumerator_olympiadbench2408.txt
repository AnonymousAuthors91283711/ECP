[write_program]
The problem involves finding the number of quadruples of positive integers \((a, b, c, d)\) satisfying the given inequalities and equations:

- \(a > 0, b > 0, c > 0, d > 0\)
- \(a < b < c < d\)
- \(a \times c + a \times d + b \times c + b \times d = 2023\)
- \(a + b + c + d = 296\)

Since direct algebraic solving is complex, I will enumerate candidate quadruples \((a, b, c, d)\) with small \(a\) (starting from 1 upwards), given the constraints, and check whether they satisfy all conditions. To improve efficiency:
- Fix \(a\) and try \(b, c, d\) respecting \(a < b < c < d\).
- Use the sum to limit possible values.
- Immediately discard invalid or unnecessary candidates.

I will stop the enumeration once reaching the maximum bounds that yield valid solutions.

Here's the code:

```python
# Enumerate all quadruples (a, b, c, d) satisfying the constraints
# Since a < b < c < d and their sum is 296, quick bounds:
# a at least 1, at most 296//4 = 74 (roughly), but keep it small for efficiency
# For each a, b, c, determine d and check conditions
answers = []

for a in range(1, 75):  # small a
    for b in range(a+1, 75):
        for c in range(b+1, 75):
            # Since a+b+c+d=296, d=296 - (a+b+c)
            d = 296 - (a + b + c)
            if d <= c:  # must satisfy c < d
                continue
            if d <= 0:
                continue
            # Check the linear combination sum
            total = a*c + a*d + b*c + b*d
            if total == 2023:
                print((a, b, c, d))
                answers.append((a, b, c, d))
# Number of solutions found
print("Total solutions:", len(answers))
```

This approach systematically explores candidate solutions, printing each valid quadruple immediately as it is found. It ensures efficiency by bounding search ranges and filtering early for inequality constraints.
