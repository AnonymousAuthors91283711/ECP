[write_program]
This problem involves permutations of finite sets and sums over their signatures with specific permutation properties. To approach it, I will write a Python script that:
- Enumerates permutations for small `n`.
- Computes the functions `f(π)` and `g(π)` for each permutation.
- Summates `(-1)^{f(π)+g(π)}` over all permutations.
- Uses small `n` for tractability (e.g., n=4 or n=5) due to factorial growth.
- Streams answers as soon as computed, and outputs the total sum for small `n`.

This can provide a conjecture for the value of the given sum for larger `n`, guiding proof attempts.

```python
import itertools
from math import factorial

# Functions f and g based on the permutation pi and set size n
def f(n, pi):
    count = 0
    for p in itertools.product(range(n), repeat=2):
        if p[0] < p[1] and pi[p[0]] > pi[p[1]]:
            count += 1
    return count

def g(n, pi):
    count = 0
    for k in range(n):
        if (pi[k] - k) % n in {1, n-1}:
            count += 1
    return count

# For small n, compute sum over all permutations
def sum_over_permutations(n):
    total = 0
    perms = list(itertools.permutations(range(n)))
    total_perms = factorial(n)
    print(f"Enumerating all permutations for n={n} ({total_perms} permutations)...")
    for perm in perms:
        pi = list(perm)
        exponent = f(n, pi) + g(n, pi)
        term = (-1) ** exponent
        print(f"Permutation: {pi}, f={f(n,pi)}, g={g(n,pi)}, term={term}")
        total += term
    print(f"Total sum for n={n}: {total}")

# Run for small n to gather data
if __name__ == "__main__":
    # Adjust n as needed for more manageable computations
    sum_over_permutations(4)
```
