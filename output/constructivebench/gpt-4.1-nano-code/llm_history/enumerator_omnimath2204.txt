[write_program]
This problem involves complex numbers, polynomial interpolation, and extremal properties related to roots of unity and their powers. To narrow down possible solutions, consider small parameters and test various roots of unity whose powers satisfy the imaginary part condition and are not equal to 1. We focus on small k and corresponding roots z, then analyze the quadratic polynomial fitting the sequence f(n) = (z^n).re for n=0,..,3, and check the minimal and maximal such parameters to assist in conjecture.

The enumerator will:
- Test small k values (like 1,2,3,4).
- For each, find z with |z|=1, 0 < k, z^k's imaginary part zero, and z^k ≠ 1.
- For each candidate z, generate f(n) for n=0..3, fit quadratic p(n).
- Output possible extremal polynomial coefficients.

```python
import math
import cmath

def find_roots_for_k(k):
    candidates = []
    # For small k, sample z on unit circle at rational angles
    for angle_deg in range(0, 360, 10):
        theta = math.radians(angle_deg)
        z = cmath.exp(1j * theta)
        z_k = z ** k
        # Check if imaginary part of z^k is close to 0 and z^k ≠ 1
        if abs(z_k.imag) < 1e-8 and abs(z_k - 1) > 1e-8:
            candidates.append(z)
    return candidates

def generate_sequence(z):
    f = []
    for n in range(4):
        val = (z ** n).real
        f.append(val)
    return f

def fit_quadratic(n, vals):
    # Solve for a, b, c in p(n)=a n^2 + b n + c through 4 points
    # Set up system:
    # p(0)=c
    # p(1)=a + b + c
    # p(2)=4a + 2b + c
    # p(3)=9a + 3b + c
    A = [
        [0**2, 0, 1],
        [1**2,1,1],
        [2**2,2,1],
        [3**2,3,1]
    ]
    import numpy as np
    M = np.array(A)
    Y = np.array(vals)
    coeffs = np.linalg.lstsq(M, Y, rcond=None)[0]
    a, b, c = coeffs
    return a, b, c

print("Enumerating candidates for small k with z on unit circle...")
for k in [1, 2, 3, 4]:
    zs = find_roots_for_k(k)
    print(f"k={k}, found {len(zs)} candidate roots.")
    for z in zs:
        seq_vals = generate_sequence(z)
        a, b, c = fit_quadratic(0, seq_vals)
        print(f"z={z:.3f}+{z.imag:.3f}j, sequence={seq_vals}, quadratic: {a:.3f}n^2 + {b:.3f}n + {c:.3f}")

# Results can be analyzed to conjecture extremal polynomials fitting these sequences,
# aiding in understanding minimal/maximal solutions for the original problem.
```
