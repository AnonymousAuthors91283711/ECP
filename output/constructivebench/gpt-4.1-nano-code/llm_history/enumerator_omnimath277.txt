[write_program]
This problem involves a polynomial \( P \) of degree \( n \), with given evaluation points, and asks to determine \( P \) evaluated at \( n+1 \). To assist in conjecturing the answer, we'll iterate over small degrees \( n \), define the constraints, and compute the polynomial evaluations explicitly using Lagrange interpolation at points \( 0, 1, \ldots, n \). We then evaluate the polynomial at \( n+1 \).

Simplify the problem:
- For small \( n \), explicitly construct the interpolating polynomial based on the points:
  \[
  P(k) = \frac{k}{k+1}
  \]
- Use Lagrange interpolation formula for points \((k, P(k))\).

This approach will computationally generate candidate answers, and we print them immediately as we compute, aiding in formulating a conjecture.

```python
import numpy as np

# Function to perform Lagrange interpolation for points (k, P(k))
def lagrange_interpolation(xs, ys, x_eval):
    total = 0
    n = len(xs)
    for i in range(n):
        xi, yi = xs[i], ys[i]
        term = yi
        for j in range(n):
            if j != i:
                xj = xs[j]
                term *= (x_eval - xj) / (xi - xj)
        total += term
    return total

# For small degrees n=0 to 4, compute P(n+1)
for n in range(5):
    xs = list(range(n + 1))
    ys = [k / (k + 1) for k in xs]
    eval_point = n + 1
    result = lagrange_interpolation(xs, ys, eval_point)
    # Output each candidate answer
    print(f"n={n}, P({eval_point}) â‰ˆ {result}")
```
