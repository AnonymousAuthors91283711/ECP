[write_program]
The problem involves a function `f : ℚ → ℝ` with certain properties, including a functional equation resembling a scaled additive condition, plus the bounds `f x > α > 0` for all rationals `x`. The goal is to characterize all functions satisfying these conditions, which are likely linear functions with specific parameters.

Since the core properties involve an additive-like relation scaled by `α`, and the key condition `f x > α`, it suggests `f` could be proportional to `x`. The goal is to find all such functions and determine when they take the form `f x = a * x` with `a > 2`.

The enumeration code will:
- Search for candidate coefficients `a` starting from values greater than 2.
- Test if `f x = a * x` satisfies the properties, especially the functional equation.
- Output all such candidate functions until a certain search limit.

This approach simplifies the functional equation verification to algebraic checks, and we look for all `a` satisfying the properties.

```python
# Enumeration of candidates for a with a > 2, testing the functional properties
def test_functional_relation(a, x_values):
    # Check if for all x,y, the relation holds
    for x in x_values:
        for y in x_values:
            lhs = (a * ((x + y) / 1))  # assuming α=1 for simplicity in enumeration
            rhs = ((a * x + a * y) / 1)
            if abs(lhs - rhs) > 1e-9:
                return False
    return True

def main():
    # We choose small x values for test
    test_xs = [i/10 for i in range(1, 11)]  # 0.1 to 1.0
    # We enumerate candidate 'a' starting from just over 2
    for a_int in range(3, 20):
        a = float(a_int)
        if test_functional_relation(a, test_xs):
            print(f"f(x) = {a} * x satisfies the functional equation")
        else:
            # Slightly larger than 2, check fractional steps
            for frac in range(1, 10):
                a = 2 + frac/10
                if test_functional_relation(a, test_xs):
                    print(f"f(x) = {a} * x satisfies the conditions")
    # Explicitly output the candidate where a > 2, and test if the bounds hold
    # For the bounds f x > α, assuming α=1 in test
    # We observe functions with a > 2 are candidate solutions

if __name__ == "__main__":
    main()
```
