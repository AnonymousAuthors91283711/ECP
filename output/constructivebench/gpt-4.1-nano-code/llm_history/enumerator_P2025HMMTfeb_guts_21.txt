[write_program]
The problem involves finding the least real number that satisfies a system of equations involving variables a, b, and c, with their expressed relationships. Since directly solving algebraically might be complex, a numerical approximation approach can help enumerate possible solutions and approximate the minimum value.

We'll:
- Fix small grids for variables a, b, c in a reasonable range.
- Check which triples satisfy the given equations within a small tolerance.
- Record valid solutionsâ€™ product `a * b * c`.
- Track and output the minimal found product.

This enumerates candidate solutions and approximates the minimal value by brute force.

```python
# Enumerate small sample space for a, b, c to approximate the minimal a*b*c satisfying the equations
import numpy as np

# Define search ranges and granularity
a_vals = np.linspace(-5, 5, 50)  # a from -5 to 5
b_vals = np.linspace(-5, 5, 50)
c_vals = np.linspace(-5, 5, 50)

# Tolerance for equations
tol = 0.1

min_product = float('inf')
min_solution = None

for a in a_vals:
    for b in b_vals:
        for c in c_vals:
            # Compute each side
            eq1 = a**2 * (b + c)
            eq2 = b**2 * (c + a)
            eq3 = c**2 * (a + b)
            # Check if close to the desired values
            if (abs(eq1 - 1) < tol and
                abs(eq2 - 2) < tol and
                abs(eq3 - 5) < tol):
                product = a * b * c
                print(f"Found candidate: a={a:.2f}, b={b:.2f}, c={c:.2f}, product={product:.4f}")
                if abs(product) < abs(min_product):
                    min_product = product
                    min_solution = (a, b, c)

if min_solution:
    print(f"Approximate minimum product: {min_product:.4f} with a={min_solution[0]:.2f}, b={min_solution[1]:.2f}, c={min_solution[2]:.2f}")
else:
    print("No solutions found in the search space.")
```
