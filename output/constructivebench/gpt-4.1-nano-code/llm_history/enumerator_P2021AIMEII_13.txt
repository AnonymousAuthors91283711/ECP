[write_program]
To assist in conjecturing the least positive integer \( n \) such that \( 0 < n \) and \( 1000 \mid (2^n + 5^n - n) \), we will numerically check small positive integers. We will enumerate candidates, check divisibility, and stream solutions as soon as they are found.

The problem involves dividing the expression \( 2^n + 5^n - n \) by 1000. Since 1000 = 8 * 125, we can use modular arithmetic to speed up computations: check divisibility by 8 and 125 separately (using the Chinese Remainder Theorem) or directly check \( (2^n + 5^n - n) \equiv 0 \pmod{1000} \).

Given computational efficiency, we will check from \( n=1 \) upwards, stop at the first solution, and output it, alongside some sample checks for a few subsequent \( n \)â€™s to support conjecture.

```python
# Enumerate positive integers n to find the least n satisfying divisibility by 1000
for n in range(1, 2000):
    val = (pow(2, n, 1000) + pow(5, n, 1000) - n) % 1000
    if val == 0:
        print(f"n = {n}")
        break
# To further support the uniqueness of the least n, we can check next values
# but for brevity and token limit, we stop after first discovery
```
