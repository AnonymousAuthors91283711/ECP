[write_program]
The problem is to find the smallest natural number \( n \) such that there exist natural numbers \( a, b, c \) with \( a < b < c < n \) and \( a + b + c + n = 100 \). To approach this, I will create a Python program to systematically enumerate possible \( n \) starting from a small value, and for each \( n \), check all triplets \( a, b, c \) satisfying the inequalities and the sum condition.

The goal is to find the least \( n \) satisfying the conditions, so I will increase \( n \) from a minimal starting point and stop once I find the first valid \( n \). For efficiency, I will limit the search ranges based on the sum condition and inequalities.

```python
# Enumerate possible n starting from 1 upwards
for n in range(1, 101):
    found = False
    # Because a < b < c < n and a+b+c+n=100, approximate to bounds for a, b, c
    # a must be at least 0 and less than b, c; also c < n
    for a in range(0, n):
        for b in range(a+1, n):
            for c in range(b+1, n):
                total = a + b + c + n
                if total == 100:
                    print(f"n={n} with a={a}, b={b}, c={c}")
                    found = True
    if found:
        print(f"Smallest n with such a triple: {n}")
        break
```
