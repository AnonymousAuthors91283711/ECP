[write_program]
This problem asks to find the number of ordered triples \((a, b, c)\) of positive integers with \(a \leq b \leq c\) such that \(a^2 + b^2 + c^2 = 2005\).

To tackle this, we'll:
- Enumerate all triples with \(a \leq b \leq c\),
- Check if the sum of squares matches 2005,
- Count the valid solutions,
- Use small bounds based on \(\sqrt{2005} \approx 44.7\),
- Stream outputs for each valid solution.

Here's the code:

```python
# Enumerator for solutions (a, b, c) with a <= b <= c, a, b, c > 0, and a^2 + b^2 + c^2 = 2005
import math

def main():
    count = 0
    max_c = int(math.isqrt(2005))
    for a in range(1, max_c + 1):
        a_sq = a * a
        for b in range(a, max_c + 1):
            b_sq = b * b
            c_sq_target = 2005 - a_sq - b_sq
            if c_sq_target <= 0:
                continue
            c = int(math.isqrt(c_sq_target))
            if c < b:
                continue
            if c * c == c_sq_target:
                # Valid triple found
                print(f"({a}, {b}, {c})")
                count += 1
    print("Total solutions:", count)

if __name__ == "__main__":
    main()
```
