[write_program]
The problem involves a trigonometric equation `tan A = 2 * cos A` with `A` in `(0, π/2)`, and we consider `n` such that `n ≤ 1000`, with `k = (1 / cos A)^n + tan A^n`, where `k % 10 = 9`. We want to count how many such `n` satisfy these conditions.

First, analyze the angle condition to find specific `A`:

- Given `tan A = 2 * cos A`
- Recall `tan A = sin A / cos A` -> `sin A / cos A = 2 * cos A`
- So, `sin A = 2 * cos^2 A`

Using the Pythagorean identity: `sin^2 A + cos^2 A = 1`,

- Substitute `sin A = 2 * cos^2 A`

Square both sides:

- `(2 * cos^2 A)^2 + cos^2 A = 1`
- `4 * cos^4 A + cos^2 A = 1`

Let`s set `x = cos^2 A`:

- `4x^2 + x = 1`
- `4x^2 + x - 1 = 0`

Solve for `x`:

- Use quadratic formula: `x = (-1 ± sqrt(1 - 4*4*(-1))) / (2*4)`
- `x = (-1 ± sqrt(1 + 16)) / 8`
- `x = (-1 ± sqrt(17)) / 8`

Since `cos^2 A > 0`, select positive root:

- `x = (-1 + sqrt(17)) / 8`

Calculate `cos A`:

- `cos A = sqrt x`

Compute `tan A`:

- `tan A = 2 * cos^2 A / sqrt{1 - cos^2 A}`

But easier, note:

- `sin A = 2 * cos^2 A`

- `tan A = sin A / cos A = 2 * cos^2 A / cos A = 2 * cos A`

Check for consistency:

- From initial: `tan A = 2 * cos A`

We derived this, confirming our reasoning.

Calculate `cos A`:

- `x = (-1 + sqrt(17)) / 8`, approximate:

`sqrt(17) ≈ 4.1231`

- `x ≈ (-1 + 4.1231) / 8 ≈ 3.1231 / 8 ≈ 0.3904`

- `cos A ≈ sqrt(0.3904) ≈ 0.6246`

- `tan A = 2 * cos A ≈ 2 * 0.6246 ≈ 1.2492`

Now, observe:

- `(1 / cos A)^n + tan A^n`

- Recall `tan A = 2 * cos A`:

- So `tan A^n = (2 * cos A)^n = 2^n * (cos A)^n`

- `(1 / cos A)^n = (1 / cos A)^n = (1 / 0.6246)^n ≈ 1.601)^n`

- Therefore, `k = (1.601)^n + (2)^n * (0.6246)^n`

Using approximate calculations for each `n` from 1 to 1000, check which satisfy `k ≡ 9 mod 10`.

Let's code this directly, with integer approximations, to find all `n` satisfying `k % 10 = 9`.

---

```python
import math

# Approximate constants
cosA = math.sqrt((-1 + math.sqrt(17)) / 8)  # ≈ 0.6246
tanA = 2 * cosA                            # ≈ 1.2492
inv_cosA = 1 / cosA                       # ≈ 1.601

# We will check n from 1 to 1000
for n in range(1, 1001):
    # Compute k approx
    term1 = inv_cosA ** n
    term2 = tanA ** n
    k = term1 + term2
    # Since we're testing mod 10, take floor for integer part
    k_int = int(k)
    if k_int % 10 == 9:
        print(n)
```
