[write_program]
This problem involves a set S of functions from a finite set of size 95, where each function's value is either 1 or -1, and we are asked for the minimal possible value of the double sum: ∑_{i,j} s_i * s_j, over all s in S.

Since s_i ∈ {1, -1}, the double sum simplifies considering that each element is either 1 or -1.

Observations:
- The sum over all pairs (i,j) of s_i * s_j can be expressed as (∑_{i=1}^{n} s_i)^2, because:
  ∑_{i,j} s_i * s_j = (∑_{i} s_i)^2
- The possible values of ∑_{i=1}^{n} s_i range from -n to n, stepping by 2, because each s_i is ±1.
- For n=95, the sum ∑_{i=1}^{95} s_i can take values: -95, -93, ..., 93, 95.

The minimal value of the double sum (which is the square of the sum) occurs when |∑_{i} s_i| is maximized, i.e., at ±95:
- sum_max = 95 → sum of s_i's, then the double sum = 95^2 = 9025.
- sum_min = -95 → the double sum = 90^2 = 9025.

Since the square of the sum yields the minimal double sum for the maximum absolute sum, the minimal double sum is 9025. 

Now, to implement this computationally:

1. Enumerate all possible sums of s, which is straightforward because the sum can be from -95 to 95 in steps of 2.
2. For each sum, compute sum^2 as the double sum.

Here's an efficient Python program to output all possible minimal sums.

```python
# The minimal double sum occurs at the maximum |sum of s_i|.
# Since s_i are ±1 and there are 95 of them, possible sums are from -95 to 95 in steps of 2.

# Enumerate possible sums and compute corresponding double sums
for total in range(-95, 96, 2):
    double_sum = total * total
    print(double_sum)
```

This code directly enumerates all possible double sums, aiding in conjecturing and verifying the minimal value which should be 9025.
