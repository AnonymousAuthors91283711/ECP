[conjecture_answer] Formal Problem Statement: import Mathlib

open Nat

abbrev olympiadbench2382_answer : ℕ → ℕ := sorry
def T (n : ℕ) : ℕ :=
  Finset.card (Finset.filter (fun (a, b, c) => 
    a + b + c = n ∧ 
    a ≤ b ∧ b ≤ c ∧ 
    a + b > c) (Finset.Icc 1 n ×ˢ Finset.Icc 1 n ×ˢ Finset.Icc 1 n))

theorem olympiadbench2382 (n : ℕ) (h : n = 10 ∨ n = 11 ∨ n = 12) :
    T n = olympiadbench2382_answer n := by sorry. Enumerated answers: . Expected Answer Type: ℕ → ℕ
Looking at the problem, we need to count integer-sided triangles with perimeter n where a ≤ b ≤ c and a + b > c. For n=10,11,12, the counts are 2,3,4 respectively. The pattern suggests the answer is floor division of (n^2) by 48 when n is even and ((n+3)^2)/48 when n is odd.

<<<fun n => if Even n then n^2 / 48 else (n + 3)^2 / 48>>>