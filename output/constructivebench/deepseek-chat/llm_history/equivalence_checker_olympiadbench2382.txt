[check_equivalence] Problem: import Mathlib

open Nat

abbrev olympiadbench2382_answer : ℕ → ℕ := sorry
def T (n : ℕ) : ℕ :=
  Finset.card (Finset.filter (fun (a, b, c) => 
    a + b + c = n ∧ 
    a ≤ b ∧ b ≤ c ∧ 
    a + b > c) (Finset.Icc 1 n ×ˢ Finset.Icc 1 n ×ˢ Finset.Icc 1 n))

theorem olympiadbench2382 (n : ℕ) (h : n = 10 ∨ n = 11 ∨ n = 12) :
    T n = olympiadbench2382_answer n := by sorry
Ground Truth Answer: fun n => match n with
    | 10 => 2
    | 11 => 4
    | 12 => 3
    | _ => 0
Proposed Answer: fun n => if Even n then n^2 / 48 else (n + 3)^2 / 48
Let's analyze the proposed answer against the ground truth:

For n=10 (Even):
Proposed: 10²/48 = 100/48 ≈ 2.083 → 2 (integer division)
Ground truth: 2
Match

For n=11 (Odd):
Proposed: (11+3)²/48 = 196/48 ≈ 4.083 → 4
Ground truth: 4
Match

For n=12 (Even):
Proposed: 12²/48 = 144/48 = 3
Ground truth: 3
Match

The proposed formula gives correct results for the specified cases (n=10,11,12). However, we should note that:
1. The formula is only verified for these specific values
2. The formula uses integer division (implied by the Nat type)
3. The ground truth returns 0 for other values while the proposed formula continues to give values

Since the problem specifically asks about the cases n=10,11,12 and the answers match exactly for these cases, we should consider them equivalent for the given problem.

<<<True>>>