[write_program]
This problem asks to count 8-digit numbers between 10,000,000 and 99,999,999 (though 8-digit numbers are actually between 10,000,000 and 99,999,999) that:
1. End with 3 (n % 10 = 3)
2. Start with 1 (n / 10^7 = 1)
3. For each consecutive digit pair (d1,d2), d2 equals either (d1+1) mod 10 or (d1+2) mod 10

We'll enumerate all possible numbers meeting these criteria by building them digit by digit with the constraints.

```python
def count_numbers():
    count = 0
    # First digit must be 1 (from n / 10^7 = 1)
    digits = [1]
    
    def backtrack(position):
        nonlocal count
        if position == 8:
            if digits[-1] == 3:  # Last digit must be 3
                count += 1
                # Print the number when found
                num = int(''.join(map(str, digits)))
                print(num)
            return
        
        prev_digit = digits[position-1]
        # Next digit can be (prev+1) mod 10 or (prev+2) mod 10
        for delta in [1, 2]:
            next_digit = (prev_digit + delta) % 10
            digits.append(next_digit)
            backtrack(position + 1)
            digits.pop()
    
    backtrack(1)  # Start from position 1 (0-based would be position 2)
    print("Total count:", count)

count_numbers()
```
