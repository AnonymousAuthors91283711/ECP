[write_program]
This problem asks for the number of functions from Fin 5 â†’ Fin 5 that satisfy a "nasty" condition: there are no two distinct elements a and b where f(a) = b and f(b) = a. In other words, the function has no 2-cycles (transpositions).

We'll enumerate all possible functions from a 5-element set to itself and count those without any transpositions. For efficiency, we'll:
1. Represent functions as tuples (f(0), f(1), f(2), f(3), f(4))
2. Check each function for the nasty condition
3. Count valid functions

```python
from itertools import product

def is_nasty(f):
    for a in range(5):
        for b in range(a+1, 5):
            if f[a] == b and f[b] == a:
                return False
    return True

count = 0
for f in product(range(5), repeat=5):
    if is_nasty(f):
        count += 1
        print(f"Found nasty function #{count}: {f}")

print(f"Total number of nasty functions: {count}")
```
