[write_program]
This problem involves finding all real roots of a 6th-degree polynomial equation. We'll write a Python program to numerically approximate the roots using numpy's polynomial root-finding capabilities. The equation is:

(x² + 3x + 2)(x² - 7x + 12)(x² - 2x - 1) + 24 = 0

We'll:
1. Expand the polynomial to standard form
2. Find all roots numerically
3. Filter for real roots
4. Print each real root found

```python
import numpy as np

# Coefficients of the expanded polynomial (x^2+3x+2)(x^2-7x+12)(x^2-2x-1) + 24
# Expanded form: x^6 - 6x^5 + 2x^4 + 36x^3 - 47x^2 - 42x + 48
coeffs = [1, -6, 2, 36, -47, -42, 48]

# Find all roots (including complex ones)
roots = np.roots(coeffs)

# Filter and print real roots with reasonable precision
print("Real roots found:")
real_roots = []
for r in roots:
    if np.isreal(r):
        real_root = np.real(r)
        real_roots.append(real_root)
        print(f"{real_root:.6f}")  # Print with 6 decimal places

# Optional: print sorted unique roots (in case of numerical duplicates)
print("\nDistinct real roots (rounded to 6 decimal places):")
unique_roots = sorted(list(set(round(r, 6) for r in real_roots)))
for r in unique_roots:
    print(r)
```
