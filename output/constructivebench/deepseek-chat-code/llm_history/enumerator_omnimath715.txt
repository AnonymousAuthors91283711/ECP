[write_program]
This problem asks for the sum of squares of distinct real roots of the polynomial p(x) = x⁸ - 14x⁴ - 8x³ - x² + 1. We'll write a Python program to find all real roots numerically and compute their sum of squares.

The approach:
1. Find all real roots using numerical methods (Newton-Raphson)
2. Filter out duplicates (since roots may have multiplicity)
3. Calculate the sum of their squares

```python
import numpy as np
from numpy.polynomial import Polynomial

def find_real_roots(poly, initial_guesses, tol=1e-10):
    roots = []
    for guess in initial_guesses:
        root = poly.deriv().roots()
        root = poly.roots()
        # Newton-Raphson
        x = guess
        for _ in range(100):
            fx = poly(x)
            if abs(fx) < tol:
                break
            fpx = poly.deriv()(x)
            if fpx == 0:
                break
            x -= fx / fpx
        if abs(poly(x)) < tol:
            roots.append(x)
    return sorted(list(set(round(r, 8) for r in roots)))  # remove duplicates

# Define the polynomial: x^8 - 14x^4 - 8x^3 - x^2 + 1
coeffs = [1, 0, 0, 0, -14, -8, -1, 0, 1]
p = Polynomial(coeffs)

# Initial guesses based on rough plot analysis
guesses = [-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2]

roots = find_real_roots(p, guesses)
print("Distinct real roots found:", roots)

sum_of_squares = sum(r**2 for r in roots)
print("Sum of squares of distinct real roots:", sum_of_squares)
```
