[write_program]
This problem defines a recursive function f(n) with base case f(1)=2 and two recursive cases:
- For even n>1: f(n) = f(n-1) + 1
- For odd n>1: f(n) = f(n-2) + 2

We need to compute f(2017). The solution involves implementing this recursive function efficiently and computing values up to 2017. Since 2017 is large, we'll use memoization or iterative computation.

```python
def compute_f(max_n):
    # Initialize memoization array
    f = [0] * (max_n + 1)
    f[1] = 2  # Base case
    
    for n in range(2, max_n + 1):
        if n % 2 == 0:  # Even case
            f[n] = f[n-1] + 1
        else:  # Odd case
            f[n] = f[n-2] + 2
    
    return f

# Compute up to n=20 to observe the pattern first
small_n = 20
small_f = compute_f(small_n)
for n in range(1, small_n + 1):
    print(f"f({n}) = {small_f[n]}")

# Now compute the actual target
target_n = 2017
f = compute_f(target_n)
print(f"\nf({target_n}) = {f[target_n]}")
```
