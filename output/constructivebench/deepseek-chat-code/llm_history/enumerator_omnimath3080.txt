[write_program]
This problem asks for the count of natural numbers n (1 ≤ n ≤ 20000) where:
1. The number of divisors of 2n is 64
2. The number of divisors of 5n is 60

We'll write a Python program to enumerate all such numbers n in the range and count them. The key insight is that:
- For 2n to have 64 divisors, its prime factorization must match one of the forms that produce exactly 64 divisors (64 = 2^6, so possible exponent combinations are (63), (31,1), (15,3), (7,5), etc.)
- Similarly for 5n having 60 divisors (60 = 2^2×3×5, possible exponent combinations include (59), (29,1), (14,2,1), etc.)

```python
import math

def count_divisors(n):
    if n == 0:
        return 0
    result = 1
    # Handle 2 separately
    count = 0
    while n % 2 == 0:
        count += 1
        n = n // 2
    result *= (count + 1)
    
    # Check odd divisors up to sqrt(n)
    i = 3
    max_factor = math.sqrt(n)
    while i <= max_factor:
        count = 0
        while n % i == 0:
            count += 1
            n = n // i
            max_factor = math.sqrt(n)
        if count > 0:
            result *= (count + 1)
        i += 2
    
    if n > 1:
        result *= 2
    return result

def main():
    count = 0
    for n in range(1, 20001):
        d2n = count_divisors(2 * n)
        d5n = count_divisors(5 * n)
        if d2n == 64 and d5n == 60:
            print(n)
            count += 1
    print(f"Total count: {count}")

if __name__ == "__main__":
    main()
```
