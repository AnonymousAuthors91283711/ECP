[write_program]
The problem defines a recursive function `f` on natural numbers `n ≥ 2` where:
- f(2) = 2
- f(n+3) = (n+3) + (1/2)*f(n+2)

We need to compute f(2002). The recursive definition suggests we should look for a pattern or closed-form solution. Let's write a Python program to compute f(n) for small values of n to identify the pattern.

```python
def compute_f(n):
    if n == 2:
        return 2
    if n == 3:
        return 3 + (1/2) * compute_f(2)
    if n == 4:
        return 4 + (1/2) * compute_f(3)
    return n + (1/2) * compute_f(n-1)

# Print f(n) for small values to observe the pattern
print("Computing f(n) for small values:")
for n in range(2, 20):
    print(f"f({n}) = {compute_f(n)}")

# The pattern suggests f(n) = 2n - 4 + 4/(2^(n-2)) for n >= 2
# Let's verify this hypothesis for small n
print("\nVerifying hypothesis for small n:")
for n in range(2, 10):
    exact = compute_f(n)
    hypothesis = 2*n - 4 + 4/(2**(n-2))
    print(f"n={n}: exact={exact}, hypothesis={hypothesis}")

# For large n like 2002, the term 4/(2^(n-2)) becomes negligible
# So f(2002) ≈ 2*2002 - 4 = 4000
print("\nFinal approximation for f(2002):")
print(2*2002 - 4)
```
