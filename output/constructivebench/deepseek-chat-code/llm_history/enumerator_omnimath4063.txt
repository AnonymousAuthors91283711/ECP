[write_program]
This problem asks for all triples of positive integers (a,b,c) where ab+1, bc+1, and ca+1 are all factorials. We'll write a Python program to search for such triples by:
1. Generating factorials up to a reasonable limit
2. Checking all possible combinations where the relationships hold
3. Outputting valid triples as they're found

```python
import math

def find_factorial_triples(max_fact=20):
    # Precompute factorials up to max_fact
    factorials = [1]
    while factorials[-1] <= 10**6:  # Prevent excessively large numbers
        next_fact = len(factorials) * factorials[-1]
        if next_fact > 10**6:
            break
        factorials.append(next_fact)
    
    print(f"Searching with factorials up to {factorials[-1]} (n={len(factorials)-1})")
    
    seen = set()
    # Check all possible a,b where ab+1 is factorial
    for m, f_m in enumerate(factorials[1:], 1):
        for a in range(1, f_m):
            if f_m % a == 1:
                b = (f_m - 1) // a
                for n, f_n in enumerate(factorials[1:], 1):
                    if (b * (f_n - 1)) % (f_n - 1 - b * b) == 0 and (f_n - 1) > b * b:
                        c = (f_n - 1) // b
                        for p, f_p in enumerate(factorials[1:], 1):
                            if c * a + 1 == f_p:
                                triple = tuple(sorted((a, b, c)))
                                if triple not in seen:
                                    seen.add(triple)
                                    print(f"Found triple: {triple} with factorials {m},{n},{p}")

find_factorial_triples()
```
