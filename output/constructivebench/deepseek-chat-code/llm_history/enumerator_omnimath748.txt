[write_program]
This problem involves finding the sum of coefficients `a + c` for two quadratic functions `f` and `g` that satisfy several conditions. The key conditions are:
1. The vertex of `f` is a root of `g` and vice versa
2. The minimum values of `f` and `g` are equal
3. Both functions pass through the point (2012, -2012)

We'll write a Python program to enumerate possible values of `a` and `c` that satisfy these conditions.

```python
def solve():
    # We'll use symbolic computation to find exact solutions
    from sympy import symbols, Eq, solve, simplify

    a, c = symbols('a c')
    # Vertex conditions
    # For f(x) = x^2 + a*x + b, vertex at x=-a/2
    # g(-a/2) = 0 => (-a/2)^2 + c*(-a/2) + d = 0
    # Similarly for f(-c/2) = 0
    # Minimum values equal: (4b-a²)/4 = (4d-c²)/4
    
    # From f(2012) = -2012 and g(2012) = -2012
    b = -2012 - 2012**2 - a*2012
    d = -2012 - 2012**2 - c*2012
    
    # Vertex condition for g(-a/2) = 0
    eq1 = Eq((-a/2)**2 + c*(-a/2) + d, 0)
    # Vertex condition for f(-c/2) = 0
    eq2 = Eq((-c/2)**2 + a*(-c/2) + b, 0)
    # Minimum values equal
    eq3 = Eq((4*b - a**2)/4, (4*d - c**2)/4)
    
    # Solve the system
    solutions = solve([eq1, eq2, eq3], (a, c))
    
    # Filter out solutions where f = g (a=c and b=d)
    valid_solutions = []
    for sol in solutions:
        a_val, c_val = sol
        if a_val != c_val:  # Ensure f ≠ g
            valid_solutions.append((a_val, c_val))
    
    # Print all valid solutions
    for a_sol, c_sol in valid_solutions:
        print(f"a = {a_sol}, c = {c_sol}, a + c = {simplify(a_sol + c_sol)}")

if __name__ == "__main__":
    solve()
```

The program uses symbolic computation to find exact solutions to the system of equations derived from the problem conditions. It filters out the trivial solution where f = g and prints all valid solutions along with their a + c sums. The output will show the exact symbolic expressions for the solutions.
