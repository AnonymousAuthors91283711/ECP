[write_program]
This problem defines a recursive sequence t(n) with base cases t(1)=1, t(2)=-1 and recurrence relation for nâ‰¥3. We need to compute t(1998). The recurrence suggests the sequence might have a pattern or closed-form solution.

We'll write a Python program to:
1. Compute the sequence values up to n=1998
2. Observe patterns in the sequence
3. Print values at key indices to help identify the pattern

The recurrence involves rational numbers, so we'll use fractions.Fraction for exact arithmetic.

```python
from fractions import Fraction

def compute_sequence(max_n):
    # Initialize base cases
    t = {1: Fraction(1, 1), 2: Fraction(-1, 1)}
    
    for n in range(3, max_n + 1):
        # Compute the recurrence relation: t(n) = ((n-3)/(n-1)) * t(n-2)
        numerator = n - 3
        denominator = n - 1
        t_n = Fraction(numerator, denominator) * t[n - 2]
        t[n] = t_n
        
        # Print every 100 terms to observe pattern
        if n % 100 == 0 or n <= 10:
            print(f"t({n}) = {t_n}")
    
    return t

print("Computing sequence values:")
sequence = compute_sequence(1998)
print("\nFinal value:")
print(f"t(1998) = {sequence[1998]}")
```
