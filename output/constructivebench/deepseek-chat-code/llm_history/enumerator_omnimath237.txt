[write_program]
This problem asks for all integer triples (a, b, c) that satisfy the equation a² + b² + c² = a²b². We'll write a Python program to enumerate small integer solutions systematically.

Key observations:
1. The equation is symmetric in a and b, so we can assume |a| ≤ |b| without loss of generality
2. For large |a| or |b|, the right side grows much faster than the left
3. We'll search within a reasonable bound (say -10 to 10) for demonstration

The program will:
1. Iterate through possible a and b values
2. For each (a,b), solve for c²
3. Check if c² is a perfect square
4. Output valid triples

```python
def find_solutions():
    solutions = set()
    bound = 10  # search range
    
    for a in range(-bound, bound + 1):
        for b in range(-bound, bound + 1):
            if a == 0 and b == 0:  # special case
                for c in range(-bound, bound + 1):
                    if 0 + 0 + c*c == 0:
                        solutions.add((0, 0, c))
                continue
                
            lhs = a*a + b*b
            rhs = a*a * b*b
            c_squared = rhs - lhs
            
            if c_squared < 0:
                continue
                
            c = int(round(c_squared ** 0.5))
            if c * c == c_squared:
                solutions.add((a, b, c))
                solutions.add((a, b, -c))
    
    # Also check cases where one variable is 0
    for a in [-bound, 0, bound]:
        for b in [-bound, 0, bound]:
            if (a,b) == (0,0):
                continue
            c_squared = a*a*b*b - a*a - b*b
            if c_squared >= 0:
                c = int(round(c_squared ** 0.5))
                if c * c == c_squared:
                    solutions.add((a, b, c))
                    solutions.add((a, b, -c))
    
    # Output all found solutions
    for sol in sorted(solutions):
        print(sol)

find_solutions()
```
