[write_program]
The problem asks for the number of distinct possible total scores when there are 6 problems, and each problem can be scored as 0, 1, or 7 points. We need to enumerate all possible combinations of these scores and count the distinct sums.

The approach is to generate all possible combinations of scores (0,1,7) for 6 problems, calculate their sums, and count the unique sums. Since the order of problems doesn't matter for the total score, we can use combinations with replacement.

Here's the Python program to solve this:

```python
from itertools import combinations_with_replacement

def main():
    n_problems = 6
    possible_scores = [0, 1, 7]
    unique_sums = set()
    
    # Generate all possible score combinations for 6 problems
    for scores in combinations_with_replacement(possible_scores, n_problems):
        total = sum(scores)
        if total not in unique_sums:
            unique_sums.add(total)
            print(total)  # Stream partial results
    
    print(f"Total distinct scores: {len(unique_sums)}")

if __name__ == "__main__":
    main()
```

The program first defines the number of problems (6) and possible scores per problem (0, 1, 7). It then generates all possible combinations of these scores for 6 problems, calculates each combination's sum, and maintains a set of unique sums. Each new unique sum is printed as it's found. Finally, the total count of distinct scores is printed.
