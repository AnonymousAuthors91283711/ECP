[write_program]
This problem involves finding the greatest common divisor (gcd) of two sums of powers for natural numbers. We'll write a Python program to compute S(n) and S(3n) for small values of n, then calculate their gcd to observe patterns.

The program will:
1. Compute S(n) = sum(p^5 + p^7 for p from 1 to n)
2. Compute S(3n) similarly
3. Calculate gcd(S(n), S(3n))
4. Print results for n up to a reasonable threshold (we'll use 20)

```python
import math

def compute_S(n):
    """Compute S(n) = sum(p^5 + p^7 for p from 1 to n)"""
    return sum(p**5 + p**7 for p in range(1, n+1))

def main():
    max_n = 20
    print(f"n\tS(n)\tS(3n)\tgcd(S(n),S(3n))")
    print("-" * 40)
    
    for n in range(1, max_n + 1):
        s_n = compute_S(n)
        s_3n = compute_S(3 * n)
        current_gcd = math.gcd(s_n, s_3n)
        print(f"{n}\t{s_n}\t{s_3n}\t{current_gcd}")

if __name__ == "__main__":
    main()
```
