[write_program]
The problem asks for the largest prime number p that is part of a set of primes whose average is exactly 27. We need to find all such primes p and determine the maximum one.

Approach:
1. Generate prime numbers up to a reasonable threshold (since the average is 27, primes much larger than 27*2=54 are unlikely to work)
2. For each prime p, check if there exists a set of primes containing p whose average is 27
3. Track the maximum such prime found

We'll implement this by:
- Generating primes up to 100 (safe upper bound)
- For each prime p, check combinations of primes that include p and have average 27
- The check is done by verifying if (sum - p)/(k-1) = 27 for some subset size k

```python
import math
from itertools import combinations

def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

primes = [p for p in range(2, 100) if is_prime(p)]
max_p = 0

for p in sorted(primes, reverse=True):
    other_primes = [q for q in primes if q != p]
    found = False
    
    # Check subsets of size 2 to 5 (since 27*5=135 > sum of primes <100)
    for k in range(2, 6):
        for combo in combinations(other_primes, k-1):
            total = p + sum(combo)
            if total * 1.0 / k == 27:
                print(f"Found set: {combo + (p,)} with average 27")
                max_p = max(max_p, p)
                found = True
                break
        if found:
            break

print(f"\nMaximum prime found: {max_p}")
```
