[write_program]
This problem asks for the minimal value of g(14) where g is a function from natural numbers to natural numbers satisfying:
1. For all positive x,y: g(x) + g(y) > x²
2. Among all such functions, g minimizes the sum of g(1) to g(20)
3. We need to find the minimal possible g(14) under these constraints

We'll approach this by:
1. Finding the minimal sum constraint first
2. Then finding the minimal g(14) that fits within that sum

```python
def main():
    # First find minimal possible sum of g(1) to g(20)
    # From condition 1: g(x) > x² - g(y) for all y
    # To minimize sum, we want minimal g(x) for each x
    # The minimal g(x) is x² - (max g(y)) + 1
    # But this is circular - need to find consistent values
    
    # Let's assume all g(x) are equal (symmetric case)
    # Then g(x) + g(y) = 2g(x) > x² ⇒ g(x) > x²/2
    # So minimal integer g(x) = floor(x²/2) + 1
    
    # Now check if this satisfies the sum minimization
    # Compute this sum
    minimal_sum = 0
    minimal_g = {}
    for x in range(1, 21):
        gx = (x*x) // 2 + 1
        minimal_g[x] = gx
        minimal_sum += gx
    
    print("Minimal sum candidate:", minimal_sum)
    print("Candidate g values:", minimal_g)
    
    # Now verify if we can reduce g(14) while maintaining conditions
    # To minimize g(14), we need to increase other g(x) values
    # The constraint is g(14) + g(y) > 14² for all y
    # So g(14) > 14² - g(y)
    # The worst case is when g(y) is maximal (which we want to minimize)
    
    # Try to find minimal g(14) that works with other g(x) at their minimal
    min_g14 = None
    for candidate in range(1, minimal_g[14] + 1):
        valid = True
        for y in range(1, 21):
            if y == 14:
                continue
            if candidate + minimal_g[y] <= 14*14:
                valid = False
                break
        if valid:
            min_g14 = candidate
            break
    
    print("Minimal g(14):", min_g14)

if __name__ == "__main__":
    main()
```
