[write_program]
The problem asks to find the smallest positive integer whose digits multiply to 1728, and among all such numbers, determine the one with the minimal digit sum. We'll approach this by:

1. Generating all possible digit combinations whose product is 1728
2. For each combination, forming the smallest possible number by sorting digits in ascending order
3. Finding the combination that produces the smallest number (lex order) and has the minimal digit sum

The solution involves factorizing 1728 into single-digit factors (2-9) since 0 and 1 don't contribute to the product.

```python
from math import prod
from itertools import combinations_with_replacement

def factorize(n, min_factor=2):
    """Generate all possible single-digit factorizations of n"""
    if n == 1:
        yield []
        return
    for i in range(min_factor, 10):
        if n % i == 0:
            for factors in factorize(n // i, i):
                yield [i] + factors

def find_minimal_number(target=1728):
    minimal_num = None
    minimal_sum = float('inf')
    
    # Generate all possible digit combinations
    for factors in factorize(target):
        # The smallest number is digits in ascending order
        digits = sorted(factors)
        num = int(''.join(map(str, digits)))
        digit_sum = sum(digits)
        
        # Update if found smaller number or same number with smaller sum
        if minimal_num is None or num < minimal_num or (num == minimal_num and digit_sum < minimal_sum):
            minimal_num = num
            minimal_sum = digit_sum
            print(f"Found candidate: {num} with digit sum {digit_sum}")
    
    print(f"\nFinal answer - Minimal number: {minimal_num}, Minimal digit sum: {minimal_sum}")
    return minimal_sum

if __name__ == "__main__":
    find_minimal_number()
```
