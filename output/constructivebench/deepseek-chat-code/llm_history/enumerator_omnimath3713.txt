[write_program]
The problem asks to find all triples (p, q, r) of two-digit numbers where:
1. Each number has distinct digits (no repeating digits)
2. All digits across p, q, r are distinct (6 unique digits total)
3. The equation p*q*sum_digits(r) = p*sum_digits(q)*r = sum_digits(p)*q*r holds

We'll write a Python program to enumerate all possible triples satisfying these conditions.

```python
def has_distinct_digits(n):
    s = str(n)
    return len(s) == len(set(s))

def sum_digits(n):
    return sum(int(d) for d in str(n))

found = []
for p in range(10, 100):
    if not has_distinct_digits(p):
        continue
    for q in range(10, 100):
        if not has_distinct_digits(q) or len(set(str(p) + str(q))) != 4:
            continue
        for r in range(10, 100):
            if not has_distinct_digits(r) or len(set(str(p) + str(q) + str(r))) != 6:
                continue
            sum_p = sum_digits(p)
            sum_q = sum_digits(q)
            sum_r = sum_digits(r)
            term1 = p * q * sum_r
            term2 = p * sum_q * r
            term3 = sum_p * q * r
            if term1 == term2 == term3:
                print(f"Found: ({p}, {q}, {r})")
                found.append((p, q, r))

print("\nAll valid triples:")
for triple in found:
    print(triple)
```
