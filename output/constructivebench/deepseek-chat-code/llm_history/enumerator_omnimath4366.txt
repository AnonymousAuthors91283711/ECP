[write_program]
This problem asks to find all positive integer triples (x,y,z) that satisfy the given equation. We'll write a Python program to search for such triples efficiently by:
1. Observing symmetry (can assume x ≤ y ≤ z without loss of generality)
2. Setting reasonable bounds based on the equation's behavior
3. Checking the equation with exact rational arithmetic to avoid floating-point errors

```python
from fractions import Fraction

def search_triples(max_n=100):
    found = set()
    # Search with x <= y <= z to avoid duplicates
    for x in range(1, max_n + 1):
        for y in range(x, max_n + 1):
            # z must be >= y due to ordering
            # Estimate reasonable z range based on equation behavior
            z_min = y
            z_max = min(max_n, 3 * (x + y))  # Heuristic upper bound
            for z in range(z_min, z_max + 1):
                y_plus_z = y + z
                z_plus_x = z + x
                x_plus_y = x + y
                
                term1 = (1 + Fraction(x, y_plus_z))**2
                term2 = (1 + Fraction(y, z_plus_x))**2
                term3 = (1 + Fraction(z, x_plus_y))**2
                
                total = term1 + term2 + term3
                if total == Fraction(27, 4):
                    # Found solution, add all permutations
                    found.add((x, y, z))
                    found.add((x, z, y))
                    found.add((y, x, z))
                    found.add((y, z, x))
                    found.add((z, x, y))
                    found.add((z, y, x))
                    print((x, y, z))  # Print first permutation found
    
    return found

# Execute with reasonable bound
print("Searching for solutions...")
solutions = search_triples(100)
print("Found solutions:", solutions)
```
