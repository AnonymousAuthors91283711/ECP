[write_program]
The problem asks to find the maximum value of the difference between the infimums of two quadratic functions f and g defined over triples of distinct integers a, b, c between 1 and 11. We'll enumerate all possible triples (a,b,c) where a,b,c are distinct integers from 1 to 11, compute the difference between the infimums of f and g for each case, and find the maximum difference.

The quadratic functions are:
- f(x) = a(x-b)(x-c)
- g(x) = a(x-b)(x+c)

The infimum of a quadratic ax² + bx + c is -Δ/(4a) where Δ = b²-4ac. We'll compute this for both functions.

```python
import itertools

def compute_max_difference():
    max_diff = -float('inf')
    best_abc = None
    
    for a, b, c in itertools.permutations(range(1, 12), 3):
        # Compute infimum of f(x) = a(x-b)(x-c) = ax² - a(b+c)x + abc
        # Standard form: ax² + bx + c where:
        # a_f = a, b_f = -a(b+c), c_f = a*b*c
        delta_f = (-a*(b+c))**2 - 4*a*(a*b*c)
        inf_f = -delta_f/(4*a)
        
        # Compute infimum of g(x) = a(x-b)(x+c) = ax² + a(c-b)x - a*b*c
        # a_g = a, b_g = a*(c-b), c_g = -a*b*c
        delta_g = (a*(c-b))**2 - 4*a*(-a*b*c)
        inf_g = -delta_g/(4*a)
        
        diff = inf_f - inf_g
        
        if diff > max_diff:
            max_diff = diff
            best_abc = (a, b, c)
            print(f"New max difference: {diff:.2f} for (a,b,c)={best_abc}")
    
    print(f"\nFinal maximum difference: {max_diff:.2f}")

compute_max_difference()
```
