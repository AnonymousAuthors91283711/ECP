[write_program]
This problem involves finding a quadratic function f(x) = axÂ² + bx + c with integer coefficients that satisfies certain conditions, then determining which interval f(100) falls into when divided into 5000-width buckets. We'll enumerate possible (a,b,c) triples that satisfy the given constraints.

```python
def main():
    # Enumerate possible a, b, c values that satisfy:
    # f(1) = a + b + c = 0
    # 50 < f(7) < 60 => 50 < 49a + 7b + c < 60
    # 70 < f(8) < 80 => 70 < 64a + 8b + c < 80
    
    # From f(1) = 0, we have c = -a - b
    # Substitute into other inequalities:
    # 50 < 48a + 6b < 60
    # 70 < 63a + 7b < 80
    
    # We'll search a in a reasonable range (observe coefficients grow quickly)
    for a in range(1, 5):
        for b in range(-20, 20):
            c = -a - b
            # Check first inequality: 50 < 48a + 6b < 60
            val7 = 48*a + 6*b
            if not (50 < val7 < 60):
                continue
            # Check second inequality: 70 < 63a + 7b < 80
            val8 = 63*a + 7*b
            if not (70 < val8 < 80):
                continue
            
            # If we get here, we have a valid (a,b,c)
            print(f"Found solution: a={a}, b={b}, c={c}")
            
            # Compute f(100)
            f100 = a*10000 + b*100 + c
            print(f"f(100) = {f100}")
            
            # Find k such that 5000*k < f100 < 5000*(k+1)
            k = f100 // 5000
            print(f"k = {k} (since {5000*k} < {f100} < {5000*(k+1)})")
            print("---")

if __name__ == "__main__":
    main()
```
