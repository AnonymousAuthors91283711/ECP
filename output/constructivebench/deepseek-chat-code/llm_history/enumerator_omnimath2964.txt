[write_program]
This problem involves arranging 9 distinct numbers from a given set into a 3x3 grid where the average of each row is equal. We need to find which number must necessarily appear in such an arrangement.

The Python program will:
1. Use the given set of numbers {1,5,6,7,13,14,17,22,26}
2. Generate all permutations of 9 distinct numbers from this set
3. Check if the averages of the three rows are equal
4. Collect all valid arrangements and find numbers that appear in all of them

```python
from itertools import permutations

def solve():
    numbers = {1, 5, 6, 7, 13, 14, 17, 22, 26}
    required = {13, 17}
    solutions = []
    
    # Since we're looking for a number that must appear in all solutions,
    # we can stop once we find two solutions with different sets of numbers
    # But for thoroughness, we'll check all permutations (though it's slow)
    
    # To make it faster, we'll:
    # 1. Pre-filter permutations that include both 13 and 17
    # 2. Check row averages
    
    count = 0
    candidate_numbers = set(numbers)
    
    for perm in permutations(numbers, 9):
        # Check if both 13 and 17 are present
        if 13 not in perm or 17 not in perm:
            continue
            
        # Check row averages
        r1 = sum(perm[0:3])
        r2 = sum(perm[3:6])
        r3 = sum(perm[6:9])
        
        if r1 == r2 == r3:
            print(f"Found solution: {perm}")
            solutions.append(perm)
            # Update candidate numbers by intersection
            candidate_numbers &= set(perm)
            if len(candidate_numbers) == 1:
                break
    
    if candidate_numbers:
        print(f"Numbers that appear in all solutions: {candidate_numbers}")
    else:
        print("No common numbers found across all solutions")

solve()
```
