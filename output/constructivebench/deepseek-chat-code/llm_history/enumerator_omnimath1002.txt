[write_program]
The problem asks to compute the floor of n*p where n=2021 and p=2*(n-2)/(n*(n-1)). We need to calculate this expression exactly and find its floor value.

The approach is:
1. Compute the exact value of p using rational arithmetic to avoid floating point inaccuracies
2. Multiply by n and simplify the expression
3. Take the floor of the resulting value

Here's the Python program that calculates this:

```python
from fractions import Fraction

def main():
    n = 2021
    # Calculate p = 2*(n-2)/(n*(n-1)) as exact fraction
    numerator = 2 * (n - 2)
    denominator = n * (n - 1)
    p = Fraction(numerator, denominator)
    
    # Calculate n*p = n * 2*(n-2)/(n*(n-1)) = 2*(n-2)/(n-1)
    np = n * p
    # Simplify the expression
    simplified = Fraction(2 * (n - 2), n - 1)
    
    # Convert to float for display (exact value is maintained in Fraction)
    exact_value = float(simplified)
    floor_value = int(simplified)
    
    print(f"Exact value of n*p: {exact_value}")
    print(f"Floor value: {floor_value}")

if __name__ == "__main__":
    main()
```

The program outputs both the exact value and its floor. The exact calculation using fractions ensures we avoid floating-point approximation errors that could affect the floor operation. The simplification shows that n*p reduces to 2*(n-2)/(n-1), making the calculation more straightforward.
