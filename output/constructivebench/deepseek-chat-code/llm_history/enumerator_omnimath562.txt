[write_program]
The problem asks to find all natural numbers n between 1 and 999 (exclusive) that have exactly 29 proper divisors (divisors excluding n itself). The number of proper divisors is one less than the total number of divisors, since the total count includes n itself.

To solve this, we'll:
1. Iterate through numbers from 1 to 999
2. For each number, count its proper divisors
3. Print numbers that have exactly 29 proper divisors
4. Since the problem suggests there's exactly one solution, we'll stop after finding it

The key insight is that the number of divisors is determined by the prime factorization. If n = p₁^a₁ * p₂^a₂ * ... * pₖ^aₖ, then the number of divisors is (a₁+1)*(a₂+1)*...*(aₖ+1). We need this to be 30 (29 proper + 1 improper).

```python
def count_proper_divisors(n):
    if n == 1:
        return 0
    count = 1
    temp = n
    # Handle 2 separately
    if temp % 2 == 0:
        exponent = 0
        while temp % 2 == 0:
            exponent += 1
            temp //= 2
        count *= (exponent + 1)
    # Check odd divisors up to sqrt(n)
    i = 3
    max_factor = int(temp**0.5) + 1
    while i <= max_factor:
        if temp % i == 0:
            exponent = 0
            while temp % i == 0:
                exponent += 1
                temp //= i
            count *= (exponent + 1)
            max_factor = int(temp**0.5) + 1
        i += 2
    if temp > 1:
        count *= 2
    return count - 1  # subtract 1 to exclude n itself

def find_numbers():
    for n in range(1, 1000):
        if count_proper_divisors(n) == 29:
            print(n)
            return  # stop after first found since theorem suggests unique answer

find_numbers()
```
