[write_program]
The problem asks for the smallest positive integer n such that (X+1)^n - 1 can be expressed as (X^2+1)*P + 3*Q for some integer polynomials P and Q. We need to find the minimal n where this decomposition exists.

To solve this, we'll:
1. Enumerate n starting from 1
2. For each n, expand (X+1)^n - 1
3. Check if the coefficients satisfy certain modular conditions when evaluated at the roots of X^2+1 (i and -i)
4. The first n where these conditions hold will be our answer

```python
def find_min_n():
    # We'll check up to n=20 since the answer is expected to be small
    max_n = 20
    for n in range(1, max_n + 1):
        # Check if (i+1)^n -1 is divisible by 3 (evaluating at X=i)
        # Since (i+1)^n = (sqrt(2)*e^(i*pi/4))^n = 2^(n/2)*e^(i*n*pi/4)
        # We need 2^(n/2)*cos(n*pi/4) - 1 ≡ 0 mod 3
        # and 2^(n/2)*sin(n*pi/4) ≡ 0 mod 3
        
        # Compute real and imaginary parts
        angle = n * 3.141592653589793 / 4  # n*pi/4
        magnitude = 2 ** (n/2)
        real_part = magnitude * math.cos(angle) - 1
        imag_part = magnitude * math.sin(angle)
        
        # Check if both parts are integers divisible by 3
        if abs(real_part - round(real_part)) < 1e-9 and abs(imag_part - round(imag_part)) < 1e-9:
            if round(real_part) % 3 == 0 and round(imag_part) % 3 == 0:
                print(f"Found candidate: n = {n}")
                return n
    return None

import math
print("Searching for minimal n...")
min_n = find_min_n()
if min_n is not None:
    print(f"The minimal n is: {min_n}")
else:
    print(f"No solution found up to n={20}")
```
