[write_program]
The problem asks for the number of divisors of 128 that are greater than 1 and perfect squares. We'll write a Python program to enumerate all such divisors.

Approach:
1. Generate all divisors of 128 (which is 2^7)
2. Filter divisors >1 that are perfect squares
3. Count the matching divisors

Since 128 is small, we can brute-force check all numbers up to 128.

```python
def is_square(n):
    """Check if n is a perfect square"""
    if n < 0:
        return False
    root = int(n ** 0.5)
    return root * root == n

def count_square_divisors():
    target = 128
    count = 0
    print("Square divisors of 128 greater than 1:")
    for d in range(2, target + 1):
        if target % d == 0 and is_square(d):
            print(d)
            count += 1
    print(f"Total count: {count}")

# Fix the typo in function name
def is_square(n):
    """Check if n is a perfect square"""
    if n < 0:
        return False
    root = int(n ** 0.5)
    return root * root == n

def count_square_divisors():
    target = 128
    count = 0
    print("Square divisors of 128 greater than 1:")
    for d in range(2, target + 1):
        if target % d == 0 and is_square(d):
            print(d)
            count += 1
    print(f"Total count: {count}")

count_square_divisors()
```
