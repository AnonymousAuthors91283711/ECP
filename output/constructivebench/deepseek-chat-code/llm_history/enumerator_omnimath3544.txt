[write_program]
This problem involves finding numbers N that can be uniquely represented as a sequence of digits (each â‰¤ 10) in a base-10-like system where digits can exceed 9. We'll enumerate numbers and check their representations.

```python
def is_valid_representation(digits):
    """Check if digits form a valid representation (non-empty, no leading zeros, all digits <=10)"""
    return (digits and 
            digits[0] != 0 and 
            all(0 <= d <= 10 for d in digits))

def get_number(digits):
    """Convert digit list to number using the given representation"""
    num = 0
    for d in digits:
        num = num * 10 + d
    return num

def find_representations(n):
    """Find all valid digit representations for n"""
    representations = []
    
    # Try all possible first digits (1-10)
    for first_d in range(1, 11):
        remaining = n - first_d
        if remaining < 0:
            continue
        
        # Case 1: single digit
        if remaining == 0:
            representations.append([first_d])
            continue
            
        # Case 2: multiple digits
        if remaining % 10 == 0:
            sub_reps = find_representations(remaining // 10)
            for rep in sub_reps:
                representations.append([first_d] + rep)
    
    return representations

def main():
    max_n = 200  # Reasonable threshold for demonstration
    unique_numbers = []
    
    for n in range(1, max_n + 1):
        reps = find_representations(n)
        valid_reps = [rep for rep in reps if is_valid_representation(rep)]
        if len(valid_reps) == 1:
            print(f"Found unique representation for {n}: {valid_reps[0]}")
            unique_numbers.append(n)
    
    print("\nNumbers with unique representations up to N=", max_n, ":")
    print(unique_numbers)

if __name__ == "__main__":
    main()
```
