[write_program]
This problem asks for natural numbers n between 1 and 999 where the cube of the sum of their digits equals the square of the number itself. We'll write a Python program to enumerate all such numbers in this range.

The approach is straightforward:
1. Iterate through numbers from 1 to 999
2. For each number, calculate the sum of its digits
3. Check if the cube of this sum equals the square of the number
4. Print any numbers that satisfy this condition

```python
def sum_of_digits(n):
    return sum(int(d) for d in str(n))

for n in range(1, 1000):
    digit_sum = sum_of_digits(n)
    if digit_sum ** 3 == n ** 2:
        print(n)
```
