[write_program]
This problem involves finding the value of a function f at 2008, given a recurrence relation and two initial conditions. The recurrence relation is f(x) = f(x-1) + f(x+1), which can be rewritten as f(x+1) = f(x) - f(x-1). This is similar to the Fibonacci recurrence but with a negative sign.

We'll write a Python program to:
1. Compute the function values using the recurrence relation
2. Look for patterns in the computed values
3. Output the sequence up to a reasonable limit to observe the pattern

```python
def compute_f_values(max_n):
    # Initialize dictionary to store function values
    f = {}
    
    # Given initial conditions
    f[1] = 1
    f[2] = 3
    
    # Compute values forward using the recurrence f[n+1] = f[n] - f[n-1]
    for n in range(2, max_n):
        f[n+1] = f[n] - f[n-1]
    
    # Compute values backward using the recurrence f[n-1] = f[n] - f[n+1]
    # We need to handle negative indices carefully
    for n in range(1, -max_n, -1):
        if n-1 not in f:
            f[n-1] = f[n] - f[n+1]
    
    # Print the computed values
    min_key = min(f.keys())
    max_key = max(f.keys())
    for n in sorted(f.keys()):
        if abs(n) <= 20:  # Print a reasonable range to observe the pattern
            print(f"f({n}) = {f[n]}")
    
    # Print the specific value asked in the problem (2008)
    # But since computing up to 2008 directly would be inefficient,
    # we'll look for a pattern first
    print("\nLooking for pattern...")
    
    # The pattern appears to be periodic with period 6
    # Let's verify this by checking the computed values
    print("\nVerifying periodicity:")
    for n in range(1, 13):
        print(f"f({n}) = {f[n]}, f({n+6}) = {f[n+6]}")
    
    # Once we confirm the periodicity, we can compute f(2008)
    # using the fact that 2008 mod 6 = 2008 % 6 = 4
    # since 2008 = 6*334 + 4
    # So f(2008) = f(4)
    print("\nFinal computation:")
    print(f"f(4) = {f[4]}")
    print(f"Therefore, f(2008) = {f[4]}")

# Compute values up to a reasonable limit to observe the pattern
compute_f_values(30)
```
