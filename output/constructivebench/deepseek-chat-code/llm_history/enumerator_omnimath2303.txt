[write_program]
This problem involves counting even numbers with distinct digits and at least 2 digits, then finding the ratio of this count to all numbers with distinct digits and at least 2 digits. We'll write a Python program to enumerate these numbers and compute the ratio.

The approach:
1. Generate all numbers with distinct digits and length ≥ 2
2. Count how many are even
3. Compute the ratio

We'll limit the enumeration to 7-digit numbers since beyond that, all numbers must have repeating digits (pigeonhole principle).

```python
from itertools import permutations

def count_distinct_digit_numbers():
    total = 0
    even = 0
    
    # For numbers with 2 to 7 digits
    for length in range(2, 8):
        # First digit can't be 0, other digits must be distinct
        for first in range(1, 10):
            remaining_digits = [d for d in range(10) if d != first]
            # Generate all permutations of remaining digits
            for perm in permutations(remaining_digits, length-1):
                num = first
                for i, digit in enumerate(perm):
                    num = num * 10 + digit
                    # Check if even (last digit must be even)
                    if i == length-2 and digit % 2 == 0:
                        even += 1
                total += 1
    
    # Also count numbers starting with 0 (but they'll be <10 and thus length <2)
    # So no need to handle them
    
    print(f"Total numbers with distinct digits (length ≥2): {total}")
    print(f"Even numbers with distinct digits: {even}")
    print(f"Ratio: {even/total}")

count_distinct_digit_numbers()
```
