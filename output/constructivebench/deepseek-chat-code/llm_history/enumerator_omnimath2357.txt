[write_program]
This problem involves finding the minimal probability that a given strategy (your_order = [1/4, 1/4, 1/2]) wins against any opponent's strategy in a 3-choice game. The opponent can choose any probability distribution over 3 options (non-negative values summing to 1), and we want to find the worst-case scenario where our strategy performs the worst.

We'll approach this by:
1. Parameterizing the opponent's strategy (x,y,z) where x+y+z=1
2. Calculating the winning probability for our strategy against each opponent strategy
3. Finding the minimal winning probability across all possible opponent strategies

```python
import numpy as np
from itertools import product

def main():
    your_order = [1/4, 1/4, 1/2]
    min_prob = 1.0  # initialize with worst possible case
    
    # Sample opponent strategies on a grid
    steps = 100  # resolution for sampling
    for i, j in product(range(steps+1), repeat=2):
        x = i / steps
        y = j / steps
        z = 1 - x - y
        if z < 0:
            continue  # skip invalid distributions
        
        opp_order = [x, y, z]
        winning = sum(your_order[k] >= opp_order[k] for k in range(3))
        prob = winning / 3  # probability of winning
        
        if prob < min_prob:
            min_prob = prob
            print(f"New min prob: {min_prob:.6f} with opponent strategy {[round(x,3), round(y,3), round(z,3)]}")
    
    print(f"\nFinal minimal winning probability: {min_prob}")

if __name__ == "__main__":
    main()
```
