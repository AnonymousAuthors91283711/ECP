[write_program]
This problem asks us to find the value of a(1998) for a strictly increasing sequence a where every natural number n can be uniquely expressed as n = a(i) + 2a(j) + 4a(k). The sequence must have unique representations for all n.

We'll approach this by:
1. Recognizing this is similar to binary representations but with coefficients (1,2,4)
2. The unique representation suggests a should be powers of 8 (since 1,2,4 are coefficients for base-8 digits)
3. Verifying that a(n) = 8^n satisfies the conditions
4. Computing 8^1998 would be too large, so we'll verify the pattern holds for small n first

```python
def verify_sequence(max_n):
    # Verify the pattern holds for small n
    for n in range(1, 100):
        found = False
        # Try all possible i,j,k combinations
        for i in range(n+1):
            for j in range(n+1):
                for k in range(n+1):
                    val = (8**i) + 2*(8**j) + 4*(8**k)
                    if val == n:
                        if found:
                            print(f"Non-unique representation found for n={n}")
                            return False
                        found = True
        if not found:
            print(f"No representation found for n={n}")
            return False
    return True

if verify_sequence(100):
    print("Pattern holds for small n. Likely a(n) = 8^n.")
    print("Therefore a(1998) would be 8^1998")
else:
    print("Pattern verification failed")
```
