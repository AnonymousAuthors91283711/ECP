[write_program]
This problem asks for the set of natural numbers `n` that are divisible by 30 and have exactly 30 divisors. To solve this, we'll enumerate numbers divisible by 30 and count their divisors until we find all such numbers up to a reasonable threshold.

The approach:
1. Generate numbers divisible by 30
2. For each number, factorize it and compute the number of divisors
3. Check if the divisor count equals 30
4. Print qualifying numbers as they're found

The divisor count function can be computed from the prime factorization: if n = p₁^a₁ * p₂^a₂ * ... * pₖ^aₖ, then the number of divisors is (a₁+1)(a₂+1)...(aₖ+1).

```python
def count_divisors(n):
    """Count the number of divisors of n"""
    if n == 0:
        return 0
    count = 1
    # Handle 2 separately
    exponent = 0
    while n % 2 == 0:
        exponent += 1
        n = n // 2
    count *= (exponent + 1)
    
    # Check odd divisors up to sqrt(n)
    i = 3
    max_factor = int(n**0.5) + 1
    while i <= max_factor:
        exponent = 0
        while n % i == 0:
            exponent += 1
            n = n // i
            max_factor = int(n**0.5) + 1
        if exponent > 0:
            count *= (exponent + 1)
        i += 2
    
    if n > 1:
        count *= 2
    return count

def find_numbers():
    """Find numbers divisible by 30 with exactly 30 divisors"""
    print("Numbers divisible by 30 with exactly 30 divisors:")
    n = 30
    max_n = 10**6  # Reasonable upper bound
    while n <= max_n:
        if count_divisors(n) == 30:
            print(n)
        n += 30

find_numbers()
```
