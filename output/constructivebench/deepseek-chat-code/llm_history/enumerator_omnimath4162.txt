[write_program]
This problem asks to find all quadruples (a, b, n, p) where p is prime, satisfying the equation 2^a + p^b = n^(p-1). We'll write a Python program to search for such solutions by:

1. Iterating through small prime values of p
2. For each p, checking possible n values
3. For each (p,n), solving for possible (a,b) pairs
4. Outputting valid solutions as they're found

We'll limit our search to reasonable bounds for computational feasibility.

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

max_p = 10  # Check primes up to this value
max_n = 100  # Maximum n to check

print("Searching for solutions to 2^a + p^b = n^(p-1)")
print("Format: (a, b, n, p)")

for p in range(2, max_p + 1):
    if not is_prime(p):
        continue
    for n in range(1, max_n + 1):
        rhs = n ** (p - 1)
        max_a = math.ceil(math.log2(rhs))
        for a in range(1, max_a + 1):
            pb = rhs - (1 << a)
            if pb <= 0:
                continue
            # Check if pb is a power of p
            b = 0
            temp = pb
            while temp % p == 0:
                temp = temp // p
                b += 1
            if temp == 1 and b > 0:
                print(f"Found solution: ({a}, {b}, {n}, {p})")
```
