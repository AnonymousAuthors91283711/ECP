[write_program]
This problem involves summing the absolute values of certain binomial coefficients divided by standard binomial coefficients. We'll write a Python program to compute this sum for smaller values of n (instead of 2018) to help identify the pattern.

The program will:
1. Compute binomial coefficients using a memoization approach
2. Calculate the modified Pascal triangle values recursively
3. Compute the sum for various small n values
4. Output results immediately as they're computed

```python
from math import comb
from functools import lru_cache

@lru_cache(maxsize=None)
def modified_pascal(n, k):
    if k == 0 or k == n:
        return 1
    if 1 <= k <= n - 1:
        return modified_pascal(n-1, k) - modified_pascal(n-1, k-1)
    return 0

def compute_sum(n):
    total = 0.0
    for k in range(n + 1):
        pascal_val = modified_pascal(n, k)
        std_binom = comb(n, k)
        if std_binom != 0:
            total += abs(pascal_val) / std_binom
    return total

# Compute for small values of n to observe pattern
for n in range(1, 11):
    result = compute_sum(n)
    print(f"n={n}: {result}")
```
