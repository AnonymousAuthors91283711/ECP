[write_program]
This problem involves finding a natural number `n` where both `n-1` and `n*(n+1)/2` are perfect numbers. A perfect number equals the sum of its proper divisors. We'll write a Python program to search for such `n` values.

The approach:
1. Define a function to check if a number is perfect by summing its proper divisors
2. Iterate through possible `n` values, checking the conditions
3. For each candidate `n`, verify if both `n-1` and the triangular number `n*(n+1)/2` are perfect
4. Output valid candidates as they're found

```python
def is_perfect(num):
    if num <= 1:
        return False
    divisors = {1}
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            divisors.add(i)
            divisors.add(num // i)
    return sum(divisors) == num

def find_special_numbers(max_n=100000):
    for n in range(2, max_n + 1):
        a = n - 1
        b = n * (n + 1) // 2
        if is_perfect(a) and is_perfect(b):
            print(f"Found candidate: n = {n}")
            print(f"  n-1 = {a}, triangular = {b}")

if __name__ == "__main__":
    find_special_numbers()
```
