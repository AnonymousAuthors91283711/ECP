[write_program]
This problem asks for the smallest possible sum of a 7-element set of positive integers where:
1. All elements are distinct (strictly ordered)
2. Every non-empty subset has an average that is an integer (i.e., sum divisible by cardinality)

We'll enumerate possible candidate sets with increasing sums to find the minimal one satisfying the conditions.

```python
from itertools import combinations

def is_valid_set(s):
    """Check if all non-empty subsets have integer average."""
    for size in range(1, len(s)+1):
        for subset in combinations(s, size):
            total = sum(subset)
            if total % size != 0:
                return False
    return True

def find_minimal_sum(n=7):
    """Find minimal sum for n-element set with given properties."""
    # Start with smallest possible sum (n*(n+1)/2 for consecutive numbers)
    min_sum = n * (n + 1) // 2
    while True:
        # Generate all n-element sets with sum min_sum and distinct elements
        # Using combinations with replacement to generate non-decreasing sequences
        for candidate in combinations(range(1, min_sum - n + 2), n):
            if sum(candidate) != min_sum:
                continue
            if len(set(candidate)) != n:  # Ensure distinct elements
                continue
            if is_valid_set(candidate):
                print(f"Found valid set: {candidate} with sum {min_sum}")
                return min_sum
        min_sum += 1

if __name__ == "__main__":
    print("Searching for minimal 7-element set...")
    result = find_minimal_sum(7)
    print(f"Minimal sum found: {result}")
```
