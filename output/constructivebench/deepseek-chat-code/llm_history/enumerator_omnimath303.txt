[write_program]
This problem involves finding all positive integers n where for any three natural numbers a, b, c, there exist non-zero integers x, y, z (with bounded absolute values) such that ax + by + cz = 0. We'll write a program to search for the smallest such n.

The approach is:
1. For small n values (starting from 1), check if the condition holds
2. For each n, test all possible a,b,c combinations up to a small bound
3. For each (a,b,c), check if there exists (x,y,z) with |x|,|y|,|z| ≤ 2n that satisfies the equation
4. The first n where this holds for all tested (a,b,c) is our candidate

```python
def check_condition(n, max_abc=5):
    """Check if for all a,b,c ≤ max_abc, there's a non-trivial solution."""
    for a in range(1, max_abc + 1):
        for b in range(1, max_abc + 1):
            for c in range(1, max_abc + 1):
                found = False
                # Search for x,y,z with |x|,|y|,|z| ≤ 2n, not all zero
                for x in range(-2*n, 2*n + 1):
                    for y in range(-2*n, 2*n + 1):
                        for z in range(-2*n, 2*n + 1):
                            if x == 0 and y == 0 and z == 0:
                                continue
                            if a*x + b*y + c*z == 0:
                                found = True
                                break
                        if found: break
                    if found: break
                if not found:
                    return False
    return True

def find_min_n(max_n=10):
    """Find minimal n where condition holds for small a,b,c."""
    for n in range(1, max_n + 1):
        if check_condition(n):
            print(f"Found candidate n = {n}")
            return n
    print(f"No n ≤ {max_n} satisfies the condition")
    return None

if __name__ == "__main__":
    find_min_n()
```
