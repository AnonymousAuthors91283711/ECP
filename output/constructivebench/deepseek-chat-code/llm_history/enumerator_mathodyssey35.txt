[write_program]
The problem asks for the minimal sum `a + b` where `a` and `b` are positive integers satisfying:
1. 79 divides `a + 77*b`
2. 77 divides `a + 79*b`

We'll write a Python program to enumerate possible pairs `(a, b)` and find the minimal sum. The approach is to iterate through possible values of `b` and solve for `a` using the divisibility conditions.

```python
import math

def compute_min_sum():
    min_sum = float('inf')
    # Iterate b from 1 to a reasonable upper bound
    for b in range(1, 1000):
        # Condition 1: 79 | (a + 77*b) => a ≡ -77b mod 79
        # Condition 2: 77 | (a + 79*b) => a ≡ -79b mod 77
        # We need to find a satisfying both congruences
        
        # Solve a ≡ -77b mod 79
        rem1 = (-77 * b) % 79
        
        # Solve a ≡ -79b mod 77
        rem2 = (-79 * b) % 77
        
        # Combine congruences using CRT
        # Since 77 and 79 are coprime, solution exists
        # a ≡ rem1 mod 79
        # a ≡ rem2 mod 77
        # Solution is a ≡ x mod (77*79) where x is found via CRT
        
        # Find x using CRT
        N = 77 * 79
        x = (rem1 * 77 * pow(77, -1, 79) + rem2 * 79 * pow(79, -1, 77)) % N
        
        # The minimal positive a is x + k*N where k is smallest making a > 0
        a = x if x > 0 else x + N
        
        current_sum = a + b
        if current_sum < min_sum:
            min_sum = current_sum
            print(f"Found new minimal sum: {min_sum} with a={a}, b={b}")
    
    print(f"Final minimal sum: {min_sum}")

compute_min_sum()
```
