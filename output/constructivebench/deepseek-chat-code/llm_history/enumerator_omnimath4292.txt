[write_program]
The problem involves finding a non-constant function on the vertices of a cube (represented as Fin 8) that is invariant under 10 iterations of averaging over adjacent vertices. We need to enumerate possible functions and check this property.

Here's a Python program that:
1. Models the cube's adjacency relation (vertices are adjacent if their indices differ by an odd number)
2. Defines the averaging operation
3. Checks for non-constant fixed points after 10 iterations
4. Outputs any found solutions

```python
import numpy as np

# Define adjacency for cube vertices (Fin 8)
def adjacent(k):
    return [j for j in range(8) if j != k and (j + k) % 2 == 1]

# Define averaging operator
def average_adjacent(f):
    new_f = np.zeros(8)
    for k in range(8):
        adj = adjacent(k)
        new_f[k] = sum(f[i] for i in adj) / 3
    return new_f

# Check if function is non-constant
def is_non_constant(f):
    return len(set(f)) > 1

# Main search
print("Searching for non-constant fixed points after 10 iterations:")
found = False
for trial in range(100):
    # Random initial function
    f = np.random.rand(8)
    
    # Apply 10 iterations
    f_iter = f.copy()
    for _ in range(10):
        f_iter = average_adjacent(f_iter)
    
    # Check if fixed point and non-constant
    if np.allclose(average_adjacent(f_iter), f_iter) and is_non_constant(f_iter):
        print(f"Found solution: {f_iter}")
        found = True

if not found:
    print("No solutions found in random trials")
else:
    print("Solutions exist")
```
