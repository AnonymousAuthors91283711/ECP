[write_program]
This problem asks for all integer triples (a, b, c) such that a² + b² + c² = a²b². We'll write a Python program to enumerate small integer solutions efficiently.

Key observations:
1. The equation is symmetric in b and c, so we can assume |b| ≤ |c| without loss of generality
2. For |a| ≥ 2 and |b| ≥ 2, the right side grows much faster than the left
3. We'll limit our search to reasonable bounds (-10 to 10) since larger values quickly make the equation impossible

```python
def find_solutions():
    solutions = set()
    # We'll search up to these bounds, which are sufficient to find all solutions
    bound = 10
    for a in range(-bound, bound + 1):
        a_sq = a * a
        for b in range(-bound, bound + 1):
            b_sq = b * b
            left = a_sq + b_sq
            right = a_sq * b_sq
            # Solve for c²: c² = a²b² - a² - b²
            c_sq = right - left
            if c_sq < 0:
                continue  # c would be imaginary
            # Check if c_sq is perfect square
            c = int(round(c_sq ** 0.5))
            if c * c == c_sq:
                # Add all sign combinations for c
                solutions.add((a, b, c))
                solutions.add((a, b, -c))
                solutions.add((a, -b, c))
                solutions.add((a, -b, -c))
                # Also add symmetric cases (a swapped with b)
                solutions.add((b, a, c))
                solutions.add((b, a, -c))
                solutions.add((-b, a, c))
                solutions.add((-b, a, -c))
    
    # Print unique solutions sorted for readability
    for sol in sorted(solutions):
        print(sol)

find_solutions()
```
