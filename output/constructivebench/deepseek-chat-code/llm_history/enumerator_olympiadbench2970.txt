[write_program]
This problem involves finding the smallest natural number n such that A(n) ≥ K, where A is a recursively defined sequence and K is the sum of digits of 98721 (which is 9+8+7+2+1=27). We'll write a Python program to compute the sequence A(n) until we find the first n where A(n) ≥ 27.

The sequence A is defined as:
- A(0) = 1
- A(1) = 1
- A(2) = 1
- A(n+3) = A(n) + A(n+2)

We'll compute the sequence values iteratively until we find the first n where A(n) ≥ 27.

```python
def compute_min_n():
    K = 9 + 8 + 7 + 2 + 1  # Sum of digits of 98721
    # Initialize sequence values
    a = [1, 1, 1]  # A(0), A(1), A(2)
    n = 2  # Current maximum index in a
    
    # Print the parameters being used
    print(f"Parameters: K = {K} (sum of digits of 98721)")
    print("Computing sequence A(n) until A(n) >= K:")
    
    # Check initial values
    for i in range(3):
        print(f"A({i}) = {a[i]}")
        if a[i] >= K:
            print(f"Found minimal n: {i}")
            return
    
    # Compute subsequent values until condition is met
    while True:
        n += 1
        next_val = a[n-3] + a[n-1]  # A(n) = A(n-3) + A(n-2)
        a.append(next_val)
        print(f"A({n}) = {next_val}")
        if next_val >= K:
            print(f"Found minimal n: {n}")
            return

compute_min_n()
```
