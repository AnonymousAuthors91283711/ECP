[write_program]
This problem asks for which positive integers n the expression 2^n + 12^n + 2011^n is a perfect square. We'll write a Python program to search for such n values up to a reasonable threshold (since larger exponents become computationally intensive).

The approach:
1. Iterate through possible n values starting from 1
2. For each n, compute 2^n + 12^n + 2011^n
3. Check if the result is a perfect square
4. Print any n values that satisfy the condition

We'll limit our search to n ≤ 10 since higher exponents make the numbers extremely large and the computation impractical for a simple enumerator.

```python
import math

def is_perfect_square(num):
    root = math.isqrt(num)
    return root * root == num

max_n = 10
print(f"Searching for n where 2^n + 12^n + 2011^n is square (1 ≤ n ≤ {max_n})")

for n in range(1, max_n + 1):
    term = 2**n + 12**n + 2011**n
    if is_perfect_square(term):
        print(f"Found solution at n = {n}")
```
