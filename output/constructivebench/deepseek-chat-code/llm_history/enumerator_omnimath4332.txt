[write_program]
The problem is to find the smallest positive integer n such that the exponent of 10 in the prime factorization of n! (n factorial) is exactly 1987. Since 10 = 2Ã—5, the exponent of 10 in n! is the minimum of the exponents of 2 and 5 in n!'s prime factorization. Since there are always more factors of 2 than 5, we only need to count the number of 5s in n!'s prime factors.

The program will:
1. Calculate the number of trailing zeros (exponent of 10) in n! for increasing n
2. Find the smallest n where this count equals 1987
3. Output candidates and finally the minimal solution

```python
def count_trailing_zeros_in_factorial(n):
    count = 0
    while n > 0:
        n = n // 5
        count += n
    return count

target = 1987
n = 1
found = False

# Search for the minimal n where count = target
while not found:
    zeros = count_trailing_zeros_in_factorial(n)
    if zeros == target:
        print(f"Found candidate: n = {n}")
        found = True
        minimal_n = n
    elif zeros > target:
        # Went past the target, need to adjust search
        break
    n += 1

# Binary search to find the exact minimal n
low = 0
high = n
while low < high:
    mid = (low + high) // 2
    zeros = count_trailing_zeros_in_factorial(mid)
    if zeros < target:
        low = mid + 1
    else:
        high = mid

minimal_n = low
print(f"Minimal n where 10^1987 divides n!: {minimal_n}")
```
