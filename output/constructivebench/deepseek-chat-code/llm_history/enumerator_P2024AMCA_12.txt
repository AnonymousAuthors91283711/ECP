[write_program]
This problem asks for the minimal digit sum of a number formed as a*r² where:
1. a is a divisor of 720 (since 720 = a*r)
2. a < 720
3. 720 < a*r²
We need to enumerate all possible a (divisors of 720), compute r = 720/a, then check a*r² and calculate its digit sum.

```python
import math

def get_divisors(n):
    divisors = set()
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.add(i)
            divisors.add(n // i)
    return sorted(divisors)

def digit_sum(n):
    return sum(int(d) for d in str(n))

def solve():
    min_sum = float('inf')
    best = None
    n = 720
    divisors = get_divisors(n)
    
    for a in divisors:
        if a >= n:
            continue
        r = n // a
        ar2 = a * r * r
        if ar2 <= n:
            continue
        s = digit_sum(ar2)
        print(f"a={a}, r={r}, a*r²={ar2}, digit_sum={s}")
        if s < min_sum:
            min_sum = s
            best = (a, r, ar2, s)
    
    print("\nMinimal digit sum:", min_sum)

solve()
```
