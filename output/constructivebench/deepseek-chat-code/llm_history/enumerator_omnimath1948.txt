[write_program]
This problem asks for the smallest number S such that there exists a set of distinct positive integers (coins) including 100, where every integer from 1 to S can be formed as a sum of a subset of these coins, and S+1 cannot be formed. We'll write a Python program to find such coin sets and determine the maximal S they can cover.

The approach:
1. Generate possible coin sets containing 100
2. For each set, determine the largest S where all numbers 1..S can be formed
3. Track the minimal S_max across all possible coin sets

```python
def find_max_S(coins):
    max_reachable = 0
    reachable = {0}
    for coin in sorted(coins):
        new_reachable = set()
        for amount in reachable:
            new_amount = amount + coin
            if new_amount <= 200:  # Reasonable upper bound
                new_reachable.add(new_amount)
        reachable.update(new_reachable)
    
    S = 0
    while S + 1 in reachable:
        S += 1
    return S

def generate_coin_sets():
    # We'll try small coin sets first (greedy approach)
    base = [100]
    # Try adding small coins first
    for c1 in range(1, 10):
        for c2 in range(c1+1, 20):
            coins = [c1, c2] + base
            S = find_max_S(coins)
            print(f"Coins: {coins}, S: {S}")
    
    # Also try some common patterns
    for power in [1, 2, 3, 4]:
        coins = [2**i for i in range(power, power+3)] + base
        S = find_max_S(coins)
        print(f"Coins: {coins}, S: {S}")

    # Binary representation approach
    coins = [1, 2, 4, 8, 16, 32, 64, 100]
    S = find_max_S(coins)
    print(f"Coins: {coins}, S: {S}")

    # Minimal case that might work
    coins = [1, 3, 9, 27, 60, 100]
    S = find_max_S(coins)
    print(f"Coins: {coins}, S: {S}")

if __name__ == "__main__":
    generate_coin_sets()
    # After examining outputs, we'd look for the minimal S_max
    # But we let the human analyze the printed results
```
