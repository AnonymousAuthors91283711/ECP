[write_program]
This problem involves calculating the probability of a specific sequence of wins and losses in a Markov chain scenario. The program will compute the exact probability value by evaluating the given expression.

```python
def calculate_probability():
    p_win_after_win = 3/4
    p_win_after_loss = 1/3
    p_initial = 1/2
    
    # Calculate each term of the probability expression
    term1 = p_initial * p_win_after_win * p_win_after_win * (1 - p_win_after_win)
    term2 = p_initial * p_win_after_win * (1 - p_win_after_win) * p_win_after_loss * (1 - p_win_after_loss)
    term3 = p_initial * (1 - p_initial) * p_win_after_loss * p_win_after_win * (1 - p_win_after_win)
    term4 = (1 - p_initial) * p_win_after_loss * p_win_after_win * p_win_after_win * (1 - p_win_after_win)
    
    total_probability = term1 + term2 + term3 + term4
    
    # Print the exact fraction and decimal approximation
    from fractions import Fraction
    exact = Fraction(term1 + term2 + term3 + term4).limit_denominator()
    print(f"Exact probability: {exact}")
    print(f"Decimal approximation: {float(exact):.6f}")

if __name__ == "__main__":
    calculate_probability()
```
