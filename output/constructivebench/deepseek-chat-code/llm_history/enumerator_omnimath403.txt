[write_program]
This problem involves finding all integer pairs (m, n) that satisfy the equation 231*m² = 130*n². We can rewrite this as (231/130) = (n/m)², which implies that n/m must be a rational number whose square equals 231/130. The solution involves finding rational points on this curve, which reduces to finding integer solutions to the Diophantine equation.

We'll approach this by:
1. Simplifying the equation to its reduced form
2. Observing that the equation implies m must be a multiple of 130 and n must be a multiple of 231 (up to common factors)
3. Enumerating small integer solutions by checking possible common factors

```python
import math

def find_solutions(max_k=10):
    # The equation is 231*m^2 = 130*n^2
    # We can rewrite as m^2/n^2 = 130/231
    # So m/n = ±sqrt(130/231)
    # For integer solutions, m and n must be multiples that make both sides integers
    # Let's find gcd(231,130) first
    gcd_val = math.gcd(231, 130)
    # The equation reduces to (231/gcd_val)*a^2 = (130/gcd_val)*b^2
    # But 231 and 130 are coprime (gcd=1), so we have 231*a^2 = 130*b^2
    # This implies a must be multiple of 130 and b multiple of 231
    # So let a = 130*k, b = 231*k
    for k in range(1, max_k + 1):
        m = 130 * k
        n = 231 * k
        print(f"Solution (m, n) = ({m}, {n})")
        print(f"Solution (m, n) = ({-m}, {n})")
        print(f"Solution (m, n) = ({m}, {-n})")
        print(f"Solution (m, n) = ({-m}, {-n})")

    # Also need to consider the case when k is negative
    for k in range(-max_k, 0):
        m = 130 * k
        n = 231 * k
        print(f"Solution (m, n) = ({m}, {n})")
        print(f"Solution (m, n) = ({-m}, {n})")
        print(f"Solution (m, n) = ({m}, {-n})")
        print(f"Solution (m, n) = ({-m}, {-n})")

if __name__ == "__main__":
    find_solutions(max_k=5)
```
