[write_program]
This problem asks for all pairs of natural numbers (p, n) where p is prime, n is positive, and n^p + 1 is divisible by p^n + 1. We'll write a Python program to search for such pairs efficiently.

The approach:
1. Iterate through possible prime p values
2. For each p, iterate through possible n values
3. Check if n^p + 1 is divisible by p^n + 1
4. Output valid pairs immediately when found

We'll limit the search to reasonable bounds to keep computation feasible.

```python
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

max_p = 20  # Upper bound for prime p
max_n = 20  # Upper bound for n

print("Searching for pairs (p, n) where:")
print("- p is prime")
print("- n > 0")
print("- n^p + 1 divisible by p^n + 1")
print(f"Searching p up to {max_p}, n up to {max_n}")

found_pairs = []
for p in range(2, max_p + 1):
    if not is_prime(p):
        continue
    for n in range(1, max_n + 1):
        numerator = pow(n, p) + 1
        denominator = pow(p, n) + 1
        if numerator % denominator == 0:
            print(f"Found pair: ({p}, {n})")
            found_pairs.append((p, n))

print("\nAll found pairs:", found_pairs)
```
