[write_program]
The problem asks for the smallest integer \( n > 1 \) such that the average of the first \( n \) perfect squares is itself a perfect square. We need to write a Python program to enumerate possible values of \( n \) and check this condition.

The sum of the first \( n \) perfect squares is given by the formula \( S(n) = \frac{n(n+1)(2n+1)}{6} \). The average is \( \frac{S(n)}{n} = \frac{(n+1)(2n+1)}{6} \). We need to find \( n > 1 \) where this average is a perfect square.

Here's the Python program to enumerate possible values of \( n \) and check the condition:

```python
import math

def is_perfect_square(x):
    s = int(math.isqrt(x))
    return s * s == x

def find_min_n(max_n=10000):
    for n in range(2, max_n + 1):
        numerator = (n + 1) * (2 * n + 1)
        if numerator % 6 != 0:
            continue
        avg = numerator // 6
        if is_perfect_square(avg):
            print(f"Found candidate: n = {n}, average = {avg}")
            return n  # Return the first (smallest) found
    print("No solution found in the search range")
    return None

find_min_n()
```

The program checks each \( n \) from 2 upwards, computes the average, and verifies if it's a perfect square. It stops at the first valid \( n \) found (which will be the smallest due to the order of enumeration). The search range is limited to 10000 for practicality, but the actual solution is much smaller.
