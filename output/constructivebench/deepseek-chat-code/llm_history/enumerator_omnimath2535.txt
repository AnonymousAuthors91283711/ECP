[write_program]
The problem asks to find all real numbers x that satisfy the equation (x² + 2x + 3)^(x² + 2x + 3)^(x² + 2x + 3) = 2012, and then compute the sum of all such x. 

We can approach this by:
1. Let y = x² + 2x + 3, which simplifies to y = (x+1)² + 2 (always ≥ 2)
2. The equation becomes y^(y^y) = 2012
3. First solve y^y = k where y^k = 2012
4. We'll numerically approximate solutions since exact form may not exist

Here's a Python program to find approximate solutions:

```python
import math

def find_solutions():
    # First find y such that y^(y^y) = 2012
    # We'll search for y in a reasonable range
    solutions = []
    
    # Binary search to find y
    low = 2.0
    high = 3.0
    tolerance = 1e-10
    while high - low > tolerance:
        mid = (low + high) / 2
        val = mid ** (mid ** mid)
        if val < 2012:
            low = mid
        else:
            high = mid
    y = (low + high) / 2
    print(f"Found y ≈ {y}")
    
    # Now solve x^2 + 2x + 3 = y => x^2 + 2x + (3-y) = 0
    discriminant = 4 - 4 * (3 - y)
    if discriminant >= 0:
        x1 = (-2 + math.sqrt(discriminant)) / 2
        x2 = (-2 - math.sqrt(discriminant)) / 2
        solutions.extend([x1, x2])
        print(f"Solutions: x ≈ {x1}, x ≈ {x2}")
        print(f"Sum of solutions: {x1 + x2}")
    else:
        print("No real solutions")

find_solutions()
```

The program first finds the approximate value of y that satisfies y^(y^y) = 2012 using binary search, then solves the quadratic equation to find corresponding x values. The sum of solutions is printed at the end, which from the quadratic formula will always be -2 (sum of roots of x² + 2x + c = 0 is -2).
