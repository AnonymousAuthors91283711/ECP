[write_program]
This problem involves simulating a state machine where a robot moves along a line of coins, flipping them and changing direction based on their current state. The goal is to find the minimal number of steps needed to have exactly 20 tails (false coins).

We'll simulate this process in Python, tracking the robot's position, direction, coin states, step count, and tails count. The simulation will run until we reach exactly 20 tails, then output the step count.

```python
def simulate_until_tails(target_tails=20):
    # Initialize state
    pos = 0
    direction = 1  # 1 for right, -1 for left
    coins = {}  # maps position to coin state (True=heads, False=tails, None=missing)
    steps = 0
    tails_count = 0
    
    while True:
        current_coin = coins.get(pos)
        
        if current_coin is True:  # Heads
            # Flip to tails, reverse direction
            coins[pos] = False
            direction *= -1
            tails_count += 1
        elif current_coin is False:  # Tails
            # Remove coin, keep direction
            del coins[pos]
            tails_count -= 1
        else:  # No coin
            # Place heads coin, keep direction
            coins[pos] = True
        
        # Move to next position
        pos += direction
        steps += 1
        
        # Check if we've reached target tails count
        if tails_count == target_tails:
            print(f"Found solution at step {steps}")
            return steps

# Run the simulation
if __name__ == "__main__":
    minimal_steps = simulate_until_tails()
    print(f"Minimal steps needed: {minimal_steps}")
```
