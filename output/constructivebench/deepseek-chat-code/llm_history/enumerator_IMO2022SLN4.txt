[write_program]
This problem asks to find all triples (a, b, p) where p is prime, a and b are positive integers, and a^p = b! + p. We'll write a Python program to search for such triples efficiently.

The approach:
1. Iterate through small prime numbers p (since factorial grows very rapidly)
2. For each p, iterate through possible b values (factorial base)
3. For each (b,p), compute b! + p and check if it's a perfect p-th power
4. Output valid triples immediately when found

We'll limit our search to reasonable bounds (p < 20, b < 20) since factorials become extremely large quickly.

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def find_triples():
    primes = [p for p in range(2, 20) if is_prime(p)]
    for p in primes:
        for b in range(1, 20):
            factorial = math.factorial(b)
            target = factorial + p
            if target <= 0:
                continue
            a = round(target ** (1/p))
            if a ** p == target:
                print(f"Found triple: a={a}, b={b}, p={p}")

if __name__ == "__main__":
    find_triples()
```
