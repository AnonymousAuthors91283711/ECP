[write_program]
This problem asks for the smallest positive integer n such that there exists a sequence of n positive integers (each ≤15) whose factorials sum to 2001 modulo 10000. We'll write a Python program to search for such sequences and find the minimal n.

The approach:
1. Iterate n from 1 upwards
2. For each n, generate all possible combinations of n numbers (1-15)
3. Check if their factorial sum ≡ 2001 mod 10000
4. Return the smallest n where this occurs

Since factorial sums grow rapidly, we'll limit n to a reasonable range (up to 10) and use memoization for factorials.

```python
import itertools

def main():
    # Precompute factorials 1! through 15!
    fact = [1] * 16
    for i in range(1, 16):
        fact[i] = fact[i-1] * i
    
    max_n = 10  # Reasonable upper bound for n
    for n in range(1, max_n + 1):
        # Generate all non-decreasing sequences of length n with elements 1-15
        for seq in itertools.combinations_with_replacement(range(1, 16), n):
            total = sum(fact[x] for x in seq)
            if total % 10000 == 2001:
                print(f"Found solution for n={n}: {seq}")
                print(f"Minimal n found: {n}")
                return
        
        print(f"Checked all sequences for n={n}, no solution found")
    
    print(f"No solution found for n ≤ {max_n}")

if __name__ == "__main__":
    main()
```
