[write_program]
This problem asks for the greatest integer `n` such that `n²` can be expressed as `(m+1)³ - m³` for some integer `m`. We'll write a Python program to enumerate possible values of `n` by checking successive values of `m` and computing the resulting `n²`.

The approach:
1. Iterate through possible `m` values (both positive and negative)
2. Compute `(m+1)³ - m³` for each `m`
3. Check if the result is a perfect square
4. Track the maximum `n` found

We'll limit the search to a reasonable range of `m` values where the expression stays manageable.

```python
def find_max_n():
    max_n = 0
    # Search positive m first since larger m gives larger n^2
    for m in range(0, 10**6):
        diff = (m + 1)**3 - m**3
        n = int(diff**0.5)
        if n * n == diff:
            if n > max_n:
                max_n = n
                print(f"Found n = {n} at m = {m}")
    # Check negative m values
    for m in range(-1, -10**6, -1):
        diff = (m + 1)**3 - m**3
        n = int(diff**0.5)
        if n * n == diff:
            if n > max_n:
                max_n = n
                print(f"Found n = {n} at m = {m}")
    print(f"Maximum n found: {max_n}")

find_max_n()
```
