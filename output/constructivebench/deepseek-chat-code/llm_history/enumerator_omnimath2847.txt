[write_program]
This problem involves finding the ratio (B-A)/(D-C) given certain conditions about four integers A<B<C<D and two fractional relationships. We'll write a program to enumerate possible integer values for A,B,C,D that satisfy the conditions and compute the required ratio.

The approach is:
1. Iterate through possible values of A (starting from small integers)
2. For each A, iterate possible B values (B > A)
3. Check if (B-A)/(C-A) = 1/5 implies C = A + 5(B-A)
4. Then check if (C-B)/(D-C) = 2/1 implies D = C + (C-B)/2
5. Verify all values are integers and strictly increasing
6. Compute (B-A)/(D-C) for valid cases

```python
def find_ratios():
    # We'll search within a reasonable range of A values
    for A in range(-20, 21):
        # B must be greater than A
        for B in range(A + 1, A + 100):
            # From h₂: (B-A)/(C-A) = 1/5 => C = A + 5(B-A)
            C = A + 5 * (B - A)
            if C <= B:
                continue  # Must satisfy A < B < C
            
            # From h₃: (C-B)/(D-C) = 2/1 => D = C + (C-B)/2
            numerator = C - B
            if numerator % 2 != 0:
                continue  # D must be integer
            D = C + numerator // 2
            if D <= C:
                continue  # Must satisfy C < D
            
            # Compute the required ratio (B-A)/(D-C)
            ratio_numerator = B - A
            ratio_denominator = D - C
            # Simplify the fraction
            def gcd(a, b):
                while b:
                    a, b = b, a % b
                return a
            common_divisor = gcd(ratio_numerator, ratio_denominator)
            simplified_num = ratio_numerator // common_divisor
            simplified_den = ratio_denominator // common_divisor
            
            print(f"A={A}, B={B}, C={C}, D={D} -> Ratio = {simplified_num}/{simplified_den}")

find_ratios()
```
