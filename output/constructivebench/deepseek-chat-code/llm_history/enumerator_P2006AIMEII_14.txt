[write_program]
This problem involves finding the smallest positive integer n such that the sum of reciprocals of all non-zero digits appearing in numbers from 1 to 10^n has a denominator of 1 when simplified. We'll write a Python program to enumerate possible n values and check this condition.

The approach:
1. For each candidate n, generate all numbers from 1 to 10^n
2. Extract all non-zero digits from these numbers
3. Compute the sum of reciprocals of these digits (as fractions)
4. Check if the simplified denominator is 1
5. Find the smallest n where this occurs

```python
from fractions import Fraction
from itertools import count

def get_nonzero_digits(n):
    """Return all non-zero digits in numbers from 1 to 10^n"""
    digits = set()
    for num in range(1, 10**n + 1):
        digits.update(int(d) for d in str(num) if d != '0')
    return sorted(digits)

def check_condition(n):
    """Check if sum of reciprocals has denominator 1"""
    digits = get_nonzero_digits(n)
    total = Fraction(0)
    for d in digits:
        total += Fraction(1, d)
    return total.denominator == 1

def find_min_n(max_n=10):
    """Find the smallest n where condition holds"""
    for n in count(1):
        if n > max_n:
            print(f"Checked up to n={max_n}, not found yet")
            return
        if check_condition(n):
            print(f"Found solution at n={n}")
            return n

if __name__ == "__main__":
    find_min_n()
```
