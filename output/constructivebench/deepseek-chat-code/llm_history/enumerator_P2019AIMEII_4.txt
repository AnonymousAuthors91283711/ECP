[write_program]
This problem involves counting the number of favorable outcomes where the product of four dice rolls (each from 1 to 6) is a perfect square, and then expressing this probability in reduced form. We'll write a Python program to enumerate all possible dice combinations and count the favorable cases.

```python
from math import isqrt
from fractions import Fraction
from itertools import product

def is_perfect_square(n):
    return isqrt(n) ** 2 == n

def solve():
    dice = range(1, 7)  # dice values 1-6
    total = 0
    favorable = 0
    
    # Iterate through all possible combinations of 4 dice rolls
    for a, b, c, d in product(dice, repeat=4):
        product_val = a * b * c * d
        if is_perfect_square(product_val):
            favorable += 1
        total += 1
    
    # Calculate probability in reduced form
    probability = Fraction(favorable, total)
    print(f"Favorable outcomes: {favorable}")
    print(f"Total outcomes: {total}")
    print(f"Probability: {probability.numerator}/{probability.denominator}")

if __name__ == "__main__":
    solve()
```
