[write_program]
The problem asks to count the number of positive integers n (0 < n < 30) such that there exists a positive integer k where n = k*(30 - n). We can rewrite the equation as n = 30k/(k+1). For each k, we need to find n that satisfies this equation and falls in the range (0,30).

We'll enumerate possible k values and compute corresponding n values, checking if they're integers within the required range. The solution involves:
1. Iterating k from 1 upwards
2. Calculating n = 30k/(k+1)
3. Checking if n is integer and 0 < n < 30
4. Collecting unique valid n values

```python
def solve():
    found = set()
    max_k = 100  # sufficiently large to cover all possible cases
    for k in range(1, max_k + 1):
        numerator = 30 * k
        denominator = k + 1
        if numerator % denominator == 0:
            n = numerator // denominator
            if 0 < n < 30:
                found.add(n)
                print(n)  # stream found values
    print("Total count:", len(found))

solve()
```
