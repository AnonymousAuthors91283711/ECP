[write_program]
This problem involves two recursive sequences a(n) and b(n) with given initial conditions. We need to compute the sum of b(n)*(1/a(n+1) - 1/a(n+3)) for all n and find its limit. Let's write a Python program to compute the first few terms of these sequences and the partial sums to identify a pattern.

```python
def compute_sequences(max_n):
    # Initialize sequences with given values
    a = {1: 2015.0, 2: 2015.0}
    b = {1: 2013.0, 2: 2013.0}
    
    # Compute sequences up to max_n+3 to get a(n+3) terms
    for n in range(2, max_n + 2):
        a[n+1] = (a[n-1] - 1) * (b[n] + 1)
        b[n+1] = a[n] * b[n-1] - 1
    
    # Compute partial sums
    partial_sums = []
    current_sum = 0.0
    for n in range(1, max_n + 1):
        term = b[n] * (1/a[n+1] - 1/a[n+3])
        current_sum += term
        partial_sums.append(current_sum)
        print(f"n={n}: partial sum = {current_sum}")
    
    return partial_sums

# Compute first 10 terms to observe convergence
print("Computing partial sums for the series:")
compute_sequences(10)
```

The program computes the sequences a(n) and b(n) recursively up to n+3 terms, then calculates the partial sums of the series. The output shows how the partial sums converge, which helps identify the limit. The exact value can be conjectured from the pattern observed in the partial sums.
