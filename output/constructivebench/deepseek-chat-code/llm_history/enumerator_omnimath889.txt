[write_program]
This problem involves finding the greatest angle θ < π where a certain product involving cosine terms equals 1, while ensuring none of the cosine terms are zero. We'll write a Python program to numerically search for such θ values.

The approach will:
1. Iterate through possible θ values in (0, π) with small increments
2. For each θ, compute the product condition while checking cosine terms aren't zero
3. Track the largest θ satisfying all conditions

```python
import math

def search_theta():
    max_theta = 0.0
    # Use small step size for precision but not too small to keep computation reasonable
    step = 0.0001
    for theta in [x * step for x in range(1, int(math.pi / step))]:
        valid = True
        product = 1.0
        # Check Finset.Icc (0:ℤ) 10 means k from 0 to 10 inclusive
        for k in range(0, 11):
            angle = (2 ** k) * theta
            cos_val = math.cos(angle)
            if abs(cos_val) < 1e-10:  # Avoid division by near-zero
                valid = False
                break
            term = 1 + (1 / cos_val)
            product *= term
        
        if valid and abs(product - 1) < 1e-8:  # Allow small floating point error
            print(f"Found valid theta: {theta:.6f}")
            if theta > max_theta:
                max_theta = theta
    
    print(f"\nMaximum valid theta found: {max_theta:.6f}")

search_theta()
```
