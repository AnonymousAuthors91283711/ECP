[write_program]
This problem involves finding permutations of numbers 1 through 9 that satisfy two linear equations and two quadratic equations simultaneously, forming a magic square-like structure. We'll write a Python program to enumerate all valid permutations that satisfy these conditions.

The approach:
1. Generate all permutations of numbers 1 through 9
2. For each permutation, check the four equations
3. Output permutations that satisfy all conditions

```python
from itertools import permutations

def check_conditions(nums):
    a, b, c, d, e, f, g, h, k = nums
    # Check linear conditions
    sum1 = a + b + c + d
    if not (sum1 == d + e + f + g and sum1 == g + h + k + a):
        return False
    # Check quadratic conditions
    sum_sq = a**2 + b**2 + c**2 + d**2
    if not (sum_sq == d**2 + e**2 + f**2 + g**2 and sum_sq == g**2 + h**2 + k**2 + a**2):
        return False
    return True

def main():
    numbers = range(1, 10)
    count = 0
    for perm in permutations(numbers):
        if check_conditions(perm):
            count += 1
            print(f"Solution {count}: {perm}")
    
    print(f"Total solutions found: {count}")

if __name__ == "__main__":
    main()
```
