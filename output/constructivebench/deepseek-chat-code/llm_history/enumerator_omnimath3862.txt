[write_program]
This problem involves finding a recursive sequence `a(n)` defined by a functional equation and initial condition. We'll write a Python program to compute the sequence values up to `n=2004` to identify the pattern and conjecture the closed-form solution.

The approach is:
1. Use the given recurrence relation to compute `a(n)` for small values
2. Observe the pattern and verify it holds for larger values
3. The recurrence suggests a quadratic form, so we'll check if `a(n) = n^2 + n + 1` satisfies the conditions

```python
def compute_sequence(max_n):
    a = [0] * (max_n + 1)
    a[1] = 3  # Given initial condition
    
    for m in range(1, (max_n // 2) + 1):
        for n in range(1, m + 1):
            if m + n <= max_n:
                # Compute a[m+n] using the recurrence relation
                # Rearranged from given equation: a[m+n] = 0.5*(a[2m] + a[2n]) - a[m-n] + m - n + 1
                # We need to compute terms in order where smaller indices are known
                if 2*m <= max_n and 2*n <= max_n and m >= n:
                    a_m_plus_n = 0.5 * (a[2*m] + a[2*n]) - a[m - n] + m - n + 1
                    if m + n <= max_n:
                        a[m + n] = a_m_plus_n
    
    # Also compute directly using the conjectured quadratic formula
    quadratic = [n*n + n + 1 for n in range(max_n + 1)]
    
    # Print comparison for verification
    for n in range(1, min(20, max_n + 1)):
        print(f"n={n}: recurrence={a[n]}, quadratic={quadratic[n]}")
    
    # Print the target value
    if 2004 <= max_n:
        print(f"a(2004) from recurrence: {a[2004]}")
        print(f"a(2004) from quadratic: {quadratic[2004]}")

# Compute up to n=2004
compute_sequence(2004)
```
