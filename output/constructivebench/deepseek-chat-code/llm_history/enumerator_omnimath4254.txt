[write_program]
This problem asks for the minimal constant C such that for any sequence of positive real numbers x_n where the sum of the first n-1 terms is ≤ x_n, the sum of square roots of the first n terms is ≤ C times the square root of the sum of the first n terms.

We'll approach this by:
1. Testing simple sequences to find patterns
2. Trying geometric sequences since they often give extremal cases
3. Calculating the ratio for different geometric sequences to find the minimal C

```python
import math

def test_geometric_sequence(r, n=100):
    """Test geometric sequence x_n = r^n and compute the ratio."""
    x = [1.0]  # x_0 = 1
    for i in range(1, n):
        x.append(x[-1] * r)
    
    max_ratio = 0
    for k in range(1, n):
        sum_x = sum(x[:k])
        sum_sqrtx = sum(math.sqrt(xi) for xi in x[:k])
        ratio = sum_sqrtx / math.sqrt(sum_x)
        if ratio > max_ratio:
            max_ratio = ratio
    return max_ratio

# Test different geometric ratios to find the minimal C
ratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
for r in ratios:
    c = test_geometric_sequence(r)
    print(f"Ratio r={r:.1f} gives C≈{c:.6f}")

# Refine around the minimal point found
refined_ratios = [i/100 for i in range(40, 60)]
for r in refined_ratios:
    c = test_geometric_sequence(r)
    print(f"Refined r={r:.2f} gives C≈{c:.6f}")

# The minimal C appears around r=0.5
final_ratio = 0.5
final_c = test_geometric_sequence(final_ratio)
print(f"\nFinal test with r={final_ratio}: C≈{final_c:.6f}")
```
