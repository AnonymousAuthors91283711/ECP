[write_program]
This problem asks for the minimal natural number `m` that can be expressed as `25*p` where `a` and `p` satisfy certain inequalities. We'll enumerate possible values of `a` and `p` that satisfy all constraints and find the minimal `m`.

The constraints are:
1. 500 < 5a + 5p < 1000 → 100 < a + p < 200
2. 1000 < 2a + 12p < 2000 → 500 < a + 6p < 1000
3. m = 25p

We'll iterate through possible p values and for each, find valid a ranges that satisfy both inequalities, then compute m=25p for valid (a,p) pairs.

```python
def main():
    min_m = None
    # Iterate possible p values (from constraints, p must be at least 1)
    for p in range(1, 200):
        # From first inequality: 100 - p < a < 200 - p
        a_low1 = 100 - p + 1
        a_high1 = 200 - p - 1
        
        # From second inequality: 500 - 6p < a < 1000 - 6p
        a_low2 = 500 - 6*p + 1
        a_high2 = 1000 - 6*p - 1
        
        # Valid a must satisfy both ranges
        a_low = max(a_low1, a_low2)
        a_high = min(a_high1, a_high2)
        
        if a_low <= a_high and a_low > 0:
            m = 25 * p
            print(f"Found valid pair: a in [{a_low}, {a_high}], p={p}, m={m}")
            if min_m is None or m < min_m:
                min_m = m
    
    if min_m is not None:
        print(f"\nMinimal m found: {min_m}")
    else:
        print("No valid solution found")

if __name__ == "__main__":
    main()
```
