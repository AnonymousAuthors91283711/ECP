[write_program]
This problem involves counting the number of ordered pairs of non-empty disjoint subsets of {1,2,...,10}. We'll write a Python program to enumerate all possible such pairs for smaller set sizes first to identify a pattern, then compute the exact count for n=10.

The approach:
1. For subsets A and B to be valid, they must be non-empty and disjoint
2. For each possible subset size combination, count valid pairs
3. The total count is the sum over all valid combinations

```python
from itertools import combinations

def count_disjoint_pairs(n):
    elements = list(range(1, n+1))
    total = 0
    for a_size in range(1, n+1):
        for A in combinations(elements, a_size):
            remaining = [x for x in elements if x not in A]
            for b_size in range(1, len(remaining)+1):
                for B in combinations(remaining, b_size):
                    total += 1
    return total

# Test for small values to verify the pattern
for n in range(1, 6):
    print(f"n={n}: {count_disjoint_pairs(n)}")

# Compute the answer for n=10 (mod 1000 as per problem)
n = 10
result = count_disjoint_pairs(n) % 1000
print(f"\nFor n=10, result mod 1000: {result}")
```
