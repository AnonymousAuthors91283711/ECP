[write_program]
The problem asks to find a 4-digit number n (1000 â‰¤ n < 10000) where the square root of n equals 3 times the sum of its digits. We'll write a Python program to enumerate all such numbers.

The approach is:
1. Iterate through all 4-digit numbers (1000 to 9999)
2. For each number, calculate its digit sum
3. Check if the square root equals 3 times the digit sum
4. Print any numbers that satisfy this condition

```python
def digit_sum(n):
    return sum(int(d) for d in str(n))

for n in range(1000, 10000):
    s = digit_sum(n)
    # Check if sqrt(n) equals 3*s, avoiding floating point inaccuracies
    if n == (3 * s) ** 2:
        print(n)
```
