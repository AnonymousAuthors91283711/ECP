[write_program]
This problem asks for the greatest lower bound on the maximum deviation from 1/2 among coordinates of any real vector whose sum is an integer. For small values of n, we can enumerate possible vectors to find this bound.

```python
import itertools
import fractions
from fractions import Fraction

def find_max_f(n):
    # We'll test fractions with denominator 2n to capture possible minima
    max_f = Fraction(0, 1)
    
    # Generate all possible vectors with components in {0, 1/2, 1} first
    for vec in itertools.product([0, Fraction(1,2), 1], repeat=n):
        s = sum(vec)
        if s.denominator == 1:  # sum is integer
            current_max = max(abs(x - Fraction(1,2)) for x in vec)
            if current_max > max_f:
                max_f = current_max
                print(f"New max f for n={n}: {float(max_f)} with vector {vec}")
    
    # Check more refined cases with denominator 2n
    denominator = 2 * n
    for numerators in itertools.product(range(denominator + 1), repeat=n):
        vec = [Fraction(num, denominator) for num in numerators]
        s = sum(vec)
        if s.denominator == 1:  # sum is integer
            current_max = max(abs(x - Fraction(1,2)) for x in vec)
            if current_max > max_f:
                max_f = current_max
                print(f"New max f for n={n}: {float(max_f)} with vector {vec}")
    
    return max_f

# Test for small values of n
for n in range(1, 6):
    print(f"\nTesting n = {n}")
    result = find_max_f(n)
    print(f"Final result for n={n}: {float(result)} ({result})")
```
