[write_program]
This problem involves counting bijective functions (permutations) on a 6-element set (Fin 6) with certain constraints related to graph neighbors. The constraints involve ensuring that for each position k in the permutation, the image at k has at most 2 neighbors among previously mapped elements.

We'll approach this by:
1. Modeling the 6 elements as positions in a 2Ã—3 grid (since neighbors are defined via grid adjacency)
2. Enumerating all permutations of 6 elements (6! = 720 possibilities)
3. Checking the neighbor constraint for each permutation
4. Counting valid permutations

```python
from itertools import permutations

def is_valid(perm):
    # Define neighbors for each position (0-5) in 2x3 grid
    neighbors = {
        0: {1, 3},
        1: {0, 2, 4},
        2: {1, 5},
        3: {0, 4},
        4: {1, 3, 5},
        5: {2, 4}
    }
    
    seen = set()
    for k in range(6):
        current = perm[k]
        # Count neighbors of current in seen
        count = len(neighbors[current] & seen)
        if count > 2:
            return False
        seen.add(current)
    return True

def main():
    count = 0
    for perm in permutations(range(6)):
        if is_valid(perm):
            count += 1
            print(perm)  # Stream valid permutations
    print(f"Total valid permutations: {count}")

if __name__ == "__main__":
    main()
```
