[write_program]
This problem defines a recursive sequence t(n) with rational values and asks for the sum of the numerator and denominator of t(2020). To understand the pattern, we'll write a Python program to compute the first few terms and observe their structure.

The key observations are:
1. The sequence alternates between integer and fractional values
2. The denominators follow a predictable pattern
3. The numerators can be expressed in terms of Fibonacci numbers

```python
def compute_t_sequence(max_n):
    # Initialize first three terms as exact fractions (numerator, denominator)
    terms = [(0, 1), (20, 1), (21, 1)]
    
    for n in range(3, 21):  # Compute up to t(20) to observe pattern
        prev2_num, prev2_den = terms[n-2]
        prev_num, prev_den = terms[n-1]
        curr_num = prev_num * prev_den + prev2_num * prev_den + 1 * prev_den * prev2_den
        curr_den = prev_num * prev2_den
        
        # Simplify fraction
        gcd_val = gcd(curr_num, curr_den)
        simplified_num = curr_num // gcd_val
        simplified_den = curr_den // gcd_val
        
        terms.append((simplified_num, simplified_den))
        print(f"t({n}) = {simplified_num}/{simplified_den}")

if __name__ == "__main__":
    from math import gcd
    compute_t_sequence(20)
```
