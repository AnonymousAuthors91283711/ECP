[write_program]
This problem asks for a natural number n such that the sum of the base-4 digits of (2^n - 1) equals 2023. We'll write a Python program to search for such n by:
1. Computing 2^n - 1 for increasing n
2. Converting to base-4 representation
3. Summing the digits
4. Checking if the sum equals 2023

Since the sum grows roughly linearly with n, we'll search up to n=10000 as a reasonable upper bound.

```python
def sum_base4_digits(m):
    """Return sum of digits of m in base 4"""
    s = 0
    while m > 0:
        s += m % 4
        m = m // 4
    return s

max_n = 10000
target = 2023

for n in range(1, max_n + 1):
    m = (1 << n) - 1  # Compute 2^n - 1
    s = sum_base4_digits(m)
    if s == target:
        print(f"Found n = {n} with sum {s}")
        # No early exit to find all possible n (though theorem suggests unique solution)
```
