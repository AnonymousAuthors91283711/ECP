[write_program]
This problem asks for the minimum value of t = y/x where z = x + iy is a complex number with x,y ≥ 0 and |z² + 2| ≤ |z|. We'll write a Python program to search for this minimum by enumerating possible (x,y) pairs and checking the condition.

The approach:
1. Sample x and y values in a reasonable range with small increments
2. For each (x,y) pair, check if it satisfies the inequality
3. Calculate t = y/x for valid pairs and track the minimum
4. Output valid pairs and finally the minimum t found

```python
import math

def main():
    min_t = float('inf')
    # Sample x and y in [0, 2] with step 0.001
    step = 0.001
    for x in range(1, 2001):  # x from 0.001 to 2.0
        x_val = x * step
        for y in range(0, 2001):  # y from 0.0 to 2.0
            y_val = y * step
            if x_val == 0:  # avoid division by zero
                continue
            # Calculate |z^2 + 2| and |z|
            z_sq_real = x_val**2 - y_val**2 + 2
            z_sq_imag = 2 * x_val * y_val
            abs_z_sq_plus_2 = math.sqrt(z_sq_real**2 + z_sq_imag**2)
            abs_z = math.sqrt(x_val**2 + y_val**2)
            
            if abs_z_sq_plus_2 <= abs_z:
                t = y_val / x_val
                if t < min_t:
                    min_t = t
                    print(f"New minimum t: {t:.6f} at (x,y) = ({x_val:.3f}, {y_val:.3f})")
    
    print(f"\nFinal minimum t found: {min_t:.6f}")

if __name__ == "__main__":
    main()
```
