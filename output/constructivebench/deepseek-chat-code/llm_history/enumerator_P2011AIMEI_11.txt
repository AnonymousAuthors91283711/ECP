[write_program]
The problem asks for the sum of all distinct residues of powers of 2 modulo 1000, taken modulo 1000. We need to find all unique values of 2^n mod 1000 for n ∈ ℕ, sum them, and return the result modulo 1000.

The key observation is that the residues will eventually cycle due to the nature of modular arithmetic. We'll compute powers of 2 modulo 1000 until we detect a cycle, collect all distinct residues, sum them, and return the sum modulo 1000.

```python
def main():
    seen = set()
    current = 1  # 2^0 mod 1000
    sum_residues = 0
    
    # We'll stop when we detect a cycle (repetition of a residue)
    while current not in seen:
        seen.add(current)
        sum_residues += current
        current = (current * 2) % 1000
    
    # The problem asks for the sum modulo 1000
    result = sum_residues % 1000
    print(f"Distinct residues: {sorted(seen)}")
    print(f"Sum of residues: {sum_residues}")
    print(f"Result modulo 1000: {result}")
    
if __name__ == "__main__":
    main()
```
