[write_program]
This problem asks for natural numbers n > 1 where (n² + 7n + 136)/(n-1) is a perfect square. We'll write a Python program to find all such n up to a reasonable threshold.

Approach:
1. For each n from 2 to 1000, compute the expression (n² + 7n + 136)/(n-1)
2. Check if the result is an integer and a perfect square
3. Output all valid n values

```python
import math

def is_perfect_square(num):
    root = math.isqrt(num)
    return root * root == num

max_n = 1000
print(f"Searching for solutions up to n = {max_n}")
print("Valid n values where (n²+7n+136)/(n-1) is perfect square:")

for n in range(2, max_n + 1):
    numerator = n * n + 7 * n + 136
    denominator = n - 1
    if numerator % denominator != 0:
        continue
    value = numerator // denominator
    if is_perfect_square(value):
        print(f"n = {n}, value = {value} = {math.isqrt(value)}²")
```
