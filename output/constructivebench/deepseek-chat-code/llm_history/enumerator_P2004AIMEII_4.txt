[write_program]
The problem asks to count numbers between 1 and 9999 (inclusive) that have at most two distinct digits in their decimal representation. We'll enumerate all such numbers efficiently by considering all possible pairs of digits and lengths from 1 to 4 digits.

```python
def count_numbers_with_at_most_two_distinct_digits():
    count = 0
    for length in range(1, 5):  # Numbers from 1 to 4 digits
        for d1 in range(10):    # First digit (1-9 for first position)
            for d2 in range(10):  # Second digit (can be same as d1)
                if length == 1:
                    # Single digit numbers (1-9)
                    if d1 != 0:
                        count += 1
                else:
                    # Generate all combinations with these two digits
                    # First digit can't be zero
                    if d1 == 0:
                        continue
                    # All positions must be either d1 or d2
                    # We'll count all valid combinations
                    # Total possibilities: 2^length minus invalid cases
                    # But need to ensure at least one d1 (first digit) and any number of d2s
                    if d1 == d2:
                        count += 1  # Only one possibility: all digits same
                    else:
                        # For each position after first, can choose d1 or d2
                        # First digit is fixed as d1
                        count += 2 ** (length - 1)
    print(f"Total count: {count}")

count_numbers_with_at_most_two_distinct_digits()
```
