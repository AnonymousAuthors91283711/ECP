[write_program]
This problem is from IMO 2012 Shortlist N7, asking for which natural numbers n there exist sequences (a_i) such that two summation conditions hold. We'll write a Python program to enumerate possible n values and verify the conditions for small sequences.

The approach:
1. For small n (up to 10), generate all possible sequences of exponents a_i
2. For each sequence, check both summation conditions
3. Print n when at least one valid sequence is found

```python
from fractions import Fraction
from itertools import product

def check_conditions(n, a_seq):
    sum1 = Fraction(0, 1)
    sum2 = Fraction(0, 1)
    for i in range(n):
        a = a_seq[i]
        sum1 += Fraction(1, 2**a)
        sum2 += Fraction(i+1, 3**a)
    return sum1 == 1 and sum2 == 1

max_n = 10
max_a = 10  # Maximum exponent to try

found = set()

for n in range(1, max_n + 1):
    # Try all possible exponent sequences of length n with exponents up to max_a
    for exponents in product(range(1, max_a + 1), repeat=n):
        if check_conditions(n, exponents):
            found.add(n)
            print(f"Found valid sequence for n = {n}: {exponents}")
            break  # Only need one valid sequence per n

print("\nFound n values:", sorted(found))
```
