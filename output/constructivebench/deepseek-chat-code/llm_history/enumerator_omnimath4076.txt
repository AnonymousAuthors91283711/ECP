[write_program]
This problem involves finding the minimal constant M such that the given inequality holds for all real numbers a, b, c. We'll approach this by:

1. Testing symmetric cases (a=b=c, two equal variables, etc.)
2. Testing extreme cases (one variable approaches 0)
3. Using numerical optimization to find candidate values

The program will test various rational candidates for M and check the inequality for sampled values of a, b, c.

```python
import itertools
import math

def test_inequality(M, a, b, c):
    numerator = abs(a*b*(a**2 - b**2) + b*c*(b**2 - c**2) + c*a*(c**2 - a**2))
    denominator = (a**2 + b**2 + c**2)**2
    return numerator <= M * denominator + 1e-10  # small tolerance for floating point

def test_candidate(M):
    # Test symmetric cases
    cases = [
        (1, 1, 1),        # all equal
        (1, 1, 0),         # two equal, one zero
        (1, -1, 0),        # two opposite, one zero
        (1, 0, 0),         # one non-zero
        (1, 1, 0.5),       # general case
        (1, 2, 3),         # distinct values
        (1, 1, 1.0001),    # near equality
        (1, 1, -1),        # two equal, one opposite
    ]
    
    for a, b, c in cases:
        if not test_inequality(M, a, b, c):
            return False
    return True

def find_min_M():
    # Test rational candidates in [0.1, 0.5] range with step 0.01
    candidates = [x/100 for x in range(10, 51)]
    
    for M in candidates:
        if test_candidate(M):
            print(f"Found candidate M = {M:.4f}")
            # Verify if smaller M fails
            smaller = M - 0.001
            if not test_candidate(smaller):
                print(f"Minimal M found: {M:.4f}")
                return M
    
    print("No suitable M found in tested range")
    return None

if __name__ == "__main__":
    find_min_M()
```
