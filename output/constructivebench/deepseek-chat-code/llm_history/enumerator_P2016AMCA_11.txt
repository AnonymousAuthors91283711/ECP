[write_program]
This problem is about finding the maximum number of students who are in exactly two of three groups (singers, dancers, actors) given certain constraints. We'll translate this into Python by enumerating possible values for the intersections and checking the constraints.

The key steps are:
1. Calculate the sizes of each group from their complements
2. Use inclusion-exclusion to find possible intersection sizes
3. Find the maximum possible size of the union of pairwise intersections

```python
def main():
    total = 100
    non_singers = 42
    non_dancers = 65
    non_actors = 29
    
    singers = total - non_singers
    dancers = total - non_dancers
    actors = total - non_actors
    
    max_two = 0
    
    # We'll iterate through possible values for the triple intersection (which must be 0)
    # and find valid pairwise intersections that satisfy all constraints
    for ab in range(0, min(singers, dancers) + 1):
        for ac in range(0, min(singers, actors) + 1):
            for bc in range(0, min(dancers, actors) + 1):
                # Check if the sum of all pairwise intersections is <= total
                if ab + ac + bc > total:
                    continue
                
                # Check if the inclusion-exclusion formula holds
                a = singers
                b = dancers
                c = actors
                abc = 0  # from h_no_all
                total_covered = a + b + c - (ab + ac + bc) + abc
                if total_covered <= total:
                    current_two = ab + ac + bc
                    if current_two > max_two:
                        max_two = current_two
                        print(f"New maximum found: {max_two}")
    
    print(f"Final maximum: {max_two}")

if __name__ == "__main__":
    main()
```
