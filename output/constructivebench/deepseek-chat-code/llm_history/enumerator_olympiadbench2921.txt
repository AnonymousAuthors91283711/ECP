[write_program]
This problem involves finding numbers where the first 4 digits (most significant) in base 2 and base 5 representations match, then summing all such numbers up to 10000 and returning the sum modulo 10000. We'll write a Python program to enumerate these numbers and compute the required sum.

The approach:
1. Convert each number to base 2 and base 5
2. Check if both have at least 4 digits
3. Compare the first 4 digits of each representation
4. Sum all matching numbers
5. Output the sum modulo 10000

```python
def digits(n, base):
    """Return digits of n in given base (most significant first)"""
    if n == 0:
        return [0]
    d = []
    while n > 0:
        d.append(n % base)
        n = n // base
    return d[::-1]  # reverse to get MSB first

def main():
    total = 0
    for n in range(10000):
        base2 = digits(n, 2)
        base5 = digits(n, 5)
        if len(base2) >= 4 and len(base5) >= 4:
            if base2[:4] == base5[:4]:
                print(f"Found match: {n}")  # stream partial results
                total += n
    print(f"Final sum modulo 10000: {total % 10000}")

if __name__ == "__main__":
    main()
```
