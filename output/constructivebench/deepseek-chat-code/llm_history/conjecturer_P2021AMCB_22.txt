[conjecture_answer] Formal Problem Statement: import Mathlib

open List

abbrev P2021AMCB_22_answer : List ℕ → Prop := sorry
def beth_wins : List ℕ → Prop := by sorry
theorem P2021AMCB_22 (walls : List ℕ) :
  walls ∈ [[6, 1, 1], [6, 2, 1], [6, 2, 2], [6, 3, 1], [6, 3, 2]] → 
  beth_wins walls ↔ P2021AMCB_22_answer walls := by sorry. Enumerated answers: Found valid configuration: (2, 1, 1)
Found valid configuration: (2, 2, 2)
Found valid configuration: (3, 2, 1)
Found valid configuration: (3, 3, 2)
Found valid configuration: (4, 1, 1)
Found valid configuration: (4, 2, 2)
Found valid configuration: (4, 3, 1)
Found valid configuration: (4, 3, 3)
Found valid configuration: (4, 4, 2)
Found valid configuration: (4, 4, 4)
Found valid configuration: (5, 2, 1)
Found valid configuration: (5, 3, 2)
Found valid configuration: (5, 4, 1)
Found valid configuration: (5, 4, 3)
Found valid configuration: (5, 5, 2)
Found valid configuration: (5, 5, 4)
Found valid configuration: (6, 1, 1)
Found valid configuration: (6, 2, 2)
Found valid configuration: (6, 3, 1)
Found valid configuration: (6, 3, 3)
Found valid configuration: (6, 4, 2)
Found valid configuration: (6, 4, 4)
Found valid configuration: (6, 5, 1)
Found valid configuration: (6, 5, 3)
Found valid configuration: (6, 5, 5)
Found valid configuration: (6, 6, 2)
Found valid configuration: (6, 6, 4)
Found valid configuration: (6, 6, 6)

All valid configurations:
(2, 1, 1)
(2, 2, 2)
(3, 2, 1)
(3, 3, 2)
(4, 1, 1)
(4, 2, 2)
(4, 3, 1)
(4, 3, 3)
(4, 4, 2)
(4, 4, 4)
(5, 2, 1)
(5, 3, 2)
(5, 4, 1)
(5, 4, 3)
(5, 5, 2)
(5, 5, 4)
(6, 1, 1)
(6, 2, 2)
(6, 3, 1)
(6, 3, 3)
(6, 4, 2)
(6, 4, 4)
(6, 5, 1)
(6, 5, 3)
(6, 5, 5)
(6, 6, 2)
(6, 6, 4)
(6, 6, 6). Expected Answer Type: List ℕ → Prop
Looking at the enumerated answers, the pattern appears to be that Beth wins when the third wall height is either:
1. Equal to 1 when the first wall is even
2. Equal to the second wall when first and second walls are equal
3. One less than the second wall when first wall is odd

The general condition seems to be that the third wall height matches certain parity conditions relative to the first two walls.

<<<fun walls : List ℕ => match walls with
  | [a, b, c] => (a % 2 = 0 ∧ c = 1) ∨ (b = c ∧ a = b) ∨ (a % 2 = 1 ∧ c = b - 1)
  | _ => False
>>>