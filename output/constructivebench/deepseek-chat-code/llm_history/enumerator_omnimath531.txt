[write_program]
This problem appears to be calculating a probability involving selecting prize doors from a set of doors. The exact scenario isn't fully specified, but we can infer it's about the probability of selecting certain prize doors under given conditions.

We'll write a Python program to:
1. Calculate the total cases (7 * C(5,2))
2. Calculate the favorable cases (5 * C(4,2))
3. Compute the probability as favorable/total
4. Simplify the fraction to its lowest terms

The program will output the exact fractional probability.

```python
from math import comb

def main():
    doors = 7
    prize_doors = 2
    
    # Calculate total cases: 7 * C(5,2)
    total_cases = doors * comb(doors - prize_doors, prize_doors)
    
    # Calculate favorable cases: 5 * C(4,2)
    favorable_cases = (doors - prize_doors) * comb(doors - prize_doors - 1, prize_doors)
    
    # Compute probability fraction
    numerator = favorable_cases
    denominator = total_cases
    
    # Simplify the fraction
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    common_divisor = gcd(numerator, denominator)
    simplified_num = numerator // common_divisor
    simplified_den = denominator // common_divisor
    
    print(f"Probability: {simplified_num}/{simplified_den}")

if __name__ == "__main__":
    main()
```
