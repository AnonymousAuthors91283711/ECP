[write_program]
This problem involves calculating the average number of distinct values in a random function from Fin n to [1..n]. We'll write a Python program to compute this for small values of n to identify the pattern.

The key observations:
1. For each position in the codomain [1..n], calculate the probability it's included in the image
2. By linearity of expectation, the expected number of distinct values is n*(1 - (1-1/n)^n)
3. We'll compute this for small n and compare with exact enumeration

```python
import math
from fractions import Fraction

def expected_distinct(n):
    """Calculate expected number of distinct values in random function [n]â†’[n]"""
    if n == 0:
        return 0
    # Using exact rational arithmetic to avoid floating point errors
    prob_not_hit = Fraction(n-1, n) ** n
    prob_hit = 1 - prob_not_hit
    return n * prob_hit

def main():
    max_n = 10  # Keep computations manageable for small n
    print("n | Expected distinct values (exact) | Expected (float)")
    print("-----------------------------------------------")
    for n in range(1, max_n + 1):
        exact = expected_distinct(n)
        float_val = float(exact)
        print(f"{n} | {exact} | {float_val:.6f}")

if __name__ == "__main__":
    main()
```
