[write_program]
This problem involves finding the smallest positive integer N such that there exists a function p satisfying certain divisibility conditions and a polynomial divisibility condition. The key is to find N where the polynomial X^2 + X + 1 divides 166 - sum of X^d for divisors d of N.

We'll approach this by:
1. Enumerating N from 1 upwards
2. For each N, generate its divisors
3. Check if X^2 + X + 1 divides 166 - sum(X^d for d in divisors(N))
4. Stop when we find the smallest such N

The polynomial divisibility can be checked by evaluating at roots of X^2 + X + 1 (primitive cube roots of unity).

```python
import math
from sympy import divisors, Symbol, E, I, pi, exp, re, im

def is_root_of_unity(k):
    # Check if X^2 + X + 1 divides the polynomial by evaluating at primitive cube roots
    X = Symbol('X')
    omega = exp(2*pi*I/3)  # Primitive cube root of unity
    poly = 166 - sum(X**d for d in divisors(k))
    val = poly.subs(X, omega)
    return abs(re(val)) < 1e-9 and abs(im(val)) < 1e-9

def find_min_N():
    N = 1
    while True:
        divs = divisors(N)
        if is_root_of_unity(N):
            print(f"Found candidate N = {N}")
            # Verify the conditions
            # p(d) = 1 if d divides N, else 0
            # The polynomial condition is already checked
            # Since we're looking for minimal N, we can return immediately
            print(f"Minimal N found: {N}")
            return
        N += 1
        if N > 1000:  # Safety limit
            print("Search limit reached without finding N")
            return

find_min_N()
```
