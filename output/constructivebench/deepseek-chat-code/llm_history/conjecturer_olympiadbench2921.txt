[conjecture_answer] Formal Problem Statement: import Mathlib

open Nat

abbrev olympiadbench2921_answer : ℕ := sorry
def digitsMatch (n : ℕ) : Prop := 
  let base2 := n.digits 2
  let base5 := n.digits 5
  base2.length ≥ 4 ∧ base5.length ≥ 4 ∧ 
  base2.take 4 = base5.take 4

instance : DecidablePred digitsMatch := fun n => by
  unfold digitsMatch
  infer_instance

theorem olympiadbench2921 :
  (∑ n in Finset.filter digitsMatch (Finset.range 10000), n) % 10000 = olympiadbench2921_answer := by sorry. Enumerated answers: Found match: 630
Found match: 631
Found match: 632
Found match: 633
Found match: 634
Found match: 650
Found match: 651
Found match: 652
Found match: 653
Found match: 654
Found match: 3900
Found match: 3901
Found match: 3902
Found match: 3903
Found match: 3904
Found match: 3905
Found match: 3906
Found match: 3907
Found match: 3908
Found match: 3909
Found match: 3910
Found match: 3911
Found match: 3912
Found match: 3913
Found match: 3914
Found match: 3915
Found match: 3916
Found match: 3917
Found match: 3918
Found match: 3919
Found match: 3920
Found match: 3921
Found match: 3922
Found match: 3923
Found match: 3924
Final sum modulo 10000: 4220. Expected Answer Type: ℕ
<<<4220>>>