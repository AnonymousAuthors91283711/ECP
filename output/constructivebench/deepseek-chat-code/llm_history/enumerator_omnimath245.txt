[write_program]
This problem involves finding all integer-valued functions f: ℤ → ℤ that satisfy a specific functional equation. We'll write a Python program to enumerate possible polynomial solutions of low degree (since polynomial solutions are often good candidates for functional equations).

The approach will be:
1. Test constant functions
2. Test linear functions
3. Test quadratic functions
4. For each candidate, verify if it satisfies the functional equation for small integer values

```python
def verify(f, x, y):
    if x == 0:
        return True  # equation doesn't apply when x=0
    lhs = x * f(2 * f(y) - x) + y * y * f(2 * x - f(y))
    try:
        rhs = (f(x) ** 2) // x + f(y * f(y))
    except ZeroDivisionError:
        return False
    return lhs == rhs

def test_function(f, max_test=5):
    """Test if f satisfies the equation for x,y in [-max_test, max_test]"""
    for x in range(-max_test, max_test + 1):
        for y in range(-max_test, max_test + 1):
            if x != 0 and not verify(f, x, y):
                return False
    return True

# Test constant functions f(n) = c
print("Testing constant functions:")
for c in range(-5, 6):
    f = lambda n, c=c: c
    if test_function(f):
        print(f"Found constant solution: f(n) = {c}")

# Test linear functions f(n) = a*n + b
print("\nTesting linear functions:")
for a in range(-3, 4):
    for b in range(-3, 4):
        f = lambda n, a=a, b=b: a * n + b
        if test_function(f):
            print(f"Found linear solution: f(n) = {a}n + {b}")

# Test quadratic functions f(n) = a*n^2 + b*n + c
print("\nTesting quadratic functions:")
for a in range(-2, 3):
    for b in range(-2, 3):
        for c in range(-2, 3):
            f = lambda n, a=a, b=b, c=c: a * n * n + b * n + c
            if test_function(f):
                print(f"Found quadratic solution: f(n) = {a}n^2 + {b}n + {c}")

print("\nFinished testing polynomial solutions up to quadratic degree.")
```
