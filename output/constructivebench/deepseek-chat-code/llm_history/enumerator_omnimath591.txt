[write_program]
This problem asks for the number of positive divisors d of 15! that satisfy gcd(d,60)=5. We'll write a Python program to:
1. Compute 15! (factorial of 15)
2. Generate all divisors of 15!
3. Count those divisors where gcd(d,60)=5

The program will efficiently generate divisors by factorizing 15! first, then generating all combinations of exponents.

```python
import math
from math import gcd
from collections import defaultdict
from functools import reduce

def factorize(n):
    factors = defaultdict(int)
    while n % 2 == 0:
        factors[2] += 1
        n = n // 2
    i = 3
    while i*i <= n:
        while n % i == 0:
            factors[i] += 1
            n = n // i
        i += 2
    if n > 2:
        factors[n] += 1
    return factors

def generate_divisors(factors):
    divisors = [1]
    for p, exp in factors.items():
        temp = []
        for d in divisors:
            for e in range(exp + 1):
                temp.append(d * (p ** e))
        divisors = list(set(temp))
    return divisors

# Compute 15! and its factorization
fact_15 = math.factorial(15)
factors = factorize(fact_15)

# Generate all divisors of 15!
divisors = generate_divisors(factors)
divisors = [d for d in divisors if d > 0]

# Count divisors where gcd(d,60)=5
count = 0
for d in divisors:
    if gcd(d, 60) == 5:
        count += 1

print(f"Number of divisors: {count}")
```
