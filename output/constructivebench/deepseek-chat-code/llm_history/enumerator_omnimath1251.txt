[write_program]
The problem asks for the number of 8x8 Latin squares (permutation matrices) where exactly half of the entries lie on even-sum diagonals and half on odd-sum diagonals. We'll enumerate all 8x8 permutation matrices and count those satisfying the parity condition.

```python
from itertools import permutations

def solve():
    n = 8
    count = 0
    
    # Iterate through all permutations (Latin squares)
    for perm in permutations(range(n)):
        even = 0
        # Check diagonal parity for each position
        for i in range(n):
            if (i + perm[i]) % 2 == 0:
                even += 1
        if even == 4:  # Exactly half even, half odd
            count += 1
            print(f"Found solution #{count}")  # Stream partial results
    
    print(f"Total solutions: {count}")

solve()
```

This program:
1. Generates all permutations of 8 elements (8! = 40320 possibilities)
2. For each permutation, checks the parity condition (i + Ïƒ(i)) % 2
3. Counts and prints solutions where exactly 4 positions have even sum
4. Finally prints the total count

The program efficiently checks the condition by:
- Using itertools.permutations for permutation generation
- Only tracking the count of even-sum positions
- Printing intermediate results while counting

Note: For n=8, this might take a while to run (8! permutations), but it's the most straightforward enumeration approach. The output will show the exact count of qualifying Latin squares.
