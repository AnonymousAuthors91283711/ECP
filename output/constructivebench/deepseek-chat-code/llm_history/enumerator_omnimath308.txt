[write_program]
This problem asks for the largest subset of integers from -n to n (inclusive) where no three elements sum to zero. We'll write a Python program to enumerate possible subset sizes for small values of n to help identify the pattern.

The approach:
1. For each n from 1 to some reasonable limit (we'll use 10)
2. Generate all possible subsets of the range [-n, n]
3. For each subset, check if any three elements sum to zero
4. Track the maximum size of subsets that satisfy the condition

```python
from itertools import combinations

def max_no_zero_triple_sum(n):
    numbers = list(range(-n, n+1))
    max_size = 0
    # We'll check subsets in decreasing order of size to find max faster
    for size in range(2*n+1, 0, -1):
        found = False
        for subset in combinations(numbers, size):
            has_triple = any(a + b + c == 0 
                           for a, b, c in combinations(subset, 3))
            if not has_triple:
                print(f"For n={n}, found valid subset of size {size}")
                return size
        # Early exit if no subset of current size works
        if found:
            break
    return max_size

for n in range(1, 11):
    result = max_no_zero_triple_sum(n)
    print(f"n={n}, maximum subset size: {result}")
```
