[write_program]
This problem asks for the maximum number of points that can be placed on an 8×8 grid such that no line of slope 1 or -1 contains more than 3 points. We'll approach this by enumerating possible configurations for smaller grid sizes first to identify a pattern, then verify for the 8×8 case.

The program will:
1. Define helper functions to check the line constraints
2. Enumerate possible point sets for smaller grids (up to 5×5)
3. For the 8×8 case, implement a backtracking search with pruning to find the maximum

```python
def is_valid(grid, size, new_row, new_col):
    # Check all diagonals through (new_row, new_col)
    # Check diagonal with slope +1 (x-y = constant)
    diag1 = new_row - new_col
    count = 0
    for r in range(size):
        c = r - diag1
        if 0 <= c < size and grid[r][c]:
            count += 1
            if count >= 3:
                return False
    
    # Check diagonal with slope -1 (x+y = constant)
    diag2 = new_row + new_col
    count = 0
    for r in range(size):
        c = diag2 - r
        if 0 <= c < size and grid[r][c]:
            count += 1
            if count >= 3:
                return False
    return True

def backtrack(grid, size, row, col, count, max_count):
    if row == size:
        return max(max_count, count)
    
    next_row, next_col = (row, col + 1) if col + 1 < size else (row + 1, 0)
    
    # Option 1: Don't place a point here
    max_count = backtrack(grid, size, next_row, next_col, count, max_count)
    
    # Option 2: Place a point here if valid
    if is_valid(grid, size, row, col):
        grid[row][col] = True
        max_count = backtrack(grid, size, next_row, next_col, count + 1, max_count)
        grid[row][col] = False
    
    return max_count

def find_max_points(size):
    grid = [[False for _ in range(size)] for _ in range(size)]
    max_points = backtrack(grid, size, 0, 0, 0, 0)
    print(f"Grid size {size}x{size}: max points = {max_points}")

# Test smaller grids first to see the pattern
for n in range(1, 6):
    find_max_points(n)

# Now compute for 8x8 grid
find_max_points(8)
```
