[write_program]
We'll solve this problem by enumerating possible polynomial solutions P that satisfy the given conditions, then find the maximum number of distinct integer roots for (P∘P)(x) - x² = 0.

The approach:
1. Find all quadratic polynomials P that satisfy the three given points
2. For each valid P, find all integer roots of (P∘P)(x) - x² = 0
3. Track the maximum number of distinct roots found

```python
def find_polynomials():
    # Find all quadratic polynomials P(x) = ax² + bx + c satisfying:
    # P(-1) = -4, P(-3) = -40, P(-5) = -156
    # We solve the system:
    # a(-1)² + b(-1) + c = -4 => a - b + c = -4
    # a(-3)² + b(-3) + c = -40 => 9a - 3b + c = -40
    # a(-5)² + b(-5) + c = -156 => 25a - 5b + c = -156
    
    # Subtract first equation from second: 8a - 2b = -36 => 4a - b = -18
    # Subtract second from third: 16a - 2b = -116 => 8a - b = -58
    # Subtract these two: 4a = -40 => a = -10
    # Then b = 4a + 18 = -40 + 18 = -22
    # Then c = -4 - a + b = -4 + 10 - 22 = -16
    
    # Only one solution: P(x) = -10x² - 22x - 16
    return [(-10, -22, -16)]

def find_roots(P):
    a, b, c = P
    roots = set()
    # We need to solve P(P(x)) - x² = 0
    # P(P(x)) = a*(a*x² + b*x + c)² + b*(a*x² + b*x + c) + c
    # Expanded form would be degree 4, but we'll compute it numerically
    # Check integers from -100 to 100
    for x in range(-100, 101):
        px = a*x*x + b*x + c
        ppx = a*px*px + b*px + c
        if ppx == x*x:
            roots.add(x)
    return roots

def main():
    polynomials = find_polynomials()
    max_distinct_roots = 0
    for P in polynomials:
        roots = find_roots(P)
        print(f"For P(x) = {P[0]}x² + {P[1]}x + {P[2]}, found roots: {sorted(roots)}")
        if len(roots) > max_distinct_roots:
            max_distinct_roots = len(roots)
    print(f"Maximum number of distinct integer roots: {max_distinct_roots}")

if __name__ == "__main__":
    main()
```
