[write_program]
This problem involves calculating a recursive probability function p(n) where:
- p(0) = p(1) = 1
- For n ≥ 1, p(n+1) = stayProb(n+1)*p(n) + switchProb(n+1)*(1-p(n))
- stayProb(t) = 1 - 1/(2t²)
- switchProb(t) = 1/(2t²)

We need to compute p(15) exactly as a rational number. The solution involves implementing this recursive calculation exactly using rational arithmetic.

```python
from fractions import Fraction

def switch_prob(t):
    return Fraction(1, 2 * t * t)

def stay_prob(t):
    return 1 - switch_prob(t)

def compute_p(n):
    if n == 0 or n == 1:
        return Fraction(1, 1)
    
    # Initialize memoization for p(0) and p(1)
    memo = [Fraction(1, 1), Fraction(1, 1)]
    
    for k in range(2, n + 1):
        p_k = stay_prob(k) * memo[k-1] + switch_prob(k) * (1 - memo[k-1])
        memo.append(p_k)
        # Print intermediate values for verification
        if k <= 15:
            print(f"p({k}) = {p_k}")
    
    return memo[n]

# Compute and print p(15)
result = compute_p(15)
print("\nFinal result:")
print(f"p(15) = {result}")
```
