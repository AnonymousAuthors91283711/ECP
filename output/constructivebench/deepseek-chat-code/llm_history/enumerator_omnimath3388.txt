[write_program]
This problem involves solving a system of three linear equations with three variables (p, q, r) in rational numbers. We'll write a Python program to solve the system exactly using rational arithmetic (via fractions.Fraction) and output the solution.

The system is:
1. p + 3q + r = 3
2. p + 2q + 3r = 3
3. p + q + r = 2

We'll solve it using Gaussian elimination with exact arithmetic to avoid floating-point inaccuracies.

```python
from fractions import Fraction

def solve_system():
    # System of equations:
    # 1p + 3q + 1r = 3
    # 1p + 2q + 3r = 3
    # 1p + 1q + 1r = 2
    
    # Create augmented matrix with Fraction objects for exact arithmetic
    matrix = [
        [Fraction(1), Fraction(3), Fraction(1), Fraction(3)],
        [Fraction(1), Fraction(2), Fraction(3), Fraction(3)],
        [Fraction(1), Fraction(1), Fraction(1), Fraction(2)]
    ]
    
    # Gaussian elimination
    n = len(matrix)
    for col in range(n):
        # Partial pivot
        max_row = max(range(col, n), key=lambda r: abs(matrix[r][col]))
        matrix[col], matrix[max_row] = matrix[max_row], matrix[col]
        
        # Eliminate column below
        for row in range(col + 1, n):
            factor = matrix[row][col] / matrix[col][col]
            for c in range(col, n + 1):
                matrix[row][c] -= factor * matrix[col][c]
    
    # Back substitution
    solution = [Fraction(0)] * n
    for row in reversed(range(n)):
        solution[row] = matrix[row][n]
        for col in range(row + 1, n):
            solution[row] -= matrix[row][col] * solution[col]
        solution[row] /= matrix[row][row]
    
    p, q, r = solution
    print(f"p = {p}, q = {q}, r = {r}")

solve_system()
```
