[write_program]
This problem involves calculating the probability that the sum of three dice rolls is less than a uniformly random integer between 1 and 20. We'll write a Python program to compute this probability exactly as a fraction.

The approach:
1. First compute all possible sums of three 6-sided dice (which range from 3 to 18)
2. For each possible sum s, count how many integers x in 1..20 satisfy x > s
3. Multiply each count by the number of dice combinations that sum to s
4. Sum all these values and divide by the total number of possible outcomes (20 * 6^3)

```python
from fractions import Fraction
from collections import defaultdict

def main():
    # Count frequency of each sum when rolling 3d6
    sum_counts = defaultdict(int)
    for d1 in range(1, 7):
        for d2 in range(1, 7):
            for d3 in range(1, 7):
                s = d1 + d2 + d3
                sum_counts[s] += 1
    
    total = 0
    max_x = 20
    total_outcomes = max_x * 6**3
    
    # For each possible sum s, count x > s where x âˆˆ 1..20
    for s in sorted(sum_counts):
        count_x = max(0, max_x - s)
        total += count_x * sum_counts[s]
    
    probability = Fraction(total, total_outcomes)
    print(f"Exact probability: {probability}")

if __name__ == "__main__":
    main()
```
