[write_program]
This problem asks for the 20th smallest number `n` (indexed from 0) where `2^n - 1` is prime and `n > 1`. These are exponents of Mersenne primes. We'll write a Python program to find these numbers efficiently.

The program will:
1. Check numbers `n` from 2 upwards
2. Test if `2^n - 1` is prime using the Lucas-Lehmer test for efficiency
3. Collect the first 20 such numbers
4. Print them as they're found and finally output the 20th one

```python
def is_prime(n):
    """Miller-Rabin primality test for small n < 2^64"""
    if n < 2: return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:
        if n % p == 0: return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n: continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1: continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1: break
        else: return False
    return True

def lucas_lehmer(p):
    """Lucas-Lehmer test for Mersenne primes 2^p-1"""
    if p == 2: return True
    s = 4
    m = (1 << p) - 1
    for _ in range(p - 2):
        s = (s * s - 2) % m
    return s == 0

def find_mersenne_exponents():
    count = 0
    n = 2
    results = []
    while count < 20:
        if lucas_lehmer(n):
            results.append(n)
            print(f"Found {count+1}th exponent: {n}")
            count += 1
        n += 1
    print(f"The 20th exponent is: {results[-1]}")

find_mersenne_exponents()
```
