[write_program]
The problem asks to count the number of positive integers n where the expression (2*log₁₀n - (log₁₀n)²)/(log₁₀n - 3) is non-negative and log₁₀n ≠ 3. We need to find all n that satisfy these conditions.

Approach:
1. Let x = log₁₀n, so n = 10^x
2. The inequality becomes (2x - x²)/(x - 3) ≥ 0 with x ≠ 3
3. Solve the inequality to find valid x ranges
4. Convert x ranges back to integer n values
5. Count all integer n in these ranges

The program will:
1. Find all x where the inequality holds
2. Convert to n ranges (10^lower ≤ n ≤ 10^upper)
3. Count integers in these ranges

```python
import math

def count_solutions():
    # Find roots of numerator and denominator
    # (2x - x²) = 0 → x(2 - x) = 0 → x=0 or x=2
    # (x - 3) = 0 → x=3 (excluded)
    
    # Test intervals:
    # x < 0: test x=-1 → (2*(-1)-1)/(-1-3) = (-3)/(-4) = 0.75 ≥0
    # 0 < x < 2: test x=1 → (2-1)/(1-3) = 1/-2 = -0.5 <0
    # 2 < x < 3: test x=2.5 → (5-6.25)/(-0.5) = (-1.25)/(-0.5) = 2.5 ≥0
    # x > 3: test x=4 → (8-16)/1 = -8 <0
    
    # Valid x ranges: x ≤ 0 or 2 ≤ x < 3
    
    # Convert to n ranges:
    # x ≤ 0 → n = 10^x ≤ 1, but n >0 → n=1
    # 2 ≤ x < 3 → 100 ≤ n < 1000
    
    count = 0
    
    # Check n=1
    x = math.log10(1)
    if (2*x - x**2)/(x - 3) >= 0 and x != 3:
        count += 1
        print(1)
    
    # Check n from 100 to 999
    for n in range(100, 1000):
        x = math.log10(n)
        if (2*x - x**2)/(x - 3) >= 0 and x != 3:
            count += 1
            print(n)
    
    print(f"Total count: {count}")

count_solutions()
```
