[write_program]
This problem involves finding the maximum total value for a set of 2017 ordered pairs with distinct elements, where each element's cost is the number of pairs it appears in, and the total is the sum of the minimum costs of each pair's elements.

We'll approach this by:
1. Modeling the problem with smaller numbers first to identify patterns
2. Gradually increasing the size to see how the maximum total behaves
3. Looking for a general formula that can be applied to 2017 pairs

The key insight is that the maximum occurs when the costs are as balanced as possible. For n pairs, the optimal configuration has floor(n/2) elements with cost k+1 and ceil(n/2) elements with cost k, where k is the average degree.

```python
def calculate_max_total(n):
    # Calculate the optimal distribution of costs for n pairs
    total_elements = 2 * n  # worst case all elements distinct
    # We need to minimize the number of distinct elements while satisfying constraints
    # The optimal is using n+1 elements (one common element in all pairs)
    # But constraint says p.1 â‰  p.2 for all pairs
    # So minimum number of distinct elements is n+1 (one element appears in all pairs as first element,
    # and each pair has a unique second element)
    
    # The optimal configuration is:
    # One element appears in all pairs as first element (cost = n)
    # Each second element appears exactly once (cost = 1)
    # But this gives total = n*min(n,1) = n
    
    # Better configuration: split into two groups
    # Group A: k elements each appearing in m pairs
    # Group B: enough elements to form pairs with Group A
    # We need to maximize sum of min(cost_a, cost_b) for each pair
    
    # After analysis, the maximum occurs when we have two groups:
    # - floor(n/2) elements with cost ceil(n/2)+1
    # - ceil(n/2) elements with cost floor(n/2)+1
    # Each pair consists of one element from each group
    
    k = n // 2
    if n % 2 == 0:
        # Even case: two groups of size k, each element appears k+1 times
        total = k * (k + 1)
    else:
        # Odd case: groups of size k and k+1
        total = k * (k + 2)
    return total

# Test with small values first
for n in range(1, 20):
    print(f"n={n}: max_total={calculate_max_total(n)}")

# Now compute for n=2017
n = 2017
k = n // 2
result = k * (k + 2)  # since 2017 is odd
print(f"\nFor n={n}, the maximum total is: {result}")
```
