[write_program]
This problem involves finding complex roots of the polynomial equation x^n - x^(n-2) - x + 2 = 0 with |x| = 1 for n ≥ 2. We'll write a Python program to enumerate possible roots for small values of n.

The approach will:
1. Iterate through small integer values of n (2 to 10)
2. For each n, check candidate roots on the unit circle (represented as e^(iθ) for various θ)
3. Verify both the polynomial equation and the magnitude condition
4. Output exact solutions when possible (like x=1 or x=-1), otherwise numerical approximations

```python
import cmath
import math

def check_root(n, x, tol=1e-8):
    """Check if x satisfies both the polynomial equation and |x|=1"""
    poly_val = x**n - x**(n-2) - x + 2
    return (abs(poly_val) < tol) and (abs(abs(x) - 1) < tol)

def find_roots(n_max=10):
    """Find roots for n from 2 to n_max"""
    for n in range(2, n_max+1):
        print(f"\nChecking n = {n}:")
        # Check obvious candidates first
        for x in [1, -1, 1j, -1j]:
            if check_root(n, x):
                print(f"Exact root found: {x}")
        
        # Check other points on unit circle
        for k in range(1, 32):  # 32 points gives reasonable resolution
            theta = 2 * math.pi * k / 32
            x = cmath.exp(1j * theta)
            if check_root(n, x):
                print(f"Approximate root: {x:.4f} (θ = {theta:.4f})")

if __name__ == "__main__":
    find_roots()
```
