[write_program]
This problem involves counting the number of distinct reachable states from a starting configuration ['H', 'H', 'M', 'M', 'M', 'M', 'T', 'T'] using valid moves that swap adjacent HM, MT, or TH pairs. We'll write a Python program to enumerate all reachable states through breadth-first search.

```python
from collections import deque

def enumerate_reachable_states():
    start = tuple(['H', 'H', 'M', 'M', 'M', 'M', 'T', 'T'])
    visited = set()
    queue = deque([start])
    visited.add(start)
    
    while queue:
        current = queue.popleft()
        print(''.join(current))  # Output each reachable state
        
        # Generate all possible next states
        for i in range(len(current)-1):
            a, b = current[i], current[i+1]
            if (a == 'H' and b == 'M') or (a == 'M' and b == 'T') or (a == 'T' and b == 'H'):
                new_state = list(current)
                new_state[i], new_state[i+1] = new_state[i+1], new_state[i]
                new_state = tuple(new_state)
                if new_state not in visited:
                    visited.add(new_state)
                    queue.append(new_state)
    
    print(f"Total reachable states: {len(visited)}")

enumerate_reachable_states()
```
