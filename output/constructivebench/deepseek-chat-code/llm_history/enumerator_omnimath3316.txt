[write_program]
This problem asks to find the non-negative real number x such that √(x + √(2008x)) - √x = 1. We'll write a Python program to numerically approximate the solution by testing values of x in a reasonable range.

The approach:
1. Define the equation as a function
2. Use binary search to find x where the equation holds
3. Print intermediate results during the search
4. Output the final approximation

```python
import math

def equation(x):
    if x < 0:
        return float('inf')
    try:
        return math.sqrt(x + math.sqrt(2008 * x)) - math.sqrt(x) - 1
    except ValueError:
        return float('inf')

def find_solution():
    # Initial search bounds
    low = 0.0
    high = 100000.0  # Large enough upper bound
    
    # Binary search parameters
    tolerance = 1e-10
    max_iter = 100
    
    for i in range(max_iter):
        mid = (low + high) / 2
        val = equation(mid)
        
        # Print intermediate results
        if i % 10 == 0:
            print(f"Iteration {i}: x = {mid:.10f}, equation value = {val:.10f}")
        
        if abs(val) < tolerance:
            print(f"\nFinal solution found after {i} iterations:")
            print(f"x ≈ {mid:.10f}")
            return mid
        elif val > 0:
            high = mid
        else:
            low = mid
    
    print("Maximum iterations reached")
    return (low + high) / 2

if __name__ == "__main__":
    find_solution()
```
