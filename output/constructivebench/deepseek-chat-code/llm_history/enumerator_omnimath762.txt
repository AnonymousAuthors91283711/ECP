[write_program]
This problem involves computing a sequence `a(n)` defined by a recurrence relation and evaluating an infinite series involving factorials and powers of 10. We'll write a Python program to compute the first few terms of the sequence and partial sums of the series to observe convergence patterns.

The program will:
1. Implement the recurrence relation for `a(n)`
2. Compute partial sums of the series up to a reasonable term
3. Print each partial sum to observe convergence
4. Use exact fractions when possible to avoid floating-point errors

```python
import math
from fractions import Fraction

def a(n):
    if n == 0:
        return 1
    elif n == 1:
        return a(0)
    elif n == 2:
        return a(1) + 2*1*a(0)
    elif n == 3:
        return a(2) + 2*2*a(1) + 9*2*1*a(0)
    else:
        return a(n-1) + 2*(n-1)*a(n-2) + 9*(n-1)*(n-2)*a(n-3) + 8*(n-1)*(n-2)*(n-3)*a(n-4)

max_n = 15  # Enough terms to see convergence
partial_sum = Fraction(0, 1)

print("n\ta(n)\tPartial Sum")
for n in range(max_n + 1):
    term = Fraction(10**n * a(n), math.factorial(n))
    partial_sum += term
    # Print exact fraction and float approximation
    print(f"{n}\t{a(n)}\t{float(partial_sum)}")
```
