[write_program]
The problem asks to count the number of ordered pairs (m, n) where 1 ≤ m, n ≤ 30 and gcd(2^m + 1, 2^n - 1) ≠ 1. We need to enumerate all possible pairs and check this condition.

Key observations:
1. gcd(2^a - 1, 2^b - 1) = 2^{gcd(a,b)} - 1
2. gcd(2^a + 1, 2^b - 1) = 1 if b/gcd(a,b) is odd, otherwise it's 2^{gcd(a,b)} + 1

Thus, gcd(2^m + 1, 2^n - 1) ≠ 1 when n/gcd(m,n) is even.

We'll implement this by:
1. Iterating through all pairs (m, n) where 1 ≤ m, n ≤ 30
2. For each pair, compute d = gcd(m, n)
3. Check if n/d is even
4. Count such pairs

```python
import math

def count_pairs():
    count = 0
    for m in range(1, 31):
        for n in range(1, 31):
            d = math.gcd(m, n)
            if (n // d) % 2 == 0:
                count += 1
                print(f"Found pair: ({m}, {n})")  # Streaming partial results
    print(f"Total count: {count}")

count_pairs()
```
