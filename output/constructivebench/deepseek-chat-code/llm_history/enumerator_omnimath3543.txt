[write_program]
This problem involves evaluating the sum of fractions where each term's numerator and denominator are powers of 2. The pattern is clear: each term is (2^n)/(2^(n+1)) starting from n=0. We can write a Python program to compute this sum for a given number of terms and observe the pattern.

```python
def compute_sum(num_terms):
    total = 0.0
    for n in range(num_terms):
        numerator = 2 ** n
        denominator = 2 ** (n + 1)
        term = numerator / denominator
        total += term
        print(f"Term {n+1}: {numerator}/{denominator} = {term}")
    print(f"Total after {num_terms} terms: {total}")

# Compute for 4 terms as shown in the problem
print("Computing sum for 4 terms:")
compute_sum(4)

# Compute for more terms to observe the pattern
print("\nComputing sum for 10 terms:")
compute_sum(10)
```

The program first computes the sum for exactly 4 terms as given in the problem, then computes it for 10 terms to show the pattern continues. Each term simplifies to 1/2, so the sum grows linearly with the number of terms. The output will clearly show this pattern.
