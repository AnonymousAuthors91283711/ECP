[write_program]
This problem asks for the smallest number k such that there exists a list of positive integers where:
1. Exactly one number appears exactly 10 times
2. No number appears more than 10 times
3. The list contains exactly k distinct numbers

We'll write a Python program to enumerate possible k values and verify conditions for small cases.

```python
from collections import Counter

def is_valid_list(lst):
    counts = Counter(lst)
    # Check exactly one number appears exactly 10 times
    tens = [num for num, cnt in counts.items() if cnt == 10]
    if len(tens) != 1:
        return False
    # Check all counts <= 10
    if any(cnt > 10 for cnt in counts.values()):
        return False
    return True

def find_min_k(max_k=30):
    for k in range(1, max_k + 1):
        # Try to construct a valid list with k distinct numbers
        # The minimal list would have:
        # - 1 number appearing 10 times
        # - k-1 numbers appearing 1 time each (minimal count)
        # Total elements = 10 + (k-1)*1 = 9 + k
        minimal_list = [1]*10 + [i+2 for i in range(k-1)]
        if is_valid_list(minimal_list):
            print(f"Found valid k = {k} with minimal list example")
            return k
        
        # Try other configurations where some numbers appear more than once but <= 10
        # For example, one 10, some 9s, etc.
        # This is more complex, but we can try small cases
        # Since the minimal case works, we can stop here
    return None

if __name__ == "__main__":
    min_k = find_min_k()
    if min_k is not None:
        print(f"Minimum k found: {min_k}")
    else:
        print("No valid k found in search range")
```
