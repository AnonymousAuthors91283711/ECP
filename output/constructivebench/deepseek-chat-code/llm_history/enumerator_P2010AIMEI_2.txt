[write_program]
This problem asks for the last three digits of the product of (10^(k+1)-1) for k from 0 to 999. We need to compute this modulo 1000. Since 1000 = 8 * 125, we can use the Chinese Remainder Theorem by computing the product modulo 8 and modulo 125 separately.

The Python program will:
1. Compute the product modulo 8 by observing patterns in the terms
2. Compute the product modulo 125 using Euler's theorem and properties of exponents
3. Combine the results using CRT

```python
def solve():
    # Compute modulo 8
    mod8 = 1
    for k in range(1000):
        term = (10 ** (k+1) - 1) % 8
        mod8 = (mod8 * term) % 8
        if mod8 == 0:  # Early exit if product becomes 0 mod 8
            break
    
    # Compute modulo 125
    mod125 = 1
    # Since 10 and 125 are not coprime, we need to handle zeros carefully
    # But 10^3 = 1000 ≡ 0 mod 125, so for k >= 2, 10^(k+1) ≡ 0 mod 125
    # Therefore, the product becomes 0 mod 125 for k >= 2
    for k in range(2):
        term = (pow(10, k+1, 125) - 1) % 125
        mod125 = (mod125 * term) % 125
    
    # Combine using CRT
    # We need x ≡ 0 mod 8 and x ≡ mod125 mod 125
    # Since 8 and 125 are coprime, solution is unique mod 1000
    # Find x = 125*k ≡ mod8 mod 8 => 125 ≡ 5 mod 8 => 5k ≡ mod8 mod 8
    # k ≡ mod8 * 5^(-1) mod 8
    inv5 = 5  # since 5*5=25≡1 mod8
    k = (mod8 * inv5) % 8
    x = 125 * k + mod125
    x %= 1000
    
    print(x)

solve()
```
