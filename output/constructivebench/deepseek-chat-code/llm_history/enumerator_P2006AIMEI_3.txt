[write_program]
The problem asks to find the smallest positive integer n such that:
1. n has a digit d (in base 10)
2. When you remove this digit from the front of n, you get a number k = n - d*10^(length-1)
3. This k must equal n divided by 29 (n/29)

We'll write a Python program to search for such numbers n by:
1. Iterating through possible digit lengths
2. For each length, trying all possible leading digits
3. Calculating k and checking if it equals n/29
4. Printing valid candidates and finally the minimal solution

```python
def find_min_n():
    length = 2  # Start with 2-digit numbers since 1-digit can't have a removed digit
    while True:
        for d in range(1, 10):  # Leading digit can't be 0
            # The number is d followed by (length-1) digits, which form k
            # We have k = n / 29 and k = n - d*10^(length-1)
            # So n = 29k and k = 29k - d*10^(length-1) => 28k = d*10^(length-1)
            power = 10 ** (length - 1)
            numerator = d * power
            if numerator % 28 == 0:
                k = numerator // 28
                n = 29 * k
                # Verify the number has the correct digit count and leading digit
                if len(str(n)) == length and str(n)[0] == str(d):
                    print(f"Found candidate: n={n}, d={d}, k={k}")
                    return n  # Since we're checking in order, first found is minimal
        length += 1

print("Minimal solution:", find_min_n())
```
