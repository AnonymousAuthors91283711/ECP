[write_program]
The problem asks for the smallest positive integer n (a 3-digit number ABC) such that n = B^C - A, where A, B, C are digits from 1 to 9. We need to enumerate all possible 3-digit numbers (100-999) and check this condition.

The Python program will:
1. Iterate through all possible 3-digit numbers (100-999)
2. For each number, extract digits A, B, C
3. Check if n == B^C - A
4. Print all valid numbers found
5. Finally print the smallest valid number

```python
def main():
    solutions = []
    for n in range(100, 1000):
        A = n // 100
        B = (n // 10) % 10
        C = n % 10
        if A == 0 or B == 0 or C == 0:
            continue  # digits must be 1-9
        if n == (B ** C) - A:
            solutions.append(n)
            print(n)  # stream partial results
    
    if solutions:
        print("Smallest solution:", min(solutions))
    else:
        print("No solutions found")

if __name__ == "__main__":
    main()
```
