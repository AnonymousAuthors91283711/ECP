[write_program]
This problem asks for natural numbers n â‰¥ 1 where the sum of squares of their digits equals n itself. We'll write a Python program to find all such numbers up to a reasonable threshold (since numbers with more digits will have sums that grow much slower than the numbers themselves).

The program will:
1. Iterate through numbers from 1 to 10,000 (a safe upper bound)
2. For each number, calculate the sum of squares of its digits
3. Print numbers where the sum equals the number itself
4. After enumeration, output the complete set found

```python
def sum_of_digit_squares(n):
    return sum(int(d)**2 for d in str(n))

def find_numbers():
    results = []
    for n in range(1, 10001):
        if sum_of_digit_squares(n) == n:
            results.append(n)
            print(n)
    print("Complete set found:", results)

find_numbers()
```
