[write_program]
This problem asks for all positive integers n where n³ + 2n² + 9n + 8 is a perfect cube. We'll write a Python program to search for such n values by checking when the expression equals some integer m cubed.

The approach:
1. Iterate through possible n values
2. For each n, compute the expression n³ + 2n² + 9n + 8
3. Check if the result is a perfect cube
4. Print any matches found

We'll limit our search to n up to 1000 since the values grow rapidly.

```python
import math

def is_perfect_cube(x):
    # Check if x is a perfect cube
    cube_root = round(x ** (1/3))
    return cube_root ** 3 == x

max_n = 1000
print(f"Searching for solutions up to n = {max_n}")
for n in range(1, max_n + 1):
    value = n**3 + 2*n**2 + 9*n + 8
    if is_perfect_cube(value):
        m = round(value ** (1/3))
        print(f"Found solution: n = {n}, m = {m} (since {m}^3 = {value})")
```
