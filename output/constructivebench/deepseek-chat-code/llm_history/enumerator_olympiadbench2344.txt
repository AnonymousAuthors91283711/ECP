[write_program]
The problem asks for the smallest positive integer \( n \) such that there exists a geometric sequence \( t_k = a \cdot r^{k-1} \) with \( r \neq 0 \), satisfying:
1. \( t_1 \cdot t_n = 3 \)
2. The product of the first \( n \) terms equals \( 59049 = 3^{10} \)

We'll write a Python program to enumerate possible values of \( n \) and check these conditions.

```python
import math

def find_min_n():
    # 59049 = 3^10, so we'll check divisors of 10*2=20 (since product involves squares)
    max_n = 20
    for n in range(1, max_n + 1):
        # Condition 1: t1 * tn = a * (a * r^(n-1)) = a^2 * r^(n-1) = 3
        # Condition 2: product of first n terms = a^n * r^(n(n-1)/2) = 3^10
        # Let's take logs (base 3) to handle exponents
        # Let log3(a) = x, log3(r) = y
        # Then:
        # 1. 2x + (n-1)y = 1
        # 2. n*x + n(n-1)/2 * y = 10
        
        # Solve the system of equations
        # Equation coefficients:
        A = 2
        B = n - 1
        C = n
        D = n * (n - 1) / 2
        # System: Ax + By = 1
        #          Cx + Dy = 10
        
        # Check if determinant is non-zero
        det = A * D - B * C
        if det == 0:
            continue  # no unique solution
            
        # Solve for x and y
        x = (D * 1 - B * 10) / det
        y = (A * 10 - C * 1) / det
        
        # Check if x and y are such that a and r are valid (no complex numbers)
        # Since 3^x and 3^y must be real, x and y must be real
        # Also r â‰  0 implies y is finite
        if not math.isfinite(x) or not math.isfinite(y):
            continue
            
        # Verify the solution satisfies original equations
        # We'll check with some tolerance for floating point
        tol = 1e-6
        eq1 = 2*x + (n-1)*y
        eq2 = n*x + (n*(n-1)/2)*y
        if abs(eq1 - 1) < tol and abs(eq2 - 10) < tol:
            print(f"Found valid n: {n}")
            return n  # return first valid n (smallest)
    
    print("No valid n found in range")
    return None

find_min_n()
```
