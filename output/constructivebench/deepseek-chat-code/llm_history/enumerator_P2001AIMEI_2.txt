[write_program]
The problem is from the 2001 AIME I competition (Problem 2). It involves finding the average of a set of real numbers S given two conditions about inserting elements into S and how the average changes. 

We'll approach this by:
1. Modeling the problem algebraically
2. Solving the system of equations for the average
3. Implementing a verification for small sets to build intuition

The key insight is that inserting 1 decreases the average by 13, while inserting 2001 increases it by 27. We can derive the average algebraically without enumeration, but we'll implement a small verification for intuition.

```python
def solve():
    # Let x be the current average, n be the current size
    # Equation 1: (n*x + 1)/(n+1) = x - 13
    # Equation 2: (n*x + 2001)/(n+1) = x + 27
    # We'll solve these symbolically
    
    # From equation 1: n*x + 1 = (n+1)(x-13)
    # => n*x + 1 = n*x -13n + x -13
    # => 1 = -13n + x -13
    # => x = 13n + 14
    
    # From equation 2: n*x + 2001 = (n+1)(x+27)
    # => n*x + 2001 = n*x +27n + x +27
    # => 2001 = 27n + x +27
    # => x = 1974 - 27n
    
    # Set the two expressions for x equal:
    # 13n + 14 = 1974 - 27n
    # 40n = 1960
    # n = 49
    
    # Then x = 13*49 + 14 = 651
    
    # Verification for n=49:
    n = 49
    x = 651
    sum_s = n * x
    
    # Check equation 1
    new_avg1 = (sum_s + 1) / (n + 1)
    expected1 = x - 13
    print(f"Verification 1: {new_avg1} == {expected1} (should be True)")
    
    # Check equation 2
    new_avg2 = (sum_s + 2001) / (n + 1)
    expected2 = x + 27
    print(f"Verification 2: {new_avg2} == {expected2} (should be True)")
    
    print(f"The average of set S is: {x}")

solve()
```
