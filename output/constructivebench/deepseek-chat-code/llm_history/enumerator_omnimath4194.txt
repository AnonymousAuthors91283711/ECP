[write_program]
This problem asks to find all triples (a, b, p) where a, b, p are positive integers, p is prime, and a^p equals b! + p. We'll write a Python program to search for such triples by iterating through possible values of p, b, and checking if b! + p is a perfect p-th power.

The approach:
1. Iterate through small prime numbers p (since factorial grows very rapidly)
2. For each p, iterate through possible b values until b! becomes too large
3. For each (b,p) pair, compute b! + p and check if it's a perfect p-th power
4. Output any valid triples found

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def find_triples(max_p=10, max_b=20):
    for p in range(2, max_p + 1):
        if not is_prime(p):
            continue
        for b in range(1, max_b + 1):
            fact = math.factorial(b)
            target = fact + p
            if target <= 0:
                continue
            a = round(target ** (1 / p))
            if a ** p == target:
                print(f"Found triple: a={a}, b={b}, p={p}")

if __name__ == "__main__":
    print("Searching for triples (a, b, p) where a^p = b! + p")
    find_triples()
```
