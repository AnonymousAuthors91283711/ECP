[write_program]
This problem asks for natural numbers a,b,c,d (all positive) such that:
1. Their sum is a perfect square m²
2. Sum of their squares is 1989
3. The maximum of them is a perfect square n²

We'll write a Python program to enumerate all possible quadruples (a,b,c,d) sorted in non-increasing order (to avoid permutations), check the conditions, and find possible (m,n) pairs.

```python
import math

def is_square(x):
    s = int(math.isqrt(x))
    return s * s == x

max_sum_sq = 1989
max_val = int(math.isqrt(max_sum_sq))  # Since a^2 <= 1989

# We'll generate quadruples a >= b >= c >= d >= 1
for a in range(max_val, 0, -1):
    a_sq = a * a
    if a_sq > max_sum_sq:
        continue
    remaining_sum_sq = max_sum_sq - a_sq
    
    for b in range(min(a, int(math.isqrt(remaining_sum_sq))), 0, -1):
        b_sq = b * b
        if b_sq > remaining_sum_sq:
            continue
        remaining_sum_sq2 = remaining_sum_sq - b_sq
        
        for c in range(min(b, int(math.isqrt(remaining_sum_sq2))), 0, -1):
            c_sq = c * c
            if c_sq > remaining_sum_sq2:
                continue
            remaining_sum_sq3 = remaining_sum_sq2 - c_sq
            
            d = int(math.isqrt(remaining_sum_sq3))
            if d * d != remaining_sum_sq3 or d == 0:
                continue
            if d > c:
                continue
            
            # Now check sum condition
            total = a + b + c + d
            if not is_square(total):
                continue
            
            # Check max is square
            max_num = a  # since a >= b >= c >= d
            if not is_square(max_num):
                continue
            
            m = int(math.isqrt(total))
            n = int(math.isqrt(max_num))
            print(f"Found solution: ({a}, {b}, {c}, {d}) with (m, n) = ({m}, {n})")

print("Search complete.")
```
