[write_program]
This problem asks for the largest possible list of non-zero integers where:
1. Every 7-element sublist has a positive sum
2. Every 11-element sublist has a negative sum

We'll write a Python program to enumerate possible lists of increasing size to find the maximum possible length. We'll use small integers (-1 and 1) since they're simplest for satisfying the conditions.

```python
from itertools import combinations

def is_valid(lst):
    # Check all elements are non-zero
    if any(x == 0 for x in lst):
        return False
    # Check all 7-subsets have positive sum
    for s in combinations(lst, 7):
        if sum(s) <= 0:
            return False
    # Check all 11-subsets have negative sum
    for s in combinations(lst, 11):
        if sum(s) >= 0:
            return False
    return True

def find_max_list():
    max_len = 0
    # Try lists of increasing length
    for n in range(1, 20):
        found = False
        # Try combinations of 1 and -1 (simplest case)
        # We need more 1s than -1s for 7-subsets, but not too many for 11-subsets
        for k in range(0, n+1):
            lst = [1]*k + [-1]*(n-k)
            if is_valid(lst):
                print(f"Found valid list of length {n}: {lst}")
                max_len = n
                found = True
                break
        if not found:
            print(f"No valid list found for length {n}")
            break
    print(f"Maximum possible length found: {max_len}")

find_max_list()
```
