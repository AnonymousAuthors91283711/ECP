[write_program]
This problem asks for the number of positive integer pairs (a,b) such that gcd(a,b)*a + b² = 10000. We'll write a Python program to enumerate all valid pairs and count them.

The approach:
1. Iterate through possible values of b (from 1 to 100 since b² ≤ 10000)
2. For each b, compute d = gcd(a,b), which must divide b
3. The equation becomes d*a + b² = 10000, so a must be (10000 - b²)/d
4. We need to ensure a is integer and positive, and gcd(a,b) = d

```python
import math

def count_solutions():
    count = 0
    max_b = int(math.isqrt(10000))  # b can't be larger than sqrt(10000)
    
    for b in range(1, max_b + 1):
        b_squared = b * b
        remaining = 10000 - b_squared
        if remaining <= 0:
            continue
        
        # Find all possible d that divide b and (10000 - b²)
        possible_ds = set()
        for d in range(1, int(math.isqrt(b)) + 1):
            if b % d == 0:
                if remaining % d == 0:
                    possible_ds.add(d)
                if remaining % (b // d) == 0:
                    possible_ds.add(b // d)
        
        for d in possible_ds:
            if remaining % d != 0:
                continue
            a = remaining // d
            if a > 0 and math.gcd(a, b) == d:
                count += 1
                print(f"Found pair: a={a}, b={b}")  # Streaming output
    
    print(f"Total number of solutions: {count}")

count_solutions()
```
