[write_program]
This problem is about finding all functions f: ℕ → ℕ that satisfy a certain divisibility condition. The condition states that for all positive integers a,b where a+b > 2019, (a + f(b)) must divide (a² + b*f(a)).

To approach this, we'll:
1. Test small natural number functions (constant, linear, etc.)
2. Check the condition for small values of a,b where a+b > threshold (we'll use 5 instead of 2019 for testing)
3. Output functions that satisfy the condition for our test cases

```python
def test_function(f, threshold=5, max_test=20):
    """Test if function f satisfies the condition up to max_test"""
    for a in range(1, max_test):
        for b in range(1, max_test):
            if a + b > threshold:
                numerator = a**2 + b * f(a)
                denominator = a + f(b)
                if denominator == 0:
                    continue
                if numerator % denominator != 0:
                    return False
    return True

def enumerate_functions():
    # Test constant functions f(n) = c
    print("Testing constant functions...")
    for c in range(0, 10):
        f = lambda n, c=c: c
        if test_function(f):
            print(f"Found constant function: f(n) = {c}")

    # Test linear functions f(n) = n + c
    print("\nTesting linear functions...")
    for c in range(-5, 5):
        f = lambda n, c=c: n + c
        if test_function(f):
            print(f"Found linear function: f(n) = n + {c}")

    # Test identity function
    print("\nTesting identity function...")
    f = lambda n: n
    if test_function(f):
        print("Found identity function: f(n) = n")

    # Test quadratic functions f(n) = n^2 + c*n + d
    print("\nTesting quadratic functions...")
    for c in range(-3, 3):
        for d in range(-3, 3):
            f = lambda n, c=c, d=d: n**2 + c*n + d
            if test_function(f):
                print(f"Found quadratic function: f(n) = n^2 + {c}n + {d}")

if __name__ == "__main__":
    enumerate_functions()
```
