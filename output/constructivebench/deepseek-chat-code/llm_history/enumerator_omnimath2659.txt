[write_program]
This problem asks to find all integer-valued functions f: ℤ → ℤ such that for all integers a, b, there exists some integer k where f(f(a)-b) + b*f(2a) is a perfect square. We'll write a Python program to enumerate possible polynomial functions and check the condition for small parameter values.

The approach will:
1. Test linear functions f(n) = c*n + d for small integer coefficients c, d
2. For each candidate function, verify the condition for small a, b values
3. Print functions that satisfy the condition for all tested cases

```python
def is_square(n):
    if n < 0:
        return False
    root = int(n**0.5)
    return root * root == n or (root + 1)**2 == n

def test_function(f):
    # Test for small a and b values
    for a in range(-3, 4):
        for b in range(-3, 4):
            lhs = f(f(a) - b) + b * f(2 * a)
            if not is_square(lhs):
                return False
    return True

# Test linear functions f(n) = c*n + d for small coefficients
print("Testing linear functions f(n) = c*n + d:")
for c in range(-5, 6):
    for d in range(-5, 6):
        if c == 0 and d == 0:  # Skip zero function
            continue
        f = lambda n, c=c, d=d: c * n + d
        if test_function(f):
            print(f"Found candidate: f(n) = {c}n + {d}")

# Test quadratic functions f(n) = c*n^2 + d*n + e
print("\nTesting quadratic functions f(n) = c*n^2 + d*n + e:")
for c in range(-3, 4):
    for d in range(-3, 4):
        for e in range(-3, 4):
            if c == 0 and d == 0 and e == 0:  # Skip zero function
                continue
            f = lambda n, c=c, d=d, e=e: c * n**2 + d * n + e
            if test_function(f):
                print(f"Found candidate: f(n) = {c}n^2 + {d}n + {e}")

# Test constant functions separately
print("\nTesting constant functions f(n) = C:")
for C in range(-5, 6):
    if C == 0:
        continue
    f = lambda n, C=C: C
    if test_function(f):
        print(f"Found candidate: f(n) = {C}")
```
