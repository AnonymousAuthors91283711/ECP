[write_program]
This problem asks for the largest natural number `n` such that for every integer from 1 to `n`, there exists a monic polynomial (degree ≤ 3) that evaluates to that integer at some integer point. We'll write a program to find this maximal `n` by checking for each number whether it can be represented by a monic cubic polynomial evaluated at some integer point.

The approach is:
1. Generate all monic cubic polynomials (coefficients of x², x, and constant term can vary)
2. For each polynomial, compute its values at integer points
3. Track the largest contiguous sequence starting from 1 that can be represented this way

```python
def main():
    max_n = 0
    current = 1
    found = True
    
    # We'll check up to a reasonable bound (100 is sufficient)
    while found and current <= 100:
        found = False
        # Check all monic cubic polynomials with coefficients in a reasonable range
        for a in range(-10, 11):
            for b in range(-10, 11):
                for c in range(-10, 11):
                    # Try evaluating at integer points near the root
                    for x in range(-10, 11):
                        val = x**3 + a*x**2 + b*x + c
                        if val == current:
                            found = True
                            break
                    if found:
                        break
                if found:
                    break
            if found:
                break
        
        if found:
            max_n = current
            current += 1
        else:
            break
    
    print(f"The largest n is: {max_n}")

if __name__ == "__main__":
    main()
```
