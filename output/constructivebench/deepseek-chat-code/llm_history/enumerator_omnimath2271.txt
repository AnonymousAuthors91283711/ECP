[write_program]
This problem asks to find three distinct primes p < q < r such that p*q*r equals 989*1001*1007 + 320, and prove this is the unique solution. We'll write a Python program to factorize the number and find all possible prime triplets.

The approach:
1. Compute N = 989*1001*1007 + 320
2. Factorize N to get all prime factors
3. Find all combinations of 3 distinct primes from these factors where p < q < r and p*q*r = N
4. Output any valid triplets found

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def factor(n):
    factors = []
    def _factor(n):
        if n == 1:
            return
        if is_prime(n):
            factors.append(n)
            return
        for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
            if n % p == 0:
                factors.append(p)
                _factor(n // p)
                return
        d = n
        while d == n:
            d = pollards_rho(n)
        _factor(d)
        _factor(n // d)
    
    def pollards_rho(n):
        if n % 2 == 0:
            return 2
        if n % 3 == 0:
            return 3
        if n % 5 == 0:
            return 5
        while True:
            c = math.isqrt(n) + 1
            f = lambda x: (pow(x, 2, n) + c) % n
            x, y, d = 2, 2, 1
            while d == 1:
                x = f(x)
                y = f(f(y))
                d = math.gcd(abs(x - y), n)
            if d != n:
                return d
    
    _factor(n)
    return sorted(factors)

def find_prime_triples(factors, target):
    primes = sorted(list(set(factors)))
    n = len(primes)
    results = []
    for i in range(n):
        p = primes[i]
        for j in range(i+1, n):
            q = primes[j]
            if p * q > target:
                continue
            for k in range(j+1, n):
                r = primes[k]
                if p * q * r == target:
                    results.append((p, q, r))
    return results

def main():
    N = 989 * 1001 * 1007 + 320
    print(f"Factoring {N}...")
    factors = factor(N)
    print(f"Prime factors: {factors}")
    triples = find_prime_triples(factors, N)
    print("Found prime triples:")
    for p, q, r in triples:
        print(f"{p} * {q} * {r} = {p*q*r}")

if __name__ == "__main__":
    main()
```
