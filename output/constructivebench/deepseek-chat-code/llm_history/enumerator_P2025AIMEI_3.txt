[write_program]
This problem involves counting the number of functions from a 9-element set to a 3-element set (representing chocolate, vanilla, and strawberry flavors) with specific constraints on the counts of each flavor. The constraints are:
1. All three flavors must appear (counts > 0)
2. The counts must be strictly decreasing (chocolate > vanilla > strawberry)

We'll enumerate all possible triples (c, v, s) where c + v + s = 9, c > v > s > 0, then count the number of assignments for each valid combination using multinomial coefficients.

```python
from math import comb

def solve():
    total = 0
    # Iterate through all possible counts where c > v > s > 0 and c+v+s=9
    for c in range(1, 9):
        for v in range(1, 9 - c):
            s = 9 - c - v
            if s > 0 and c > v > s:
                # Calculate multinomial coefficient: 9!/(c!v!s!)
                count = comb(9, c) * comb(9 - c, v)
                print(f"({c},{v},{s}): {count}")
                total += count
    print(f"Total: {total}")
    print(f"Answer mod 1000: {total % 1000}")

if __name__ == "__main__":
    solve()
```
