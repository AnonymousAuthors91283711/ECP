[write_program]
This problem asks for the number of valid final boards in a 3x3 game where:
1. The board is completely filled (no empty cells)
2. Exactly one player has a winning line (no ties)
3. Player 2 must be the winner

We'll enumerate all possible 3x3 boards with values in {0,1,2}, check the validity conditions, and count those that satisfy all constraints.

```python
from itertools import product

def is_winning(board, player):
    # Check rows
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):
            return True
    # Check columns
    for j in range(3):
        if all(board[i][j] == player for i in range(3)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2-i] == player for i in range(3)):
        return True
    return False

count = 0

# Iterate through all possible 3x3 boards with values 0,1,2
for board in product(range(3), repeat=9):
    # Convert flat tuple to 3x3 matrix
    b = [list(board[i*3:(i+1)*3]) for i in range(3)]
    
    # Check if player 2 wins and no other player wins
    if not is_winning(b, 2):
        continue
    if is_winning(b, 0) or is_winning(b, 1):
        continue
    
    count += 1
    print(f"Valid board found: {b}")  # Print each valid board

print(f"Total valid boards: {count}")
```
