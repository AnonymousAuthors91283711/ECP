[write_program]
This problem asks for the maximal rational number q = 1/a + 1/b + 1/c that is less than 1/4, with constraints on the minimality of a, b, c. We'll enumerate possible (a,b,c) triples in order of increasing denominators, checking the conditions.

```python
def main():
    max_q = 0
    best_triple = (0, 0, 0)
    
    # a must be >=5 since 1/4 > 1/5 but 1/4 <= 1/4
    for a in range(5, 30):
        # For each a, find minimal b where 1/a + 1/b > 1/4
        min_b = a + 1
        while True:
            if 1/a + 1/min_b > 1/4:
                break
            min_b += 1
        
        for b in range(min_b, 1000):
            sum_ab = 1/a + 1/b
            if sum_ab >= 1/4:
                continue
                
            # Find minimal c where sum_ab + 1/c > 1/4
            min_c = b + 1
            while True:
                if sum_ab + 1/min_c > 1/4:
                    break
                min_c += 1
            
            for c in [min_c, min_c + 1, min_c + 2]:  # Check nearby values
                q = sum_ab + 1/c
                if q < 1/4 and q > max_q:
                    max_q = q
                    best_triple = (a, b, c)
                    print(f"New best: 1/{a} + 1/{b} + 1/{c} = {q}")
    
    print("\nFinal answer:")
    print(f"1/{best_triple[0]} + 1/{best_triple[1]} + 1/{best_triple[2]} = {max_q}")

if __name__ == "__main__":
    main()
```
