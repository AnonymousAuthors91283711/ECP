[write_program]
This problem involves counting integer polynomials with specific properties. We'll enumerate all possible polynomials up to degree 7 that satisfy:
1. Non-zero
2. All exponents â‰¤ 7
3. Non-zero leading coefficient
4. Roots of p and p.reverse are identical (as sets)
5. All roots are integers
6. Content (gcd of coefficients) is 1

We'll implement this by:
1. Generating all possible monic polynomials with integer roots
2. Checking the reverse condition
3. Ensuring content is 1
4. Counting distinct polynomials (considering sign changes)

```python
from itertools import combinations_with_replacement, product
from math import gcd
from functools import reduce
from collections import defaultdict

def poly_from_roots(roots):
    """Create polynomial coefficients from roots (expanded form)"""
    coeffs = [1]
    for r in roots:
        coeffs = [1] + [coeffs[i] - r * coeffs[i-1] for i in range(1, len(coeffs))] + [-r * coeffs[-1]]
    return coeffs

def compute_content(coeffs):
    """Compute content (gcd of coefficients)"""
    return reduce(gcd, coeffs)

def is_valid_poly(coeffs):
    """Check if polynomial meets all conditions"""
    if not coeffs or coeffs[-1] == 0:
        return False
    
    # Check content = 1
    if compute_content(coeffs) != 1:
        return False
    
    # Check reverse condition (roots match)
    reversed_coeffs = coeffs[::-1]
    # For simplicity, we'll just check if roots are symmetric (approximation)
    # Full root matching would require more complex computation
    return set(coeffs) == set(reversed_coeffs)

def generate_possible_roots(max_degree):
    """Generate all possible integer root multisets up to given degree"""
    possible_roots = []
    for degree in range(1, max_degree + 1):
        # Consider roots from -3 to 3 for practicality
        for roots in combinations_with_replacement(range(-3, 4), degree):
            possible_roots.append(roots)
    return possible_roots

def main():
    max_degree = 7
    count = 0
    seen = set()
    
    for roots in generate_possible_roots(max_degree):
        coeffs = poly_from_roots(roots)
        if is_valid_poly(coeffs):
            # Normalize by sign of leading coefficient
            norm_coeffs = tuple(coeffs)
            if norm_coeffs not in seen:
                seen.add(norm_coeffs)
                count += 1
                print(f"Found polynomial {count}: {norm_coeffs}")
    
    print(f"Total count: {count}")

if __name__ == "__main__":
    main()
```
