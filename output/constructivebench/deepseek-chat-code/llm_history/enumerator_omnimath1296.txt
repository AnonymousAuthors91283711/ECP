[write_program]
This problem asks for the maximum possible value of s = ∑_{i=2}^{2003} (i-1)*n_i given the constraint ∑_{i=1}^{2003} i*n_i = 2003. We need to find integer values n_i that satisfy this constraint and maximize s.

The key observation is that to maximize s, we should allocate as much weight as possible to the highest terms (i-1)*n_i. This suggests setting n_2003 as large as possible and other n_i to minimal values.

Here's a Python program that enumerates possible values of s by trying different allocations to n_2003 and computing the resulting s:

```python
def main():
    total = 2003
    max_s = 0
    # Try all possible values for n_2003 (from 0 to maximum possible)
    max_n2003 = total // 2003
    for n2003 in range(max_n2003, -1, -1):
        remaining = total - 2003 * n2003
        if remaining < 0:
            continue
        # Allocate remaining to n1 (since it doesn't contribute to s)
        n1 = remaining
        s = 2002 * n2003  # Only n2003 contributes to s
        if s > max_s:
            max_s = s
            print(f"Current maximum s: {s} (n2003={n2003}, n1={n1})")
    print(f"Final maximum s: {max_s}")

if __name__ == "__main__":
    main()
```

The program works by:
1. Trying all possible values for n_2003 from maximum down to 0
2. For each n_2003, computing the remaining weight that must be allocated to other terms
3. Assigning all remaining weight to n_1 (since terms with i=1 don't contribute to s)
4. Calculating s based only on the n_2003 term (since it's the only one contributing to s)
5. Tracking and printing the maximum s found

The optimal solution occurs when n_2003=1 and n_1=0, giving s=2002.
