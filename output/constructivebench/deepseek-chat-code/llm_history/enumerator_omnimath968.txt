[write_program]
This problem is a cryptarithmetic puzzle where we need to find distinct digits (0-9) assigned to letters H,M,T,G,U,S,O,N,D,R such that:
- H, G, R â‰  0 (no leading zeros)
- All letters represent distinct digits
- The equation HMMT + GUTS = ROUND holds
- R must be 1
We need to find the maximum possible value of ROUND that satisfies these conditions.

The Python program will:
1. Iterate through all possible digit assignments
2. Check all constraints
3. Track valid solutions
4. Find the maximum ROUND value

```python
from itertools import permutations

def solve():
    max_round = 0
    digits = set(range(10))
    
    # R must be 1 (given constraint)
    r = 1
    remaining_digits = digits - {r}
    
    # Iterate through all permutations of remaining digits for other letters
    for perm in permutations(remaining_digits, 9):
        h, m, t, g, u, s, o, n, d = perm
        
        # Check constraints
        if h == 0 or g == 0:
            continue  # no leading zeros
        if len({h, m, t, g, u, s, o, n, d, r}) != 10:
            continue  # all digits must be distinct
        
        # Compute values
        hmmt = 1000*h + 100*m + 10*m + t
        guts = 1000*g + 100*u + 10*t + s
        round_val = 10000*r + 1000*o + 100*u + 10*n + d
        
        # Check equation
        if hmmt + guts == round_val:
            print(f"Found: H={h}, M={m}, T={t}, G={g}, U={u}, S={s}, O={o}, N={n}, D={d}, R={r}")
            print(f"  {hmmt} + {guts} = {round_val}")
            if round_val > max_round:
                max_round = round_val
    
    if max_round > 0:
        print(f"\nMaximum ROUND value: {max_round}")
    else:
        print("No solution found")

solve()
```
