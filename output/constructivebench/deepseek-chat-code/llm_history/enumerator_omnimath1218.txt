[write_program]
This problem involves counting subsets (committees) of size 5 from a 10-element set that contain at least one non-empty subset (leaders) of size between 1 and 4. We'll enumerate all possible committees of size 5 and count those that satisfy the condition.

The approach is:
1. Generate all combinations of 5 elements from 10 (committees)
2. For each committee, check if it has any subset of size 1-4 (leaders)
3. Count all valid committees

Since the total number of 5-element subsets from 10 is C(10,5)=252, we can efficiently enumerate them all.

```python
from itertools import combinations

def count_valid_committees():
    total = 0
    universe = range(10)  # Fin 10 represented as 0-9
    for committee in combinations(universe, 5):
        has_valid_leader = False
        # Check all possible leader subsets of sizes 1-4
        for leader_size in range(1, 5):
            for leader in combinations(committee, leader_size):
                has_valid_leader = True
                break
            if has_valid_leader:
                break
        if has_valid_leader:
            total += 1
    return total

print(count_valid_committees())
```
