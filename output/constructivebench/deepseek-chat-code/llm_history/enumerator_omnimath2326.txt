[write_program]
This problem asks for the maximum value of x + y² + z³ under the constraints x ≥ 0, y ≥ 0, z ≥ 0, and x + y + z = 1. We'll write a Python program to explore possible values by enumerating candidate points where the maximum might occur.

The approach will:
1. Consider boundary cases where some variables are 0
2. Check interior points where all variables are positive
3. Use a grid search with small step sizes to approximate the maximum

```python
def evaluate(x, y, z):
    return x + y**2 + z**3

def find_max():
    max_val = 0
    best_point = (0, 0, 0)
    
    # Check boundary cases first
    # Case 1: z = 0 (x + y = 1)
    for i in range(101):
        y = i / 100
        x = 1 - y
        val = evaluate(x, y, 0)
        if val > max_val:
            max_val = val
            best_point = (x, y, 0)
            print(f"New max: {max_val:.4f} at (x={x:.2f}, y={y:.2f}, z=0.00)")
    
    # Case 2: y = 0 (x + z = 1)
    for i in range(101):
        z = i / 100
        x = 1 - z
        val = evaluate(x, 0, z)
        if val > max_val:
            max_val = val
            best_point = (x, 0, z)
            print(f"New max: {max_val:.4f} at (x={x:.2f}, y=0.00, z={z:.2f})")
    
    # Case 3: x = 0 (y + z = 1)
    for i in range(101):
        z = i / 100
        y = 1 - z
        val = evaluate(0, y, z)
        if val > max_val:
            max_val = val
            best_point = (0, y, z)
            print(f"New max: {max_val:.4f} at (x=0.00, y={y:.2f}, z={z:.2f})")
    
    # Check interior points (all variables > 0)
    step = 0.01
    for i in range(1, 100):
        z = i / 100
        remaining = 1 - z
        for j in range(1, 100 - i):
            y = j / 100
            x = remaining - y
            if x > 0:
                val = evaluate(x, y, z)
                if val > max_val:
                    max_val = val
                    best_point = (x, y, z)
                    print(f"New max: {max_val:.4f} at (x={x:.2f}, y={y:.2f}, z={z:.2f})")
    
    print(f"\nFinal maximum found: {max_val:.6f}")
    print(f"Achieved at (x, y, z) = ({best_point[0]:.4f}, {best_point[1]:.4f}, {best_point[2]:.4f})")

find_max()
```
