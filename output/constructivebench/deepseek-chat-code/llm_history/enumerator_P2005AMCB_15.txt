[write_program]
The problem asks to find a digit (1-9) that must appear in the concatenated digits of four 2-digit numbers (a,b,c,d) where:
1. Each number is between 10-99
2. All digits are non-zero
3. All digits across all four numbers are distinct
4. The sum a+b+c+d = 221
5. The digit must appear in at least one number

We'll write a Python program to enumerate all possible combinations and track which digits appear in all valid solutions.

```python
def solve():
    from itertools import combinations
    
    # Generate all 2-digit numbers with distinct non-zero digits
    numbers = []
    for n in range(10, 100):
        d1, d2 = n // 10, n % 10
        if d1 != 0 and d2 != 0 and d1 != d2:
            numbers.append(n)
    
    # Track digits that appear in all valid solutions
    digit_counts = {d: 0 for d in range(1, 10)}
    total_solutions = 0
    
    # Iterate through all combinations of 4 distinct numbers
    for quad in combinations(numbers, 4):
        a, b, c, d = quad
        if a + b + c + d != 221:
            continue
        
        # Get all digits
        digits = []
        for num in quad:
            digits.extend([num // 10, num % 10])
        
        # Check all digits are distinct
        if len(set(digits)) == 8:
            total_solutions += 1
            # Update digit counts
            for d in set(digits):
                digit_counts[d] += 1
    
    # Print digits that appear in all solutions
    print("Digits present in all solutions:")
    for d in range(1, 10):
        if digit_counts[d] == total_solutions and total_solutions > 0:
            print(d)
    
    print(f"Total valid solutions found: {total_solutions}")

solve()
```
