[write_program]
This problem asks to find integers a, b, c within specific ranges (a∈[0,4], b∈[0,12]) such that 1/2015 = a/5 + b/13 + c/31, with the uniqueness condition that no other (a',b',c') satisfies the equation. We need to find all possible (a,b,c) triples and compute a+b for the unique solution.

The approach is:
1. Enumerate all possible a and b in their ranges
2. For each (a,b), solve for c exactly
3. Check if c is integer and if the solution is unique
4. Output valid (a,b,c) triples and their a+b sums

```python
def main():
    # Constants from the problem
    target = 1 / 2015
    denoms = [5, 13, 31]
    
    # Ranges for a and b
    a_range = range(0, 5)    # Icc 0 4
    b_range = range(0, 13)   # Icc 0 12
    
    solutions = []
    
    for a in a_range:
        for b in b_range:
            # Calculate c exactly using rational arithmetic
            # target = a/5 + b/13 + c/31
            # c = 31*(target - a/5 - b/13)
            c_rational = (target - a/5 - b/13) * 31
            
            # Check if c is integer (within floating point precision)
            if abs(c_rational - round(c_rational)) < 1e-10:
                c = round(c_rational)
                solutions.append((a, b, c))
                print(f"Found solution: a={a}, b={b}, c={c}, a+b={a+b}")
    
    # Verify uniqueness (should only be one solution)
    if len(solutions) == 1:
        print(f"Unique solution found with a+b={solutions[0][0] + solutions[0][1]}")
    else:
        print("Multiple solutions found - check uniqueness condition")

if __name__ == "__main__":
    main()
```
