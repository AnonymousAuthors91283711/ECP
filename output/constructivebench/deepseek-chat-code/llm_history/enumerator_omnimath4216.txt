[write_program]
This problem asks for natural numbers n > 0 where all digits of n² are odd. We'll write a Python program to find such numbers up to a reasonable threshold (1 million) and observe patterns.

The approach:
1. Iterate through numbers from 1 to 1,000,000
2. For each number, compute its square
3. Check if all digits in the square are odd (1,3,5,7,9)
4. Print numbers that satisfy the condition

```python
def all_digits_odd(num):
    for digit in str(num):
        if int(digit) % 2 == 0:
            return False
    return True

max_n = 10**6
print(f"Searching numbers up to {max_n} where all digits of n² are odd:")
count = 0
for n in range(1, max_n + 1):
    square = n * n
    if all_digits_odd(square):
        print(f"n = {n}, n² = {square}")
        count += 1

print(f"\nTotal numbers found: {count}")
```
