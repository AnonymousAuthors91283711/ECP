[write_program]
This problem asks for the greatest integer k such that there exists a primitive right triangle (a,b,c) with (a+b+c)^2/(a*b) = k. We'll enumerate primitive Pythagorean triples and compute this ratio to find the maximum value.

```python
import math

def generate_primitive_triples(max_perimeter):
    triples = []
    # Generate using Euclid's formula: a = m^2 - n^2, b = 2mn, c = m^2 + n^2
    # where m > n > 0, gcd(m,n) = 1, and m and n not both odd
    max_m = int(math.sqrt(max_perimeter)) + 1
    for m in range(2, max_m):
        for n in range(1, m):
            if (m - n) % 2 == 1 and math.gcd(m, n) == 1:
                a = m*m - n*n
                b = 2*m*n
                c = m*m + n*n
                perimeter = a + b + c
                if perimeter <= max_perimeter:
                    # Ensure a < b for uniqueness and to avoid duplicates
                    if a > b:
                        a, b = b, a
                    triples.append((a, b, c))
    return triples

def main():
    max_perimeter = 1000  # Adjust this if needed to find maximum
    triples = generate_primitive_triples(max_perimeter)
    max_k = 0
    
    for a, b, c in triples:
        perimeter = a + b + c
        k = (perimeter * perimeter) // (a * b)
        print(f"Triple ({a}, {b}, {c}): k = {k}")
        if k > max_k:
            max_k = k
    
    print(f"\nMaximum k found: {max_k}")

if __name__ == "__main__":
    main()
```
