[write_program]
This problem asks for the sum of (n³ + 3n² + 3n) from n=1 to 99. We can simplify the expression inside the summation first to make computation more efficient.

The expression n³ + 3n² + 3n can be rewritten as (n+1)³ - 1 using binomial expansion. This simplification allows us to compute the sum more efficiently as a telescoping series.

Here's a Python program that:
1. Computes the sum directly using the simplified expression
2. Verifies it by also computing the original expression
3. Outputs the result immediately

```python
def compute_sum():
    # Using simplified formula: sum_{n=1}^99 [(n+1)^3 - 1] = sum_{k=2}^100 [k^3] - 99
    # Sum of cubes formula: [n(n+1)/2]^2
    sum_cubes_100 = (100 * 101 // 2) ** 2
    sum_cubes_1 = 1
    simplified_sum = (sum_cubes_100 - sum_cubes_1) - 99
    
    # Verification using original expression
    original_sum = 0
    for n in range(1, 100):
        original_sum += n**3 + 3*n**2 + 3*n
    
    assert simplified_sum == original_sum
    print(simplified_sum)

compute_sum()
```

The program outputs the exact value of the sum immediately. The simplification makes the computation O(1) rather than O(n), while the verification step ensures correctness. The assertion guarantees both methods produce the same result.
