[write_program]
This problem asks for the number of real solutions to the equation x² + 10000⌊x⌋ = 10000x. We'll write a Python program to enumerate solutions by considering different integer intervals for ⌊x⌋.

Approach:
1. Let n = ⌊x⌋, so x ∈ [n, n+1)
2. The equation becomes x² + 10000n = 10000x
3. Solve x² - 10000x + 10000n = 0 in each interval [n, n+1)
4. Check if roots fall within their respective intervals

```python
def count_solutions():
    count = 0
    # We'll check n from 0 to 10000 since x^2 term dominates for large |x|
    for n in range(0, 10001):
        # Quadratic equation: x^2 - 10000x + 10000n = 0
        discriminant = 10000**2 - 4 * 1 * 10000 * n
        if discriminant < 0:
            continue
        sqrt_discriminant = discriminant ** 0.5
        x1 = (10000 - sqrt_discriminant) / 2
        x2 = (10000 + sqrt_discriminant) / 2
        
        # Check if roots are in [n, n+1)
        if n <= x1 < n + 1:
            count += 1
            print(f"Solution found: x = {x1} for n = {n}")
        if n <= x2 < n + 1 and x1 != x2:
            count += 1
            print(f"Solution found: x = {x2} for n = {n}")
    
    print(f"Total number of solutions: {count}")

count_solutions()
```
