[write_program]
This problem involves counting valid sequences of 5 base pairs where each pair consists of two distinct bases (H, M, N, T) and certain adjacent pairs are invalid. The invalid pairs are (H,M), (M,H), (N,T), and (T,N). We need to count all possible sequences of 5 such valid pairs.

We'll approach this by:
1. Defining the valid bases and invalid pairs
2. Generating all possible valid single pairs (strandChoices)
3. Calculating the Cartesian product of 5 such valid pairs
4. Counting all possible combinations

```python
from itertools import product

def main():
    bases = ['H', 'M', 'N', 'T']
    invalid_pairs = {('H', 'M'), ('M', 'H'), ('N', 'T'), ('T', 'N')}
    
    # Generate all valid single pairs
    strand_choices = []
    for b1 in bases:
        for b2 in bases:
            if b1 != b2 and (b1, b2) not in invalid_pairs:
                strand_choices.append((b1, b2))
    
    # Count all sequences of 5 valid pairs
    count = 0
    for seq in product(strand_choices, repeat=5):
        count += 1
    
    print(f"Total valid sequences: {count}")

if __name__ == "__main__":
    main()
```
