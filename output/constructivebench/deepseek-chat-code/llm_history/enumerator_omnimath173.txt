[write_program]
This problem involves finding an integer value k such that a quartic polynomial has roots with a specific product condition. We'll enumerate possible k values and check the root product conditions.

The polynomial is: p(x) = x⁴ - 18x³ + kx² + 200x - 1984
We need to find k where at least one pair of roots (r_i, r_j) satisfies r_i * r_j = -32.

Approach:
1. Use Vieta's formulas to relate the roots to coefficients
2. For each possible k, check if any root pair product equals -32
3. Since exact computation is complex, we'll use numerical approximation with a tolerance

```python
import numpy as np
from itertools import combinations

def find_k():
    # Search range for k based on reasonable bounds
    for k in range(-100, 101):
        # Coefficients of the polynomial: x^4 -18x^3 + kx^2 + 200x -1984
        coeffs = [1, -18, k, 200, -1984]
        
        # Find roots numerically
        roots = np.roots(coeffs)
        
        # Check all pairs of roots for product ≈ -32
        found = False
        for r1, r2 in combinations(roots, 2):
            if abs(r1 * r2 + 32) < 1e-6:
                print(f"Found k = {k} with root pair product ≈ -32")
                found = True
                break
        
        if found:
            # Verify by checking Vieta's formulas
            # Sum of roots should be 18 (from -b/a)
            sum_roots = sum(roots)
            # Sum of product of roots two at a time should be k (from c/a)
            sum_pair_products = sum(r1*r2 for r1, r2 in combinations(roots, 2))
            
            if abs(sum_roots - 18) < 1e-6 and abs(sum_pair_products - k) < 1e-6:
                print(f"Verified k = {k} satisfies Vieta's conditions")
                return k
    
    print("No valid k found in search range")
    return None

if __name__ == "__main__":
    find_k()
```
