[write_program]
The problem asks for the minimal number of digits in the decimal representation of the absolute value of the product (n-1001)(n-2001)(n-2002)(n-3001)(n-3002)(n-3003) when the product is positive. We need to find the smallest possible digit count across all integer n where the product is positive.

We'll approach this by:
1. Identifying the intervals where the product is positive (roots at 1001,2001,2002,3001,3002,3003)
2. Checking values of n in these intervals to find minimal digit counts
3. Focusing on values near the roots where the product might be minimized

```python
def compute_product(n):
    return abs((n - 1001) * (n - 2001) * (n - 2002) * (n - 3001) * (n - 3002) * (n - 3003))

def digit_count(m):
    return len(str(m))

# Positive intervals: (-∞,1001), (2001,2002), (3003,∞)
# We'll check values around these regions

min_digits = float('inf')

# Check n < 1001
for n in range(1000, 990, -1):
    m = compute_product(n)
    d = digit_count(m)
    if d < min_digits:
        min_digits = d
        print(f"n={n}, digits={d}")

# Check 2001 < n < 2002 (only n=2001.5)
n = 2001.5
m = compute_product(n)
d = digit_count(int(m))
if d < min_digits:
    min_digits = d
    print(f"n={n}, digits={d}")

# Check n > 3003
for n in range(3004, 3014):
    m = compute_product(n)
    d = digit_count(m)
    if d < min_digits:
        min_digits = d
        print(f"n={n}, digits={d}")

print(f"Minimal digit count: {min_digits}")
```
