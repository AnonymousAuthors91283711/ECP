[write_program]
The problem asks for the count of numbers `k` between 1 and 2000 (inclusive) that are coprime with 2001 (i.e., gcd(k, 2001) = 1). This is equivalent to Euler's totient function φ(2001) but restricted to numbers ≤ 2000.

To solve this efficiently:
1. Factorize 2001 = 3 × 23 × 29
2. The count is φ(2001) = (3-1)(23-1)(29-1) = 2×22×28 = 1232
3. Since 2000 < 2001, all numbers coprime with 2001 are ≤ 2000, so the answer is 1232.

Here's a Python program that verifies this by enumeration:

```python
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

count = 0
for k in range(1, 2001):
    if gcd(k, 2001) == 1:
        count += 1
print(count)
```

The program counts numbers coprime with 2001 by checking each number from 1 to 2000. It outputs the final count, which matches our calculated totient value.
