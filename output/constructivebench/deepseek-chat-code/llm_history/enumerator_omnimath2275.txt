[write_program]
This problem involves finding numbers between 1 and 1000 that can be expressed as sums of distinct powers of 3. We need to enumerate all such numbers in this range. The key observation is that this is equivalent to counting numbers whose ternary (base-3) representation contains only 0s and 1s (no 2s), since each digit position represents whether a particular power of 3 is included in the sum.

Here's a Python program that enumerates these numbers by:
1. Generating all numbers up to 1000
2. Checking their ternary representation for any digit equal to 2
3. Collecting numbers that pass this check

```python
def is_sum_of_distinct_powers_of_3(n):
    while n > 0:
        if n % 3 == 2:
            return False
        n = n // 3
    return True

count = 0
for n in range(1, 1001):
    if is_sum_of_distinct_powers_of_3(n):
        print(n)
        count += 1

print(f"Total count: {count}")
```
