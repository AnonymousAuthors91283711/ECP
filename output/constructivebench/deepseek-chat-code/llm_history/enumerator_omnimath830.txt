[write_program]
This problem asks for the number of subsets T of the power set of a 3-element set (Fin 3) that are closed under both union and intersection. We'll enumerate all possible subsets of P(Fin 3) and check which ones satisfy the closure properties.

The approach is:
1. Generate all subsets of P(Fin 3) (which has 8 elements, so 2^8 = 256 possible subsets)
2. For each subset, check if it's closed under union and intersection
3. Count how many subsets satisfy this condition

```python
from itertools import combinations

def main():
    # The 8 subsets of a 3-element set {0,1,2}
    elements = [frozenset(s) for s in [
        set(), {0}, {1}, {2}, {0,1}, {0,2}, {1,2}, {0,1,2}
    ]]
    
    count = 0
    
    # Check all possible subsets of the power set
    for k in range(0, 9):  # subset sizes from 0 to 8
        for candidate in combinations(elements, k):
            T = set(candidate)
            closed = True
            
            # Check closure under union and intersection
            for u in T:
                for v in T:
                    if (u | v) not in T or (u & v) not in T:
                        closed = False
                        break
                if not closed:
                    break
            
            if closed:
                count += 1
                print(f"Found lattice #{count}: {sorted(sorted(s) for s in T)}")
    
    print(f"Total number of lattices: {count}")

if __name__ == "__main__":
    main()
```
