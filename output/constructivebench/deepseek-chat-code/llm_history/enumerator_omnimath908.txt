[write_program]
This problem asks for the number of 5-tuples (a₁,a₂,a₃,a₄,a₅) where each a� ≤ 7 and the sum of 2^{aᵢ} is divisible by 5. We'll enumerate all possible combinations where each aᵢ ranges from 0 to 7, count those satisfying the divisibility condition, and output the count.

The approach:
1. Generate all possible 5-tuples with elements 0-7
2. For each tuple, compute the sum of 2^a�
3. Check if the sum is divisible by 5
4. Count all valid tuples

We'll optimize by:
- Using itertools.product to generate tuples
- Precomputing powers of 2
- Using modulo operations for efficiency

```python
import itertools

def main():
    count = 0
    # Precompute 2^a mod 5 for a in 0..7
    pow2_mod5 = [1, 2, 4, 3, 1, 2, 4, 3]  # 2^0 mod5=1, 2^1=2, 2^2=4, 2^3=3, then cycles
    
    for t in itertools.product(range(8), repeat=5):
        total_mod = 0
        for a in t:
            total_mod += pow2_mod5[a]
        if total_mod % 5 == 0:
            count += 1
    print(count)

if __name__ == "__main__":
    main()
```
