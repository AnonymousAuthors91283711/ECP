[write_program]
The problem asks to find all prime numbers \( p \) such that there exists an integer \( k \) satisfying \( k^3 = p^2 - p + 1 \). We need to enumerate primes \( p \) and check if \( p^2 - p + 1 \) is a perfect cube.

Here's a Python program to solve this:

```python
import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def is_perfect_cube(n):
    k = round(n ** (1/3))
    return k * k * k == n

max_p = 1000  # Search up to this prime
print(f"Searching for primes p ≤ {max_p} where p² - p + 1 is a perfect cube:")
for p in range(2, max_p + 1):
    if is_prime(p):
        cubic_form = p * p - p + 1
        if is_perfect_cube(cubic_form):
            k = round(cubic_form ** (1/3))
            print(f"Found p = {p} with k = {k} (since {k}³ = {cubic_form} = {p}² - {p} + 1)")
```
