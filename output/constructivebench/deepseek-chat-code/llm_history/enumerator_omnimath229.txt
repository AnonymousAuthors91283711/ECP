[write_program]
This problem involves finding all real-valued functions \( f: \mathbb{R} \to \mathbb{R} \) that satisfy a given functional equation. The equation is quadratic in nature and involves evaluations of \( f \) at different linear combinations of \( x \) and \( y \).

To approach this, we'll:
1. Test simple polynomial forms (constant, linear, quadratic)
2. Verify if they satisfy the equation for random test cases
3. Print candidates that pass the verification

We'll use small rational test points to avoid floating-point inaccuracies.

```python
def verify(f, x, y):
    lhs = (f(x) + x*y) * f(x - 3*y) + (f(y) + x*y) * f(3*x - y)
    rhs = f(x + y)**2
    return abs(lhs - rhs) < 1e-9

def test_candidate(f):
    # Test several rational points
    test_cases = [(1,0), (0,1), (1,1), (2,1), (1,2), (3,2), (2,3)]
    return all(verify(f, x, y) for x, y in test_cases)

# Test constant function f(x) = c
for c in [0, 1, -1, 2, -2]:
    if test_candidate(lambda x: c):
        print(f"Constant function f(x) = {c}")

# Test linear function f(x) = a*x + b
for a in [-2, -1, 0, 1, 2]:
    for b in [-2, -1, 0, 1, 2]:
        f = lambda x, a=a, b=b: a*x + b
        if test_candidate(f):
            print(f"Linear function f(x) = {a}x + {b}")

# Test quadratic function f(x) = a*x^2 + b*x + c
for a in [-1, 0, 1]:
    for b in [-1, 0, 1]:
        for c in [-1, 0, 1]:
            f = lambda x, a=a, b=b, c=c: a*x*x + b*x + c
            if test_candidate(f):
                print(f"Quadratic function f(x) = {a}x^2 + {b}x + {c}")
```
