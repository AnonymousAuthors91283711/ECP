[write_program]
This problem asks whether there exists a set X of integers such that for every integer n, there is exactly one pair (x,y) in X×X satisfying x + 2y = n. We'll write a program to search for such sets X by testing small candidate sets.

The approach:
1. Test all subsets of integers in a bounded range [-k,k]
2. For each subset X, check if it satisfies the condition that for every n in some test range, there's exactly one solution (x,y) in X×X to x + 2y = n
3. Print any promising candidates found

```python
def test_set(X, test_range):
    """Check if set X satisfies the condition for all n in test_range"""
    for n in test_range:
        solutions = [(x, y) for x in X for y in X if x + 2*y == n]
        if len(solutions) != 1:
            return False
    return True

def search_sets(max_k=3, test_range=range(-10, 11)):
    """Search for valid sets X containing integers from -max_k to max_k"""
    from itertools import combinations
    
    numbers = list(range(-max_k, max_k+1))
    found = False
    
    # Try all possible non-empty subsets of increasing size
    for size in range(1, len(numbers)+1):
        for subset in combinations(numbers, size):
            X = set(subset)
            if test_set(X, test_range):
                print(f"Found candidate set: {sorted(X)}")
                found = True
    
    if not found:
        print(f"No valid sets found in range [-{max_k}, {max_k}]")

# Search with small parameters
search_sets(max_k=3)
```
