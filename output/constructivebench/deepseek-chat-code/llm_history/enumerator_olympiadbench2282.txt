[write_program]
This problem involves finding real numbers m that satisfy either of two systems of equations involving n. We'll write a Python program to search for such m values by testing small integer n values and checking the conditions.

The approach:
1. Iterate over possible integer n values within a reasonable range
2. For each n, compute m from both equation systems
3. Check if m is real and satisfies the corresponding conditions
4. Print valid m values found

```python
import math

def is_close(a, b, tol=1e-9):
    return abs(a - b) < tol

def find_valid_m(max_n=20):
    valid_ms = set()
    for n in range(-max_n, max_n + 1):
        # First system: 3n² + 1 = m² and m² + 1 = 2(n+1)²
        try:
            m_squared = 3 * n**2 + 1
            if m_squared >= 0:
                m = math.sqrt(m_squared)
                # Check second equation
                if is_close(m_squared + 1, 2 * (n + 1)**2):
                    valid_ms.add(m)
                    print(f"Found m = {m} from n = {n} (first system)")
        except ValueError:
            pass
        
        # Second system: 3n² - 1 = m² and m² - 1 = 2(n+1)²
        try:
            m_squared = 3 * n**2 - 1
            if m_squared >= 0:
                m = math.sqrt(m_squared)
                # Check second equation
                if is_close(m_squared - 1, 2 * (n + 1)**2):
                    valid_ms.add(m)
                    print(f"Found m = {m} from n = {n} (second system)")
        except ValueError:
            pass
    
    print("\nAll distinct valid m values found:")
    for m in sorted(valid_ms):
        print(m)

if __name__ == "__main__":
    find_valid_m()
```
