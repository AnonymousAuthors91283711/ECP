[write_program]
This problem involves finding the sum of all positive integers n where 1/n can be expressed as an infinite repeating decimal with a specific pattern involving two distinct digits a and b in the decimal expansion. We'll write a Python program to enumerate such numbers n and compute their sum.

The key observation is that the given condition describes fractions with a repeating block of two digits (ab) after the decimal point. These correspond to denominators n that divide 99 (since 1/99 = 0.010101..., 1/99 = 0.020202..., etc.).

```python
def main():
    max_n = 100  # Reasonable upper bound for exploration
    valid_ns = []
    
    for n in range(1, max_n + 1):
        # Check if n divides 99 (since 99 is 10^2-1 for 2-digit repeating pattern)
        if 99 % n == 0:
            # Verify the decimal expansion condition
            # For n dividing 99, the decimal repeats every 2 digits
            # We need to ensure the digits alternate between two distinct values
            # This is always true for proper fractions with denominator dividing 99
            # (except n=1 which gives 1.000... and n=99 which gives 0.010101...)
            if n != 1 and n != 99:
                valid_ns.append(n)
    
    print("Valid n values found:", valid_ns)
    print("Sum of valid n values:", sum(valid_ns))

if __name__ == "__main__":
    main()
```

The program checks all numbers up to 100 that divide 99 (excluding 1 and 99), as these correspond to fractions with the required repeating decimal pattern. The valid denominators are the proper divisors of 99 (excluding 1 and 99 itself). The sum of these numbers gives the solution to the problem.
