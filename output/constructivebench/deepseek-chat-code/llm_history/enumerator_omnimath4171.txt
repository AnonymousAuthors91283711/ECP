[write_program]
This problem asks to find all integer pairs (x, y) that satisfy the equation (x^7 - 1)/(x - 1) = y^5 - 1. The left side is a geometric series sum, equivalent to 1 + x + x^2 + ... + x^6. We'll search for small integer solutions by enumerating possible x values and checking if the resulting y^5 makes sense.

```python
def compute_series(x):
    """Compute (x^7-1)/(x-1) = 1 + x + x^2 + ... + x^6"""
    if x == 1:
        return 7  # special case (limit as x->1)
    return (x**7 - 1) // (x - 1)

def is_perfect_power(n, k):
    """Check if n is a perfect k-th power"""
    if n < 0:
        return False
    low = 0
    high = n
    while low <= high:
        mid = (low + high) // 2
        power = mid**k
        if power == n:
            return True
        elif power < n:
            low = mid + 1
        else:
            high = mid - 1
    return False

def find_solutions():
    """Find integer solutions (x,y) to (x^7-1)/(x-1) = y^5 - 1"""
    solutions = []
    # Search reasonable range for x (since series grows rapidly)
    for x in range(-20, 21):
        try:
            series_val = compute_series(x)
            y5 = series_val + 1
            # Check if y5 is a perfect 5th power
            if is_perfect_power(y5, 5):
                y = int(round(y5 ** (1/5)))
                if y**5 == y5:
                    solutions.append((x, y))
                    print(f"Found solution: x={x}, y={y}")
        except ZeroDivisionError:
            pass
    return solutions

if __name__ == "__main__":
    print("Searching for solutions to (x^7-1)/(x-1) = y^5 - 1")
    sols = find_solutions()
    print("Search complete. Found solutions:")
    for x, y in sols:
        print(f"({x}, {y})")
```
