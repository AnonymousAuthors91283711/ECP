[write_program]
This problem involves finding natural numbers n where for every m coprime with n, there exists a permutation π of {0,...,n-1} such that π(π(k)) ≡ m*k mod n for all k. We'll write a Python program to enumerate such numbers n by checking the condition for small values.

The approach:
1. For each candidate n, check all m coprime with n
2. For each m, try to construct a permutation π satisfying the condition
3. If all m pass, include n in our answer set

```python
import math
from itertools import permutations

def is_solution(n):
    # Check all m coprime with n
    for m in range(1, n):
        if math.gcd(m, n) != 1:
            continue
        
        found = False
        # Try all possible permutations (this gets expensive quickly)
        for perm in permutations(range(n)):
            valid = True
            for k in range(n):
                if perm[perm[k]] % n != (m * k) % n:
                    valid = False
                    break
            if valid:
                found = True
                break
        
        if not found:
            return False
    return True

# Check small values of n
max_n = 8  # Keep small due to factorial complexity
print(f"Checking n up to {max_n}:")
for n in range(1, max_n + 1):
    if is_solution(n):
        print(n)
```

Note: The program uses brute-force permutation checking which becomes impractical for n > 8 due to factorial growth. For a more efficient solution, we'd need to implement a smarter construction of π based on number theory properties. The current implementation serves as a starting point for small cases.
