[write_program]
The problem asks for the last digit of the expression (23^2023 + 23^20 - 23^23). Since we're interested in the last digit, we can work modulo 10. The key observation is that the last digit of powers of 23 cycles in a predictable pattern. We'll first find the cycle of last digits for powers of 23, then compute each term modulo 10.

Here's a Python program that:
1. Finds the cycle of last digits for powers of 23
2. Computes each term using the cycle length
3. Sums them modulo 10

```python
def find_last_digit_cycle(base):
    """Find the cycle of last digits for powers of base modulo 10"""
    seen = {}
    cycle = []
    power = 1
    while True:
        last_digit = (base ** power) % 10
        if last_digit in seen:
            cycle_start = seen[last_digit]
            return cycle[cycle_start-1:]
        seen[last_digit] = power
        cycle.append(last_digit)
        power += 1

# Find the cycle for 23
cycle = find_last_digit_cycle(23)
cycle_length = len(cycle)
print(f"Cycle of last digits for powers of 23: {cycle} (length {cycle_length})")

def last_digit_of_power(n):
    """Compute last digit of 23^n using the cycle"""
    if n == 0:
        return 1
    return cycle[(n - 1) % cycle_length]

# Compute each term
term1 = last_digit_of_power(2023)
term2 = last_digit_of_power(20)
term3 = last_digit_of_power(23)

result = (term1 + term2 - term3) % 10
print(f"23^2023 mod 10 = {term1}")
print(f"23^20 mod 10 = {term2}")
print(f"23^23 mod 10 = {term3}")
print(f"Final result: {result}")
```
