[write_program]
This problem asks for the number of distinct complex numbers of the form (1+i)^n / sqrt(2)^n where n is a natural number. We'll write a Python program to enumerate these values and count the distinct ones.

The key observation is that (1+i)/sqrt(2) is a complex number on the unit circle with angle π/4, so raising it to the nth power gives a number with angle nπ/4. The distinct values will repeat every 8 powers due to the periodicity of trigonometric functions.

```python
import cmath

def main():
    distinct_values = set()
    max_n = 16  # More than enough to see the pattern
    sqrt2 = 2**0.5
    
    for n in range(0, max_n):
        z = (1 + 1j)**n / (sqrt2)**n
        # Round to avoid floating point precision issues
        rounded_z = complex(round(z.real, 10), round(z.imag, 10))
        if rounded_z not in distinct_values:
            print(f"n={n}: {rounded_z}")
            distinct_values.add(rounded_z)
    
    print(f"\nTotal distinct values found: {len(distinct_values)}")

if __name__ == "__main__":
    main()
```
