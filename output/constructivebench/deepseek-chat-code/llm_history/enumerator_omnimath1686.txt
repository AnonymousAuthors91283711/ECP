[write_program]
The problem involves finding the maximum value of a rational expression involving roots of a quartic polynomial, where all roots lie between 1/2 and 2. We'll approach this by:

1. Considering symmetric cases where roots are equal or have simple patterns
2. Enumerating possible root combinations within the given range
3. Calculating the expression for each combination
4. Tracking the maximum value found

We'll use small step sizes for enumeration to balance between precision and computation time.

```python
import itertools

def main():
    max_value = -1
    best_roots = None
    
    # Generate possible root combinations in [0.5, 2.0] with step 0.1
    step = 0.1
    roots_range = [0.5 + i*step for i in range(16)]  # 0.5 to 2.0 inclusive
    
    # Check all 4-element combinations (with possible duplicates)
    for x1, x2, x3, x4 in itertools.product(roots_range, repeat=4):
        # Calculate the expression value
        numerator = (x1 + x2) * (x1 + x3) * x4
        denominator = (x4 + x2) * (x4 + x3) * x1
        if denominator == 0:
            continue  # skip division by zero
        value = numerator / denominator
        
        # Update maximum
        if value > max_value:
            max_value = value
            best_roots = (x1, x2, x3, x4)
            print(f"New max: {max_value:.4f} with roots {best_roots}")
    
    print(f"\nFinal maximum value found: {max_value:.6f}")

if __name__ == "__main__":
    main()
```
