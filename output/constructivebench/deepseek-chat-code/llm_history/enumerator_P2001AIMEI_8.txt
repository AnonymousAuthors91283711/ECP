[write_program]
The problem asks for the largest positive integer N such that when N is written in base 7 and interpreted as a base 10 number, it equals twice N. We'll write a Python program to search for such numbers by checking numbers in descending order until we find the largest valid one.

The approach:
1. Convert each candidate number N to base 7 digits
2. Interpret those digits as a base 10 number
3. Check if this equals 2*N
4. Since we want the largest N, we'll search downward from a reasonable upper bound

```python
def digits_in_base(n, base):
    """Return digits of n in given base (most significant first)"""
    if n == 0:
        return [0]
    digits = []
    while n > 0:
        digits.append(n % base)
        n = n // base
    return digits[::-1]

def base7_to_base10_value(n):
    """Treat base7 digits of n as base10 number"""
    digits = digits_in_base(n, 7)
    value = 0
    for d in digits:
        value = value * 10 + d
    return value

# Search downward from upper bound (10^6 is safely above the answer)
upper_bound = 10**6
found = None
for N in range(upper_bound, 0, -1):
    if base7_to_base10_value(N) == 2 * N:
        print(f"Found valid N: {N}")
        found = N
        break

if found is not None:
    print(f"The largest such N is: {found}")
else:
    print("No valid N found in search range")
```
