[write_program]
The problem asks for the smallest 3-digit number abc (100 ≤ abc ≤ 999) such that there exists a digit d (0 ≤ d ≤ 9) where the 4-digit number N = abc*10 + d satisfies N² ≡ N mod 10000 (i.e., N is automorphic modulo 10000) and N's first digit is non-zero.

We'll write a Python program to:
1. Iterate through all 3-digit numbers abc from 100 to 999
2. For each abc, check all possible digits d (0-9)
3. Check if N = abc*10 + d satisfies N² ≡ N mod 10000 and N ≥ 1000
4. Print valid (abc, d) pairs and track the smallest abc

```python
def find_automorphic_numbers():
    min_abc = None
    for abc in range(100, 1000):
        for d in range(0, 10):
            N = abc * 10 + d
            if N < 1000:
                continue
            if (N * N) % 10000 == N % 10000:
                print(f"Found valid pair: abc={abc}, d={d}, N={N}")
                if min_abc is None or abc < min_abc:
                    min_abc = abc
    if min_abc is not None:
        print(f"Smallest abc found: {min_abc}")
    else:
        print("No valid numbers found")

find_automorphic_numbers()
```
