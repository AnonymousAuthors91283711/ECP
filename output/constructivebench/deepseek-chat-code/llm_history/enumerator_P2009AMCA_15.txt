[write_program]
This problem asks for the smallest natural number n such that the sum of (k+1)*i^(k+1) from k=0 to n-1 equals 48 + 49i, where i is the imaginary unit. We'll write a Python program to compute partial sums and find the smallest n that satisfies the equation.

The approach:
1. Compute the sum iteratively for increasing n values
2. Track when the sum matches the target (48 + 49i)
3. Stop at a reasonable threshold (we'll use 1000) to find the minimal solution

```python
def main():
    target_real = 48
    target_imag = 49
    threshold = 1000
    
    sum_real = 0.0
    sum_imag = 0.0
    
    for n in range(1, threshold + 1):
        # Compute i^(n) where i is imaginary unit
        # i^1 = i, i^2 = -1, i^3 = -i, i^4 = 1, then cycles
        mod = n % 4
        if mod == 1:
            term_real, term_imag = 0, n
        elif mod == 2:
            term_real, term_imag = -n, 0
        elif mod == 3:
            term_real, term_imag = 0, -n
        else:  # mod == 0
            term_real, term_imag = n, 0
        
        sum_real += term_real
        sum_imag += term_imag
        
        # Check if we've reached the target
        if abs(sum_real - target_real) < 1e-9 and abs(sum_imag - target_imag) < 1e-9:
            print(f"Found solution at n = {n}")
            return
    
    print("No solution found below threshold")

if __name__ == "__main__":
    main()
```
