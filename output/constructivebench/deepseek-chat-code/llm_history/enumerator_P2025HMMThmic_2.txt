[write_program]
The problem asks to find all real polynomials P such that there exists another real polynomial Q where cos(P(t)) = Q(cos(t)) for all real t. This is equivalent to finding polynomials P where cosâˆ˜P can be expressed as a polynomial in cos.

Key observations:
1. The right side Q(cos(t)) must be bounded since cosine is bounded
2. The left side cos(P(t)) must also be bounded, which implies P must be constant
3. For constant P, Q can be chosen as the constant polynomial with value cos(P)

Thus, the only solutions are constant polynomials P. We'll enumerate constant polynomials up to a small degree threshold to verify this conjecture.

```python
def is_possible(P):
    """Check if P is constant by evaluating at different points."""
    # Sample points to test if P is constant
    test_points = [0, 1, 2, 3.14]
    values = [P(x) for x in test_points]
    return all(abs(v - values[0]) < 1e-9 for v in values)

def enumerate_polynomials(max_degree=2, max_coeff=2):
    """Enumerate polynomials up to given degree and coefficients."""
    from itertools import product
    from numpy.polynomial import Polynomial

    print("Checking polynomials up to degree", max_degree, "with coefficients up to", max_coeff)
    print("Format: Polynomial coefficients [a0, a1, ...] where a0 + a1*x + ...")
    
    for degree in range(max_degree + 1):
        for coeffs in product(range(-max_coeff, max_coeff + 1), repeat=degree + 1):
            if all(c == 0 for c in coeffs):  # Skip zero polynomial
                continue
            P = Polynomial(coeffs)
            if is_possible(P):
                print("Possible solution:", coeffs)

if __name__ == "__main__":
    enumerate_polynomials()
    print("Only constant polynomials satisfy the condition")
```
