[write_program]
This problem asks for the number of integers m between 1 and 49 such that there exists some natural number n where m divides n^(n+1) + 1. We'll write a Python program to enumerate all such m values by checking small n values (since if such an n exists, it's likely to be small).

The approach:
1. For each m from 1 to 49, check if there exists an n where n^(n+1) â‰¡ -1 mod m
2. For each m, test n values up to a reasonable limit (we'll use 100)
3. Print each m that satisfies the condition for some n
4. Finally, count and print the total number of such m values

```python
def compute():
    count = 0
    for m in range(1, 50):
        found = False
        # We test n up to 100 - if no solution found by then, unlikely to exist
        for n in range(1, 101):
            if pow(n, n+1, m) == (m - 1) % m:
                print(f"Found m = {m} with n = {n}")
                found = True
                break
        if found:
            count += 1
    print(f"Total count: {count}")

compute()
```
