[write_program]
The problem involves counting pairs of divisors of 2010² where one is a perfect square and the other is not. We need to find the ratio of favorable pairs to total pairs in reduced form m/n where m+n=97.

Here's a Python program to:
1. Compute all divisors of 2010²
2. Count square and non-square divisors
3. Calculate total pairs and favorable pairs
4. Find the reduced fraction and verify m+n=97

```python
import math
from math import gcd
from itertools import combinations

def is_square(n):
    root = int(math.isqrt(n))
    return root * root == n

def get_divisors(n):
    divisors = set()
    for i in range(1, int(math.isqrt(n)) + 1):
        if n % i == 0:
            divisors.add(i)
            divisors.add(n // i)
    return sorted(divisors)

def main():
    n = 2010 ** 2
    divisors = get_divisors(n)
    
    square_divs = [d for d in divisors if is_square(d)]
    non_square_divs = [d for d in divisors if not is_square(d)]
    
    total_pairs = math.comb(len(divisors), 2)
    favorable_pairs = len(square_divs) * len(non_square_divs)
    
    # Simplify the fraction favorable_pairs/total_pairs
    common_divisor = gcd(favorable_pairs, total_pairs)
    m = favorable_pairs // common_divisor
    n = total_pairs // common_divisor
    
    print(f"Square divisors count: {len(square_divs)}")
    print(f"Non-square divisors count: {len(non_square_divs)}")
    print(f"Total pairs: {total_pairs}")
    print(f"Favorable pairs: {favorable_pairs}")
    print(f"Simplified fraction: {m}/{n}")
    print(f"m + n = {m + n}")

if __name__ == "__main__":
    main()
```
