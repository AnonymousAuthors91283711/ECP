[write_program]
This problem involves finding the sum of absolute values of roots of a cubic polynomial given its coefficients. We'll write a Python program to enumerate possible roots (a, b, c) that satisfy the polynomial equation x³ - 2011x + m = (x-a)(x-b)(x-c), then compute |a| + |b| + |c| for each valid combination.

The key observations are:
1. From Vieta's formulas: a + b + c = 0, ab + ac + bc = -2011, abc = -m
2. We can limit our search to positive roots since negative roots would just change signs
3. The roots must be integers since the problem is in ℤ

```python
def find_roots():
    max_root = int((2011 * 3)**0.5) + 2  # Rough upper bound based on ab+ac+bc
    results = []
    
    # Enumerate possible positive roots a <= b <= c
    for a in range(1, max_root + 1):
        for b in range(a, (2011 // a) + 2):
            # Calculate c from a + b + c = 0
            c = -a - b
            # Check if ab + ac + bc = -2011
            if a*b + a*c + b*c == -2011:
                m = -a * b * c
                sum_abs = abs(a) + abs(b) + abs(c)
                print(f"Roots: ({a}, {b}, {c}), m = {m}, |a|+|b|+|c| = {sum_abs}")
                results.append((m, sum_abs))
    
    # Find the minimal sum for each m (though there's likely only one solution)
    unique_results = {}
    for m, s in results:
        if m not in unique_results or s < unique_results[m]:
            unique_results[m] = s
    
    print("\nMinimal sums for each m:")
    for m in sorted(unique_results):
        print(f"m = {m}: minimal sum = {unique_results[m]}")

find_roots()
```
