[write_program]
This problem asks for the number of quadruples (a, b, c, d) of positive integers where a < b < c < d, satisfying:
1. a*c + a*d + b*c + b*d = 2023
2. a + b + c + d = 296

We can simplify the first equation: a*c + a*d + b*c + b*d = (a+b)(c+d) = 2023
The second equation gives us a + b + c + d = 296

Let's set x = a + b and y = c + d, then we have:
x * y = 2023
x + y = 296

We'll enumerate all factor pairs of 2023 (which factors as 7 × 17 × 17) that satisfy x + y = 296 and x < y (since a < b < c < d implies x = a+b < c+d = y).

```python
def solve():
    # Factorize 2023 and generate all factor pairs (x,y) where x*y=2023 and x<y
    factors = []
    n = 2023
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            factors.append((i, n // i))
    
    # Check which pairs satisfy x + y = 296
    valid_pairs = []
    for x, y in factors:
        if x + y == 296:
            valid_pairs.append((x, y))
    
    count = 0
    
    for x, y in valid_pairs:
        # Now find all a,b where a < b and a + b = x
        # And all c,d where c < d and c + d = y
        # Then count combinations where b < c
        
        # Possible (a,b) pairs where a < b and a + b = x
        # a can range from 1 to floor((x-1)/2)
        ab_pairs = []
        for a in range(1, (x) // 2 + 1):
            b = x - a
            if a < b:
                ab_pairs.append((a, b))
        
        # Possible (c,d) pairs where c < d and c + d = y
        # c can range from 1 to floor((y-1)/2)
        cd_pairs = []
        for c in range(1, (y) // 2 + 1):
            d = y - c
            if c < d:
                cd_pairs.append((c, d))
        
        # Count combinations where b < c
        for a, b in ab_pairs:
            for c, d in cd_pairs:
                if b < c:
                    count += 1
                    # Uncomment to see actual quadruples:
                    # print(f"Found solution: a={a}, b={b}, c={c}, d={d}")
    
    print(f"Total number of valid quadruples: {count}")

solve()
```
