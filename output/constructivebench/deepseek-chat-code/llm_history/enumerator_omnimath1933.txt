[write_program]
This problem involves counting the number of ways to make change for an amount `n` using coins (1¢, 10¢, 25¢, 100¢) in two scenarios:
1. P(n): All possible combinations
2. B(n): Combinations that include at least one 100¢ coin

We need to find the limit of P(n)/B(n) as n approaches infinity. The solution involves enumerating these counts for increasing n values to observe the trend.

```python
def count_change(n, require_dollar=False):
    """Count ways to make n cents using 1¢, 10¢, 25¢, 100¢ coins.
    If require_dollar=True, must include at least one 100¢ coin."""
    count = 0
    max_dollars = n // 100
    for d in range(0 if not require_dollar else 1, max_dollars + 1):
        remaining = n - 100 * d
        max_quarters = remaining // 25
        for q in range(0, max_quarters + 1):
            remaining2 = remaining - 25 * q
            max_dimes = remaining2 // 10
            for di in range(0, max_dimes + 1):
                remaining3 = remaining2 - 10 * di
                # The rest must be made with pennies
                count += 1
    return count

def main():
    print("n\tP(n)\tB(n)\tP(n)/B(n)")
    print("--------------------------------")
    for n in range(100, 1001, 100):  # Sample values from 100 to 1000
        P = count_change(n)
        B = count_change(n, require_dollar=True)
        ratio = P / B
        print(f"{n}\t{P}\t{B}\t{ratio:.6f}")

if __name__ == "__main__":
    main()
```
