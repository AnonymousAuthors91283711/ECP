[write_program]
This problem asks to find the unique natural number n between 2009 and 3009 whose sum of odd divisors equals 1024. We'll write a Python program to enumerate candidates and check this condition.

Key observations:
1. The sum of odd divisors of n equals the sum of divisors of the largest odd divisor of n (which is n divided by highest power of 2)
2. 1024 is a power of 2 (2^10), suggesting n's largest odd divisor might have simple divisor structure
3. We can optimize by first finding numbers whose largest odd divisor has divisor sum 1024

```python
def sum_of_odd_divisors(n):
    # Remove all factors of 2 to get the largest odd divisor
    while n % 2 == 0:
        n = n // 2
    # Now sum all divisors of the odd part
    if n == 1:
        return 1
    # Factorize the odd part
    factors = {}
    temp = n
    d = 3
    while d * d <= temp:
        while temp % d == 0:
            factors[d] = factors.get(d, 0) + 1
            temp = temp // d
        d += 2
    if temp > 1:
        factors[temp] = 1
    # Calculate sum of divisors from prime factorization
    total = 1
    for p, exp in factors.items():
        total *= (p**(exp + 1) - 1) // (p - 1)
    return total

def find_special_number():
    for n in range(2010, 3009):
        if sum_of_odd_divisors(n) == 1024:
            print(n)
    print("Search complete.")

find_special_number()
```
