[write_program]
The problem asks to count the number of cubic polynomials with integer coefficients (where coefficients are between -20 and 20) that have exactly one integer root m ≠ 2 where p(m) = p(2). We'll write a Python program to enumerate all such polynomials and count them.

Key observations:
1. The polynomial can be written as p(x) = x³ + a x² + b x + c
2. We need p(m) = p(2) ⇒ (m³ - 8) + a(m² - 4) + b(m - 2) = 0
3. Factor out (m-2): (m-2)(m² + 2m + 4 + a(m+2) + b) = 0
4. For exactly one solution m ≠ 2, the quadratic factor must have no integer roots or a double root at m=2

```python
def count_special_cubics():
    count = 0
    range_coeff = range(-20, 21)
    
    for a in range_coeff:
        for b in range_coeff:
            # For m ≠ 2 to be unique solution of p(m)=p(2)
            # The quadratic must have discriminant conditions
            # We'll check all possible m ≠ 2 that could satisfy p(m)=p(2)
            solutions = set()
            
            # Check possible integer m from -60 to 60 (sufficient range)
            for m in range(-60, 61):
                if m == 2:
                    continue
                # p(m) - p(2) = (m-2)(m² + 2m + 4 + a(m+2) + b)
                if m == 2:
                    continue
                # Check if the quadratic factor is zero
                quad = m*m + 2*m + 4 + a*(m + 2) + b
                if quad == 0:
                    solutions.add(m)
            
            # Exactly one solution m ≠ 2
            if len(solutions) == 1:
                count += 1
    
    print(f"Total count: {count}")

count_special_cubics()
```
