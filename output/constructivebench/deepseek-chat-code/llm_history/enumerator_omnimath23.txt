[write_program]
This problem asks for all real-valued functions f: ℤ×ℤ → [0,1] that satisfy the recurrence relation f(x,y) = (f(x-1,y) + f(x,y-1))/2 for all integers x,y. This is a discrete boundary value problem similar to harmonic functions.

We'll enumerate simple cases to identify patterns:
1. Constant functions
2. Linear combinations of x and y
3. Exponential solutions

The program will test small integer values and check the recurrence relation.

```python
def check_recurrence(f, x, y):
    """Check if f satisfies the recurrence relation at (x,y)"""
    left = f(x, y)
    right = (f(x-1, y) + f(x, y-1)) / 2
    return abs(left - right) < 1e-9

def test_function(f, max_xy=3):
    """Test if f satisfies the recurrence for all |x|,|y| <= max_xy"""
    for x in range(-max_xy, max_xy+1):
        for y in range(-max_xy, max_xy+1):
            if not check_recurrence(f, x, y):
                return False
    return True

# Test constant functions
print("Testing constant functions:")
for c in [0, 0.5, 1]:
    f = lambda x, y, c=c: c
    if test_function(f):
        print(f"Found solution: f(x,y) = {c}")

# Test linear functions (must be constant due to boundedness)
print("\nTesting linear functions:")
for a in [0, 0.1, -0.1]:
    for b in [0, 0.1, -0.1]:
        f = lambda x, y, a=a, b=b: a*x + b*y
        if test_function(f):
            print(f"Found solution: f(x,y) = {a}x + {b}y")

# Test exponential solutions (must be constant due to boundedness)
print("\nTesting exponential solutions:")
for r in [0.5, 1, 2]:
    f = lambda x, y, r=r: r**(x+y)
    if test_function(f):
        print(f"Found solution: f(x,y) = {r}^(x+y)")

print("\nConclusion: Only constant functions satisfy all conditions")
```
