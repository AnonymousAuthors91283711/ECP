[write_program]
This problem involves finding the minimal sum of a sequence of 2023 positive integers where each subsequent term equals the sum of absolute differences with all previous terms. To make it computationally feasible, we'll analyze smaller cases (n=1 to n=10) to identify a pattern.

The program will:
1. Handle smaller values of n (1-10) instead of 2023
2. For each n, try to find valid sequences and their sums
3. Track the minimal sum found for each n

```python
def find_min_sum(n_max=10):
    for n in range(1, n_max + 1):
        print(f"\nTesting n = {n}")
        min_sum = None
        
        # We'll try small starting values and build sequences
        # The pattern suggests a_i = 2^(i-1) might work
        for a1 in range(1, 5):  # Try small starting values
            seq = [a1]
            valid = True
            
            for k in range(1, n):
                next_term = sum(abs(seq[k] - x) for x in seq)
                # Check if next_term is positive (required by problem)
                if next_term <= 0:
                    valid = False
                    break
                seq.append(next_term)
                
                # Verify the recursive condition for previous terms
                for i in range(k):
                    calc = sum(abs(seq[i+1] - x) for x in seq[:i+1])
                    if seq[i+1] != calc:
                        valid = False
                        break
                if not valid:
                    break
            
            if valid:
                current_sum = sum(seq)
                print(f"Found valid sequence: {seq}, sum: {current_sum}")
                if min_sum is None or current_sum < min_sum:
                    min_sum = current_sum
        
        if min_sum is not None:
            print(f"Minimal sum for n={n}: {min_sum}")
        else:
            print(f"No valid sequence found for n={n}")

find_min_sum()
```
