[write_program]
This problem asks for the number of real roots of the cubic polynomial P(x) = x³ - x² - x + 2. We'll write a Python program to analyze the polynomial and count its real roots by examining its behavior and using calculus concepts.

The approach will:
1. Compute the derivative to find critical points
2. Evaluate the polynomial at critical points to determine local maxima/minima
3. Analyze the end behavior to count real roots
4. Output intermediate calculations before concluding with the final count

```python
def P(x):
    return x**3 - x**2 - x + 2

def P_prime(x):
    return 3*x**2 - 2*x - 1

# Find critical points by solving P'(x) = 0
critical_points = []
discriminant = (-2)**2 - 4*3*(-1)
if discriminant >= 0:
    x1 = (2 + discriminant**0.5)/(2*3)
    x2 = (2 - discriminant**0.5)/(2*3)
    critical_points = [x1, x2]

print("Critical points:", critical_points)

# Evaluate P at critical points
P_values = [P(x) for x in critical_points]
print("P values at critical points:", P_values)

# Check sign changes and behavior
test_points = [-10] + sorted(critical_points) + [10]
sign_changes = 0
prev_sign = P(test_points[0]) > 0

for x in test_points[1:]:
    current_sign = P(x) > 0
    if current_sign != prev_sign:
        sign_changes += 1
    prev_sign = current_sign

print("Number of real roots:", sign_changes)
```
