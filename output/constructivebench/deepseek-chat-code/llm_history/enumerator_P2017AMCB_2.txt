[write_program]
This problem involves finding a positive real-valued function of three variables (x,y,z) with specific domain constraints. We'll write a Python program to explore possible candidates by enumerating rational values within the given ranges and checking simple arithmetic combinations.

The program will:
1. Sample rational values for x, y, z within their specified ranges
2. Test simple arithmetic expressions (sum, product, ratios) of these variables
3. Print expressions that evaluate to positive numbers for all sampled values

```python
import itertools

def enumerate_expressions():
    # Sample rational values within specified ranges
    x_samples = [0.1, 0.5, 0.9]  # 0 < x < 1
    y_samples = [-0.9, -0.5, -0.1]  # -1 < y < 0
    z_samples = [1.1, 1.5, 1.9]  # 1 < z < 2
    
    # Generate all combinations of samples
    samples = itertools.product(x_samples, y_samples, z_samples)
    
    # Test various simple expressions
    expressions = [
        lambda x, y, z: x + y + z,
        lambda x, y, z: x * y * z,
        lambda x, y, z: (x + z) / (1 - y),
        lambda x, y, z: (x - y) * z,
        lambda x, y, z: (z - x) / (-y),
        lambda x, y, z: x * z - y,
        lambda x, y, z: (x + z) * (1 - y)
    ]
    
    for i, expr in enumerate(expressions):
        positive = True
        for x, y, z in samples:
            val = expr(x, y, z)
            if val <= 0:
                positive = False
                break
        
        if positive:
            print(f"Expression {i+1} is positive for all samples")
            # Print sample evaluation for verification
            for x, y, z in itertools.product(x_samples[:1], y_samples[:1], z_samples[:1]):
                print(f"  Sample eval at x={x}, y={y}, z={z}: {expr(x, y, z)}")

enumerate_expressions()
```
