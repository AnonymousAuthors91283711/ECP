[write_program]
This problem appears to be about finding a set of 100 distinct natural numbers between 1 and 25000 where all pairwise sums are unique (a Sidon set). The Lean theorem states such a set exists. We'll write a Python program to find such sets for smaller parameters first to understand the pattern.

The program will:
1. Use small sample parameters (n=5, M=20) for demonstration
2. Implement a backtracking approach to find Sidon sets
3. Print valid sets as they're found
4. For the full problem (n=100), we'd need a more sophisticated construction

```python
def find_sidon_sets(n, M):
    """Find all Sidon sets of size n within [1,M] where all pairwise sums are unique"""
    def backtrack(current, start):
        if len(current) == n:
            yield current.copy()
            return
        for x in range(start, M + 1):
            valid = True
            # Check all pairwise sums with existing elements
            for y in current:
                s = x + y
                # Check if this sum already exists
                for a in current:
                    if a >= x:
                        continue
                    if (a + y) == s:
                        valid = False
                        break
                if not valid:
                    break
            if valid:
                current.append(x)
                yield from backtrack(current, x + 1)
                current.pop()

    # Print parameters being used
    print(f"Searching for Sidon sets with n={n}, M={M}")
    count = 0
    for solution in backtrack([], 1):
        count += 1
        print(f"Found set #{count}: {solution}")
        if count >= 3:  # Limit output for demonstration
            print("... (truncated)")
            break

# Run with small parameters for demonstration
find_sidon_sets(5, 20)
```
