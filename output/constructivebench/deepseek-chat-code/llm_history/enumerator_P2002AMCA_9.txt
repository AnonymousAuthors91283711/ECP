[write_program]
The problem asks for the minimal number of groups (d) needed to partition 30 items with given constraints:
- Each item has value 8, 7, or 4
- Exactly 3 items have value 8
- Exactly 12 items have value 7
- The remaining 15 items have value 4
- The sum of values in any group must not exceed 144

We'll enumerate possible d values starting from 1, checking if a valid grouping exists for each d. The approach:
1. Calculate total sum (3*8 + 12*7 + 15*4 = 180)
2. For each d, check if we can partition the items into d groups with sums â‰¤ 144
3. The minimal d where this is possible is our answer

```python
def is_possible(d):
    # We have 3x8, 12x7, 15x4 to distribute into d groups with sum <=144 per group
    # The minimal d must satisfy ceil(total_sum / max_per_group) <= d
    # But we also have constraints on the large numbers
    
    # First check trivial lower bound
    total = 3*8 + 12*7 + 15*4
    if total > d * 144:
        return False
    
    # The 8s must be placed in separate groups (since 8*18=144)
    if d < 3:
        return False
    
    # Now try to distribute the remaining items
    # Each 8 takes up at most 144-8=136 capacity in its group
    # We'll try to place the 7s first, then 4s
    
    # Each 7 can go with at most floor(136/7)=19 other 7s, but we only have 12
    # So the 7s can be distributed among the 3 groups with 8s
    
    # The worst case would be putting as many 7s as possible with the 8s
    # Each 8 can take floor(136/7)=19 7s, but we only have 12 total
    # So all 7s can fit with the 8s
    
    # Then the 4s can be distributed freely since 144/4=36 and we have only 15
    return True

def find_min_d():
    for d in range(1, 10):  # We know answer must be <=9 from problem constraints
        if is_possible(d):
            print(f"Possible with d = {d}")
            print(f"Minimal d found: {d}")
            return
        else:
            print(f"Not possible with d = {d}")
    
    print("Checking higher values...")
    # The theoretical minimum is ceil(total/144)=2, but we need at least 3 for the 8s
    print("Minimal d found: 3")

find_min_d()
```
