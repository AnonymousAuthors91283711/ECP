[write_program]
This problem involves finding natural numbers n where for each k from 1 to 9, the fractional part of n/(10^k) is greater than n/(10^10). We'll write a Python program to enumerate such numbers up to a reasonable threshold to identify patterns.

The key observations:
1. We need to check numbers where the fractional part condition holds for all k from 1 to 9
2. The fractional part condition becomes stricter as k increases
3. We can limit our search to numbers less than 10^10 since n/(10^10) would be the smallest threshold

```python
def is_interesting(n):
    for k in range(1, 10):
        fractional_part = (n / (10 ** k)) % 1
        threshold = n / (10 ** 10)
        if fractional_part <= threshold:
            return False
    return True

def find_interesting_numbers(max_n=10**6):
    interesting_numbers = []
    for n in range(1, max_n + 1):
        if is_interesting(n):
            interesting_numbers.append(n)
            print(n)  # Stream partial results
    return interesting_numbers

if __name__ == "__main__":
    print("Searching for interesting numbers...")
    nums = find_interesting_numbers()
    print(f"Found {len(nums)} interesting numbers up to 1,000,000")
    if nums:
        print("Sample interesting numbers:", nums[:10])
```
