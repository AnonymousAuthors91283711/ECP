[write_program]
This problem involves finding the maximum number of pairs (x, y) that can be selected from the grid [0..100]×[0..100] such that:
1. All pairs are distinct (x ≠ y)
2. Each pair satisfies x ≥ y/2 + 7 and y ≥ x/2 + 7
3. All pairs are pairwise disjoint (no overlapping coordinates)

We'll write a Python program to enumerate possible solutions for smaller grid sizes first to identify the pattern, then scale up to 100.

```python
def max_pairs(max_val):
    # Enumerate all valid pairs (x,y) with x,y in 0..max_val, x≠y, and satisfying the inequalities
    valid_pairs = []
    for x in range(max_val + 1):
        for y in range(max_val + 1):
            if x != y and x >= y/2 + 7 and y >= x/2 + 7:
                valid_pairs.append((x, y))
    
    # Greedy algorithm to find maximal set of disjoint pairs
    # Sort by y to prioritize smaller y values first
    valid_pairs.sort(key=lambda p: p[1])
    selected = []
    used_x = set()
    used_y = set()
    
    for x, y in valid_pairs:
        if x not in used_x and y not in used_y:
            selected.append((x, y))
            used_x.add(x)
            used_y.add(y)
    
    return len(selected)

# Test for smaller values to observe pattern
for n in [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]:
    print(f"Max pairs for grid size {n}: {max_pairs(n)}")

# Final answer for grid size 100
print("Maximum pairs for grid size 100:", max_pairs(100))
```
