[write_program]
This problem asks for the maximum possible value of x₇₅ - x₁₅ given constraints on a non-decreasing sequence of 100 rational numbers with sum of absolute values 1 and total sum 0. We'll write a Python program to enumerate possible values for small cases and observe the pattern.

The key insight is that to maximize x₇₅ - x₁₅, we should have:
1. The first 15 terms as negative values (to satisfy ∑xᵢ = 0)
2. The last 25 terms as positive values
3. The middle 60 terms equal to 0 (to maximize the difference)

We'll implement this logic for small n and k values to observe the pattern.

```python
def calculate_max_difference(n, k1, k2):
    """Calculate maximum x_k2 - x_k1 for sequence of length n with given constraints."""
    # Optimal configuration: first k1 negative, last (n-k2) positive, middle zeros
    # All negative terms equal, all positive terms equal
    m = k1 + (n - k2)
    if m == 0:
        return 0
    # Each negative term is -a, each positive term is b
    # Constraint: k1*a = (n-k2)*b (from sum=0)
    # Constraint: k1*a + (n-k2)*b = 1 (from sum of absolute values=1)
    # Solving gives: a = (n-k2)/(2*k1*(n-k2)) = 1/(2*k1)
    # b = k1/(2*(n-k2)*(n-k2)) = 1/(2*(n-k2))
    a = 1 / (2 * k1)
    b = 1 / (2 * (n - k2))
    return b - (-a)

# Problem parameters
n = 100
k1 = 15
k2 = 75

# Calculate for the given problem
result = calculate_max_difference(n, k1, k2)
print(f"For n={n}, k1={k1}, k2={k2}, maximum difference is {result}")
print(f"Simplified form: {result.numerator}/{result.denominator}")
```
