[write_program]
This problem asks for the maximum number of ordered pairs (i,j) with i<j in a permutation of {1,...,n} such that π(i)*π(j) > i*j. We'll write a Python program to enumerate all permutations of small n values and count the valid pairs for each permutation, then find the maximum count.

```python
from itertools import permutations

def max_valid_pairs(n):
    max_count = 0
    numbers = list(range(1, n+1))
    for perm in permutations(numbers):
        count = 0
        for i in range(n):
            for j in range(i+1, n):
                if perm[i] * perm[j] > (i+1) * (j+1):
                    count += 1
        if count > max_count:
            max_count = count
            print(f"New max {max_count} found with permutation {perm}")
    print(f"Final maximum for n={n}: {max_count}")
    return max_count

# Test small values of n
for n in range(1, 6):
    print(f"\nTesting n = {n}")
    max_valid_pairs(n)
```

The program:
1. Generates all permutations of {1,...,n}
2. For each permutation, counts all pairs (i,j) with i<j where π(i)*π(j) > i*j
3. Tracks and prints the maximum count found
4. Tests values n from 1 to 5 (small enough to run quickly but revealing the pattern)

The output will show the progression of maximum counts found and the permutations achieving them, helping identify the pattern for the general solution.
