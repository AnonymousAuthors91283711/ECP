[write_program]
The problem asks for the smallest positive integer n such that for each k in {1,2,3,4}, there exists some m ≤ n where (m*123) mod 360 falls into the k-th quadrant (0-90°, 90-180°, 180-270°, 270-360° respectively). We need to find the minimal n that satisfies this condition for all four quadrants.

The approach is to:
1. Iterate through possible n values starting from 1
2. For each n, check all m ≤ n to see if all four quadrant conditions are satisfied
3. Stop when we find the smallest n that meets all conditions

```python
def main():
    # Check if for a given n, all four quadrants are covered by some m <= n
    def check_quadrants(n):
        quadrants = [False] * 4
        for m in range(1, n + 1):
            theta = (m * 123) % 360
            if 0 < theta <= 90:
                quadrants[0] = True
            elif 90 < theta <= 180:
                quadrants[1] = True
            elif 180 < theta <= 270:
                quadrants[2] = True
            elif 270 < theta < 360:
                quadrants[3] = True
            # Early exit if all quadrants are covered
            if all(quadrants):
                return True
        return all(quadrants)
    
    # Search for minimal n
    n = 1
    while True:
        if check_quadrants(n):
            print(f"Found minimal n: {n}")
            break
        n += 1
        # Print progress every 1000 iterations
        if n % 1000 == 0:
            print(f"Checked up to n = {n}")

if __name__ == "__main__":
    main()
```
