[write_program]
This problem involves finding all functions f: ℚ → ℤ that satisfy a certain functional equation. The equation states that for all rational x and integers a,b with b>0, f((f(x)+a)/b) = f((x+a)/b). 

To approach this, we'll enumerate simple candidate functions that might satisfy this condition, such as constant functions, floor/ceiling functions, and linear functions. We'll test them against small rational values to verify if they satisfy the condition.

```python
from fractions import Fraction

def test_function(f, x_samples=[Fraction(1,2), Fraction(3,4), Fraction(-1,2)], 
                 a_samples=[-1, 0, 1, 2], b_samples=[1, 2, 3]):
    """Test if function f satisfies the condition for sample values"""
    for x in x_samples:
        for a in a_samples:
            for b in b_samples:
                if b <= 0:
                    continue
                left = f((f(x) + a) / b)
                right = f((x + a) / b)
                if left != right:
                    return False
    return True

def enumerate_functions():
    # Constant functions
    for c in range(-2, 3):
        f = lambda x, c=c: c
        if test_function(f):
            print(f"Constant function: f(x) = {c}")

    # Floor function
    f = lambda x: int(x)
    if test_function(f):
        print("Floor function: f(x) = floor(x)")

    # Ceiling function
    f = lambda x: -int(-x)
    if test_function(f):
        print("Ceiling function: f(x) = ceil(x)")

    # Linear functions (f(x) = kx + c where kx + c is integer for all x in Q)
    # Only constant functions satisfy this
    # We already checked constant functions above

    # Other periodic functions
    # For example, fractional part but it wouldn't return integers
    # So we skip those

    print("Enumeration complete")

if __name__ == "__main__":
    enumerate_functions()
```
