[write_program]
The problem asks to find the smallest positive integer n such that (n+1)! + (n+2)! = n! * 440, and then compute the sum of its digits. We'll write a Python program to search for such n by simplifying the equation and testing values systematically.

```python
import math

def find_solution():
    # Simplify the equation: (n+1)! + (n+2)! = n! * 440
    # Divide both sides by n! to get: (n+1) + (n+1)(n+2) = 440
    # Which simplifies to: nÂ² + 4n - 437 = 0
    # We'll search for integer solutions both by solving the quadratic and by testing values
    
    # First try solving the quadratic equation
    discriminant = 16 + 4*437
    n1 = (-4 + discriminant**0.5)/2
    n2 = (-4 - discriminant**0.5)/2
    
    # Check if we have integer solutions
    for n in [int(n1), int(n2)]:
        if n > 0 and n*(n+4) == 437:
            print(f"Found solution: n = {n}")
            digit_sum = sum(int(d) for d in str(n))
            print(f"Sum of digits: {digit_sum}")
            return
    
    # If no exact solution found, search numerically
    for n in range(1, 20):
        lhs = math.factorial(n+1) + math.factorial(n+2)
        rhs = math.factorial(n) * 440
        if lhs == rhs:
            print(f"Found solution: n = {n}")
            digit_sum = sum(int(d) for d in str(n))
            print(f"Sum of digits: {digit_sum}")
            return
    
    print("No solution found in range")

find_solution()
```
