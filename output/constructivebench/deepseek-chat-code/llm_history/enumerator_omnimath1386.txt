[write_program]
This problem asks to compute the product of terms of the form (n³-1)/(n³+1) for n from 2 to 6. We'll write a Python program to compute this product exactly as a fraction, then simplify it to lowest terms.

The approach is:
1. Compute numerator and denominator separately
2. Factor each n³-1 and n³+1
3. Cancel common factors
4. Multiply remaining factors to get final fraction

```python
from fractions import Fraction
from math import prod

def factor_cubic_minus1(n):
    """Returns factors of n³-1 = (n-1)(n²+n+1)"""
    return (n-1, n*n + n + 1)

def factor_cubic_plus1(n):
    """Returns factors of n³+1 = (n+1)(n²-n+1)"""
    return (n+1, n*n - n + 1)

def compute_product(start, end):
    numerator_factors = []
    denominator_factors = []
    
    for n in range(start, end+1):
        a, b = factor_cubic_minus1(n)
        numerator_factors.extend([a, b])
        c, d = factor_cubic_plus1(n)
        denominator_factors.extend([c, d])
    
    # Compute product of all numerator and denominator factors
    num = prod(numerator_factors)
    den = prod(denominator_factors)
    
    # Simplify the fraction
    simplified = Fraction(num, den)
    return simplified

# Compute for n from 2 to 6
result = compute_product(2, 6)
print(f"The exact product is: {result}")
print(f"Decimal approximation: {float(result)}")
```
