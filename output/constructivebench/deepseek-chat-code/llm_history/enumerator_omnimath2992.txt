[write_program]
This problem involves finding the difference between the maximum and minimum possible sizes of the triple intersection of three sets with given sizes (dog, cat, turtle) within a universal set of size 'total'. The solution requires computing extremal intersection sizes.

We'll write a Python program that:
1. Takes small sample values for total, dog, cat, turtle
2. Computes all possible triple intersection sizes
3. Finds the maximum and minimum intersection sizes
4. Outputs the difference x - y

The key insight is that:
- Maximum intersection occurs when sets overlap maximally
- Minimum intersection occurs when sets overlap minimally

```python
def compute_intersection_bounds(total, dog, cat, turtle):
    # Calculate maximum possible intersection (x)
    max_intersect = min(dog, cat, turtle)
    
    # Calculate minimum possible intersection (y)
    sum_pairs = dog + cat + turtle
    min_intersect = max(0, sum_pairs - 2 * total)
    
    return max_intersect - min_intersect

# Sample parameters
sample_params = [
    (10, 5, 5, 5),   # Balanced case
    (10, 7, 4, 3),   # Uneven case
    (15, 10, 8, 6),  # Larger numbers
    (8, 4, 3, 2)     # Smaller numbers
]

for params in sample_params:
    total, dog, cat, turtle = params
    print(f"Parameters: total={total}, dog={dog}, cat={cat}, turtle={turtle}")
    difference = compute_intersection_bounds(total, dog, cat, turtle)
    print(f"Difference between max and min intersection: {difference}\n")
```
