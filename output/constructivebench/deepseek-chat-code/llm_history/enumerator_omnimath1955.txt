[write_program]
This problem asks for the smallest natural number `n` such that the fractional part of `(sqrt(n))^(1/4)` is strictly between 0 and 1/2015. We'll write a Python program to search for this minimal `n` by checking numbers in order and computing the fractional part condition.

The approach:
1. Iterate through possible integer values of `k` (the integer part of `(sqrt(n))^(1/4)`)
2. For each `k`, compute the range of `n` values that would make `k â‰¤ (sqrt(n))^(1/4) < k+1`
3. Within this range, find the smallest `n` where the fractional part is less than 1/2015
4. The first such `n` found will be our answer

```python
import math

def find_min_n():
    k = 1
    while True:
        # The range for n when k <= n^(1/8) < k+1
        lower_bound = (k ** 8)
        upper_bound = ((k + 1) ** 8)
        
        # We need fractional part (n^(1/8) - k) < 1/2015
        # So n^(1/8) < k + 1/2015
        # => n < (k + 1/2015)^8
        threshold = (k + 1/2015) ** 8
        
        # The minimal n would be ceil(k^8) if it's below threshold
        # Otherwise we need to find the first n in [lower_bound, threshold)
        candidate = math.ceil(lower_bound)
        if candidate < threshold:
            # Verify the fractional part condition
            fractional = (math.sqrt(candidate) ** 0.25) - k
            if 0 < fractional < 1/2015:
                print(f"Found candidate: {candidate}")
                return candidate
        
        # If no solution found for this k, try next k
        k += 1

if __name__ == "__main__":
    result = find_min_n()
    print(f"Minimal n: {result}")
```
