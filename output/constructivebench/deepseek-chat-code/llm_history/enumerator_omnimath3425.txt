[write_program]
The problem asks to compute the product of terms (1 + 1/n) for n from 2 to 9. We can observe that each term (1 + 1/n) simplifies to (n+1)/n. The product then telescopes, leaving only the numerator of the first term and denominator of the last term.

Here's a Python program to compute this product exactly as a fraction:

```python
from fractions import Fraction

def compute_product():
    product = Fraction(1)
    for n in range(2, 10):  # from 2 to 9 inclusive
        term = Fraction(n + 1, n)
        product *= term
    return product

result = compute_product()
print(f"The exact value is {result}")
print(f"Decimal approximation: {float(result)}")
```

The program uses Python's `fractions` module to maintain exact rational arithmetic. It computes the product of (1 + 1/n) for n from 2 to 9, which simplifies to (3/2)*(4/3)*(5/4)*...*(10/9) = 10/2 = 5. The output will show both the exact fraction and its decimal approximation.
