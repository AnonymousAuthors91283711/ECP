[write_program]
This problem asks for the fraction of numbers n in 1..2T (where T=9) where |n³-7n²+13n-6| is prime. We'll write a Python program to enumerate all n in 1..18, compute the polynomial value, check primality, and count the valid cases.

```python
def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True

T = 9
count = 0
total = 2 * T

for n in range(1, total + 1):
    val = abs(n**3 - 7 * n**2 + 13 * n - 6)
    if is_prime(val):
        print(f"n={n}: |{n}³-7*{n}²+13*{n}-6| = {val} is prime")
        count += 1

print(f"Total primes: {count}/{total}")
print(f"Fraction: {count}/{total} = {count/total}")
```
