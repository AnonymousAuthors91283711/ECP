[write_program]
This problem asks for the smallest natural number N where:
1. When you double N, the number of digits increases by exactly 1
2. There are exactly 2011 numbers â‰¤ N that satisfy this property

We'll write a Python program to enumerate numbers satisfying condition 1, count them, and find the threshold where the count reaches 2011.

```python
def count_digits(n):
    return len(str(n))

def is_valid(n):
    return n > 0 and count_digits(2 * n) == count_digits(n) + 1

def find_threshold():
    count = 0
    n = 1
    while True:
        if is_valid(n):
            count += 1
            if count == 2011:
                print(f"Found threshold: {n}")
                return
            # Print progress every 100 valid numbers
            if count % 100 == 0:
                print(f"Count: {count}, Current N: {n}")
        n += 1

find_threshold()
```

The program:
1. Defines helper functions to count digits and check the validity condition
2. Iterates through numbers starting from 1
3. For each valid number, increments the count
4. When count reaches 2011, prints the threshold number and exits
5. Shows progress every 100 valid numbers found

The validity condition checks that doubling the number increases its digit count by exactly 1, which occurs when the number is in ranges like 5-9, 50-99, 500-999, etc. The program will efficiently find the 2011th such number.
