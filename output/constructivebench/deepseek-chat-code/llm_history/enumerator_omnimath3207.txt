[write_program]
This problem involves finding the greatest lower bound L such that for all x in [0,1), the sum of 1/2^n over all positive integers n where floor(n*x) is even is at least L. We'll approach this by:

1. Considering specific rational values of x where patterns might emerge
2. Computing the sum for these x values to find candidate L values
3. Looking for the minimal sum across all x

The most interesting cases occur when x is a fraction with small denominator, as these produce periodic patterns in floor(n*x).

```python
from fractions import Fraction
from math import floor

def compute_sum(x, max_n=1000):
    """Compute the sum for a given x up to max_n terms"""
    total = 0.0
    for n in range(1, max_n + 1):
        if floor(n * x) % 2 == 0:
            total += 1.0 / (2 ** n)
    return total

def find_min_sum():
    """Find minimal sum across various x values"""
    candidates = []
    
    # Test rational x values with small denominators
    for denom in range(1, 10):
        for num in range(0, denom):
            x = Fraction(num, denom)
            s = compute_sum(float(x))
            candidates.append((float(x), s))
            print(f"x = {x}: sum = {s}")
    
    # Also test some irrational-looking values
    for x in [0.5, 0.61803398875, 0.70710678118, 0.78539816339]:
        s = compute_sum(x)
        candidates.append((x, s))
        print(f"x = {x}: sum = {s}")
    
    # Find the minimal sum
    min_sum = min(s for x, s in candidates)
    print(f"\nMinimum sum found: {min_sum}")

if __name__ == "__main__":
    find_min_sum()
```
