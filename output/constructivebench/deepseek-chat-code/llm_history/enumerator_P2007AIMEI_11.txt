[write_program]
The problem involves calculating the sum of a function b(p) for p from 1 to 2007, where b(p) is defined based on rounding the square root of p in a specific way. The task is to compute this sum modulo 1000.

We'll write a Python program to:
1. Implement the b(p) function exactly as defined
2. Calculate the sum from p=1 to 2007
3. Output the sum modulo 1000
4. Stream partial results for verification

The program will be efficient by:
- Using integer arithmetic where possible
- Avoiding floating-point inaccuracies by comparing squared values
- Calculating the sum incrementally

```python
import math

def b(p):
    if p == 0:
        return 0
    sqrt_p = math.sqrt(p)
    k = round(sqrt_p)
    diff = abs(k - sqrt_p)
    if diff < 0.5:
        return k
    elif k - sqrt_p < 0:
        return k + 1
    else:
        return k - 1

total = 0
for p in range(1, 2008):
    total += b(p)
    # Print partial sums every 100 steps for verification
    if p % 100 == 0:
        print(f"Partial sum at p={p}: {total % 1000}")

result = total % 1000
print(f"Final result: {result}")
```
