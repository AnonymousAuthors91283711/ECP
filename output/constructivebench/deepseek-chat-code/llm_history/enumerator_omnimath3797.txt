[write_program]
This problem asks for the smallest sum of digits of any number of the form 3n² + n + 1 where n is a natural number. We'll write a Python program to enumerate these sums for small values of n to find the minimal sum.

The approach:
1. Iterate n from 0 upwards
2. For each n, compute 3n² + n + 1
3. Calculate the sum of its digits
4. Track the minimal sum seen so far
5. Stop when we've checked enough values to be confident we've found the minimum

```python
def sum_digits(x):
    return sum(int(d) for d in str(x))

min_sum = float('inf')
max_n_to_check = 1000  # Large enough to find the minimal sum

for n in range(max_n_to_check + 1):
    num = 3 * n * n + n + 1
    current_sum = sum_digits(num)
    if current_sum < min_sum:
        min_sum = current_sum
        print(f"n={n}, sum={current_sum}")  # Stream partial results
    # Early exit if we find sum=1 (theoretical minimum)
    if min_sum == 1:
        break

print(f"\nMinimal sum found: {min_sum}")
```
