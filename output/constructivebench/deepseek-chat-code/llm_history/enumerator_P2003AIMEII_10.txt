[write_program]
The problem asks for the greatest integer s such that there exist positive integers a and b with:
1. a + b = s
2. a - b = 60
3. √a + √b = √k for some non-square integer k

We'll solve this by:
1. Deriving a relationship between a, b, and k
2. Enumerating possible values of s (which must be even since a-b=60 and a+b=s)
3. Checking the conditions for each s in descending order

```python
import math

def is_square(n):
    root = math.isqrt(n)
    return root * root == n

def find_max_s():
    # s must be even since a-b=60 and a+b=s implies a=(s+60)/2, b=(s-60)/2
    # Start from a reasonable upper bound and go downwards
    max_tested = 2000  # Arbitrary upper bound that's large enough
    for s in range(max_tested, 59, -2):
        a = (s + 60) // 2
        b = (s - 60) // 2
        if b <= 0:
            continue
        
        sqrt_sum = math.sqrt(a) + math.sqrt(b)
        k = round(sqrt_sum ** 2)
        
        # Check if sqrt(a) + sqrt(b) equals sqrt(k) exactly
        if math.isclose(sqrt_sum ** 2, k, rel_tol=1e-9):
            if not is_square(k):
                print(f"Found s = {s} with a = {a}, b = {b}, k = {k}")
                return s
    
    return None

if __name__ == "__main__":
    result = find_max_s()
    if result is not None:
        print(f"Maximum s found: {result}")
    else:
        print("No valid s found in the tested range")
```
