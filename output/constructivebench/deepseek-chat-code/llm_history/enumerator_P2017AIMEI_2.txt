[write_program]
This problem involves finding four natural numbers m, n, r, s that satisfy several congruence conditions, then computing their sum. We'll approach it by:

1. Finding all possible m values that satisfy the first set of congruences (702 ≡ r, 787 ≡ r, 855 ≡ r mod m)
2. For each valid m, compute r
3. Find all possible n values that satisfy the second set of congruences (412 ≡ s, 722 ≡ s, 815 ≡ s mod n)
4. For each valid n, compute s
5. Ensure s ≠ r and both are positive
6. Output valid combinations and their sums

```python
def find_m_values():
    # Find m values where (787-702) and (855-787) are divisible by m
    # So m must divide gcd(85, 68) = 17
    # Possible m values are divisors of 17 (1 and 17)
    # But r must be positive and m > r (since r is remainder)
    # For m=17:
    # 702 % 17 = 5, 787 % 17 = 5, 855 % 17 = 5 → valid with r=5
    # m=1 gives r=0 which violates hr
    return [(17, 5)]

def find_n_values():
    # Find n values where (722-412) and (815-722) are divisible by n
    # So n must divide gcd(310, 93) = 31
    # Possible n values are divisors of 31 (1 and 31)
    # s must be positive and n > s
    # For n=31:
    # 412 % 31 = 9, 722 % 31 = 9, 815 % 31 = 9 → valid with s=9
    # n=1 gives s=0 which violates hs
    return [(31, 9)]

def main():
    m_r_pairs = find_m_values()
    n_s_pairs = find_n_values()
    
    for m, r in m_r_pairs:
        for n, s in n_s_pairs:
            if s != r and s > 0 and r > 0:
                total = m + n + r + s
                print(f"Found solution: m={m}, n={n}, r={r}, s={s}")
                print(f"Sum: {total}")
                return  # Since we found the unique solution

if __name__ == "__main__":
    main()
```
