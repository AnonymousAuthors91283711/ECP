[write_program]
This problem involves calculating a sum of reciprocals of odd numbers based on floor functions of square roots. We'll write a Python program to compute this sum for n=100 terms (as given in the problem) and output the exact rational result.

The approach:
1. For each k from 0 to 99 (inclusive), compute floor(sqrt(k+1))
2. Calculate 2*floor + 1 to get the denominator
3. Sum the reciprocals of these denominators
4. Keep track as exact rational numbers to avoid floating-point approximations

```python
from fractions import Fraction
from math import isqrt

def compute_sum(n=100):
    total = Fraction(0)
    for k in range(n):
        m = isqrt(k + 1)  # floor(sqrt(k+1))
        denominator = 2 * m + 1
        term = Fraction(1, denominator)
        total += term
        # Print intermediate results every 10 steps for observation
        if (k + 1) % 10 == 0:
            print(f"After {k+1} terms: {total}")
    return total

if __name__ == "__main__":
    result = compute_sum()
    print("\nFinal exact result:")
    print(result)
```
