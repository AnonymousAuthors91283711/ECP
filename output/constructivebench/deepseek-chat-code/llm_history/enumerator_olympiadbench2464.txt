[write_program]
This problem involves counting the number of integer partitions of 1000 where each part is at least 2 and the product of the parts equals 1000. The Lean theorem suggests there are 31 such partitions. We'll write a Python program to verify this by enumerating all possible factorizations of 1000 with factors ≥2.

```python
def factorizations(n, min_factor=2):
    """Generate all factorizations of n with factors >= min_factor."""
    factorizations = []
    def _factorize(n, min_factor, current):
        if n == 1:
            if len(current) > 0:
                factorizations.append(current.copy())
            return
        for i in range(min_factor, int(n**0.5) + 1):
            if n % i == 0:
                current.append(i)
                _factorize(n // i, i, current)
                current.pop()
        if n >= min_factor:
            current.append(n)
            factorizations.append(current.copy())
            current.pop()
    _factorize(n, min_factor, [])
    return factorizations

def main():
    n = 1000
    min_factor = 2
    factorizations_list = factorizations(n, min_factor)
    
    # Print all factorizations
    for f in sorted(factorizations_list, key=lambda x: (len(x), x)):
        print(f)
    
    # Print the count
    print(f"\nTotal number of factorizations: {len(factorizations_list)}")

if __name__ == "__main__":
    main()
```

The program generates all factorizations of 1000 with factors ≥2, prints them sorted by length, and finally prints the total count. The output should match the 31 partitions listed in the Lean theorem. The factorization approach ensures we only consider valid partitions where the product equals 1000 and all parts are ≥2.
