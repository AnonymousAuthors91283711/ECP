[write_program]
This problem asks for the greatest difference `d` between two numbers `m` and `n` (with `m < n`) such that in the interval `[m, n)`, there are more multiples of 2021 than multiples of 2000. We'll write a Python program to find this maximal `d`.

The approach:
1. For each possible difference `d` in descending order, check all intervals of length `d`
2. Count multiples of 2021 and 2000 in each interval
3. Return the first (largest) `d` where some interval satisfies the condition

```python
def count_multiples(a, b, k):
    """Count numbers in [a,b) divisible by k"""
    return (b - 1) // k - (a - 1) // k

def find_max_d():
    max_d = 0
    # Check d in descending order from a reasonable upper bound
    for d in range(2021 * 2, 0, -1):
        found = False
        # Check intervals [m, m+d) for m up to 2021*2 to find a case
        for m in range(0, 2021 * 2):
            n = m + d
            count2021 = count_multiples(m, n, 2021)
            count2000 = count_multiples(m, n, 2000)
            if count2021 > count2000:
                print(f"Found d={d} with m={m}, n={n} (counts: 2021={count2021}, 2000={count2000})")
                return d  # Return immediately since we're checking in descending order
        # Optional: print progress for large searches
        if d % 100 == 0:
            print(f"Checked up to d={d}")
    return 0

if __name__ == "__main__":
    result = find_max_d()
    print(f"Maximal d satisfying the condition: {result}")
```
