[write_program]
This problem is about finding the minimal constant c for polynomial difference quotients of degree n. We'll write a Python program to enumerate possible values of c for small n by testing polynomials and integer points.

The approach:
1. For small n (1-5), generate monic polynomials with small coefficients
2. For each polynomial, compute difference quotients |f(a)-f(b)|/|a-b|
3. Track the minimal difference quotient across all polynomials
4. Output candidates for c as we find them

```python
import itertools
from fractions import Fraction
from math import gcd

def generate_polys(n, max_coeff=3):
    """Generate monic integer polynomials of degree n with coefficients in [-max_coeff, max_coeff]"""
    coeffs = itertools.product(range(-max_coeff, max_coeff+1), repeat=n)
    for c in coeffs:
        yield [1] + list(c)  # monic polynomial

def evaluate(poly, x):
    """Evaluate polynomial at integer x"""
    return sum(c * (x**i) for i, c in enumerate(poly))

def compute_min_diff_quotient(poly, max_ab=5):
    """Compute minimal |f(a)-f(b)|/|a-b| for a,b in [-max_ab, max_ab]"""
    min_val = None
    for a in range(-max_ab, max_ab+1):
        fa = evaluate(poly, a)
        for b in range(-max_ab, max_ab+1):
            if a == b:
                continue
            fb = evaluate(poly, b)
            if fa == fb:
                continue
            numerator = abs(fa - fb)
            denominator = abs(a - b)
            # Simplify fraction
            d = gcd(numerator, denominator)
            val = Fraction(numerator//d, denominator//d)
            if min_val is None or val < min_val:
                min_val = val
    return min_val

def main():
    max_n = 3  # Test up to degree 3 polynomials
    max_coeff = 2  # Coefficient range
    max_ab = 3  # Test points range
    
    for n in range(1, max_n+1):
        print(f"\nTesting degree n = {n}")
        current_min = None
        
        for poly in generate_polys(n, max_coeff):
            res = compute_min_diff_quotient(poly, max_ab)
            if res is None:
                continue
            if current_min is None or res < current_min:
                current_min = res
                print(f"New candidate for n={n}: c >= {res}")
        
        if current_min is not None:
            print(f"Final minimal c for n={n}: {current_min}")

if __name__ == "__main__":
    main()
```
