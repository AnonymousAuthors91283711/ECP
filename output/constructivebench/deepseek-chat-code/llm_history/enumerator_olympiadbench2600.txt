[write_program]
This problem asks for the number of permutations of the list ["Bobby", "Peter", "Greg", "Cindy", "Jan", "Marcia"] that satisfy certain ordering constraints. We'll enumerate all permutations and count those that meet the conditions.

The constraints are:
1. Greg appears before Peter
2. Peter appears before Bobby
3. Marcia appears before Jan
4. Jan appears before Cindy

We'll use itertools.permutations to generate all possible orderings and count those that satisfy all constraints.

```python
from itertools import permutations

def solve():
    names = ["Bobby", "Peter", "Greg", "Cindy", "Jan", "Marcia"]
    count = 0
    
    for perm in permutations(names):
        # Get indices of each required name
        try:
            g = perm.index("Greg")
            p = perm.index("Peter")
            b = perm.index("Bobby")
            m = perm.index("Marcia")
            j = perm.index("Jan")
            c = perm.index("Cindy")
        except ValueError:
            continue
            
        # Check all constraints
        if g < p < b and m < j < c:
            count += 1
            print(perm)  # Print valid permutations as they're found
    
    print(f"Total valid permutations: {count}")

if __name__ == "__main__":
    solve()
```
