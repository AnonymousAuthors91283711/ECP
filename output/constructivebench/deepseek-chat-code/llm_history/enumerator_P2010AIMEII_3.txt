[write_program]
This problem asks for the greatest integer n such that 2^n divides the product of (b-a) for all pairs (a,b) where 1 ≤ a ≤ 20 and a < b ≤ 20. We'll write a Python program to compute the exponent of 2 in the prime factorization of this product.

The approach is:
1. For each pair (a,b) where 1 ≤ a < b ≤ 20, compute b-a
2. For each such difference, count the exponent of 2 in its prime factorization
3. Sum all these exponents to get the total exponent of 2 in the product

```python
def count_twos_in_product():
    total = 0
    for a in range(1, 21):
        for b in range(a + 1, 21):
            diff = b - a
            # Count exponent of 2 in diff
            exponent = 0
            while diff % 2 == 0:
                exponent += 1
                diff //= 2
            total += exponent
    return total

print(count_twos_in_product())
```
