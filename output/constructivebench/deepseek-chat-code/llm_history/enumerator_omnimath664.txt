[write_program]
This problem involves finding the sum of the squares of distinct roots of a given 10th-degree polynomial. To approach this computationally, we'll:

1. Find all roots of the polynomial numerically (since exact roots are complex)
2. Filter for distinct roots (within numerical tolerance)
3. Compute the sum of their squares

We'll use numpy's polynomial root-finding capabilities and handle numerical precision carefully.

```python
import numpy as np
from numpy.polynomial import Polynomial

# Define the polynomial coefficients (note numpy uses opposite order)
coeffs = [4, -7, 5, -8, 12, -12, 12, -8, 5, -7, 4]
p = Polynomial(coeffs)

# Find all roots
roots = p.roots()

# Function to group numerically similar roots (within tolerance)
def group_roots(roots, tol=1e-8):
    unique_roots = []
    for r in roots:
        is_new = True
        for ur in unique_roots:
            if abs(r - ur) < tol:
                is_new = False
                break
        if is_new:
            unique_roots.append(r)
    return unique_roots

unique_roots = group_roots(roots)

# Compute sum of squares of distinct roots
sum_squares = sum(r**2 for r in unique_roots)

# Print intermediate results
print("Found roots:", roots)
print("Unique roots:", unique_roots)
print("Sum of squares:", sum_squares)
```
