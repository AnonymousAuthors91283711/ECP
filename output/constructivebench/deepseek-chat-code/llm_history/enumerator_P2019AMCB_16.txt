[write_program]
This problem involves finding a rational-valued sequence p(n) with specific initial conditions and a recurrence relation. We'll enumerate possible values for p(n) up to n=11 to identify the pattern and find p(0).

The recurrence relation states that for n<10 (except n=3,6,10), p(n) = (p(n+1)+p(n+2))/2. This suggests a linear relationship that can be solved by working backwards from known values.

```python
from fractions import Fraction

def solve_sequence():
    # Initialize known values
    p = [None] * 12
    p[0] = Fraction(1, 1)
    p[3] = Fraction(0, 1)
    p[6] = Fraction(0, 1)
    p[10] = Fraction(1, 1)
    p[11] = Fraction(0, 1)
    
    # Work backwards from n=10
    for n in range(9, -1, -1):
        if n in [3, 6, 10]:
            continue
        if p[n] is None:
            # p[n] = (p[n+1] + p[n+2])/2
            if p[n+1] is not None and p[n+2] is not None:
                p[n] = (p[n+1] + p[n+2]) / 2
    
    # Forward pass to fill any remaining values
    for n in range(11):
        if p[n] is None and n not in [3, 6, 10]:
            if p[n+1] is not None and p[n+2] is not None:
                p[n] = (p[n+1] + p[n+2]) / 2
    
    # Print all computed values
    for n in range(12):
        if p[n] is not None:
            print(f"p({n}) = {p[n]}")
    
    # The answer is p[0] which we initialized as 1
    # But let's verify the recurrence holds
    for n in range(10):
        if n not in [3, 6, 10] and p[n] is not None and p[n+1] is not None and p[n+2] is not None:
            assert p[n] == (p[n+1] + p[n+2]) / 2, f"Recurrence failed at n={n}"

solve_sequence()
```
