[write_program]
This problem asks for the smallest natural number `n` such that `100 * 2^n > 10000 * (1/2)^n`. We can simplify the inequality and enumerate possible values of `n` to find the minimal solution.

The inequality simplifies to:
`100 * 2^n > 10000 * 2^(-n)`
Multiply both sides by `2^n`:
`100 * (2^n)^2 > 10000`
Divide both sides by 100:
`(2^n)^2 > 100`
Take square root of both sides:
`2^n > 10`

Now we just need to find the smallest `n` where `2^n > 10`. We'll enumerate powers of 2 until we find the first one exceeding 10.

```python
def find_min_n():
    n = 0
    while True:
        power = 2 ** n
        print(f"Testing n={n}, 2^{n}={power}")
        if power > 10:
            print(f"Found minimal n: {n}")
            break
        n += 1

if __name__ == "__main__":
    find_min_n()
```
