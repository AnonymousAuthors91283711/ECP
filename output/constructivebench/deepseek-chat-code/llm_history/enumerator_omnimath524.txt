[write_program]
This problem involves finding the value of a degree 2008 polynomial evaluated at 2008, given its values at 0 through 2007. To approach this, we'll examine smaller cases to identify a pattern.

The key observation is that the polynomial Q(x) = P(x) - (2007 - x) has roots at x=0,1,...,2007. Therefore, P(x) = (2007 - x) + C * x * (x-1) * ... * (x-2007). The leading coefficient condition gives C, allowing us to compute P(2008).

We'll implement this for smaller degrees to verify the pattern before generalizing.

```python
def compute_p_at_n(n):
    """
    Computes P(n) where P is a degree n polynomial with:
    - Leading coefficient 1
    - P(k) = (n-1) - k for k = 0,1,...,n-1
    """
    # The polynomial can be written as P(x) = (n-1 - x) + C * product(x - k for k=0..n-1)
    # The leading coefficient is -1 + C = 1, so C = 2
    # Therefore P(n) = (n-1 - n) + 2 * n! = -1 + 2 * factorial(n)
    from math import factorial
    return -1 + 2 * factorial(n)

# Test small cases to verify the pattern
for n in range(1, 10):
    print(f"n={n}: P({n}) = {compute_p_at_n(n)}")

# For the original problem (n=2008), the answer would be -1 + 2*2008!
# But we don't compute 2008! as it's too large
```
