[write_program]
This problem involves summing the reciprocals of the closest integers to the square roots of numbers from 1 to 2010. We need to enumerate these values and compute their sum.

The approach:
1. For each n from 0 to 2009 (since range 2010 gives 0..2009)
2. Compute sqrt(n+1)
3. Find the closest integer to this square root
4. Sum the reciprocals of these closest integers

We'll implement this in Python, computing exact rational values where possible, but using floating point for the square roots and rounding.

```python
from fractions import Fraction
import math

def closest_to_sqrt(x):
    root = math.sqrt(x)
    lower = math.floor(root)
    upper = math.ceil(root)
    return lower if (root - lower) <= (upper - root) else upper

total = Fraction(0)
for n in range(2010):
    x = n + 1
    closest = closest_to_sqrt(x)
    total += Fraction(1, closest)
    # Print partial sums every 100 terms to show progress
    if (n + 1) % 100 == 0:
        print(f"After {n+1} terms: {float(total):.5f}")

print("\nFinal exact value:", total)
print("Final decimal approximation:", float(total))
```
