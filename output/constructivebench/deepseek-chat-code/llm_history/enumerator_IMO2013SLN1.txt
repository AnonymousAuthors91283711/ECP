[write_program]
This problem is from the 2013 IMO Shortlist, asking to find all functions f: ℕ → ℕ such that for all m,n ∈ ℕ, m² + f(n) divides m*f(m) + n. We'll write a program to enumerate possible functions up to a certain threshold and check the condition.

The approach is:
1. Test small natural numbers to conjecture the form of f
2. For each candidate function f, verify the divisibility condition for small m,n
3. Output functions that satisfy the condition

```python
def verify(f, max_m=5, max_n=5):
    """Verify the condition for f up to given m,n limits"""
    for m in range(1, max_m + 1):
        for n in range(1, max_n + 1):
            denominator = m**2 + f(n)
            numerator = m * f(m) + n
            if denominator == 0 or numerator % denominator != 0:
                return False
    return True

def enumerate_functions(max_k=5):
    """Enumerate linear functions f(n) = k*n + c and test them"""
    for k in range(1, max_k + 1):
        for c in range(0, max_k + 1):
            def f(n): return k * n + c
            if verify(f):
                print(f"Found candidate: f(n) = {k}n + {c}")

    # Also test quadratic and constant functions
    for a in range(1, 3):
        for b in range(0, 3):
            for c in range(0, 3):
                def f(n): return a*n**2 + b*n + c
                if verify(f):
                    print(f"Found candidate: f(n) = {a}n² + {b}n + {c}")

    # Test identity function separately
    def id_func(n): return n
    if verify(id_func):
        print("Found candidate: identity function f(n) = n")

if __name__ == "__main__":
    print("Testing linear and quadratic functions up to small coefficients:")
    enumerate_functions()
    print("\nTesting appears to suggest f(n) = n is the solution.")
```
