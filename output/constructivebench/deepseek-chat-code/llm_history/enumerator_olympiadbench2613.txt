[write_program]
This problem involves a linear recurrence relation with given initial conditions. We need to compute the value of u(7) based on the recurrence u(n+2) = 3u(n+1) - u(n) with u(3)=5 and u(6)=89.

The approach is to:
1. Work backwards from the given values to find u(1) and u(2)
2. Then compute forward to find u(7)
3. The program will verify the recurrence relation holds for computed values

```python
def compute_u():
    # We know u(3)=5 and u(6)=89
    # Need to find u(1) and u(2) that satisfy the recurrence
    
    # The recurrence is u(n+2) = 3u(n+1) - u(n)
    # Let's express u(3) through u(1) and u(2):
    # u(3) = 3u(2) - u(1) = 5
    # u(4) = 3u(3) - u(2) = 15 - u(2)
    # u(5) = 3u(4) - u(3) = 3(15 - u(2)) - 5 = 40 - 3u(2)
    # u(6) = 3u(5) - u(4) = 3(40 - 3u(2)) - (15 - u(2)) = 120 - 9u(2) - 15 + u(2) = 105 - 8u(2) = 89
    
    # Solve for u(2):
    # 105 - 8u(2) = 89 => 8u(2) = 16 => u(2) = 2
    
    # Then from u(3) equation:
    # 3*2 - u(1) = 5 => u(1) = 1
    
    # Now compute forward to u(7):
    u = [0] * 8  # 1-based indexing
    u[1] = 1
    u[2] = 2
    for n in range(1, 6):
        u[n+2] = 3*u[n+1] - u[n]
    
    print(f"Computed values:")
    for i in range(1, 8):
        print(f"u({i}) = {u[i]}")
    
    print(f"\nFinal answer for u(7): {u[7]}")

compute_u()
```
