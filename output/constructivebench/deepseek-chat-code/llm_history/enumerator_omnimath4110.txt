[write_program]
This problem asks for all real-valued functions f: ℝ → ℝ that satisfy the functional equation ∀x y, f(⌊x⌋ * y) = f(x) * ⌊f(y)⌋. We'll enumerate possible solutions by testing simple function forms.

The approach is to:
1. Test constant functions f(x) = c
2. Test piecewise functions based on floor(x)
3. Check linear functions and other simple forms
4. Output any functions that satisfy the equation for sample x,y values

```python
import math

def is_solution(f, x_samples, y_samples):
    """Check if f satisfies the equation for given samples."""
    for x in x_samples:
        for y in y_samples:
            left = f(math.floor(x) * y)
            right = f(x) * math.floor(f(y))
            if not math.isclose(left, right):
                return False
    return True

def test_functions():
    x_samples = [-1.5, -0.5, 0.5, 1.5, 2.3]
    y_samples = [-2.1, -1.2, 0.3, 1.4, 2.5]
    
    # Test constant functions f(x) = c
    for c in [0, 1, -1, 2, -2, 0.5]:
        f = lambda x, c=c: c
        if is_solution(f, x_samples, y_samples):
            print(f"Constant function f(x) = {c} is a solution")
    
    # Test zero on negatives, constant on positives
    for c in [1, -1, 2]:
        f = lambda x, c=c: 0 if x < 0 else c
        if is_solution(f, x_samples, y_samples):
            print(f"Piecewise function f(x) = 0 for x<0, {c} otherwise is a solution")
    
    # Test identity-like functions
    f = lambda x: math.floor(x)
    if is_solution(f, x_samples, y_samples):
        print("Floor function f(x) = floor(x) is a solution")
    
    # Test zero function
    f_zero = lambda x: 0
    if is_solution(f_zero, x_samples, y_samples):
        print("Zero function f(x) = 0 is a solution")

if __name__ == "__main__":
    test_functions()
```
