[write_program]
This problem asks for all pairs of positive integers (x, p) where p is prime, x ≤ 2p, and x^(p-1) divides (p-1)^x + 1. We'll write a Python program to enumerate such pairs for small primes.

The approach:
1. Generate primes up to a reasonable limit (we'll use 50)
2. For each prime p, test all x from 1 to 2p
3. Check if x^(p-1) divides (p-1)^x + 1
4. Output valid pairs immediately when found

```python
def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

max_p = 50
print(f"Searching for pairs (x,p) with p prime ≤ {max_p} and x ≤ 2p...")

for p in range(2, max_p + 1):
    if not is_prime(p):
        continue
    max_x = 2 * p
    for x in range(1, max_x + 1):
        if pow(x, p - 1, 1 << 60) == 0:  # Quick check if x^(p-1) would be too big
            continue
        # Compute (p-1)^x + 1 mod x^(p-1)
        mod = pow(x, p - 1)
        term = pow(p - 1, x, mod)
        if (term + 1) % mod == 0:
            print(f"Found pair: ({x}, {p})")
```
