[write_program]
This problem asks for all real-valued functions f: ℝ → ℝ that satisfy:
1. f(0) ≠ 0
2. For all x,y ∈ ℝ, (f(x+y))² = 2*f(x)*f(y) + max(f(x²+y²), f(x²)+f(y²))

We'll enumerate potential solutions by testing common function forms (linear, quadratic, exponential) with small coefficients.

```python
import math

def test_function(f, name):
    """Test if function f satisfies the conditions."""
    try:
        if f(0) == 0:
            return False
        
        test_points = [(-2,-1), (-1,0), (0,1), (1,2), (0.5,1.5)]
        for x, y in test_points:
            lhs = f(x + y)**2
            term1 = 2 * f(x) * f(y)
            term2 = max(f(x**2 + y**2), f(x**2) + f(y**2))
            rhs = term1 + term2
            if not math.isclose(lhs, rhs, rel_tol=1e-6):
                return False
        print(f"Potential solution found: {name}")
        return True
    except:
        return False

# Test constant functions
def constant(c):
    return lambda x: c

for c in [1, -1, 2, -2]:
    if test_function(constant(c), f"f(x) = {c}"):
        pass

# Test linear functions
def linear(a, b):
    return lambda x: a*x + b

for a in [-2, -1, 1, 2]:
    for b in [-1, 1]:
        if test_function(linear(a, b), f"f(x) = {a}x + {b}"):
            pass

# Test quadratic functions
def quadratic(a, b, c):
    return lambda x: a*x**2 + b*x + c

for a in [-1, 1]:
    for b in [-1, 0, 1]:
        for c in [-1, 1]:
            if test_function(quadratic(a, b, c), f"f(x) = {a}x² + {b}x + {c}"):
                pass

# Test exponential functions
def exponential(a, b):
    return lambda x: a * math.exp(b * x)

for a in [-1, 1]:
    for b in [-1, 1]:
        if test_function(exponential(a, b), f"f(x) = {a}e^({b}x)"):
            pass

print("Enumeration complete")
```
