[write_program]
This problem asks for the number of functions f from {0,1,2,3,4,5} to itself where for each i, f(i) ≠ i, f(i) ≠ (i+1) mod 6, and f(i) ≠ (i-1) mod 6. This is equivalent to counting derangements with additional restrictions.

We'll approach this by enumerating all possible functions and checking the constraints. Since 6^6 = 46656 is manageable, we'll brute-force all possibilities.

```python
from itertools import product

def is_valid(f):
    for i in range(6):
        if f[i] == i or f[i] == (i+1)%6 or f[i] == (i-1)%6:
            return False
    return True

count = 0
for f in product(range(6), repeat=6):
    if is_valid(f):
        count += 1
        print(f"Found valid function #{count}: {f}")

print(f"Total valid functions: {count}")
```

The program:
1. Uses itertools.product to generate all possible 6-tuples (functions from {0..5} to {0..5})
2. Checks each function against the constraints
3. Counts and prints each valid function as it's found
4. Finally prints the total count

This brute-force approach is feasible because 6^6 is only 46656 possibilities. For larger domains, a more sophisticated combinatorial approach would be needed.
