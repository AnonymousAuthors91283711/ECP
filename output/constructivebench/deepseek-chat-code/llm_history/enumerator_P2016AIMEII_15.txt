[write_program]
The problem is from the 2016 AIME II competition, problem 15. It involves finding the maximum value of x₂ under certain constraints involving a sequence of real numbers x₁, x₂, ..., x₂₁₆. The constraints include positivity, sum to 1, and a complex quadratic condition.

We'll write a Python program to numerically explore possible values of x₂ that satisfy the constraints, particularly focusing on finding the maximum possible x₂. We'll use small-scale simulations to approximate the solution.

```python
import numpy as np

def solve():
    n = 216
    # Define a_i coefficients
    a = np.zeros(n)
    for i in range(n):
        if i < 215:
            a[i] = 1 / (2 ** (i + 1))
        else:
            a[i] = 1 / (2 ** 215)
    
    # Try different x2 values and see if constraints can be satisfied
    # We'll sample x2 in (0,1) and see what's the maximum possible
    max_x2 = 0
    samples = 1000
    for trial in range(samples):
        x2 = (trial + 1) / (samples + 1)
        
        # Make a simple assumption: x1=x2, x3=x4=...=x216=small equal values
        # This is just a heuristic to find possible candidates
        remaining = 1 - x2
        small_val = remaining / (n - 1)
        
        # Check if the quadratic condition is approximately satisfied
        # Compute the double sum term
        double_sum = x2 * (small_val * (n - 1)) + small_val**2 * (n-1)*(n-2)/2
        
        # Compute the a_i terms
        a_terms = (a[0] * x2**2 / (2 * (1 - a[0]))) + sum(a[i] * small_val**2 / (2 * (1 - a[i])) for i in range(1, n))
        
        target = 107/215 + a_terms
        
        if abs(double_sum - target) < 0.01:  # tolerance
            if x2 > max_x2:
                max_x2 = x2
                print(f"Found candidate x2: {x2:.6f}")
    
    print(f"Maximum x2 found: {max_x2:.6f}")

if __name__ == "__main__":
    solve()
```
