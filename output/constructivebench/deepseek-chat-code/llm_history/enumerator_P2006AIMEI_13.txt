[write_program]
This problem asks for the largest integer n < 1000 such that the sum of the 2-adic valuations of even numbers up to 2^(n-1) is a perfect square. We'll write a Python program to enumerate all such n values and identify the maximum one.

The key observation is that the sum of 2-adic valuations for even numbers up to 2^k is equal to the sum of floor(k/i) for i from 1 to k. We'll compute this sum for each n and check if it's a perfect square.

```python
import math

def sum_padic_vals(n):
    """Compute sum of 2-adic valuations for even numbers up to 2^(n-1)"""
    if n == 0:
        return 0
    k = n - 1
    total = 0
    i = 1
    while i <= k:
        q = k // i
        max_i = k // q if q != 0 else k
        count = max_i - i + 1
        total += q * count
        i = max_i + 1
    return total

max_n = 0
for n in range(1, 1000):
    s = sum_padic_vals(n)
    root = math.isqrt(s)
    if root * root == s:
        print(f"Found n = {n} with sum = {s} = {root}^2")
        if n > max_n:
            max_n = n

print(f"\nThe largest n < 1000 is {max_n}")
```
