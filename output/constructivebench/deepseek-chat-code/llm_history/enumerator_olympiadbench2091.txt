[write_program]
This problem asks for the maximum number of distinct triples (a, b, c) where a + b + c = n (with n â‰¥ 2) and all a's, b's, and c's are distinct across triples. We'll write a Python program to enumerate possible values for small n and observe the pattern.

The approach:
1. For each n from 2 to 10, generate all possible triples (a, b, c) where a + b + c = n
2. Find the maximum subset where all a's, b's, and c's are distinct
3. Observe the pattern to conjecture the general formula

```python
def max_distinct_triples(n):
    # Generate all possible triples (a, b, c) where a + b + c = n
    triples = []
    for a in range(1, n - 1):
        for b in range(1, n - a):
            c = n - a - b
            if c >= 1:
                triples.append((a, b, c))
    
    # Try to find maximum subset with distinct components
    max_count = 0
    from itertools import combinations
    for k in range(len(triples), 0, -1):
        for subset in combinations(triples, k):
            a_vals = [t[0] for t in subset]
            b_vals = [t[1] for t in subset]
            c_vals = [t[2] for t in subset]
            if (len(set(a_vals)) == k and 
                len(set(b_vals)) == k and 
                len(set(c_vals)) == k):
                max_count = k
                break
        if max_count > 0:
            break
    return max_count

# Test for n from 2 to 10
for n in range(2, 11):
    result = max_distinct_triples(n)
    print(f"n={n}: max triples = {result}")

# After observing the pattern, we can conjecture the general formula
print("\nConjectured formula: floor((n-1)/2)")
for n in range(2, 11):
    print(f"n={n}: conjectured = {((n-1)//2)}")
```
