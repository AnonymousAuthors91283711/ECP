[write_program]
This problem involves analyzing a recursive sequence defined by `an(n+1) = 2*(an(n) + 1/an(n)) - 3` with initial condition `an(1) = a`. We need to find all real values of `a` for which the sequence is strictly increasing. 

The approach is to:
1. Simulate the sequence for various initial values `a`
2. Check if the sequence is strictly increasing for the first few terms (since the behavior stabilizes quickly)
3. Identify the threshold where the sequence stops being increasing

We'll test rational values around likely critical points (where the behavior changes) and observe the pattern.

```python
def is_increasing(a, max_n=10):
    """Check if sequence is strictly increasing for first max_n terms"""
    current = a
    for n in range(1, max_n):
        next_val = 2 * (current + 1/current) - 3
        if next_val <= current:
            return False
        current = next_val
    return True

def find_threshold():
    """Find approximate threshold where behavior changes"""
    # Test values around likely critical points
    left, right = 1.0, 2.0
    precision = 1e-6
    while right - left > precision:
        mid = (left + right) / 2
        if is_increasing(mid):
            left = mid
        else:
            right = mid
    return left

# Test some sample values
test_values = [1.0, 1.5, 1.8, 2.0, 2.5]
for a in test_values:
    print(f"a = {a:.2f}, increasing: {is_increasing(a)}")

# Find approximate threshold
threshold = find_threshold()
print(f"\nApproximate threshold: {threshold:.6f}")
```
