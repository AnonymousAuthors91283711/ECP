[write_program]
This problem involves a recurrence relation with given initial conditions and a constraint. We'll write a Python program to compute the sequence values and sum them up to find the answer.

The recurrence is: a(n+3) = a(n+2) - 2*a(n+1) + a(n)
Given: a(1)=1, a(3)=1, and a(98)=a(99)

We'll:
1. Compute the sequence up to n=100 using the recurrence
2. Find values of a(2) that satisfy a(98)=a(99)
3. For each valid a(2), compute the sum of first 101 terms

```python
def compute_sequence(a2):
    # Initialize sequence with given conditions
    a = [0] * 101  # a[0] to a[100]
    a[1] = 1
    a[2] = a2
    a[3] = 1
    
    # Compute sequence using recurrence
    for n in range(1, 98):
        a[n+3] = a[n+2] - 2*a[n+1] + a[n]
    
    return a

# Find a2 that satisfies a[98] == a[99]
# We'll search in a reasonable range and look for when the difference crosses zero
low, high = -100.0, 100.0
tolerance = 1e-10

# Binary search to find a2 that makes a[98] ≈ a[99]
for _ in range(100):
    mid = (low + high) / 2
    seq = compute_sequence(mid)
    diff = seq[98] - seq[99]
    if abs(diff) < tolerance:
        break
    if diff > 0:
        low = mid
    else:
        high = mid

# Compute the final sequence with the found a2
final_seq = compute_sequence((low + high)/2)
total_sum = sum(final_seq[:101])

print(f"Found a2 ≈ {(low + high)/2}")
print(f"Sum of first 101 terms: {total_sum}")
```
