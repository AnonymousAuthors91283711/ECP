[write_program]
The problem asks to determine if there exist six odd natural numbers whose squares sum to 1986. We'll write a Python program to enumerate possible combinations of six odd numbers squared that sum to 1986, checking if any combination exists.

Key observations:
1. Odd numbers squared are congruent to 1 mod 8
2. Sum of six odd squares ≡ 6 mod 8
3. 1986 mod 8 = 1986 % 8 = 2
Since 6 ≢ 2 mod 8, no solution exists. But we'll verify computationally for small odd numbers.

```python
def main():
    target = 1986
    max_num = int((target)**0.5) + 1  # Upper bound for odd numbers to check
    
    # Generate odd numbers up to max_num
    odd_numbers = [i for i in range(1, max_num + 1, 2)]
    
    # Check all combinations of 6 odd numbers
    from itertools import combinations_with_replacement
    
    found = False
    for combo in combinations_with_replacement(odd_numbers, 6):
        if sum(x*x for x in combo) == target:
            print(f"Found solution: {combo}")
            found = True
            break
    
    if not found:
        print("No solution exists for six odd squares summing to 1986")

if __name__ == "__main__":
    main()
```
