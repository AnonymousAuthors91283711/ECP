[write_program]
This problem involves summing a function F(n) over integers n from 20 to 100, then taking modulo 1000. Since we don't know what F(n) represents, we'll assume it's a simple arithmetic function for demonstration purposes. Let's create a Python program that enumerates possible sums with different simple functions F(n) (like n, nÂ², etc.) to help conjecture the answer.

```python
def main():
    # Try different simple functions for F(n)
    functions = [
        ('n', lambda n: n),
        ('n^2', lambda n: n**2),
        ('n^3', lambda n: n**3),
        ('fib(n)', lambda n: fib(n)),
        ('factorial(n)', lambda n: factorial(n))
    ]
    
    for name, f in functions:
        total = 0
        for n in range(20, 101):
            total += f(n)
        mod_result = total % 1000
        print(f"Function {name}: sum mod 1000 = {mod_result}")

def fib(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)

if __name__ == "__main__":
    main()
```
