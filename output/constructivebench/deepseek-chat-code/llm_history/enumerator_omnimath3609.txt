[write_program]
This problem involves finding a rational value P(n+1) for a polynomial P of degree n that satisfies P(k) = k/(k+1) for k=0,1,...,n. We'll write a Python program to compute this for small values of n to identify the pattern.

The approach is:
1. Construct the polynomial P by solving the system of equations P(k) = k/(k+1) for k=0..n
2. Evaluate P(n+1) for each n
3. Observe the pattern in the results

```python
from fractions import Fraction
from itertools import combinations

def compute_p(n):
    # Points (k, k/(k+1)) for k=0..n
    points = [(k, Fraction(k, k+1)) for k in range(n+1)]
    
    # Lagrange interpolation
    def lagrange(x):
        result = Fraction(0, 1)
        for i, (xi, yi) in enumerate(points):
            term = yi
            for j, (xj, _) in enumerate(points):
                if j != i:
                    term *= Fraction(x - xj, xi - xj)
            result += term
        return result
    
    return lagrange

for n in range(1, 10):
    P = compute_p(n)
    result = P(n+1)
    print(f"n={n}: P({n+1}) = {result} ({float(result):.6f})")

# After observing the pattern, we can conjecture the general formula
print("\nConjectured pattern:")
for n in range(1, 10):
    conjectured = Fraction(1, 1) - Fraction(1, n+2)
    print(f"n={n}: conjectured {conjectured}")
```
