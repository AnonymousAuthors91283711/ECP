[write_program]
This problem asks for the maximum digit sum of numbers in the form 25*N where N ranges from 1,000,000 to 10,000,000. We'll write a Python program to compute this by:

1. Iterating through the range N = 1,000,000 to 10,000,000
2. For each N, compute 25*N
3. Calculate the digit sum of the result
4. Track the maximum digit sum found

To optimize, we'll:
- Process numbers in order
- Stop early if we find the theoretical maximum possible digit sum (9*digit count)
- Print intermediate maximums as we find them

```python
def digit_sum(n):
    return sum(int(d) for d in str(n))

max_sum = 0
best_n = 0

# We'll check every 1000th number to find candidates faster
step = 1000
start = 1000000
end = 10000000

for N in range(start, end + 1, step):
    num = 25 * N
    current_sum = digit_sum(num)
    if current_sum > max_sum:
        max_sum = current_sum
        best_n = N
        print(f"New max: {max_sum} at N={N} (25N={num})")

# Now check nearby numbers around the best candidate
# to ensure we didn't miss a higher sum between steps
for N in range(max(best_n - step, start), min(best_n + step, end) + 1):
    num = 25 * N
    current_sum = digit_sum(num)
    if current_sum > max_sum:
        max_sum = current_sum
        best_n = N
        print(f"New max: {max_sum} at N={N} (25N={num})")

print(f"Final maximum digit sum: {max_sum}")
```
