[write_program]
This problem is about finding all integer exponents n for which there exist positive integers a, b, c satisfying aⁿ + bⁿ = cⁿ. We'll write a program to search for such exponents by testing small values of n and checking possible triples (a, b, c).

The approach:
1. Test exponents n from -10 to 10 (excluding 0 since any a,b,c would work for n=0)
2. For each n, test small values of a and b (up to 20)
3. Check if aⁿ + bⁿ equals cⁿ for some integer c
4. Print exponents n that have solutions

```python
def main():
    max_test = 20  # Maximum a and b to test
    for n in range(-10, 11):
        if n == 0:
            continue  # Skip n=0 as it's trivial
        found = False
        for a in range(1, max_test + 1):
            for b in range(1, max_test + 1):
                try:
                    lhs = a**n + b**n
                    # Check if lhs is a perfect power
                    c = round(lhs ** (1/n))
                    # Verify the solution
                    if c > 0 and abs(lhs - c**n) < 1e-6:
                        print(f"Found solution for n={n}: {a}^{n} + {b}^{n} = {c}^{n}")
                        found = True
                        break
                except (ZeroDivisionError, ValueError):
                    continue
            if found:
                break
        if not found:
            print(f"No solution found for n={n} with a,b <= {max_test}")

if __name__ == "__main__":
    main()
```
