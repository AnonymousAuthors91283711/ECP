[write_program]
The problem involves calculating the total distance traveled by a point moving in a spiral pattern with given parameters. The spiral has an initial radius `r0 = 5`, a shrinking ratio of `2/3` per revolution, angular velocity `ω = π/6` radians per second, and total time `t = 12` seconds. The formula provided calculates the total distance by summing the circumferences of shrinking circles.

Here's a Python program that computes this value exactly and approximately:

```python
import math

def compute_total_distance():
    r0 = 5
    ratio = 2/3
    omega = math.pi/6
    t = 12
    
    # Exact calculation using the given formula
    total_revolutions = (omega * t) / (2 * math.pi)
    total_distance = 2 * math.pi * (r0 / (1 - ratio)) * total_revolutions
    
    # Print exact form (simplified)
    print(f"Exact form: {r0}π/(1-{ratio}) * ({omega}*{t})/(2π)")
    
    # Compute and print decimal approximation
    approx_distance = total_distance
    print(f"Approximate value: {approx_distance:.6f}")

if __name__ == "__main__":
    compute_total_distance()
```

The program outputs both the exact symbolic form (showing the structure of the calculation) and a decimal approximation. The exact form maintains the π terms and clearly shows the relationship between the parameters, while the approximation gives a numerical value for verification. The formula correctly accounts for the geometric series formed by the shrinking spiral.
