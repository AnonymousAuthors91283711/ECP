[write_program]
This problem asks for the maximum and minimum values of (x-y)(y-z)(x-z) under the constraint x² + y² + z² = 1. We'll write a Python program to numerically explore possible values by sampling points on the unit sphere.

The approach:
1. Parameterize points on the unit sphere using spherical coordinates
2. Sample points systematically to find candidate values
3. Track the maximum and minimum values found

```python
import math
import itertools

def spherical_to_cartesian(theta, phi):
    """Convert spherical coordinates to Cartesian coordinates on unit sphere"""
    x = math.sin(theta) * math.cos(phi)
    y = math.sin(theta) * math.sin(phi)
    z = math.cos(theta)
    return x, y, z

def compute_expression(x, y, z):
    """Compute (x-y)(y-z)(x-z)"""
    return (x - y) * (y - z) * (x - z)

def main():
    max_val = -float('inf')
    min_val = float('inf')
    sqrt2_2 = math.sqrt(2)/2  # Theoretical maximum from problem statement
    
    # Sample points systematically
    n_samples = 100
    for i, j in itertools.product(range(n_samples), range(n_samples)):
        theta = math.pi * i / n_samples  # 0 to π
        phi = 2 * math.pi * j / n_samples  # 0 to 2π
        
        x, y, z = spherical_to_cartesian(theta, phi)
        current = compute_expression(x, y, z)
        
        # Update max and min
        if current > max_val:
            max_val = current
            print(f"New max found: {max_val:.6f}")
        if current < min_val:
            min_val = current
            print(f"New min found: {min_val:.6f}")
    
    print("\nFinal results:")
    print(f"Maximum value found: {max_val:.6f} (theoretical: {sqrt2_2:.6f})")
    print(f"Minimum value found: {min_val:.6f} (theoretical: {-sqrt2_2:.6f})")

if __name__ == "__main__":
    main()
```
