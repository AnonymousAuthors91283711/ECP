[write_program]
This problem asks for the smallest 6-digit number formed by permuting the digits [1, 2, 3, 3, 4, 5] that is divisible by 264 (which factors into 8*3*11). We'll generate all permutations, convert them to numbers, filter those divisible by 264, and find the minimum.

```python
from itertools import permutations

def solve():
    digits = [1, 2, 3, 3, 4, 5]
    seen = set()
    min_num = None
    
    # Generate all unique permutations of the digits
    for p in set(permutations(digits)):
        # Skip numbers starting with 0 (though our digits don't include 0)
        if p[0] == 0:
            continue
        
        # Convert permutation to number
        num = int(''.join(map(str, p)))
        
        # Check divisibility by 264
        if num % 264 == 0:
            if min_num is None or num < min_num:
                min_num = num
            print(num)  # Stream partial results
    
    # After checking all, print the minimal one
    if min_num is not None:
        print("Minimum number divisible by 264:", min_num)
    else:
        print("No valid number found")

solve()
```
