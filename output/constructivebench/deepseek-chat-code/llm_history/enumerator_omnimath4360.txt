[write_program]
This problem is about finding a subset A of size 2000 from numbers 1 to 3000 where no element in A has its double also in A. The Python program will enumerate possible subsets to verify if such a set exists.

We'll approach this by:
1. Considering the numbers 1-3000
2. Trying to construct a maximal subset where no element is double another
3. Checking if we can reach size 2000

The key observation is that we can partition numbers into "chains" where each element is double the previous one (e.g., 1,2,4,8,...), and from each chain we can take at most half the elements (alternating selection).

```python
def main():
    n = 3000
    target = 2000
    used = [False] * (n + 1)
    count = 0
    
    # We'll process numbers in descending order to maximize the subset
    for x in range(n, 0, -1):
        if not used[x]:
            # Take x and mark 2x as unusable if it exists
            if 2 * x <= n:
                used[2 * x] = True
            count += 1
            if count >= target:
                break
    
    print(f"Max subset size found: {count}")
    if count >= target:
        print("Such a subset exists")
    else:
        print("No such subset exists")

if __name__ == "__main__":
    main()
```
