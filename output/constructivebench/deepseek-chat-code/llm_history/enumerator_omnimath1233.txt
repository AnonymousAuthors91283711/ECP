[write_program]
The problem asks to count all 3-digit numbers (100-999) where:
1. All digits are from {1,2,3,4,5,6,7}
2. The number or any of its cyclic permutations is divisible by 7

We'll write a Python program to enumerate all such numbers and count them.

```python
def is_good_number(n):
    digits = [(n // 100) % 10, (n // 10) % 10, n % 10]
    # Check all digits are in {1,2,3,4,5,6,7}
    if any(d < 1 or d > 7 for d in digits):
        return False
    # Check original number or its cyclic permutations divisible by 7
    num1 = n  # original number
    num2 = (n % 100) * 10 + (n // 100)  # first cyclic permutation
    num3 = (n % 10) * 100 + (n // 10)   # second cyclic permutation
    return num1 % 7 == 0 or num2 % 7 == 0 or num3 % 7 == 0

count = 0
for n in range(100, 1000):
    if is_good_number(n):
        print(n)  # stream each valid number
        count += 1

print(f"Total count: {count}")
```
