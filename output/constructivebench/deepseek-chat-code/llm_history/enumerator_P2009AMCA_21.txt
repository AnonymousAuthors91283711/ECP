[write_program]
This problem involves finding the number of complex roots with non-zero imaginary part for a degree 12 polynomial q(x) constructed from a cubic polynomial p(x). The solution requires analyzing the roots of q(x) = x¹² + a x⁸ + b x⁴ + c, which can be rewritten in terms of p(x⁴).

We'll write a Python program to:
1. Enumerate possible answers for small integer coefficients (a,b,c)
2. Count roots with non-zero imaginary parts by solving q(x) = 0
3. Observe patterns to conjecture the general answer

```python
import numpy as np
from numpy.polynomial import Polynomial

def count_complex_roots(a, b, c):
    # Construct the polynomial q(x) = x^12 + a x^8 + b x^4 + c
    q = Polynomial([c, 0, 0, 0, b, 0, 0, 0, a, 0, 0, 0, 1])
    
    # Find all roots (including complex ones)
    roots = q.roots()
    
    # Count roots with non-zero imaginary part
    count = sum(1 for root in roots if abs(root.imag) > 1e-10)
    
    return count

# Test with small integer coefficients
test_cases = [
    (0, 0, 0),   # q(x) = x^12 → 0 non-real roots
    (0, 0, -1),   # q(x) = x^12 - 1 → 10 non-real roots (12 roots minus 2 real)
    (0, -1, 0),   # q(x) = x^12 - x^4 → 8 non-real roots
    (-1, 0, 0),   # q(x) = x^12 - x^8 → 8 non-real roots
    (1, 1, 1),    # Generic case
    (2, 3, 4),    # Another generic case
]

for a, b, c in test_cases:
    count = count_complex_roots(a, b, c)
    print(f"For (a,b,c)=({a},{b},{c}), number of complex roots with Im≠0: {count}")
```
