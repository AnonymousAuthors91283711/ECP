[write_program]
This problem asks for all natural numbers n ≥ 1 such that n*2^(n+1)+1 is a perfect square. We'll write a Python program to enumerate these numbers up to a reasonable threshold and check the condition.

The approach:
1. Iterate n from 1 to a reasonable upper bound (we'll use 100)
2. For each n, compute the value v = n*2^(n+1)+1
3. Check if v is a perfect square by comparing floor(√v)^2 to v
4. Print n when the condition is satisfied

```python
import math

def is_perfect_square(v):
    s = int(math.isqrt(v))
    return s * s == v

max_n = 100
print(f"Checking n from 1 to {max_n} where n*2^(n+1)+1 is a perfect square:")
for n in range(1, max_n + 1):
    v = n * (2 ** (n + 1)) + 1
    if is_perfect_square(v):
        print(f"Found solution: n = {n}")
        print(f"  Verification: {n}*2^{n+1}+1 = {v} = {int(math.isqrt(v))}^2")
```
