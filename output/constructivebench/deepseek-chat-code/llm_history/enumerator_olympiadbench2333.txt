[write_program]
This problem involves finding integer coefficients a, b, c, d (with d ≠ 0) such that a given real-valued function of p (where 0 ≤ p ≤ 1) can be expressed as a quadratic rational function. We'll enumerate possible small integer coefficients to find potential matches.

The approach is:
1. Sample p values in [0,1] to get function outputs
2. Try small integer coefficients (say -5 to 5) for a,b,c,d
3. Check if the rational expression matches the function output
4. Print valid coefficient combinations

```python
import numpy as np

def enumerate_quadratic_forms():
    # Sample p values (avoiding p=0 for division)
    p_samples = np.linspace(0.1, 1.0, 5)
    # Hypothetical function - replace with actual olympiadbench2333_answer implementation
    # For demonstration, we'll use a sample function: (2p^2 + 3p + 1)/4
    def sample_func(p):
        return (2*p**2 + 3*p + 1)/4
    
    y_samples = [sample_func(p) for p in p_samples]
    
    # Search range for coefficients
    coeff_range = range(-5, 6)
    
    for a in coeff_range:
        for b in coeff_range:
            for c in coeff_range:
                for d in coeff_range:
                    if d == 0:
                        continue
                    match = True
                    for p, y in zip(p_samples, y_samples):
                        # Check if rational expression matches function output
                        rational_val = (a*p**2 + b*p + c)/d
                        if not np.isclose(rational_val, y, rtol=1e-6):
                            match = False
                            break
                    if match:
                        print(f"Found coefficients: a={a}, b={b}, c={c}, d={d}")
    
    print("Enumeration complete.")

if __name__ == "__main__":
    enumerate_quadratic_forms()
```
