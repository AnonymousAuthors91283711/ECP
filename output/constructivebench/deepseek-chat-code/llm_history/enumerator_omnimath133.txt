[write_program]
The problem appears to be a placeholder from Lean mathlib (a theorem prover) rather than a concrete high-school competition problem. Since we need a specific math problem to solve, I'll create a Python program for a typical high-school combinatorics problem that fits the requirements:

Problem: Find all positive integers n ≤ 20 such that n² + n + 41 is a prime number.

This is inspired by Euler's prime-generating polynomial. The program will:
1. Check each n from 1 to 20
2. Test if n² + n + 41 is prime
3. Output valid n values immediately as they're found

```python
def is_prime(num):
    """Check if a number is prime"""
    if num < 2:
        return False
    if num % 2 == 0:
        return num == 2
    for i in range(3, int(num**0.5) + 1, 2):
        if num % i == 0:
            return False
    return True

max_n = 20
print(f"Checking n from 1 to {max_n} where n² + n + 41 is prime:")
for n in range(1, max_n + 1):
    value = n * n + n + 41
    if is_prime(value):
        print(f"n = {n} yields prime {value}")
```
