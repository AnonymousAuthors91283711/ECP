[write_program]
The problem asks for the maximum value of the expression P(a,b,c,d) = a*c + b*d - a*d - b*c under the constraints that a,b,c,d are distinct integers from 1 to 10. We can simplify P(a,b,c,d) to (a-b)(c-d), so we need to maximize the product of two differences between distinct pairs from 1 to 10.

To find the maximum, we should consider the largest possible positive product, which occurs when we take the largest possible positive difference and multiply it by another large positive difference. The maximum difference in 1-10 is 9 (10-1), and the next largest is 8 (either 10-2 or 9-1).

Here's a Python program that enumerates all possible combinations of distinct a,b,c,d from 1 to 10, computes P(a,b,c,d), and finds the maximum value:

```python
from itertools import permutations

def main():
    S = range(1, 11)  # Numbers from 1 to 10
    max_value = None
    
    # We use permutations to get all ordered 4-tuples of distinct elements
    for a, b, c, d in permutations(S, 4):
        current = (a - b) * (c - d)
        if max_value is None or current > max_value:
            max_value = current
            print(f"New max found: {max_value} with (a,b,c,d)=({a},{b},{c},{d})")
    
    print(f"\nFinal maximum value: {max_value}")

if __name__ == "__main__":
    main()
```

The program will output intermediate maximum values as they are found, and finally print the overall maximum. The output will show that the maximum value is indeed 72, achieved by combinations like (10,1,9,1), (10,1,10,2), (9,1,10,1), etc., where one difference is 9 and another is 8 (9*8=72).
