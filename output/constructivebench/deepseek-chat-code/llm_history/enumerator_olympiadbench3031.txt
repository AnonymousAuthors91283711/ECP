[write_program]
This problem involves finding the exponent K such that the product of all divisors of 2^20 equals 2^K. The key insight is that for a number n = p^k (where p is prime), the product of its divisors is p^(k*d/2) where d is the number of divisors. Here, d = k+1.

For n = 2^20, we have:
- Number of divisors d = 20 + 1 = 21
- Product of divisors = 2^(20*21/2) = 2^210
Thus, K = 210.

Here's a Python program that verifies this for small exponents and shows the pattern:

```python
def count_divisors_exponent_product(p, k):
    """Calculate K where product of divisors of p^k is p^K"""
    d = k + 1  # number of divisors for p^k
    return k * d // 2

# Test for small exponents to show the pattern
print("Testing pattern for 2^k:")
for k in range(1, 11):
    K = count_divisors_exponent_product(2, k)
    print(f"k={k}: product of divisors = 2^{K}")

# Final answer for k=20
k = 20
K = count_divisors_exponent_product(2, k)
print(f"\nFor 2^{k}, the product of divisors is 2^{K}")
```
