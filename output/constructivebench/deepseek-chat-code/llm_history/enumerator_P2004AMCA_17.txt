[write_program]
The problem defines a function f with specific properties and asks for the value of f(2^100). We need to compute f(2^n) for small values of n to identify the pattern. The function is defined recursively with base case f(1)=1 and recursive relation f(2n)=n*f(n). We'll compute f(2^n) for n up to 20 to observe the pattern.

```python
def compute_f(n):
    if n == 1:
        return 1
    if n % 2 == 0:
        return (n // 2) * compute_f(n // 2)
    else:
        # The problem doesn't define f for odd numbers >1, but we only need powers of 2
        return None

max_power = 20
print("Computing f(2^n) for n from 1 to", max_power)
for exponent in range(1, max_power + 1):
    power_of_two = 2 ** exponent
    result = compute_f(power_of_two)
    print(f"f(2^{exponent}) = {result}")
```
