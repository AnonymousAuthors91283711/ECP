[write_program]
This problem involves finding the common value of a² + b² + c² given that a, b, c are non-zero reals with a + b + c = 0 and a³ + b³ + c³ = a⁵ + b⁵ + c⁵. We'll explore small integer ratios to find patterns.

The Python program will:
1. Generate small integer triples (a, b, c) that sum to 0
2. Check the other conditions
3. Compute a² + b² + c² for valid triples
4. Output the consistent value found

```python
from itertools import combinations

def find_consistent_value(max_n=10):
    seen_values = set()
    # Generate all (a,b,c) with a+b+c=0 and a,b,c ≠ 0
    for n in range(1, max_n + 1):
        for a in range(-n, n + 1):
            if a == 0:
                continue
            for b in range(-n, n + 1):
                if b == 0:
                    continue
                c = -a - b
                if c == 0:
                    continue
                # Check a^3 + b^3 + c^3 == a^5 + b^5 + c^5
                lhs = a**3 + b**3 + c**3
                rhs = a**5 + b**5 + c**5
                if lhs == rhs:
                    s = a**2 + b**2 + c**2
                    if s not in seen_values:
                        print(f"Found: a={a}, b={b}, c={c} → a²+b²+c²={s}")
                        seen_values.add(s)
    if len(seen_values) == 1:
        print(f"\nConsistent value found: {seen_values.pop()}")
    else:
        print("\nMultiple values found, try larger max_n")

find_consistent_value()
```
