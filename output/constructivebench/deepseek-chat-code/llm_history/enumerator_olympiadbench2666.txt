[write_program]
The problem asks to find the largest 4-digit number (between 1000 and 9999) where the number equals the sum of factorials of its three rightmost digits (B, C, D). The leftmost digit A must be positive (which is always true for 4-digit numbers).

We'll write a Python program to:
1. Precompute factorials for digits 0-9
2. Iterate through all 4-digit numbers (1000-9999)
3. For each number, extract digits B, C, D (hundreds, tens, units)
4. Check if the number equals the sum of factorials of B, C, D
5. Track and output the largest such number

```python
def enumerate_factorial_numbers():
    # Precompute factorials for digits 0-9
    fact = [1] * 10
    for i in range(1, 10):
        fact[i] = fact[i-1] * i
    
    max_num = 0
    for n in range(1000, 10000):
        B = (n // 100) % 10  # hundreds digit
        C = (n // 10) % 10   # tens digit
        D = n % 10           # units digit
        
        sum_fact = fact[B] + fact[C] + fact[D]
        if n == sum_fact:
            print(f"Found: {n} = {B}! + {C}! + {D}!")
            if n > max_num:
                max_num = n
    
    if max_num > 0:
        print(f"Largest 4-digit number satisfying the condition: {max_num}")
    else:
        print("No such numbers found in the range 1000-9999")

enumerate_factorial_numbers()
```
