[write_program]
This problem asks whether there exists a sequence of real numbers (a_n) such that for every positive integer m, the sum of the m-th powers of the sequence equals m. We'll write a program to search for such sequences numerically for small m values.

The approach will:
1. Try sequences of length up to 5 (since longer sequences become computationally intensive)
2. For each sequence length, try random real numbers in [-5,5]
3. Check if the sum of m-th powers approximates m for m=1,2,3
4. Print promising candidates that satisfy the condition approximately

```python
import numpy as np
from itertools import product
from random import uniform

def check_sequence(a, max_m=3, tolerance=0.1):
    """Check if sequence a satisfies the condition up to max_m with given tolerance."""
    for m in range(1, max_m+1):
        total = sum(x**m for x in a)
        if not abs(total - m) < tolerance:
            return False
    return True

def generate_and_test(max_length=5, trials=1000):
    """Generate random sequences and test them."""
    for length in range(1, max_length+1):
        print(f"\nTesting sequences of length {length}:")
        for _ in range(trials):
            a = [uniform(-5, 5) for _ in range(length)]
            if check_sequence(a):
                print(f"Found candidate: {a}")
                # Verify with higher precision
                verified = True
                for m in range(1, 5):
                    total = sum(x**m for x in a)
                    if not abs(total - m) < 0.01:
                        verified = False
                        break
                if verified:
                    print(f"High confidence match: {a}")
                    return

if __name__ == "__main__":
    print("Searching for sequences where sum(a_n^m) = m for m=1,2,3...")
    generate_and_test()
```
