[write_program]
This problem involves finding the largest integer M where there exist integers a,b,c,d satisfying certain inequalities and a product condition, and the smallest M where no such integers exist. We'll write a Python program to search for these values by checking each M and looking for valid a,b,c,d combinations.

The key constraints are:
- M ≤ a < b ≤ c < d ≤ M+49
- a*d = b*c

We'll search M values in order, checking all possible a,b,c,d combinations within the constraints for each M. For efficiency, we'll limit the search to a reasonable range where we expect the answer to be found.

```python
def find_omnimath103():
    # We'll search M up to 1000, which should cover the answer
    max_M = 1000
    last_good = None
    first_bad = None
    
    for M in range(1, max_M + 1):
        found = False
        # Iterate through possible a,b,c,d combinations
        for a in range(M, M + 50):
            for b in range(a + 1, M + 50):
                for c in range(b, M + 50):
                    for d in range(c + 1, M + 50):
                        if d > M + 49:
                            continue
                        if a * d == b * c:
                            found = True
                            break
                    if found:
                        break
                if found:
                    break
            if found:
                break
        
        if found:
            last_good = M
        else:
            if first_bad is None:
                first_bad = M
    
    print(f"Last good M: {last_good}")
    print(f"First bad M: {first_bad}")

find_omnimath103()
```
