[write_program]
This problem defines a recurrence relation for a sequence of integers and asks for the value at n=2004. The recurrence is:
- a₁ = 1
- a₂ = 0
- aₙ₊₂ = 2aₙ + aₙ₊₁ for n ≥ 1

We'll write a Python program to compute the sequence values up to n=2004. Since 2004 is large, we'll first compute smaller values to observe the pattern, then optimize for the full computation.

```python
def compute_sequence(n_max):
    # Initialize the sequence with given values
    a = [0] * (n_max + 1)
    a[1] = 1
    a[2] = 0
    
    # Compute the sequence using the recurrence relation
    for n in range(1, n_max - 1):
        a[n + 2] = 2 * a[n] + a[n + 1]
    
    return a

# First compute small values to observe the pattern
small_n = 10
small_seq = compute_sequence(small_n)
print("First few terms of the sequence:")
for i in range(1, small_n + 1):
    print(f"a[{i}] = {small_seq[i]}")

# Now compute up to n=2004
n_max = 2004
# Use iterative approach to avoid recursion depth issues
a_prev_prev = 1  # a[1]
a_prev = 0       # a[2]
current = 0
for n in range(3, n_max + 1):
    current = 2 * a_prev_prev + a_prev
    a_prev_prev, a_prev = a_prev, current

print(f"\na[2004] = {current}")
```
