[write_program]
The problem asks for the sum of floor(2012 / d) for all integers d from 1 to 2012. We need to compute this efficiently without iterating all 2012 divisors individually.

Key observations:
1. For d > 2012, floor(2012/d) = 0, so we can stop at 2012
2. For many consecutive d values, floor(2012/d) will be the same
3. We can group these d values and multiply the count by the floor value

Here's a Python program that computes this efficiently by finding ranges where floor(2012/d) remains constant:

```python
def compute_sum():
    n = 2012
    total = 0
    d = 1
    while d <= n:
        q = n // d
        if q == 0:
            break
        # Find the largest d' where floor(n/d') = q
        max_d = n // q
        count = max_d - d + 1
        total += q * count
        print(f"d={d} to {max_d}: floor(2012/d)={q}, adding {q}*{count} = {q*count} (total={total})")
        d = max_d + 1
    print(f"Final sum: {total}")

compute_sum()
```

The program:
1. Starts with d=1 and computes q = floor(2012/d)
2. Finds the largest d' where floor(2012/d') equals q (which is floor(2012/q))
3. Adds q multiplied by the count of numbers in this range
4. Jumps to d' + 1 and repeats until d exceeds 2012

This approach is O(âˆšn) time complexity rather than O(n), making it much more efficient for large n like 2012. The program prints partial sums as it processes each range of d values.
