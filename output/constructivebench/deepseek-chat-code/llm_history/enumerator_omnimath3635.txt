[write_program]
This problem involves finding pairs of natural numbers (m, n) where a certain injectivity condition holds for all Boolean functions on Fin (m × n). The condition relates to the cardinality of filtered subsets based on the function's values.

We'll write a Python program to enumerate small pairs (m, n) and check the condition for all possible Boolean functions. Due to combinatorial explosion, we'll limit m and n to small values (≤ 4) and use optimizations to reduce computations.

```python
from itertools import product

def is_valid_pair(m, n):
    size = m * n
    # Precompute all possible index mappings for each k
    mappings = []
    for k in range(m):
        indices = [(k * n + i) % size for i in range(n)]
        mappings.append(indices)
    
    # Check all possible boolean functions
    for bits in product([False, True], repeat=size):
        counts = []
        for k in range(m):
            # Count True values for this k's indices
            count = sum(1 for i in mappings[k] if bits[i])
            counts.append(count)
        
        # Check if counts are all distinct
        if len(set(counts)) != m:
            return False
    return True

def main():
    max_val = 4  # Keep small due to combinatorial explosion
    valid_pairs = []
    
    for m in range(1, max_val + 1):
        for n in range(1, max_val + 1):
            if is_valid_pair(m, n):
                valid_pairs.append((m, n))
                print(f"Found valid pair: {(m, n)}")
    
    print("\nAll valid pairs found:")
    for pair in valid_pairs:
        print(pair)

if __name__ == "__main__":
    main()
```
