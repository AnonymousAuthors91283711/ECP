[write_program]
This problem involves finding the number of real solutions (x,y,z) to a system of two equations. We'll enumerate possible solutions numerically by checking small rational values and looking for patterns.

The approach:
1. Sample rational values for x, y, z in a small range
2. Check if they satisfy both equations within a tolerance
3. Count distinct solutions found

```python
import itertools

def check_solution(x, y, z, tol=1e-6):
    # First equation: x²y + y²z + z² = 0
    eq1 = x**2 * y + y**2 * z + z**2
    
    # Second equation: z³ + z²y + zy³ + x²y = 1/4*(x⁴ + y⁴)
    left = z**3 + z**2 * y + z * y**3 + x**2 * y
    right = 0.25 * (x**4 + y**4)
    eq2 = left - right
    
    return abs(eq1) < tol and abs(eq2) < tol

def find_solutions():
    # Check simple rational values
    values = [-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2]
    solutions = set()
    
    for x, y, z in itertools.product(values, repeat=3):
        if check_solution(x, y, z):
            # Round to avoid floating point precision issues
            rounded = tuple(round(v, 4) for v in (x, y, z))
            solutions.add(rounded)
    
    # Print found solutions
    for sol in sorted(solutions):
        print(f"Solution: {sol}")
    
    print(f"Total distinct solutions found: {len(solutions)}")

if __name__ == "__main__":
    find_solutions()
```
