[write_program]
The problem asks for the minimum value of the expression x⁴ + y⁴ - x²y - xy² under the constraints x > 0, y > 0, and x + y ≤ 1. We'll write a Python program to explore this numerically by:

1. Sampling points in the feasible region (0 < x, 0 < y, x + y ≤ 1)
2. Evaluating the expression at these points
3. Tracking the minimum value found

We'll use a grid search approach with small step sizes to approximate the minimum, while being careful to stay within the constraints.

```python
import numpy as np

def evaluate_expression(x, y):
    return x**4 + y**4 - x**2*y - x*y**2

def find_minimum():
    min_val = float('inf')
    min_point = (0, 0)
    step = 0.001  # Small step size for precision
    
    # Iterate over x from 0 to 1 (exclusive)
    for x in np.arange(step, 1.0, step):
        # For each x, y can range from 0 to 1-x (exclusive)
        for y in np.arange(step, 1.0 - x + step, step):
            current = evaluate_expression(x, y)
            if current < min_val:
                min_val = current
                min_point = (x, y)
                print(f"New minimum: {min_val:.6f} at (x={x:.3f}, y={y:.3f})")
    
    print(f"\nFinal minimum value found: {min_val:.10f}")
    print(f"At point (x={min_point[0]:.6f}, y={min_point[1]:.6f})")

if __name__ == "__main__":
    find_minimum()
```
