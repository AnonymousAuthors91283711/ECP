[write_program]
This problem asks for the smallest positive integer n such that the number of divisors of n^n is at least 1,000,000. We'll write a Python program to enumerate possible values of n and count the divisors of n^n.

The key insight is that the number of divisors of n^n can be computed from the prime factorization of n. If n has prime factorization n = Π p_i^e_i, then n^n = Π p_i^(n*e_i), and the number of divisors is Π (n*e_i + 1).

```python
import math

def count_divisors_of_n_pow_n(n):
    """Count the divisors of n^n using its prime factorization."""
    if n == 1:
        return 1
    # Get prime factorization of n
    factors = {}
    temp = n
    # Handle 2 separately
    while temp % 2 == 0:
        factors[2] = factors.get(2, 0) + 1
        temp = temp // 2
    # Check odd divisors up to sqrt(n)
    i = 3
    max_factor = math.isqrt(temp) + 1
    while i <= max_factor:
        while temp % i == 0:
            factors[i] = factors.get(i, 0) + 1
            temp = temp // i
            max_factor = math.isqrt(temp) + 1
        i += 2
    if temp > 1:
        factors[temp] = factors.get(temp, 0) + 1
    
    # Calculate number of divisors of n^n = product of (n*e_i + 1)
    divisors = 1
    for p, e in factors.items():
        divisors *= (n * e + 1)
        if divisors >= 1000000:
            return divisors
    return divisors

# Search for the smallest n where count_divisors_of_n_pow_n(n) >= 1000000
target = 1000000
n = 1
while True:
    d = count_divisors_of_n_pow_n(n)
    if d >= target:
        print(f"Found n = {n} with {d} divisors")
        break
    n += 1
    # Print progress every 1000 numbers to show it's working
    if n % 1000 == 0:
        print(f"Checked up to n = {n}...")
```
