[write_program]
This problem asks for all real-valued functions f: ℝ → ℝ that satisfy the functional equation:
f(x³ + y³ + xy) = x²f(x) + y²f(y) + f(xy) for all x,y ∈ ℝ.

We'll approach this by testing polynomial candidates, as polynomial functions often satisfy such equations. We'll test linear and quadratic forms first since higher degrees seem unlikely to satisfy the equation.

```python
def test_function(a, b, c, x, y):
    """Test if f(z) = a*z^2 + b*z + c satisfies the functional equation for given x,y"""
    left = a*(x**3 + y**3 + x*y)**2 + b*(x**3 + y**3 + x*y) + c
    right = x**2*(a*x**2 + b*x + c) + y**2*(a*y**2 + b*y + c) + (a*(x*y)**2 + b*(x*y) + c)
    return abs(left - right) < 1e-9  # Account for floating point errors

def find_solutions():
    # Test linear and quadratic forms
    test_cases = [
        (0, 1, 0),   # f(x) = x
        (0, 0, 0),    # f(x) = 0
        (1, 0, 0),    # f(x) = x^2
        (0, 1, 1),    # f(x) = x + 1
        (1, 1, 1)     # f(x) = x^2 + x + 1
    ]
    
    valid = []
    for coeffs in test_cases:
        a, b, c = coeffs
        # Test with random values
        tests = [(1, 2), (0.5, 1.5), (-1, 3), (0, 0), (2, -2)]
        if all(test_function(a, b, c, x, y) for x, y in tests):
            valid.append((a, b, c))
    
    print("Possible solutions (ax² + bx + c):")
    for a, b, c in valid:
        terms = []
        if a != 0:
            terms.append(f"{a}x²")
        if b != 0:
            terms.append(f"{b}x")
        if c != 0 or not terms:
            terms.append(str(c))
        print("f(x) = " + " + ".join(terms))

if __name__ == "__main__":
    find_solutions()
```
