[write_program]
The problem involves computing a finite sum with alternating signs and quadratic terms. We need to enumerate the partial sums to observe the pattern and conjecture the closed-form answer. The sum is from k=0 to 2000 of (-1)^(k+1)*(k+1)*(k+2). We'll compute partial sums for smaller ranges first to identify the pattern.

```python
def compute_sum(n):
    total = 0
    for k in range(n + 1):
        term = (-1) ** (k + 1) * (k + 1) * (k + 2)
        total += term
        # Print partial sums for smaller n to observe pattern
        if n <= 20 or k % 100 == 0:
            print(f"Sum up to k={k}: {total}")
    return total

# Compute for sample values to observe pattern
for n in [0, 1, 2, 3, 4, 5, 10, 20]:
    print(f"\nComputing for n={n}:")
    compute_sum(n)

# Compute the full sum for n=2000
print("\nFinal computation for n=2000:")
result = compute_sum(2000)
print(f"Final sum: {result}")
```

The program first computes partial sums for small values of n (0 through 5, then 10 and 20) to help identify the pattern. Then it computes the full sum for n=2000. The output shows how the sum behaves at different scales, allowing us to conjecture the general formula. The pattern suggests the sum alternates between values related to (n+1)(n+2)/2 for even and odd n.
