[write_program]
This problem asks for all natural numbers n < 100 such that n divides 2^n + 2. We'll write a Python program to enumerate these numbers efficiently.

The approach:
1. Iterate through all numbers from 1 to 99
2. For each number n, compute 2^n + 2 modulo n
3. If the remainder is 0, print n (since n divides 2^n + 2)
4. We'll use Python's built-in pow with modulus for efficient computation

```python
def find_divisors():
    results = []
    for n in range(1, 100):
        # Compute (2^n + 2) mod n efficiently
        # Using pow with modulus to handle large exponents
        remainder = (pow(2, n, n) + 2) % n
        if remainder == 0:
            results.append(n)
            print(n)  # Stream partial results immediately
    
    print("Complete list:", results)

find_divisors()
```
