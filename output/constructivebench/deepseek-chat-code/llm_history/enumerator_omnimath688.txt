[write_program]
This problem asks for all pairs of positive integers (m, n) where m squared equals the sum of factorials from 1 to n. We'll write a Python program to search for such pairs efficiently.

The approach:
1. Precompute factorials up to a reasonable limit (n=20 since 20! is very large)
2. Compute cumulative sums of factorials (sum of 1! to n!)
3. Check which cumulative sums are perfect squares
4. Output valid (m, n) pairs where m = sqrt(sum)

```python
import math

def find_factorial_square_pairs(max_n=20):
    # Precompute factorials and cumulative sums
    factorials = [1]  # 0! = 1
    cumulative_sums = [0]  # sum up to 0 is 0
    
    for n in range(1, max_n + 1):
        fact = factorials[-1] * n
        factorials.append(fact)
        new_sum = cumulative_sums[-1] + fact
        cumulative_sums.append(new_sum)
        
        # Check if the sum is a perfect square
        s = new_sum
        m = math.isqrt(s)
        if m * m == s and n >= 1:
            print(f"Found pair: m={m}, n={n}")

if __name__ == "__main__":
    find_factorial_square_pairs()
```
