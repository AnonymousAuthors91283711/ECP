[write_program]
This problem involves finding the maximum sum of a function g over a range, given constraints on functions f and g. We'll approach it by:

1. Understanding the constraints:
   - f is non-increasing for n ≤ 300
   - f(300) ≥ 0
   - Sum of f over 0-300 ≤ 300
   - g has a subadditive-like property
   - We need to maximize the sum of g from 0 to 6000

2. Strategy:
   - Enumerate possible f functions (non-increasing sequences)
   - For each f, compute the maximal possible g that satisfies the condition
   - Calculate the sum of g and track the maximum

Here's a Python program that explores this:

```python
import itertools

def solve():
    max_sum = 0
    best_f = None
    
    # We'll consider f as a non-increasing sequence with sum <= 300
    # Since f is non-increasing and f(300) >= 0, we can limit our search
    # We'll consider f values up to some reasonable bound
    
    # Try simple cases first - constant functions
    for c in range(0, 2):  # f(n) = c
        if 301 * c <= 300:
            # For constant f, g must satisfy g(sum n_i) <= sum f(n_i) = c * len(n_i)
            # The maximal g is g(k) = min(c * m for all m where k = sum of m numbers)
            # For g to be maximal, we take m=1: g(k) = c
            current_sum = 6001 * c
            if current_sum > max_sum:
                max_sum = current_sum
                best_f = [c] * 301
                print(f"Found new max sum: {max_sum} with constant f={c}")
    
    # Try piecewise constant functions
    # Simple case: f(n) = a for n <= k, 0 otherwise
    for k in range(1, 300):
        for a in range(1, 300):
            if (k+1)*a <= 300:
                f = [a]*(k+1) + [0]*(300-k)
                # For this f, g is more complicated but we can bound it
                # The maximal g would be g(n) = min(f(m) for all m <= n)
                # Since f is a step function, g(n) = a if n <= k, else 0
                current_sum = (k+1)*a + max(0, 6001 - (k+1))*0
                if current_sum > max_sum:
                    max_sum = current_sum
                    best_f = f.copy()
                    print(f"Found new max sum: {max_sum} with step f: {a} up to {k}")
    
    # After checking simple cases, the maximum seems to be from constant f=1
    print("Final maximum sum found:", max_sum)

solve()
```

The program explores simple cases of constant and step functions for f, computes the corresponding maximal g, and calculates the sum. The output shows that the constant function f(n)=1 gives the maximal sum of 6001 (since 301*1 ≤ 300 is false, it won't actually find this, demonstrating the need for more sophisticated enumeration). The true maximum is likely achieved by a more complex f.
