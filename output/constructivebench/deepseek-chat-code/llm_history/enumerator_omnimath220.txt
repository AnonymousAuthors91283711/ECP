[write_program]
This problem asks for all positive integers n where n² + 3ⁿ is a perfect square. We'll write a Python program to search for such n values up to a reasonable limit.

The approach:
1. Iterate through possible n values starting from 1
2. For each n, compute n² + 3ⁿ
3. Check if this sum is a perfect square by testing if its integer square root squared equals the sum
4. Print any n that satisfies this condition

We'll limit the search to n ≤ 100 since 3ⁿ grows rapidly and larger n values are unlikely to produce perfect squares when added to n².

```python
import math

def is_perfect_square(num):
    root = math.isqrt(num)
    return root * root == num

max_n = 100
print(f"Searching for n where n² + 3ⁿ is perfect square (n ≤ {max_n})...")

for n in range(1, max_n + 1):
    candidate = n * n + 3 ** n
    if is_perfect_square(candidate):
        print(f"Found solution: n = {n} (m² = {candidate})")
```
