[write_program]
This problem asks for the number of integer values D such that for all real numbers a, b in the interval (-1/4, 1/4), the inequality |a² - D*b²| < 1 holds. We'll write a Python program to enumerate possible D values that satisfy this condition.

Key observations:
1. The condition must hold for all a,b in (-1/4, 1/4)
2. We can test boundary cases to find constraints on D
3. The maximum possible a² is (1/4)² = 1/16 when a approaches ±1/4
4. The maximum possible b² is also 1/16

```python
def check_D(D):
    max_a_sq = (1/4)**2
    max_b_sq = (1/4)**2
    # Worst case occurs when a² is minimized (0) and b² is maximized (1/16)
    # Then |0 - D*(1/16)| < 1 => |D| < 16
    # Also when a² is maximized (1/16) and b² is minimized (0)
    # Then |1/16 - 0| < 1 which is always true
    # So main constraint comes from first case
    if abs(D) >= 16:
        return False
    
    # Check another boundary case: a approaches 1/4, b approaches 1/4
    # |(1/16) - D*(1/16)| < 1 => |1 - D| < 16 => -15 < D < 17
    # But since |D| < 16 already, this gives D > -15
    
    # Check when a approaches 0, b approaches 1/4
    # |0 - D*(1/16)| < 1 => -16 < D < 16 (same as first condition)
    
    # Check when a approaches 1/4, b approaches 0
    # |1/16 - 0| < 1 (always true)
    
    # Therefore the only constraints are -15 < D < 16
    return -15 < D < 16

def main():
    valid_D = []
    # Check all integer D values from -20 to 20 (covers the possible range)
    for D in range(-20, 21):
        if check_D(D):
            valid_D.append(D)
            print(f"Found valid D: {D}")
    
    print(f"\nTotal number of valid D values: {len(valid_D)}")

if __name__ == "__main__":
    main()
```
