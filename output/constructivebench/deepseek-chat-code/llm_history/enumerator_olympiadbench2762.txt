[write_program]
The problem asks to count all 6-digit numbers (from 100000 to 999999) where:
1. The first three digits are strictly decreasing (d1 > d2 > d3)
2. The last three digits are strictly decreasing (d4 > d5 > d6)

We'll enumerate all possible combinations of digits that satisfy these conditions. For efficiency, we'll:
1. Generate all possible combinations for the first 3 digits (d1,d2,d3) where d1>d2>d3 and d1 â‰¥ 1 (since it's a 6-digit number)
2. Generate all possible combinations for the last 3 digits (d4,d5,d6) where d4>d5>d6
3. Count all valid combinations of these two parts

```python
def count_numbers():
    count = 0
    
    # Count valid first 3-digit combinations (d1>d2>d3, d1 >=1)
    first_part = 0
    for d1 in range(1, 10):
        for d2 in range(0, d1):
            for d3 in range(0, d2):
                first_part += 1
    
    # Count valid last 3-digit combinations (d4>d5>d6)
    last_part = 0
    for d4 in range(0, 10):
        for d5 in range(0, d4):
            for d6 in range(0, d5):
                last_part += 1
    
    # Total combinations is product of both parts
    total = first_part * last_part
    print(total)

count_numbers()
```
