[write_program]
This problem asks for the count of numbers between 1 and 1,000,000 where n mod 1000 > n mod 1001. We'll write a Python program to count these numbers efficiently by analyzing the periodic patterns of the modulo operations.

Key observations:
1. The condition n%1000 > n%1001 occurs when n is in certain ranges within each LCM(1000,1001)=1001000 cycle
2. We can compute the count for one full cycle (1001000 numbers) and multiply by the number of complete cycles in 1,000,000
3. Then handle the remaining numbers separately

```python
def count_condition(start, end):
    count = 0
    for n in range(start, end + 1):
        if n % 1000 > n % 1001:
            count += 1
    return count

def main():
    cycle_length = 1000 * 1001  # LCM(1000,1001) since they're coprime
    full_cycles = 1000000 // cycle_length
    remainder = 1000000 % cycle_length
    
    # Count for one full cycle
    cycle_count = count_condition(1, cycle_length)
    
    # Total count is full cycles * cycle_count plus remainder count
    total = full_cycles * cycle_count + count_condition(1, remainder)
    
    print(f"Count of numbers where n%1000 > n%1001 in 1..1,000,000: {total}")

if __name__ == "__main__":
    main()
```
