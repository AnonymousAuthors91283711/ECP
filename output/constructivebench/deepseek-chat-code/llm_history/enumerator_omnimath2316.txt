[write_program]
This problem asks for the number of integer triples (a, b, c) where 1 ≤ a, b, c ≤ 100 that satisfy the equation:
a²b + b²c + c²a = ab² + bc² + ca².

We can simplify the equation by rearranging terms:
a²b - ab² + b²c - bc² + c²a - ca² = 0
ab(a - b) + bc(b - c) + ca(c - a) = 0

Notice that when a = b = c, the equation is satisfied. Also, any permutation of (a, b, c) will satisfy the equation if the original triple does. We'll enumerate all possible triples within the range and count those that satisfy the equation.

```python
def count_solutions():
    count = 0
    max_val = 100
    for a in range(1, max_val + 1):
        for b in range(1, max_val + 1):
            for c in range(1, max_val + 1):
                lhs = a*a*b + b*b*c + c*c*a
                rhs = a*b*b + b*c*c + c*a*a
                if lhs == rhs:
                    count += 1
                    print(f"Found solution: ({a}, {b}, {c})")  # Stream partial results
    print(f"Total number of solutions: {count}")

count_solutions()
```
