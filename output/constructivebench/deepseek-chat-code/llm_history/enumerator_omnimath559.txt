[write_program]
This problem involves finding digits (W,E,Y,S,C,N) that satisfy a cryptarithmetic equation where each letter represents a unique digit from 1-9 (no zeros) and W=3. The equation is (10*W + E) * (100*E + 10*Y + E) = 10000*S + 1000*C + 100*E + 10*N + E.

We'll enumerate all possible digit combinations where:
1. W=3
2. All digits are distinct and non-zero
3. The equation holds

```python
def solve():
    W = 3
    digits = set(range(1, 10)) - {W}
    
    for E in digits:
        remaining1 = digits - {E}
        for Y in remaining1:
            remaining2 = remaining1 - {Y}
            for S in remaining2:
                remaining3 = remaining2 - {S}
                for C in remaining3:
                    remaining4 = remaining3 - {C}
                    for N in remaining4:
                        left = (10*W + E) * (100*E + 10*Y + E)
                        right = 10000*S + 1000*C + 100*E + 10*N + E
                        if left == right:
                            print(f"Solution found: W={W}, E={E}, Y={Y}, S={S}, C={C}, N={N}")
                            print(f"Equation: ({10*W}+{E})*({100*E}+{10*Y}+{E}) = {left}")
                            print(f"Right side: {10000*S}+{1000*C}+{100*E}+{10*N}+{E} = {right}")
                            print()

if __name__ == "__main__":
    solve()
```
