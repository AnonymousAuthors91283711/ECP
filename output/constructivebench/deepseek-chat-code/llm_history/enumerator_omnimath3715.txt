[write_program]
This problem asks to characterize all rational functions f: ℚ → ℚ that satisfy a certain functional equation involving four points in arithmetic progression. The condition states that for any four strictly increasing rational numbers x < y < z < t forming a 3-term arithmetic progression (y-x = z-y = t-z), the equation f(x) + f(t) = f(y) + f(z) must hold.

We'll enumerate possible function forms (linear, quadratic, etc.) and check which satisfy the condition for small arithmetic progressions. The likely candidates are quadratic functions, since the condition resembles a discrete version of the second derivative being constant.

```python
def check_condition(f, x, y, z, t):
    """Check if f satisfies the functional equation for given arithmetic progression"""
    return f(x) + f(t) == f(y) + f(z)

def test_function(f, name):
    """Test a candidate function on sample arithmetic progressions"""
    print(f"\nTesting function: {name}")
    samples = [
        (0, 1, 2, 3),    # simple arithmetic progression
        (1, 3, 5, 7),     # step size 2
        (1, 4, 7, 10),    # step size 3
        (1, 2, 3, 4),     # step size 1
        (1, 5, 9, 13),    # step size 4
        (-2, 0, 2, 4),    # negative start
        (1, 1.5, 2, 2.5)  # fractional step
    ]
    
    for x, y, z, t in samples:
        if not check_condition(f, x, y, z, t):
            print(f"Failed at ({x},{y},{z},{t})")
            return False
    print("Passed all tests")
    return True

# Test linear function f(x) = ax + b
def linear(a, b):
    return lambda x: a*x + b

# Test quadratic function f(x) = ax² + bx + c
def quadratic(a, b, c):
    return lambda x: a*x**2 + b*x + c

# Test constant function
def constant(c):
    return lambda x: c

# Main testing
if __name__ == "__main__":
    # Test constant function
    test_function(constant(5), "f(x) = 5")
    
    # Test linear functions
    test_function(linear(2, 3), "f(x) = 2x + 3")
    
    # Test quadratic functions
    test_function(quadratic(1, 0, 0), "f(x) = x²")
    test_function(quadratic(3, -2, 5), "f(x) = 3x² - 2x + 5")
    
    # Test non-quadratic function (should fail)
    test_function(lambda x: x**3, "f(x) = x³")
```
