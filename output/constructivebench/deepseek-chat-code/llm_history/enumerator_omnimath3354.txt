[write_program]
The problem is to compute the sum of powers of the imaginary unit `i` from `i^0` to `i^2009`. Since powers of `i` cycle every 4 exponents (i^0=1, i^1=i, i^2=-1, i^3=-i, i^4=1, etc.), we can leverage this periodicity to compute the sum efficiently.

We'll:
1. Compute the number of complete cycles (each cycle is 4 terms)
2. Compute the remaining terms after complete cycles
3. Sum the contributions from complete cycles and remaining terms

```python
def compute_sum(n):
    # Each complete cycle of 4 terms sums to 0 (1 + i - 1 - i = 0)
    complete_cycles = n // 4
    remainder = n % 4
    
    # Sum of complete cycles is 0, so only need to sum the remaining terms
    sum_remainder = 0
    for k in range(remainder + 1):
        if k % 4 == 0:
            sum_remainder += 1
        elif k % 4 == 1:
            sum_remainder += 1j
        elif k % 4 == 2:
            sum_remainder += -1
        elif k % 4 == 3:
            sum_remainder += -1j
    
    return sum_remainder

# Compute for n = 2009
n = 2009
result = compute_sum(n)
print(f"Sum from i^0 to i^{n}: {result}")
```
