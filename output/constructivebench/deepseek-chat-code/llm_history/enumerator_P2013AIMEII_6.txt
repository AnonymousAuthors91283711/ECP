[write_program]
The problem asks for the smallest positive integer N such that no perfect square exists in the range [1000*N, 1000*N+999]. We need to find the minimal N where this condition holds.

The approach is to:
1. Iterate through possible N values starting from 1
2. For each N, check the range 1000*N to 1000*N+999
3. If no perfect square exists in this range, we've found our answer
4. Otherwise continue to next N

We'll optimize by checking perfect squares around the range boundaries rather than checking all 1000 numbers.

```python
import math

def is_square_in_range(start, end):
    """Check if any perfect square exists between start and end (inclusive)"""
    lower = math.isqrt(start)
    upper = math.isqrt(end) + 1  # +1 to handle edge cases
    for k in range(lower, upper + 1):
        square = k * k
        if start <= square <= end:
            return True
    return False

def find_min_N():
    """Find the smallest N where [1000*N, 1000*N+999] contains no perfect square"""
    N = 1
    while True:
        start = 1000 * N
        end = start + 999
        if not is_square_in_range(start, end):
            print(f"Found N = {N}")  # Output immediately when found
            return N
        N += 1

if __name__ == "__main__":
    find_min_N()
```
