[write_program]
This problem involves a recursive sequence defined modulo 2012. We need to compute a(2012) where:
- a(0) = 0
- a(1) = 1
- a(n+1) = (a(n) + (n+1)) mod 2012

The solution requires computing the sequence up to n=2012. Since the modulus is 2012, we can compute this efficiently without running into large number issues.

```python
def compute_sequence(n_max, mod):
    a = [0] * (n_max + 1)
    a[0] = 0
    a[1] = 1
    for n in range(1, n_max):
        a[n+1] = (a[n] + (n+1)) % mod
    return a

mod = 2012
n_max = 2012
sequence = compute_sequence(n_max, mod)
print(f"a(2012) = {sequence[n_max]}")
```

The program computes the sequence up to n=2012 using the given recurrence relation, taking modulo 2012 at each step. It then prints the value of a(2012). The computation is efficient with O(n) time complexity and O(n) space complexity.

Note: The actual value is computed by running the program, as per the requirements we don't state it here. The program will output the exact value when executed.
