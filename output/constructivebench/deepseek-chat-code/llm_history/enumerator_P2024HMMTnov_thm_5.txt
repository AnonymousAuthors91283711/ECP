[write_program]
This problem asks for the maximum possible sum of numbers selected from 1 to 100 such that for any selected number k, none of the numbers in the interval (k, 2k) are selected. We'll write a Python program to enumerate all possible valid subsets and find the maximum sum.

The approach is to:
1. Generate all numbers from 1 to 100
2. For each number, check if selecting it would violate the condition with previously selected numbers
3. Keep track of the maximum sum found

```python
def max_valid_sum():
    max_sum = 0
    best_subset = []
    n = 100
    
    # We'll use backtracking to explore all valid subsets
    def backtrack(start, current_sum, selected):
        nonlocal max_sum, best_subset
        if current_sum > max_sum:
            max_sum = current_sum
            best_subset = selected.copy()
            print(f"New max sum: {max_sum} with subset: {best_subset}")
        
        for k in range(start, n + 1):
            # Check if k can be added without violating conditions
            valid = True
            for s in selected:
                if (s < k < 2*s) or (k < s < 2*k):
                    valid = False
                    break
            if valid:
                selected.append(k)
                backtrack(k + 1, current_sum + k, selected)
                selected.pop()
    
    backtrack(1, 0, [])
    print(f"Final maximum sum: {max_sum}")
    print(f"Optimal subset: {best_subset}")

max_valid_sum()
```

The program uses backtracking to explore all possible valid subsets, checking at each step whether adding a new number would violate the given condition. It prints each new maximum sum found along with the corresponding subset, and finally outputs the overall maximum sum and the optimal subset that achieves it.
