[write_program]
This problem involves finding the minimal number of guesses needed to distinguish between all possible secrets in a 3-digit combination lock (digits 0-9). The response function calculates a distance metric between the secret and guess. We need to find the smallest n such that for any two distinct secrets, there's at least one guess that gives different responses.

We'll approach this by:
1. Enumerating all possible secrets (10^3 = 1000 possibilities)
2. For each candidate n, checking if there exists a set of n guesses that can distinguish all pairs
3. Finding the minimal n where this is possible

```python
from itertools import product

def response(secret, guess):
    x, y, z = secret
    a, b, c = guess
    return abs(x + y - (a + b)) + abs(y + z - (b + c)) + abs(z + x - (c + a))

def test_guesses(guesses):
    secrets = list(product(range(10), repeat=3))
    for s1 in secrets:
        for s2 in secrets:
            if s1 == s2:
                continue
            all_responses_equal = True
            for g in guesses:
                if response(s1, g) != response(s2, g):
                    all_responses_equal = False
                    break
            if all_responses_equal:
                return False
    return True

def find_min_guesses():
    max_tested = 0
    # Try small n values first
    for n in range(1, 20):
        print(f"Testing n = {n}")
        # Generate all possible n-length guess sequences (limited for practicality)
        # In practice, we'd need a smarter search, but for small n we can sample
        for _ in range(1000):  # Limited attempts per n
            guesses = [tuple(np.random.randint(0, 10, 3)) for _ in range(n)]
            if test_guesses(guesses):
                print(f"Found working set with n = {n}")
                return n
        print(f"No solution found for n = {n} yet")
    return -1

if __name__ == "__main__":
    find_min_guesses()
```

Note: This is a simplified approach. A complete solution would require:
1. More efficient guess generation (systematic rather than random)
2. Mathematical analysis of the response function properties
3. Potential symmetry breaking to reduce the search space

The actual minimal n is likely much smaller than what this brute-force approach can find, but this demonstrates the enumeration strategy. A complete solution would involve deeper combinatorial analysis.
