[write_program]
This problem involves counting triples (a,b,c) where 1 ≤ a,b,c ≤ 2010 and 3 divides a*b*c + a*b + a, then finding the probability as a rational number. We'll write a Python program to enumerate smaller cases (n=1 to n=10) to identify the pattern.

The key observation is that the expression a*b*c + a*b + a = a(b*c + b + 1) must be divisible by 3. This happens when either:
1. a is divisible by 3, or
2. b*c + b + 1 ≡ 0 mod 3 when a ≢ 0 mod 3

We'll compute the probability for small n to identify the pattern.

```python
def compute_probability(n):
    count = 0
    total = n ** 3
    for a in range(1, n+1):
        for b in range(1, n+1):
            for c in range(1, n+1):
                if (a*b*c + a*b + a) % 3 == 0:
                    count += 1
    return count, total

# Compute for small values of n to identify pattern
for n in range(1, 11):
    count, total = compute_probability(n)
    probability = (count, total)  # Keep as fraction to avoid floating point
    print(f"n={n}: {count}/{total} = {count/total:.4f}")

# After observing the pattern, we can see it converges to 13/27
# For n=2010 (which is divisible by 3), the exact probability is 13/27
```
