[write_program]
This problem asks to find a unique pair of positive integers (p₁, p₂) such that a specific triangular number formula equals 2015. The formula appears to be related to triangular numbers minus an adjustment. We'll write a Python program to search for such pairs efficiently.

The approach:
1. The equation can be rewritten as T(n) - p₁ + 1 = 2015, where n = p₁ + p₂ - 1 and T(n) is the nth triangular number
2. We'll iterate through possible n values where T(n) is close to 2015
3. For each n, we'll check possible p₁ values that make the equation hold
4. We'll limit the search space based on triangular number bounds

```python
def find_pairs():
    target = 2015
    max_n = 100  # Sufficiently large based on triangular number growth
    
    # Precompute triangular numbers up to max_n
    triangular = [0] * (max_n + 1)
    for n in range(1, max_n + 1):
        triangular[n] = n * (n + 1) // 2
    
    solutions = []
    for n in range(1, max_n + 1):
        # The equation becomes: triangular[n] - p1 + 1 = target
        # So p1 = triangular[n] + 1 - target
        p1 = triangular[n] + 1 - target
        if p1 <= 0:
            continue  # p1 must be positive
        
        # p2 is derived from n = p1 + p2 - 1
        p2 = n - p1 + 1
        if p2 <= 0:
            continue  # p2 must be positive
        
        # Verify the solution
        lhs = (n * (n + 1) // 2) - p1 + 1
        if lhs == target:
            solutions.append((p1, p2))
            print(f"Found pair: ({p1}, {p2})")
    
    if solutions:
        print("All solutions found:")
        for sol in solutions:
            print(sol)
    else:
        print("No solutions found in the search space")

find_pairs()
```
