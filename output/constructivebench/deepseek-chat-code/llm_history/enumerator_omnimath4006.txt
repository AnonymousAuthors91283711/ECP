[write_program]
This problem asks for natural numbers n where the digit sum s(n) satisfies s(n)*(s(n)-1) = n-1. We'll write a Python program to enumerate such numbers up to a reasonable threshold (1 million) to identify patterns.

The program will:
1. Iterate through numbers from 1 to 1,000,000
2. Calculate digit sum for each number
3. Check if the condition is satisfied
4. Print matching numbers immediately as they're found

```python
def digit_sum(n):
    return sum(int(d) for d in str(n))

max_n = 10**6
print(f"Searching numbers up to {max_n}...")
for n in range(1, max_n + 1):
    s = digit_sum(n)
    if s * (s - 1) == n - 1:
        print(n)
```
