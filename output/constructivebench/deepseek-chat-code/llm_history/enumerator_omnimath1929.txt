[write_program]
This problem asks for the count of numbers `n` between 1 and 100 where the number of divisors of `10n` is exactly three times the number of divisors of `n`. We'll write a Python program to enumerate all such numbers and count them.

The approach:
1. First, we need an efficient divisor counting function.
2. Then, we'll iterate through numbers 1 to 100.
3. For each number, we'll count its divisors and the divisors of 10 times the number.
4. We'll check if the condition holds and collect such numbers.

```python
import math

def count_divisors(n):
    if n == 0:
        return 0
    count = 1
    # Handle 2 separately
    exponent = 0
    while n % 2 == 0:
        exponent += 1
        n = n // 2
    count *= (exponent + 1)
    
    # Check odd divisors up to sqrt(n)
    i = 3
    max_factor = math.sqrt(n)
    while i <= max_factor:
        exponent = 0
        while n % i == 0:
            exponent += 1
            n = n // i
            max_factor = math.sqrt(n)
        count *= (exponent + 1)
        i += 2
    
    if n > 1:
        count *= 2
    return count

solutions = []
for n in range(1, 101):
    div_n = count_divisors(n)
    div_10n = count_divisors(10 * n)
    if div_10n == 3 * div_n:
        solutions.append(n)
        print(f"Found solution: {n}")

print(f"\nTotal solutions found: {len(solutions)}")
```
