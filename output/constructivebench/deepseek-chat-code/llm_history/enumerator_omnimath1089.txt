[write_program]
This problem asks for the number of triples of positive integers that sum to 2002. We need to count all multisets (order doesn't matter) of 3 positive integers that add up to 2002. 

The approach is to enumerate all possible combinations where a ≤ b ≤ c to avoid counting permutations as distinct solutions. We'll iterate through possible values of a (from 1 to 2002/3), then for each a, iterate through possible values of b (from a to (2002-a)/2), and calculate c as 2002-a-b.

Here's the Python program to count these combinations:

```python
def count_triples(target_sum):
    count = 0
    max_a = target_sum // 3
    for a in range(1, max_a + 1):
        remaining = target_sum - a
        max_b = remaining // 2
        min_b = a
        if max_b < min_b:
            continue
        count += max_b - min_b + 1
    return count

# Using a smaller example first to verify the approach works
print("For sum=6 (should be 3):", count_triples(6))
print("For sum=7 (should be 4):", count_triples(7))

# Now compute the actual answer for 2002
result = count_triples(2002)
print("Number of triples summing to 2002:", result)
```

The program first tests with smaller sums (6 and 7) to verify the counting logic works correctly, then computes the answer for 2002. The output will show the verification cases and then the final count for 2002.
