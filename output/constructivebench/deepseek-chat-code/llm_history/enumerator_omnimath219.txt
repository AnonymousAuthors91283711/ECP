[write_program]
This problem asks to find all non-constant real polynomials P(x) such that for every non-zero real z where both P(z) and P(1/z) are non-zero, the equation 1/P(z) + 1/P(1/z) = z + 1/z holds. We'll enumerate possible polynomial forms and verify the condition.

The approach is to:
1. Consider polynomials of increasing degrees
2. For each degree, generate possible forms (like x^n ± 1)
3. Test the condition for sample points
4. Output candidates that satisfy the condition

```python
def eval_poly(coeffs, x):
    """Evaluate polynomial with given coefficients at x"""
    return sum(c * (x**i) for i, c in enumerate(coeffs))

def test_poly(coeffs, num_tests=10):
    """Test if polynomial satisfies the condition at several points"""
    for _ in range(num_tests):
        z = 0
        while z == 0:
            z = 2.0 * (0.5 - random.random())  # random in (-1,1) excluding 0
        p_z = eval_poly(coeffs, z)
        p_1z = eval_poly(coeffs, 1/z)
        if p_z == 0 or p_1z == 0:
            continue
        lhs = 1/p_z + 1/p_1z
        rhs = z + 1/z
        if not abs(lhs - rhs) < 1e-6:
            return False
    return True

import random
random.seed(42)

# Test polynomials of form x^n - 1 and x^n + 1 for n up to 5
print("Testing polynomial forms...")
for n in range(1, 6):
    for sign in [-1, 1]:
        coeffs = [0]*n + [sign]
        coeffs[0] = -1 if sign == 1 else 0  # x^n ± 1
        if test_poly(coeffs):
            print(f"Found candidate: P(x) = x^{n} {'+' if sign > 0 else '-'} 1")

# Test linear combinations
print("\nTesting linear combinations...")
for a in [1, -1]:
    for b in [1, -1]:
        coeffs = [b, 0, a]  # a*x^2 + b
        if test_poly(coeffs):
            print(f"Found candidate: P(x) = {a}x^2 {'+' if b > 0 else '-'} {abs(b)}")

print("\nEnumeration complete.")
```
