[write_program]
This problem involves finding all pairs of natural numbers (m, n) that satisfy the equation m² + 2*3ⁿ = m*(2ⁿ⁺¹ - 1). We'll write a Python program to enumerate possible solutions by testing small values of n and solving for m.

The approach:
1. Iterate n from 0 to a reasonable upper bound (we'll use 20)
2. For each n, solve the quadratic equation for m
3. Check if the solution is a positive integer
4. Print valid (m, n) pairs as they're found

```python
def find_solutions():
    max_n = 20  # Reasonable upper bound for n
    print(f"Searching for solutions with n up to {max_n}:")
    
    for n in range(0, max_n + 1):
        # Rewrite equation as m^2 - (2^(n+1)-1)*m + 2*3^n = 0
        a = 1
        b = -(2**(n+1) - 1)
        c = 2 * (3**n)
        
        discriminant = b**2 - 4*a*c
        
        if discriminant < 0:
            continue
            
        sqrt_discriminant = discriminant**0.5
        m1 = (-b + sqrt_discriminant) / (2*a)
        m2 = (-b - sqrt_discriminant) / (2*a)
        
        # Check if solutions are positive integers
        for m in [m1, m2]:
            if m > 0 and abs(m - round(m)) < 1e-9:
                m_int = round(m)
                print(f"Found solution: (m, n) = ({m_int}, {n})")

find_solutions()
```
