[write_program]
This problem asks for the maximum value of the expression b/a + c/b + a/c under the constraints 0 < a ≤ b ≤ c ≤ 2a. We'll write a Python program to explore this optimization problem numerically by sampling valid (a,b,c) triples and computing the expression.

The approach will:
1. Sample a in a reasonable range (0.1 to 10)
2. For each a, sample b in [a, 2a]
3. For each b, sample c in [b, 2a]
4. Compute the expression and track the maximum value found

```python
import numpy as np

def main():
    max_value = 0
    best_triple = None
    
    # Sample a in logarithmic scale from 0.1 to 10
    for a in np.logspace(-1, 1, 100):
        # Sample b from a to 2a
        for b in np.linspace(a, 2*a, 100):
            # Sample c from b to 2a
            for c in np.linspace(b, 2*a, 100):
                if a > 0 and b > 0 and c > 0 and a <= b <= c <= 2*a:
                    value = b/a + c/b + a/c
                    if value > max_value:
                        max_value = value
                        best_triple = (a, b, c)
                        print(f"New max: {max_value:.10f} at (a,b,c)={best_triple}")
    
    print(f"\nFinal maximum value found: {max_value:.10f}")

if __name__ == "__main__":
    main()
```
