[write_program]
This problem involves finding natural numbers `a` where:
1. `b` is formed by moving `a`'s last digit to the front
2. `c = bÂ²`
3. `d` is formed by moving `c`'s first digit to the end
4. `d = aÂ²`

We'll write a Python program to search for such numbers `a` up to a reasonable limit.

```python
def digits(n, base=10):
    """Return digits of n in given base (most significant first)."""
    if n == 0:
        return [0]
    d = []
    while n > 0:
        d.append(n % base)
        n = n // base
    return d[::-1]

def from_digits(d, base=10):
    """Convert list of digits to number."""
    n = 0
    for digit in d:
        n = n * base + digit
    return n

def find_special_numbers(limit=10**6):
    """Find numbers a where rotating digits of a and a^2 satisfies the condition."""
    for a in range(1, limit + 1):
        # Get digits of a
        a_digits = digits(a)
        if len(a_digits) < 2:
            continue  # Need at least 2 digits for rotation
        
        # Form b by moving last digit to front
        last_digit = a_digits[-1]
        b_digits = [last_digit] + a_digits[:-1]
        b = from_digits(b_digits)
        
        # Compute c = b^2
        c = b * b
        
        # Get digits of c
        c_digits = digits(c)
        if len(c_digits) < 2:
            continue  # Need at least 2 digits for rotation
        
        # Form d by moving first digit to end
        first_digit = c_digits[0]
        d_digits = c_digits[1:] + [first_digit]
        d = from_digits(d_digits)
        
        # Check if d equals a^2
        if d == a * a:
            print(f"Found solution: a = {a}, b = {b}, c = {c}, d = {d}")

if __name__ == "__main__":
    find_special_numbers()
```
