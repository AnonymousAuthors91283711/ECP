[write_program]
The problem involves finding the product (p²+4)(q²+4)(r²+4) where p, q, r are distinct roots of the cubic equation x³ + 2x² - x + 3 = 0. We'll approach this by:

1. Finding the roots numerically (since exact form is complex)
2. Calculating the product for all permutations of roots
3. Observing the consistent result

The program will:
- Find approximate roots using numpy's roots function
- Filter distinct roots (with tolerance for floating point errors)
- Calculate the product for all combinations
- Print the consistent result

```python
import numpy as np
from itertools import combinations

# Coefficients of x³ + 2x² - x + 3 = 0
coeffs = [1, 2, -1, 3]

# Find approximate roots
roots = np.roots(coeffs)

# Filter distinct roots with tolerance
distinct_roots = []
tol = 1e-6
for r in roots:
    if all(abs(r - x) > tol for x in distinct_roots):
        distinct_roots.append(r)

# Verify we have 3 distinct roots
if len(distinct_roots) != 3:
    print("Error: Couldn't find 3 distinct roots")
else:
    p, q, r = distinct_roots
    # Calculate the product
    product = (p**2 + 4) * (q**2 + 4) * (r**2 + 4)
    print(f"Approximate product: {product.real:.6f}")  # Imaginary part should be negligible
```
