[write_program]
This problem asks for the greatest constant m such that for all positive real numbers a, b, c, the inequality holds:
a³ + b³ + c³ - 3abc ≥ m(|a-b|³ + |a-c|³ + |b-c|³)

We'll write a Python program to numerically explore this inequality by testing various values of m and triples (a,b,c) to find the maximal m where the inequality holds.

The approach will:
1. Test m values from 0 to 1 in small increments
2. For each m, test various (a,b,c) cases including symmetric and asymmetric cases
3. Find the largest m where the inequality holds for all tested cases

```python
import numpy as np

def test_inequality(m, a, b, c):
    lhs = a**3 + b**3 + c**3 - 3*a*b*c
    rhs = m*(abs(a-b)**3 + abs(a-c)**3 + abs(b-c)**3)
    return lhs >= rhs - 1e-9  # small tolerance for floating point

def find_max_m():
    best_m = 0
    # Test various m values in descending order
    for m in np.linspace(1.0, 0.0, 1001):
        valid = True
        # Test symmetric case a=b=1, c varies
        for c in np.linspace(0.1, 2.0, 20):
            if not test_inequality(m, 1.0, 1.0, c):
                valid = False
                break
        if not valid:
            continue
        # Test asymmetric cases
        for a in np.linspace(0.5, 2.0, 5):
            for b in np.linspace(0.5, 2.0, 5):
                for c in np.linspace(0.5, 2.0, 5):
                    if not test_inequality(m, a, b, c):
                        valid = False
                        break
                if not valid:
                    break
            if not valid:
                break
        if valid:
            best_m = m
            print(f"Found valid m: {m:.6f}")
            break  # Since we're checking in descending order
    
    print(f"\nMaximum m found: {best_m:.6f}")

find_max_m()
```
