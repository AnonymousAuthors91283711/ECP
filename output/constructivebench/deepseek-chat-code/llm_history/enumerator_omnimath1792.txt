[write_program]
The problem asks for the smallest 4-digit number `n = 1000a + 100b + 10c + d` where `a > b > c > d > 0` and the magnitude of the sum of four 13th roots of unity raised to powers `a, b, c, d` equals `sqrt(3)`. 

We'll enumerate all possible combinations of `(a, b, c, d)` with the given constraints, compute the magnitude, and check if it equals `sqrt(3)`. We'll start from the smallest possible `n` (3210) and go upwards.

```python
import math
import cmath

def find_min_n():
    sqrt3 = math.sqrt(3)
    # 13th root of unity: e^(2Ï€i/13)
    omega = cmath.exp(2j * cmath.pi / 13)
    
    # Iterate through all possible a, b, c, d with a > b > c > d > 0
    for a in range(3, 10):  # a can be at most 9 (since n is 4-digit)
        for b in range(2, a):
            for c in range(1, b):
                for d in range(1, c):
                    n = 1000*a + 100*b + 10*c + d
                    # Compute the sum of roots
                    total = omega**a + omega**b + omega**c + omega**d
                    magnitude = abs(total)
                    # Check if magnitude equals sqrt(3) within floating point tolerance
                    if abs(magnitude - sqrt3) < 1e-10:
                        print(n)
                        return  # Return immediately after finding the smallest
    print("No solution found")

find_min_n()
```
