[write_program]
This problem involves finding all positive real-valued functions f defined on positive reals that satisfy a given functional equation. We'll write a Python program to test polynomial candidates of increasing degrees to find potential solutions.

The approach will:
1. Test linear and quadratic functions as likely candidates
2. For each candidate, verify if it satisfies the functional equation for sampled x,y values
3. Print any functions that satisfy the equation for all test cases

```python
import numpy as np

def test_function(c, f):
    """Test if function f satisfies the functional equation for given c."""
    test_values = [0.1, 0.5, 1.0, 2.0, 3.0]  # Sample positive real values
    for x in test_values:
        for y in test_values:
            lhs = f((c + 1) * x + f(y))
            rhs = f(x + 2 * y) + 2 * c * x
            if not np.isclose(lhs, rhs):
                return False
    return True

def find_solutions():
    c_values = [0.5, 1.0, 2.0]  # Sample c values
    for c in c_values:
        print(f"\nTesting c = {c}")
        
        # Test linear candidates f(x) = a*x + b
        print("Testing linear functions...")
        for a in np.linspace(0.1, 5, 10):
            for b in np.linspace(0, 5, 10):
                f = lambda x: a*x + b
                if test_function(c, f):
                    print(f"Found candidate: f(x) = {a}*x + {b}")
        
        # Test quadratic candidates f(x) = a*x^2 + b*x + c
        print("Testing quadratic functions...")
        for a in np.linspace(0, 2, 5):
            for b in np.linspace(0, 5, 5):
                for d in np.linspace(0, 5, 5):
                    f = lambda x: a*x**2 + b*x + d
                    if test_function(c, f):
                        print(f"Found candidate: f(x) = {a}*x^2 + {b}*x + {d}")

if __name__ == "__main__":
    find_solutions()
```
