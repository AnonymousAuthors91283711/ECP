[write_program]
This problem involves defining a sequence `c(n)` with specific recursive properties and computing a sum of products of terms. We'll write a Python program to compute the sequence values and the required sum for small values up to 2013 to identify the pattern.

The sequence `c(n)` is defined by:
- Base case: c(1) = 1
- Even case: c(2n) = c(n)
- Odd case: c(2n+1) = (-1)^n * c(n)

We'll compute c(n) for n from 1 to 2015 (since we need c(n+2) up to n=2013), then compute the sum of c(n)*c(n+2) from n=1 to 2013.

```python
def compute_c(n):
    memo = {1: 1}
    def helper(k):
        if k in memo:
            return memo[k]
        if k % 2 == 0:
            res = helper(k // 2)
        else:
            n = (k - 1) // 2
            res = ((-1) ** n) * helper(n)
        memo[k] = res
        return res
    return helper(n)

def compute_sum(N):
    total = 0
    # Precompute all c(n) values up to N+2
    c_values = [0] * (N + 3)  # 1-based indexing
    for n in range(1, N + 3):
        c_values[n] = compute_c(n)
    
    for n in range(1, N + 1):
        total += c_values[n] * c_values[n + 2]
    return total

# Compute for N=2013
N = 2013
result = compute_sum(N)
print(f"Sum for N={N}: {result}")
```
