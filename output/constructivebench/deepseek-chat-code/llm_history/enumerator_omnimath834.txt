[write_program]
This problem involves complex numbers forming an equilateral triangle (since all side lengths are equal to 18) and having a specific condition on the sum of the vertices. We need to find the magnitude of the symmetric sum of pairwise products.

We'll approach this by:
1. Parameterizing the triangle centered at the origin
2. Using rotation properties of equilateral triangles
3. Calculating the required expression

Here's a Python program to verify the magnitude numerically for different rotations:

```python
import cmath
import math

# Parameters for equilateral triangle centered at origin
side_length = 18
height = side_length * math.sqrt(3) / 2
circumradius = side_length / math.sqrt(3)

# Generate different rotation angles
for theta_deg in range(0, 360, 30):
    theta = math.radians(theta_deg)
    
    # Three vertices rotated by 0, 120, 240 degrees
    a = circumradius * cmath.exp(1j * theta)
    b = circumradius * cmath.exp(1j * (theta + 2*math.pi/3))
    c = circumradius * cmath.exp(1j * (theta + 4*math.pi/3))
    
    # Verify side lengths (should all be 18)
    dist_ab = abs(a - b)
    dist_bc = abs(b - c)
    dist_ca = abs(c - a)
    
    # Verify sum condition (should be 36)
    sum_abs = abs(a + b + c)
    
    # Calculate target expression
    target = abs(a*b + b*c + c*a)
    
    # Print results for this configuration
    print(f"Rotation {theta_deg}Â°:")
    print(f"  Side lengths: {dist_ab:.2f}, {dist_bc:.2f}, {dist_ca:.2f}")
    print(f"  |a+b+c|: {sum_abs:.2f}")
    print(f"  |ab+bc+ca|: {target:.2f}")
    print()
```
