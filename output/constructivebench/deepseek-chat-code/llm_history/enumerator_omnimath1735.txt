[write_program]
This problem involves calculating the expected value of a geometric-like distribution where the probability of success changes at each step. The exact formula involves an infinite series, but we can approximate it by summing up to a sufficiently large k.

We'll compute the expected value E by summing k * p(k) for k up to a reasonable threshold (e.g., 10000) where p(k) becomes negligible. The final answer should be round(100*E).

```python
import math

def compute_expected_value(n=2014, max_k=10000):
    total = 0.0
    product_term = 1.0
    
    for k in range(1, max_k + 1):
        # Compute p(k) = (product_{i=0}^{k-1} (n-i)/n) * (k/n)
        # We maintain product_term as the running product (n-0)/n * (n-1)/n * ... * (n-(k-1))/n
        if k > 1:
            product_term *= (n - (k - 1)) / n
        p_k = product_term * (k / n)
        total += k * p_k
        
        # Early termination if terms become too small
        if k > n and p_k < 1e-20:
            break
    
    return total

E = compute_expected_value()
result = round(100 * E)
print(f"Approximate 100*E: {result}")
```
