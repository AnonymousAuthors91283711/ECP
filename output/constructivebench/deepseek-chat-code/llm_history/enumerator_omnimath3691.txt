[write_program]
This problem asks to find all integer polynomials P where P(0)≠0 and for all natural numbers n,m, P(n)^m * P(m)^n is a perfect square. We'll enumerate low-degree polynomials with small coefficients to find patterns.

The approach:
1. Generate candidate polynomials with small coefficients (e.g., ±1, ±x, etc.)
2. Check the condition P(0)≠0
3. For valid polynomials, test the perfect square condition for small n,m values
4. Output polynomials that satisfy all tests

```python
def is_square(n):
    if n < 0:
        return False
    root = int(n**0.5)
    return root * root == n

def test_polynomial(coeffs):
    # Evaluate polynomial at x using given coefficients [a0, a1, a2,...] for a0 + a1*x + a2*x^2 + ...
    def P(x):
        return sum(c * (x**i) for i, c in enumerate(coeffs))
    
    if P(0) == 0:
        return False
    
    # Test small values of n and m
    test_range = 5
    for n in range(1, test_range+1):
        for m in range(1, test_range+1):
            val = (P(n)**m) * (P(m)**n)
            if not is_square(val):
                return False
    return True

# Generate and test low-degree polynomials with small coefficients
max_degree = 2
coeff_range = [-2, -1, 1, 2]

from itertools import product

print("Testing polynomials of form a + bx + cx^2 with coefficients in [-2,-1,1,2]")
print("Polynomials satisfying the condition:")
for degree in range(max_degree+1):
    for coeffs in product(coeff_range, repeat=degree+1):
        if test_polynomial(coeffs):
            terms = []
            for i, c in enumerate(coeffs):
                if c == 0:
                    continue
                term = f"{c}" if i == 0 else f"{abs(c)}x" if i == 1 else f"{abs(c)}x^{i}"
                if c > 0 and i > 0:
                    term = " + " + term
                elif c < 0:
                    term = " - " + term
                terms.append(term)
            poly_str = "".join(terms).lstrip(" +")
            print(poly_str)
```
