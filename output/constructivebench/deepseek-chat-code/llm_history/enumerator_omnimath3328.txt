[write_program]
This problem asks for natural numbers n > 0 where Euler's totient function φ(n) equals 2002² - 1. We'll write a Python program to enumerate possible values of n that satisfy this condition by:

1. Calculating 2002² - 1
2. Implementing Euler's totient function
3. Checking numbers n where φ(n) could reasonably equal our target value
4. Outputting any matches found

Since φ(n) must be ≤ n, we can limit our search to n ≥ 2002² - 1. We'll implement an efficient totient function and check numbers in this range.

```python
import math

def compute_totient(n):
    result = n
    p = 2
    while p * p <= n:
        if n % p == 0:
            while n % p == 0:
                n = n // p
            result -= result // p
        p += 1
    if n > 1:
        result -= result // n
    return result

target = 2002**2 - 1
print(f"Searching for n where φ(n) = {target}")

# We'll search numbers where φ(n) could equal our target
# Start from target+1 since φ(n) <= n
start = target + 1
# Set a reasonable upper bound (we'll use 2*target as a starting point)
end = 2 * target

found = False
for n in range(start, end + 1):
    if compute_totient(n) == target:
        print(f"Found candidate: n = {n}")
        found = True

if not found:
    print("No candidates found in the search range")
```
