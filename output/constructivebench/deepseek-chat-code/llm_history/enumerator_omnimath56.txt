[write_program]
This problem asks for all quadruples (a, b, c, p) where a, b, c are positive integers, p is prime, and the equation 2^a * p^b = (p + 2)^c + 1 holds. We'll write a Python program to search for such solutions by:
1. Iterating through small primes p
2. For each p, trying reasonable ranges for a, b, c
3. Checking the equation and printing valid solutions

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if n % p == 0:
            return n == p
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]:
        if a >= n:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

max_p = 100
max_abc = 20  # Reasonable upper bound for exponents

for p in range(2, max_p + 1):
    if not is_prime(p):
        continue
    p_plus_2 = p + 2
    for c in range(1, max_abc + 1):
        rhs = p_plus_2 ** c + 1
        if rhs == 0:
            continue
        remaining = rhs
        # Factor out powers of 2
        a = 0
        while remaining % 2 == 0:
            remaining //= 2
            a += 1
        if a == 0:
            continue
        # Factor out powers of p
        b = 0
        while remaining % p == 0:
            remaining //= p
            b += 1
        if b == 0:
            continue
        if remaining == 1 and a > 0 and b > 0:
            print(f"(a={a}, b={b}, c={c}, p={p})")
```
