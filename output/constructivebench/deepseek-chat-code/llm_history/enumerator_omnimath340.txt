[write_program]
This problem involves analyzing the behavior of sequences involving powers of (√2 + 1) and (√2 + 3) multiplied by a real number s, and their distances to the nearest integer. We'll write a Python program to numerically investigate these sequences for small values of n and various s values.

The program will:
1. Calculate (√2 + 1)^n and (√2 + 3)^n for n up to 20
2. For sample s values (like 1, 0.5, 0.25), compute the distance to nearest integer
3. Observe whether these distances appear to approach 0

```python
import math

def dist_to_int(x):
    """Calculate distance from x to nearest integer"""
    return min(abs(x - math.floor(x)), abs(x - math.ceil(x)))

def analyze_sequence(base, max_n=20, s_values=[1.0, 0.5, 0.25]):
    """Analyze sequence behavior for given base and s values"""
    sqrt2 = math.sqrt(2)
    base_val = sqrt2 + base
    
    print(f"\nAnalyzing base: {base_val:.4f}")
    for s in s_values:
        print(f"\nFor s = {s}:")
        for n in range(1, max_n + 1):
            term = (base_val ** n) * s
            dist = dist_to_int(term)
            print(f"n={n:2d}: {dist:.10f}", end='  ')
            if n % 3 == 0:
                print()  # New line every 3 terms
        if max_n % 3 != 0:
            print()  # Ensure final newline

# Analyze both sequences
analyze_sequence(1)   # sqrt(2) + 1 case
analyze_sequence(3)   # sqrt(2) + 3 case
```
