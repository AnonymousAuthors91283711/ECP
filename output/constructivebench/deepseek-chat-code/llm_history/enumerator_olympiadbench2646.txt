[write_program]
This problem involves finding the minimal value `s` such that there exist two arithmetic sequences `a` and `b` with common differences `da` and `db` respectively, where:
1. No terms from `a` and `b` are equal
2. `a[20] + b[14] = 1000`
3. `b[20] + a[14] = s`

We'll enumerate possible values of `da` and `db` to find valid sequences and compute the minimal `s`.

```python
def main():
    min_s = float('inf')
    
    # Iterate possible common differences da and db
    for da in range(1, 100):
        for db in range(1, 100):
            # Calculate initial terms a0 and b0 from a20 + b14 = 1000
            # a20 = a0 + 20*da, b14 = b0 + 14*db
            # So a0 + b0 = 1000 - 20*da - 14*db
            total = 1000 - 20*da - 14*db
            if total <= 0:
                continue  # a0 and b0 must be positive
            
            # Check all possible a0, b0 pairs that sum to total
            for a0 in range(1, total):
                b0 = total - a0
                if b0 <= 0:
                    continue
                
                # Check if sequences have no common terms
                valid = True
                # Check first 100 terms (arbitrary large enough number)
                for i in range(100):
                    ai = a0 + i*da
                    for j in range(100):
                        bj = b0 + j*db
                        if ai == bj:
                            valid = False
                            break
                    if not valid:
                        break
                
                if valid:
                    # Calculate s = b20 + a14
                    s = (b0 + 20*db) + (a0 + 14*da)
                    if s < min_s:
                        min_s = s
                        print(f"Found candidate: s={s} with da={da}, db={db}, a0={a0}, b0={b0}")
    
    print(f"\nMinimum s found: {min_s}")

if __name__ == "__main__":
    main()
```
