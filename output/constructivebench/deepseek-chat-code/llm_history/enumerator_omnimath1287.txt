[write_program]
This problem asks for the number of 6×6 binary matrices where each row and each column contains exactly two 0s (and four 1s). This is equivalent to counting the number of ways to place 12 zeros in the matrix with these constraints.

We'll approach this by:
1. Generating all possible combinations of two 0s in each row
2. Checking if the column constraints are satisfied
3. Counting all valid configurations

Since the exact enumeration would be computationally expensive, we'll implement a backtracking approach that builds the matrix row by row while maintaining column counts.

```python
from itertools import combinations

def count_matrices():
    n = 6
    target = 2  # zeros per row/column
    count = 0
    
    # We'll represent each row as a tuple of column indices with zeros
    # The algorithm builds the matrix row by row, tracking column counts
    
    def backtrack(row, col_counts):
        nonlocal count
        if row == n:
            if all(c == target for c in col_counts):
                count += 1
            return
        
        # Generate all possible positions for two zeros in this row
        for cols in combinations(range(n), target):
            new_counts = list(col_counts)
            valid = True
            for c in cols:
                new_counts[c] += 1
                if new_counts[c] > target:
                    valid = False
                    break
            if valid:
                backtrack(row + 1, new_counts)
    
    backtrack(0, [0]*n)
    return count

print("Counting 6×6 binary matrices with exactly two 0s per row and column...")
print("Total count:", count_matrices())
```
