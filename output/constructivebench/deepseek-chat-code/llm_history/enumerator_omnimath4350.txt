[write_program]
This problem is about finding sets B of integer coordinate points (ℤ×ℤ) that satisfy certain intersection conditions for horizontal, vertical, and diagonal lines. The task is to determine for which natural numbers k such sets B exist. We'll write a program to enumerate small k values where such sets might exist.

The program will:
1. Check small k values (up to 10)
2. For each k, try to construct a valid set B (we'll use finite grid sizes)
3. Print k values where valid constructions are found

```python
def is_valid_set(B, k):
    # Check horizontal lines (fixed y)
    ys = {y for (x, y) in B}
    for y in ys:
        count = sum(1 for (x1, y1) in B if y1 == y)
        if count != k:
            return False
    
    # Check vertical lines (fixed x)
    xs = {x for (x, y) in B}
    for x in xs:
        count = sum(1 for (x1, y1) in B if x1 == x)
        if count != k:
            return False
    
    # Check diagonal lines (x + y = m)
    sums = {x + y for (x, y) in B}
    for m in sums:
        count = sum(1 for (x, y) in B if x + y == m)
        if count != k:
            return False
    
    # Check anti-diagonal lines (x - y = m)
    diffs = {x - y for (x, y) in B}
    for m in diffs:
        count = sum(1 for (x, y) in B if x - y == m)
        if count != k:
            return False
    
    return True

def find_valid_k(max_k=10):
    valid_ks = []
    for k in range(1, max_k + 1):
        # Try simple square grid pattern of size k×k
        B = [(x, y) for x in range(k) for y in range(k)]
        if is_valid_set(B, k):
            print(f"Found valid construction for k = {k}")
            valid_ks.append(k)
    
    print("\nValid k values found:", valid_ks)

find_valid_k()
```
