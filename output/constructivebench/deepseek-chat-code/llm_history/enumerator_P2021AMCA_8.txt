[write_program]
This problem involves computing values of a recursively defined sequence D(n) for large n (2021, 2022, 2023). To approach this, we'll write a Python program that:
1. Computes D(n) efficiently using memoization
2. Prints the values for small n to observe patterns
3. Computes the required values D(2021), D(2022), D(2023)

The recursive definition suggests this is similar to a Fibonacci sequence but with different initial conditions and recurrence relation.

```python
def compute_D_values(max_n):
    # Initialize memoization table with base cases
    memo = {0: 0, 1: 0, 2: 1}
    
    for n in range(3, max_n + 1):
        memo[n] = memo[n-2] + memo[n-3]
    
    return memo

# First observe the pattern for small values
small_n = 20
small_results = compute_D_values(small_n)
print("Small values of D(n):")
for n in range(small_n + 1):
    print(f"D({n}) = {small_results[n]}")

# Now compute the required large values
# We'll compute up to 2023 since we need D(2021), D(2022), D(2023)
# Using memoization to avoid recomputation
large_results = compute_D_values(2023)

print("\nRequired values:")
print(f"D(2021) = {large_results[2021]}")
print(f"D(2022) = {large_results[2022]}")
print(f"D(2023) = {large_results[2023]}")
```
