[write_program]
This problem involves a recurrence relation and a summation of rational terms. We'll write a Python program to compute the sum for the first 9 terms (n=0 to 8) of the sequence defined by:
- a₀ = 3
- a₁ = 2
- aₙ₊₂ = aₙ₊₁ + aₙ

The sum we need to compute is Σ (aₙ / (aₙ₊₁ * aₙ₊₂)) for n from 0 to 8.

We'll:
1. Generate the sequence terms
2. Compute each term in the sum
3. Accumulate the total sum
4. Output the exact rational result

```python
from fractions import Fraction

def compute_sum():
    # Initialize sequence with a0 and a1
    a = [3, 2]
    # Generate terms up to a10 (since we need up to a10 for n=8 term)
    for n in range(2, 11):
        a.append(a[n-1] + a[n-2])
    
    total = Fraction(0, 1)
    for n in range(9):  # n from 0 to 8
        numerator = a[n]
        denominator = a[n+1] * a[n+2]
        term = Fraction(numerator, denominator)
        total += term
        # Print intermediate terms (optional)
        # print(f"Term {n}: {term}")
    
    return total

result = compute_sum()
print(f"The exact sum is: {result}")
print(f"Decimal approximation: {float(result)}")
```
