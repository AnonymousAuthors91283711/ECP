[write_program]
This problem involves finding natural numbers n > 1 where there exists a non-zero integer sequence a_k such that for all k, the weighted sum of a_{(i+1)*k} equals zero. We'll write a Python program to search for such n by testing small values and checking the conditions.

The approach will:
1. Test n from 2 up to a reasonable limit (say 20)
2. For each n, attempt to find a non-trivial sequence a_k that satisfies the condition
3. We'll represent the sequence a_k as a dictionary and check the condition for small k values

```python
def find_valid_n(max_n=20, max_k=5):
    valid_ns = []
    for n in range(2, max_n + 1):
        # Try to find a non-zero sequence a_k that satisfies the condition
        # We'll represent a_k as a dictionary and try small integer values
        # This is a heuristic search - not guaranteed to find all solutions
        
        # Try sequences with period up to n
        for period in range(1, n + 1):
            # Try all possible non-zero patterns of length 'period'
            from itertools import product
            for pattern in product([-1, 1], repeat=period):
                # Define a_k as periodic with the given pattern
                def a(k):
                    return pattern[(k-1) % period]
                
                # Check the condition for several k values
                valid = True
                for k in range(1, max_k + 1):
                    total = 0
                    for i in range(n):
                        total += (i + 1) * a((i + 1) * k)
                    if total != 0:
                        valid = False
                        break
                
                if valid:
                    print(f"Found valid n = {n} with period {period} and pattern {pattern}")
                    valid_ns.append(n)
                    break
            else:
                continue
            break
    
    print("\nCandidate n values found:", sorted(set(valid_ns)))

find_valid_n()
```
