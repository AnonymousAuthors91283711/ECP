[write_program]
This problem involves evaluating the sum of cubes of cosines of specific angles. We'll write a Python program to numerically compute this sum and observe patterns. The angles are 2π/7, 4π/7, and 8π/7 (which is equivalent to -6π/7).

```python
import math

def compute_sum():
    # The three angles in radians
    angles = [2 * math.pi / 7, 4 * math.pi / 7, 8 * math.pi / 7]
    
    # Compute each cosine term and its cube
    terms = [math.cos(angle) ** 3 for angle in angles]
    
    # Sum of the cubes
    total = sum(terms)
    
    return total

# Compute and print the result
result = compute_sum()
print(f"Sum of cosine cubes: {result}")
print(f"Approximate value: {result:.10f}")
print(f"Possible exact form: {result.as_integer_ratio()}")
```

The program computes the sum of cubes of cosines at the specified angles. The output shows:
1. The exact computed floating-point value
2. A formatted approximation
3. The floating-point value represented as a fraction (though this might not reveal the exact closed form)

This numerical computation suggests the sum equals -1/2, but we leave the exact proof to mathematical analysis. The program helps conjecture this result through numerical evidence.
