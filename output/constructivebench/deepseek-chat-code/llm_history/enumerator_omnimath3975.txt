[write_program]
This problem involves finding all real-valued functions f: ℝ → ℝ that satisfy the functional equation:
∀x y, x * f(x + f(y)) = (y - x) * f(f(x))

We'll approach this by:
1. Testing simple constant functions first
2. Then linear functions
3. Checking for non-linear solutions (though unlikely to exist)

The program will test constant and linear candidates, printing those that satisfy the equation for sampled x,y values.

```python
def is_solution(f, x_samples, y_samples):
    """Check if f satisfies the equation for given samples."""
    for x in x_samples:
        for y in y_samples:
            left = x * f(x + f(y))
            right = (y - x) * f(f(x))
            if not abs(left - right) < 1e-6:  # account for floating point errors
                return False
    return True

def test_constant_functions():
    """Test f(x) = c for various constants c."""
    samples = [-2, -1, 0.5, 1, 2]
    print("Testing constant functions...")
    for c in [-1, 0, 1, 2]:
        f = lambda x: c
        if is_solution(f, samples, samples):
            print(f"Found constant solution: f(x) = {c}")

def test_linear_functions():
    """Test f(x) = a*x + b for various a,b."""
    samples = [-1, 0, 1, 2]
    print("\nTesting linear functions...")
    for a in [-1, 0, 1]:
        for b in [-1, 0, 1, 2]:
            f = lambda x, a=a, b=b: a*x + b
            if is_solution(f, samples, samples):
                print(f"Found linear solution: f(x) = {a}x + {b}")

if __name__ == "__main__":
    test_constant_functions()
    test_linear_functions()
```
