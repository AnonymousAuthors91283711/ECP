[write_program]
This problem asks to find all functions g: ℕ → ℕ such that for all natural numbers m and n, (g(m) + n)(g(n) + m) is a perfect square. We'll write a Python program to enumerate possible constant functions (the simplest case) and check if they satisfy the condition.

```python
import math

def is_perfect_square(x):
    s = int(math.isqrt(x))
    return s * s == x

def check_constant_function(c, max_n=20):
    """Check if the constant function g(n) = c satisfies the condition."""
    for m in range(1, max_n + 1):
        for n in range(1, max_n + 1):
            val = (c + n) * (c + m)
            if not is_perfect_square(val):
                return False
    return True

def enumerate_constant_functions(max_c=20):
    """Enumerate constant functions up to max_c that satisfy the condition."""
    for c in range(1, max_c + 1):
        if check_constant_function(c):
            print(f"Constant function g(n) = {c} satisfies the condition")

if __name__ == "__main__":
    print("Checking constant functions:")
    enumerate_constant_functions()
    print("\nChecking non-constant functions would require more complex analysis.")
```

The program checks constant functions g(n) = c up to c=20 by verifying the condition for m,n ≤ 20. For non-constant functions, a more sophisticated approach would be needed, but this gives a starting point for investigation. The output shows which constant functions satisfy the condition.
