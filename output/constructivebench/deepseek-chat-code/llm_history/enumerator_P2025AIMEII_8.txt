[write_program]
This problem asks for the largest positive integer N where there exists a combination of coins (1¢, 10¢, 25¢) that sums to N but uses more coins than the minimal coin combination for N. We'll write a program to find this maximum N by checking all possible values up to a reasonable threshold (300¢ is sufficient since patterns repeat modulo 25).

```python
def min_coins(n):
    """Calculate minimal number of coins (1,10,25) needed for amount n"""
    coins = 0
    # Use as many 25c coins as possible
    c25 = n // 25
    remaining = n % 25
    # For remaining amount, use 10c coins then 1c coins
    c10 = remaining // 10
    c1 = remaining % 10
    return c25 + c10 + c1

max_N = 0
# Check all N up to 300 (since patterns repeat modulo 25)
for N in range(1, 301):
    found = False
    # Try all possible combinations of coins that sum to N
    for c in range(0, N//25 + 1):
        for b in range(0, (N - 25*c)//10 + 1):
            a = N - 25*c - 10*b
            if a >= 0:
                total_coins = a + b + c
                if total_coins > min_coins(N):
                    found = True
                    break
        if found:
            break
    if found:
        max_N = N
        print(f"Found candidate: {N}")
print(f"Maximum N: {max_N}")
```
