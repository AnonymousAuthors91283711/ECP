[write_program]
This problem involves finding all natural numbers n where the Euler's totient function φ(2019*n) equals φ(n²). We'll write a Python program to enumerate possible solutions by:
1. Computing φ efficiently using prime factorization
2. Checking the condition φ(2019*n) == φ(n²) for n up to a reasonable threshold
3. Printing all solutions found

The key observation is that 2019 factors into 3*673, and we need to handle the multiplicative properties of φ carefully.

```python
import math

def compute_totient(n):
    result = n
    p = 2
    while p * p <= n:
        if n % p == 0:
            while n % p == 0:
                n = n // p
            result -= result // p
        p += 1
    if n > 1:
        result -= result // n
    return result

def main():
    max_n = 10000  # Reasonable search limit
    solutions = []
    
    for n in range(1, max_n + 1):
        if n % 1000 == 0:
            print(f"Progress: checked up to n={n}")  # Progress indicator
        
        # Compute φ(2019*n)
        phi_2019n = compute_totient(2019 * n)
        
        # Compute φ(n²) = n*φ(n) when n > 0
        phi_n = compute_totient(n)
        phi_n_squared = n * phi_n
        
        if phi_2019n == phi_n_squared:
            solutions.append(n)
            print(f"Found solution: n = {n}")
    
    print("\nAll solutions found:")
    for sol in solutions:
        print(sol)

if __name__ == "__main__":
    main()
```
