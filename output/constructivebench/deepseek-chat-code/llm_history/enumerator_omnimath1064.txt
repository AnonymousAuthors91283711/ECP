[write_program]
This problem involves calculating a rational expression involving powers of 3. We'll write a Python program to compute the exact value of p for n=60, expressed as a reduced fraction. The key is to compute (3^(n-1) + 1)/(4 * 3^(n-1)) exactly without floating-point approximations.

```python
from fractions import Fraction

def compute_p(n):
    numerator = 3**(n-1) + 1
    denominator = 4 * 3**(n-1)
    return Fraction(numerator, denominator)

n = 60
p = compute_p(n)
print(f"For n={n}, p = {p}")
```

The program computes the exact fraction by:
1. Calculating 3^(n-1) exactly
2. Adding 1 to get the numerator
3. Using 4*3^(n-1) as the denominator
4. Creating a Fraction object to automatically reduce it to simplest form

The output will show the exact rational value of p when n=60. The Fraction class handles the simplification automatically, giving us the reduced form of the answer.
