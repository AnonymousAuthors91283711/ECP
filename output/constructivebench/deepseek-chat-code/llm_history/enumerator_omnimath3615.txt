[write_program]
This problem involves a function `f` defined by three properties and asks for the value of `f 1998`. The properties are:
1. `f n = 0` if `n` is perfect
2. `f n = 0` if `n` ends with 4
3. `f(a*10 + b) = f a + f b` for digits `b` (0-9)

We'll write a Python program to compute `f n` recursively using these properties, with memoization for efficiency. We'll test small values first to understand the pattern.

```python
from functools import lru_cache

def is_perfect(n):
    if n <= 1:
        return False
    divisors = [d for d in range(1, n) if n % d == 0]
    return sum(divisors) == n

@lru_cache(maxsize=None)
def f(n):
    if is_perfect(n):
        return 0
    if n % 10 == 4:
        return 0
    if n < 10:
        return 1  # base case for single-digit numbers not ending with 4
    a, b = divmod(n, 10)
    return f(a) + f(b)

# Test small values to observe the pattern
for n in range(1, 30):
    print(f"f({n}) = {f(n)}")

# Compute the target value
print(f"\nf(1998) = {f(1998)}")
```
