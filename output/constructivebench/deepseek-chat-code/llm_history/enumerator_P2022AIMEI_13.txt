[write_program]
The problem involves finding the number of distinct reduced fractions formed by 4-digit numbers (including leading zeros) divided by 9999, where the numerator and denominator are coprime. The answer should be modulo 1000.

We'll approach this by:
1. Generating all 4-digit numbers (0000 to 9999)
2. For each number, creating the fraction n/9999
3. Reducing the fraction to simplest form
4. Counting unique reduced numerators
5. Returning the count modulo 1000

```python
import math
from collections import defaultdict

def main():
    denominators = defaultdict(set)
    total = 0
    for n in range(10000):
        # Compute reduced fraction n/9999
        g = math.gcd(n, 9999)
        reduced_num = n // g
        reduced_den = 9999 // g
        
        # Track unique numerators (we only care about the numerator count)
        denominators[reduced_num].add(reduced_den)
    
    # Count distinct numerators (each represents a unique reduced fraction)
    count = len(denominators)
    print(f"Total distinct numerators: {count}")
    print(f"Answer mod 1000: {count % 1000}")

if __name__ == "__main__":
    main()
```
