[write_program]
This problem involves a triple summation of a combinatorial expression. The goal is to compute the exact value of the sum. The expression inside the sum resembles multinomial coefficients. We'll write a Python program to compute this sum exactly by enumerating all valid combinations of a, b, c that satisfy the given constraints.

The approach is:
1. Iterate a from 6 to 12 (inclusive)
2. For each a, iterate b from 0 to (12 - a) (since 13-a-1 = 12-a)
3. For each (a,b), iterate c from 0 to (12 - a - b)
4. Compute the multinomial-like term for each valid (a,b,c) combination
5. Sum all these terms

```python
import math

total = 0

# Iterate a from 6 to 12 inclusive
for a in range(6, 13):
    # Iterate b from 0 to (12 - a)
    for b in range(0, 13 - a):
        # Iterate c from 0 to (12 - a - b)
        for c in range(0, 13 - a - b + 1):
            # Check if a - b - c is non-negative
            if (a - b - c) >= 0:
                denominator = math.factorial(b) * math.factorial(c) * math.factorial(a - b - c)
                term = math.factorial(a) // denominator
                total += term
                # Print intermediate results for verification
                print(f"a={a}, b={b}, c={c}: term={term}")

print(f"\nFinal sum: {total}")
```
