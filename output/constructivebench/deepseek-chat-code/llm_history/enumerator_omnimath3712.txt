[write_program]
This problem involves finding all functions `f : ℕ → ℕ` that satisfy a functional equation involving gcd and lcm operations. The functional equation is:

∀ m n, gcd(f(m), n) + lcm(m, f(n)) = gcd(m, f(n)) + lcm(f(m), n)

We'll write a Python program to enumerate possible functions for small natural numbers and check which ones satisfy the equation. Since the domain is infinite, we'll limit our search to functions defined on {1,2,3,4} and codomain {1,2,3,4}.

```python
import math
from itertools import product

def gcd(a, b):
    return math.gcd(a, b)

def lcm(a, b):
    return a * b // gcd(a, b) if a and b else 0

def check_condition(f, max_n=4):
    for m in range(1, max_n+1):
        for n in range(1, max_n+1):
            left = gcd(f[m], n) + lcm(m, f[n])
            right = gcd(m, f[n]) + lcm(f[m], n)
            if left != right:
                return False
    return True

def enumerate_functions(max_domain=4, max_codomain=4):
    domain = range(1, max_domain+1)
    possible_values = range(1, max_codomain+1)
    
    # Generate all possible functions as tuples where index represents input
    for func_values in product(possible_values, repeat=max_domain):
        f = {i+1: v for i, v in enumerate(func_values)}
        if check_condition(f, max_domain):
            print(f"Valid function found: {f}")

if __name__ == "__main__":
    print("Searching for functions f:{1,2,3,4}→{1,2,3,4} satisfying the condition:")
    enumerate_functions()
```
