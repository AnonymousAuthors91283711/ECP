[check_equivalence] Problem: import Mathlib

open Nat

abbrev P2005AMCB_4_answer : ℕ × ℕ → ℕ := sorry
theorem P2005AMCB_4 (totalQuizzes firstA : ℕ) 
  (h₁ : totalQuizzes = 50) (h₂ : firstA = 22) (h₃ : 30 ≤ totalQuizzes) :
  IsGreatest {n : ℕ | ∃ (remainingA : ℕ), 
    firstA + remainingA ≥ 4 * totalQuizzes / 5 ∧ 
    n = (totalQuizzes - 30) - remainingA} 
  (P2005AMCB_4_answer (totalQuizzes, firstA)) := by sorry
Ground Truth Answer: fun ⟨totalQuizzes, firstA⟩ => 
    let remainingQuizzes := totalQuizzes - 30
    let requiredA := (4 * totalQuizzes / 5) - firstA
    remainingQuizzes - requiredA
Proposed Answer: fun ⟨totalQuizzes, firstA⟩ => (totalQuizzes - 30) - (4 * totalQuizzes / 5 - firstA)
<<<True>>>
The proposed answer is exactly equivalent to the ground truth answer. Both answers:
1. Calculate `remainingQuizzes` as `totalQuizzes - 30`
2. Calculate `requiredA` as `(4 * totalQuizzes / 5) - firstA`
3. Return the difference `remainingQuizzes - requiredA`

The proposed answer just does these calculations in one line without the intermediate `let` bindings, but the mathematical operations and their order are identical.