[write_program]
The problem asks to find natural numbers \( n > 0 \) such that the sum of the integers from 1 to \( n \) divides \( 15 \) times the sum of squares from \( n+1 \) to \( 2n \). We'll enumerate small values of \( n \) to find such divisors and print them immediately.

```python
# Enumerate natural numbers n > 0 and check if sum_{1 to n} divides 15 * sum_{n+1 to 2n} of squares.
def sigma_linear(m, n):
    return (n * (n + 1)) // 2 - (m * (m - 1)) // 2

def sigma_squares(m, n):
    def sum_squares(k):
        return k * (k + 1) * (2 * k + 1) // 6
    return sum_squares(n) - sum_squares(m - 1)

print("Enumerating solutions n with 1 ≤ n ≤ 100...")
for n in range(1, 101):
    s1 = sigma_linear(1, n)
    s2 = sigma_squares(n + 1, 2 * n)
    lhs = s1
    rhs = 15 * s2
    if rhs % lhs == 0:
        print(f"n = {n}, sum_1^n = {s1}, 15 * sum_(n+1)^{2*n} squares = {rhs}, divisible: yes")

# Summarize by printing minimal n found
print("Minimal such n found (up to 100) is the first printed above.")
```
