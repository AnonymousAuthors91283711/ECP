[write_program]
The problem involves finding natural numbers N such that doubling N results in a number with exactly one more digit than N. That is, if d = number of digits in N, then number of digits in 2N = d + 1. We want to find the 2011th such N and enumerate candidates.

Key points:
- Number of digits of N in base 10 is d if 10^(d-1) ≤ N < 10^d.
- For 2N to have d+1 digits, 2N ≥ 10^d.
- Since N < 10^d, 2N ≥ 10^d implies N ≥ 10^(d-1)*5.
- So for N with d digits, N should be in [5*10^(d-1), 10^d - 1].
- The count of such numbers for each d is from 5*10^(d-1) up to 10^d - 1, which is 5*10^(d-1) numbers per digit length.
- We can enumerate these ranges digit by digit and count how many numbers so far, stopping at the 2011th number.

This program enumerates such Ns and also notes the digit-length ranges, printing candidates as found.

```python
# Enumerate natural numbers N where doubling N increases digits by exactly 1
# i.e. digits(2N) = digits(N) + 1
# digits(N) = d => 10^(d-1) ≤ N < 10^d
# For 2N to have d+1 digits: 2N ≥ 10^d => N ≥ 5*10^(d-1)
# So N in [5*10^(d-1), 10^d - 1] for each d≥1.

def digits_count(n):
    return len(str(n))

def enumerate_candidates(max_count=2011):
    count = 0
    d = 1
    while True:
        start = 5 * 10**(d-1)
        end = 10**d - 1
        for N in range(start, end+1):
            # Check digits condition exactly
            if digits_count(2*N) == digits_count(N) + 1:
                count += 1
                print(f"N={N} digits(N)={d} digits(2N)={digits_count(2*N)} count={count}")
                if count == max_count:
                    print(f"Desired answer: N={N} (the {max_count}th number)")
                    return
        d += 1

if __name__ == "__main__":
    # Enumerate first 2011 such Ns to find the 2011th candidate
    enumerate_candidates()
```
