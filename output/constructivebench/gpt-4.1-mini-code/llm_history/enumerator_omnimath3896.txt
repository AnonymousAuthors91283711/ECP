[write_program]
This problem characterizes natural numbers \( n \geq 2 \) such that for all \( a,b \) coprime to \( n \), \( a \equiv b \pmod{n} \) if and only if \( a \cdot b \equiv 1 \pmod{n} \). This essentially means every unit is its own inverse and the group of units modulo \( n \) is trivial or of specific structure.

We can enumerate \( n \) starting from 2 and check this property by iterating over the reduced residue system modulo \( n \):

- Find all integers \( a \) coprime to \( n \),
- For each such \( a \), check if for all other \( b \), \( a \equiv b \iff a\cdot b \equiv 1 \) modulo \( n \).

If this condition holds, print \( n \).

We'll test \( n \) up to some small number (e.g., 50) to observe which satisfy it. This will help conjecture the form of the answer set.

```python
from math import gcd

def is_rel_prime(a, n):
    return gcd(a, n) == 1

def check_condition(n):
    units = [a for a in range(1, n) if is_rel_prime(a, n)]
    for a in units:
        for b in units:
            # Compare a ≡ b mod n vs a*b ≡ 1 mod n
            eq_ab = (a % n) == (b % n)
            eq_inv = ((a * b) % n) == 1
            if eq_ab != eq_inv:
                return False
    return True

print("Checking n >= 2 up to 50 for the condition:")
for n in range(2, 51):
    if check_condition(n):
        print(f"n = {n} satisfies the condition")
```
