[write_program]
The problem is to find the expected size of a non-empty subset \( s \) of an 8-element set chosen uniformly at random, i.e. \( \mathbb{E}[|s|] \) where \( s \subseteq \{1,\dots,8\} \), \( s \neq \emptyset \).

This expectation is \(\frac{\sum_{s \subseteq [8], s \neq \emptyset} |s|}{2^8 - 1}\).

The sum of sizes over all subsets of \([8]\) including the empty set is \(8 \times 2^{7} = 8 \times 128 = 1024\), because each element appears in half of the subsets. The empty set contributes 0 to the sum.

So the expected size is \(\frac{1024}{255}\).

I will write a Python program that enumerates all the non-empty subsets of an 8-element set, sums their sizes, prints intermediate computations, and then prints the final fraction and its approximate decimal value.

```python
from fractions import Fraction
from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) -> (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def main():
    universe = list(range(8))
    subsets = list(powerset(universe))
    subsets = [s for s in subsets if s]  # remove empty set
    total_subsets = len(subsets)
    print(f"Total non-empty subsets: {total_subsets}")
    total_card_sum = 0
    for s in subsets:
        size = len(s)
        total_card_sum += size
        if total_card_sum <= 1000:  # print first few partial sums to save space
            print(f"Adding subset {s}, size {size}, partial sum {total_card_sum}")
        elif total_card_sum == 1024:
            # Stop printing partial sums after known exact sum reached
            print(f"Reached total sum of sizes: {total_card_sum}")

    expected_size = Fraction(total_card_sum, total_subsets)
    print(f"Exact expected size as fraction: {expected_size}")
    print(f"Decimal approximation: {float(expected_size)}")

if __name__ == "__main__":
    main()
```
