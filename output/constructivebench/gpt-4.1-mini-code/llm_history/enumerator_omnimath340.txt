[write_program]
The problem involves understanding the behavior of sequences formed by fractional parts of powers of numbers multiplied by a real number \( s \), specifically related to approximation of integer values. To explore this computationally, we can test small integer \( s \) values and compute the distance to the nearest integer for sequences like \((\sqrt{2} + 1)^n \times s\) and \((\sqrt{2} + 3)^n \times s\) for increasing \( n \). This might help in observing whether these distances tend to zero or not.

```python
import math

def dist_to_int(x):
    return min(abs(x - round(x)), 1)

def explore(s_values, base_values, max_n=20, threshold=1e-8):
    for base in base_values:
        print(f"Base = {base}")
        for s in s_values:
            print(f" s = {s}")
            distances = []
            tend_to_zero = True
            for n in range(max_n):
                val = (base**n) * s
                d = dist_to_int(val)
                distances.append(d)
                print(f"  n={n}: distance = {d}")
                if d > threshold:
                    tend_to_zero = False
            if tend_to_zero:
                print(f"  >> Distances seem to tend to zero for s={s} and base={base}")
            else:
                print(f"  >> Distances do NOT tend to zero for s={s} and base={base}")
        print()

def main():
    s_values = [1, 2, 3]
    base_values = [math.sqrt(2) + 1, math.sqrt(2) + 3]
    explore(s_values, base_values)

if __name__ == "__main__":
    main()
```
