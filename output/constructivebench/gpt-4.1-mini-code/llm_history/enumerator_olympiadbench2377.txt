[write_program]
The problem involves summing over coin toss outcomes with probability p=1/2, for a small number of coins (3). It looks like a probability expression combining binomial coefficients and terms like p^k * (1-p)^(coins-k). To help understand or conjecture the exact value, we can enumerate the sum explicitly for coins = 3 and print each term separately, then the total sum exactly as a rational.

```python
from math import comb
from fractions import Fraction

def main():
    coins = 3
    p = Fraction(1, 2)  # p = 1/2 exactly
    total = Fraction(0, 1)
    print(f"Parameters: coins = {coins}, p = {p}")
    for k in range(coins + 1):
        term1 = comb(coins, k)
        pow1 = p**k * (1 - p)**(coins - k)
        term2 = comb(coins - k, 1)
        pow2 = p**1 * (1 - p)**(coins - k - 1) if coins - k - 1 >= 0 else 0
        val = term1 * pow1 * term2 * pow2
        total += val
        print(f"k={k}: (C({coins},{k}) * p^{k} * (1-p)^{coins-k}) * (C({coins-k},1) * p * (1-p)^{coins-k-1}) = {val}")
    print(f"Sum = {total} = {float(total)}")

if __name__ == "__main__":
    main()
```
