[write_program]
The problem involves finding integers \(a, b, m > 0\) such that:
\[
\sum_{k=0}^{m-1} (a+k) = 2m, \quad \sum_{k=0}^{2m-1} (b+k) = m,
\]
and
\[
|(a+m-1) - (b+2m-1)| = 99.
\]
The task is to determine for which \(m\) this condition holds.

We'll enumerate small positive integers \(m\), compute the possible \(a, b\) from the sums, and check the absolute difference condition. We prioritize exact calculations and print any \(m\) satisfying the condition immediately.

```python
# Enumerate m > 0, find corresponding a,b from sums, check difference condition |(a+m-1)-(b+2m-1)|=99
def main():
    print("m, a, b, diff found when condition holds:")
    for m in range(1, 1000):  # reasonable range to find solution
        # Sum over m terms: sum_{k=0}^{m-1} (a+k) = m*a + m(m-1)/2 = 2*m
        # => m*a + m(m-1)/2 = 2*m => a = (2*m - m(m-1)/2)/m = 2 - (m-1)/2 = (5 - m)/2
        a_num = 5 - m
        if a_num * 2 != (5 - m)*2:
            continue
        # a must be integer
        if (5 - m) % 2 != 0:
            continue
        a = (5 - m)//2

        # Sum over 2m terms: sum_{k=0}^{2m-1} (b+k) = 2m*b + 2m(2m-1)/2 = m
        # => 2m*b + 2m(2m-1)/2 = m
        # => 2m*b + 2m(2m-1)/2 = m
        # => 2m*b + 2m(2m-1)/2 = m
        # Note: 2m(2m-1)/2 = 2m^2 - m
        # So 2m*b + 2m^2 - m = m => 2m*b = m - 2m^2 + m = 2m - 2m^2
        # => b = (2m - 2m^2)/(2m) = (2m(1 - m))/(2m) = 1 - m
        b = 1 - m

        diff = abs((a + m - 1) - (b + 2*m - 1))

        if diff == 99:
            print(f"m={m}, a={a}, b={b}, diff={diff}")

if __name__ == "__main__":
    main()
```
