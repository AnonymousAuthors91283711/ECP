[write_program]
The problem looks for the smallest positive integer \( n \) such that the sum of the digits of \( n \) is equal to five times the sum of the digits of \( n + 2019 \). To explore candidates, I will enumerate integers \( n \) in a reasonable range, compute digit sums, and print all matches found. Then, I will highlight the smallest \( n \) found (if any). Since the problem is about a digit property and addition, I will check up to a few thousand to find small candidates.

```python
def digit_sum(x):
    return sum(int(d) for d in str(x))

def main():
    offset = 2019
    threshold = 50000  # scan up to 50,000 for candidates
    candidates = []
    for n in range(1, threshold):
        s1 = digit_sum(n)
        s2 = digit_sum(n + offset)
        if s1 == 5 * s2:
            print(f"Candidate n={n}, digit_sum(n)={s1}, digit_sum(n+{offset})={s2}")
            candidates.append(n)
    if candidates:
        print(f"Smallest candidate: {min(candidates)}")
    else:
        print("No candidates found up to", threshold)

if __name__ == "__main__":
    main()
```
