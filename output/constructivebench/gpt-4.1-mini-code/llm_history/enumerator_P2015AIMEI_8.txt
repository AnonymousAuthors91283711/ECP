[write_program]
The problem involves finding the smallest positive integer \( n \) such that the sum of its decimal digits is 20, and simultaneously, the sum of the digits of \( n + 864 \) is also 20.

To help conjecture and prove the answer, we will enumerate integers \( n \) starting from 1, check for these conditions, and print all integers \( n \) satisfying them. We'll observe when the first such \( n \) appears and then print the minimum.

```python
def digit_sum(x):
    return sum(int(d) for d in str(x))

# We start at 1 and go up to a reasonable upper bound (e.g., 50000)
# to find candidates n with digit sum 20 and digit sum(n+864) also 20
print("Enumerating n with sum_of_digits(n)=20 and sum_of_digits(n+864)=20:")

candidates = []
for n in range(1, 50001):
    s1 = digit_sum(n)
    if s1 != 20:
        continue
    s2 = digit_sum(n + 864)
    if s2 == 20:
        print(f"n={n}, sum_digits(n)=20, sum_digits(n+864)=20")
        candidates.append(n)
        # Stop early if desired; here we continue to list more candidates

if candidates:
    print(f"\nMinimum n satisfying conditions: {min(candidates)}")
else:
    print("No such n found up to 50000.")
```
