[write_program]
The problem asks to find the number of positive integers \( n \) such that 
\[ n + \text{sum of digits of } n + \text{sum of digits of (sum of digits of } n) = 2007. \]

To assist with conjecturing the true answer, I will enumerate all candidates \( n \) in a reasonable range. Since \( n \) is close to 2007, and the digit sums add at most about 54 (for a 4-digit number), checking values near 2007 is efficient.

```python
def digit_sum(x):
    return sum(int(d) for d in str(x))

target = 2007
# Maximum digit sum for 4-digit numbers is 9*4=36, sum of sum of digits at most 2*9=18
# So check values from (2007 - 60) up to 2007 to cover all possibilities
start = max(1, target - 60)
count = 0
for n in range(start, target + 1):
    s1 = digit_sum(n)
    s2 = digit_sum(s1)
    total = n + s1 + s2
    if total == target:
        count += 1
        print(f"n={n}, sum_digits(n)={s1}, sum_digits(sum_digits(n))={s2}, total={total}")
print("Total valid n:", count)
```
