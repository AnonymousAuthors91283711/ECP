[write_program]
The problem is to find all natural numbers \( n \) between 1 and 100 such that the number of divisors of \( 10n \) is exactly \( \frac{3}{10} \) times the number of divisors of \( n \), i.e.,

\[
d(10n) = \frac{3}{10} \cdot d(n)
\]

where \( d(x) \) is the divisor counting function.

Since \( 10 = 2 \times 5 \), and the divisors count function for \( n = \prod p_i^{a_i} \) is:

\[
d(n) = \prod_i (a_i + 1)
\]

we can compute divisors for \( n \) and for \( 10n \), then check this relation.

We'll print each \( n \) satisfying the condition immediately, and at the end print the count of such \( n \).

```python
import math

def divisors_count(x):
    count = 1
    temp = x
    factor = 2
    while factor * factor <= temp:
        exp = 0
        while temp % factor == 0:
            temp //= factor
            exp += 1
        if exp > 0:
            count *= (exp + 1)
        factor += 1 if factor == 2 else 2
    if temp > 1:
        count *= 2
    return count

print("Checking n in [1..100] for d(10n) = (3/10)*d(n):")

results = []
for n in range(1, 101):
    dn = divisors_count(n)
    d10n = divisors_count(10 * n)
    # Check exact equality without floating point
    if 10 * d10n == 3 * dn:
        print(f"n={n}, d(n)={dn}, d(10n)={d10n}")
        results.append(n)

print(f"Total count of such n: {len(results)}")
```
