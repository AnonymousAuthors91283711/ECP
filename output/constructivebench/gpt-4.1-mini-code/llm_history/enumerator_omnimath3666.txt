[write_program]
The problem is to find the greatest natural number \( n \) such that for every positive integer \( k \leq \frac{n}{2} \), there exist divisors \( d_1, d_2 \) of \( n \) with \( d_2 - d_1 = k \). We will enumerate \( n \) and check each \( k \leq n/2 \) to see if such divisor pairs exist. We print each \( n \) with the property when found, and finally print the greatest one found up to a reasonable threshold.

```python
# Enumerate n to find the greatest n with the property:
# For every k in [1, n//2], there exist divisors d1, d2 of n with d2 - d1 = k.

def divisors(n):
    divs = []
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            divs.append(i)
            if i != n // i:
                divs.append(n//i)
    return sorted(divs)

max_n = 10000  # limit search for efficiency
greatest_n = 0

for n in range(1, max_n+1):
    divs = divisors(n)
    max_k = n//2
    # build set of all differences of divisor pairs
    diffs = set()
    i, j = 0, 0
    length = len(divs)
    # Since divs sorted, differences are nonnegative if j>=i
    for i in range(length):
        for j in range(i, length):
            diffs.add(divs[j] - divs[i])
    # check if all k in 1..max_k appear in diffs
    if all(k in diffs for k in range(1, max_k+1)):
        greatest_n = n
        print(f"n={n} has all differences k in 1..{max_k}")

print(f"Greatest n found with the property up to {max_n} is {greatest_n}")
```
