[write_program]
The problem is to find all natural numbers \( n \) such that \(\varphi(n) = 2002^2 - 1\), where \(\varphi\) is Euler's totient function. We want to enumerate such \( n \) efficiently.

Key points:
- \( 2002^2 - 1 = 2002^2 - 1 \) is fixed; compute this once.
- To find \( n \) with \(\varphi(n) = k\), recall the formula for prime powers and products.
- Try small numbers and factor candidates for \(\varphi(n)\).
- The problem is hard in general, so try values of \( n \) dividing multiples close to \( k \) or use a search restricting to \( n \) with certain prime factors.
- Here, we will enumerate candidates \( n \) up to a limit and print values for which \(\varphi(n) = 2002^2 - 1\).

---

```python
# Enumerate n with phi(n) = 2002^2 - 1
# We'll try n up to a certain limit and check phi(n).

from math import gcd
from math import isqrt

def phi(n):
    result = n
    p = 2
    while p * p <= n:
        if n % p == 0:
            while n % p == 0:
                n //= p
            result -= result // p
        p += 1 if p == 2 else 2
    if n > 1:
        result -= result // n
    return result

def main():
    target = 2002**2 - 1
    print(f"Target phi(n): {target}")
    limit = 10**7  # search limit to keep runtime reasonable
    for n in range(2, limit):
        if phi(n) == target:
            print(f"Found n: {n}")

if __name__ == "__main__":
    main()
```

