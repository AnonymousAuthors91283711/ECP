[write_program]
The problem is to find natural numbers \( n \) with at least 6 digits, whose first and sixth digits (from the left in decimal notation) are 2, and such that \( n = 2k \cdot 2(k+1) \cdot 2(k+2) = 8k(k+1)(k+2) \) for some integer \( k \). We want to enumerate such \( n \), print them immediately when found, and identify the unique or all such values meeting these constraints.

We will:
- Enumerate integers \( k \).
- Compute \( n = 8k(k+1)(k+2) \).
- Check if \( n \) has at least 6 digits.
- Check the digit conditions: first digit == 2 and the 6th digit == 2.
- Print candidates.

We limit to some \( k \) in a reasonable range, e.g., \( k=10 \) to \( k=200 \), to avoid excessive output, since \( n \) grows fast.

```python
# Enumerate numbers n = 8*k*(k+1)*(k+2) with at least 6 digits,
# such that the first digit and the 6th digit of n (decimal) are 2.

def digits(n):
    return list(map(int, str(n)))

def satisfies(n):
    d = digits(n)
    return len(d) >= 6 and d[0] == 2 and d[5] == 2

def main():
    # Enumerate k in a range that produces at least 6-digit n
    # Start from k=10 (8*10*11*12=10560 < 100000, so start higher)
    # Increase until n passes 7 digits or beyond
    for k in range(20, 300):
        n = 8 * k * (k+1) * (k+2)
        if len(str(n)) < 6:
            continue
        if satisfies(n):
            print(f"n={n}, k={k}, digits={str(n)}")

if __name__ == "__main__":
    main()
```
