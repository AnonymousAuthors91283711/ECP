[write_program]
The problem involves finding a natural number \( d \) such that \(\frac{10d}{7} - 60 = d\), and the sum of the base-10 digits of \( d \) equals 5. We want to find the unique such \( d \).

First, this simplifies to finding \( d \) satisfying:
\[
\frac{10d}{7} - 60 = d \implies \frac{10d}{7} - d = 60 \implies \frac{3d}{7} = 60 \implies d = 140
\]
But we want to verify that \( d=140 \) satisfies the digit sum condition.

We'll write a Python program to:
- Enumerate all natural numbers \( d \) such that \(\frac{10d}{7} - 60 = d\) (only exact divisions, so \(10d\) divisible by 7)
- Check that \( \text{digit sum}(d) = 5 \)
- Print all such \( d \), then print the final answer explicitly.

```python
# Enumerate integer solutions d for (10*d)/7 - 60 = d with digit sum 5
# (10*d)/7 must be integer, and (10*d)//7 - 60 == d

def digit_sum(n):
    return sum(int(ch) for ch in str(n))

def main():
    # Since from the equation, rearranged: (10*d)/7 - 60 = d => (10*d)/7 = d + 60
    # Multiply both sides by 7: 10*d = 7*d + 420 => 3*d = 420 => d=140
    # So d=140 is the only candidate, verify digit sum
    
    candidates = []
    # But we enumerate d to confirm and demonstrate verification
    
    # Let's try d from 1 to 200 to check all candidates
    for d in range(1, 201):
        numerator = 10 * d
        if numerator % 7 != 0:
            continue
        val = numerator // 7 - 60
        if val == d:
            # Check digit sum
            if digit_sum(d) == 5:
                print(f"Found d={d} with digit sum 5")
                candidates.append(d)
    
    if candidates:
        print(f"Answer: {candidates[0]}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
```
