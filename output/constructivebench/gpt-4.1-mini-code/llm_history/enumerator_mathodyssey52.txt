[write_program]
The problem involves a sequence defined recursively by:
a1 = 1,
a_{n+1} = (√3 * a_n + 1) / (√3 - a_n).

We want to explore the sum S = a_1 + a_2 + ... + a_2022.

To analyze, let's compute the first terms and partial sums numerically to identify a pattern.

```python
import math

def sequence_and_sum(N):
    a = [0] * (N+1)
    a[1] = 1
    total = a[1]
    print(f"n=1, a_1={a[1]}, partial sum={total}")
    for n in range(1, N):
        prev = a[n]
        next_val = (math.sqrt(3) * prev + 1) / (math.sqrt(3) - prev)
        a[n+1] = next_val
        total += next_val
        print(f"n={n+1}, a_{n+1}={next_val:.10f}, partial sum={total:.10f}")

# Sample with N=20 to get insight without exceeding output length
sequence_and_sum(20)
```

This code prints each term a_n and the partial sum up to n immediately, helping conjecture the sum formula or closed form.
