[write_program]
The problem deals with permutations of the list \([0, 1, \ldots, n-1]\) such that the partial sums modulo \(n\) taken at indices \(i+1\) are all distinct for \(i=0, \dots, n-1\). We want to find for which \(n\) such permutations exist.

The program will:
- For small values of \(n\) (e.g., \(1\) to \(7\)), generate all permutations of \(\{0,\ldots,n-1\}\).
- Compute partial sums modulo \(n\).
- Check if all partial sums mod \(n\) are distinct.
- Print \(n\) and such permutations immediately when found.

This enumeration helps identify which \(n\) belong to the answer set, conjecture patterns, and verify the property for small values.

```python
from itertools import permutations

def has_distinct_partial_sums_mod_n(p, n):
    seen = set()
    s = 0
    for x in p:
        s = (s + x) % n
        if s in seen:
            return False
        seen.add(s)
    return True

max_n = 7  # limit to small n for efficiency and readability
for n in range(1, max_n + 1):
    print(f"n={n}:")
    found = False
    elems = list(range(n))
    # early pruning: sum of all elements mod n == 0 since sum(0,..,n-1)=n(n-1)/2
    # we only need permutations; total permutations n!
    for p in permutations(elems):
        if has_distinct_partial_sums_mod_n(p, n):
            found = True
            print("  Valid permutation:", p)
    if not found:
        print("  No valid permutation found")
```

