[write_program]
The problem concerns real numbers \( x \) such that for every integer \( n \), the value \( x^n + x^{-n} \) is an integer. The theorem states this happens if and only if \( x \) is related to an integer \( y \) with \( |y|\ge 2 \) in a specific way.

To investigate the statement computationally, we test values \( y \) with \( |y| \ge 2 \), compute the corresponding \( x \)-values, and verify that \( x^n + x^{-n} \) gives integers for several \( n \).

```python
import math

# We'll test y from 2 to 5 and their negatives
ys = [2, 3, 4, 5, -2, -3, -4, -5]

def x_values(y):
    # given y, solve x + 1/x = y => x^2 - y*x +1=0
    disc = y*y - 4
    sqrt_disc = math.sqrt(disc) if disc >= 0 else None
    if sqrt_disc is None:
        return []
    x1 = (y + sqrt_disc) / 2
    x2 = (y - sqrt_disc) / 2
    return [x1, x2]

def check_x(x, max_n=10):
    # check if x^n + x^{-n} is close to integer for n=1..max_n
    for n in range(1, max_n+1):
        val = x**n + x**(-n)
        if abs(val - round(val)) > 1e-9:
            return False
    return True

for y in ys:
    xs = x_values(y)
    for x in xs:
        if check_x(x):
            # print exact values when possible
            print(f"y = {y}, x = {x:.12f} satisfies integer sums for n=1..10")
```
This explores the candidates given by the quadratic solutions and verifies the property on the first few powers. This supports the theorem's characterization.
