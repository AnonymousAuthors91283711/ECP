[write_program]
The problem is to count four-digit numbers \( n \) with digits \( d_1 d_2 d_3 d_4 \) such that each digit except possibly \( d_1 \) is even. Here, the conditions state: 
- \(1000 \le n \le 9999\) (four-digit number)
- \(d_1 = \lfloor n/1000 \rfloor\) is even
- \(d_2 = \big\lfloor (n/100) \big\rfloor \% 10\) is even
- \(d_3 = \big\lfloor (n/10) \big\rfloor \% 10\) is even
- \(d_4 = n \% 10\) is even

Digits are from 0 to 9, but \(d_1\) (thousands digit) cannot be zero since \(n\) is four-digit, so \(d_1 \in \{2,4,6,8\}\). For \(d_2, d_3, d_4\), all even digits \( \{0, 2, 4, 6, 8\} \) are allowed.

The program below enumerates all such numbers and prints them immediately. It prints the count at the end as the final answer.

```python
# Enumerate 4-digit numbers n with all digits even (d1,d2,d3,d4), d1 != 0
# Conditions: d1,d2,d3,d4 in digits, all even, d1>=1

def is_even(d):
    return d % 2 == 0

def digits_even(n):
    d1 = n // 1000
    d2 = (n // 100) % 10
    d3 = (n // 10) % 10
    d4 = n % 10
    return all(is_even(d) for d in (d1,d2,d3,d4)) and d1 != 0

count = 0
for n in range(1000, 10000):
    if digits_even(n):
        print(n)
        count += 1
print("Count:", count)
```
