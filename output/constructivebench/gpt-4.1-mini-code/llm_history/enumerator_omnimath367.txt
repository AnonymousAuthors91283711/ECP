[write_program]
The problem counts the number of ways to assign three distinct digits to abc.0.1, abc.1.1, abc.2.1 (first components) and three distinct digits to abc.0.2, abc.1.2, abc.2.2 (second components), with all digits from 0 to 9 (Fin 10). The three indices (0, 1, 2) represent positions, and each position maps to a pair of digits with constraints that specific parts are all distinct.

To enumerate:
- Choose triples of distinct first components in [0..9] (order matters, since abc is a function on Fin 3).
- Choose triples of distinct second components similarly.
- Multiply the counts.

Since order matters, these are permutations of length 3 from 10 elements = P(10,3) = 10 * 9 * 8 = 720
So total = 720 * 720 = 518400.

We'll enumerate and print all such pairs (a triple of first components and a triple of second components) and count them. Since printing all 518400 is too large, we'll print a few as samples, then the total.

```python
from itertools import permutations

def main():
    digits = range(10)
    perms = list(permutations(digits, 3))
    count = 0
    # Print some example pairs first
    for i, p1 in enumerate(perms):
        for j, p2 in enumerate(perms):
            # Print first few pairs to illustrate
            if count < 5:
                print(f"First components: {p1}, Second components: {p2}")
            count += 1
            # Limit output to avoid excess tokens
            if count >= 518400:
                break
        if count >= 518400:
            break
    print(f"Total number of such functions: {count}")

if __name__ == "__main__":
    main()
```
