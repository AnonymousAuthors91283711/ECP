[write_program]
The problem involves finding four-digit numbers N = ABCD (digits A,B,C,D) such that when you remove the last digit D, the resulting three-digit number ABC equals 9 times the last three digits BCD. Formally, if N = 1000A + 100B + 10C + D, then floor(N/10) = 9 * (N % 1000).

We will enumerate all 4-digit numbers N (1000 â‰¤ N < 10000), check the condition, and print each matching number immediately. After enumeration, print the count of such numbers.

```python
# Enumerate 4-digit numbers N = ABCD satisfying floor(N/10) = 9 * (N % 1000)
# That is, ABC = 9 * BCD
# We check N in [1000, 9999)

count = 0
for N in range(1000, 10000):
    left = N // 10
    right = N % 1000
    if left == 9 * right:
        print(f"Match found: N = {N}, floor(N/10) = {left}, N%1000 = {right}")
        count += 1
print(f"Total matches: {count}")
```
