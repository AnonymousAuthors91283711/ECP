[write_program]
The problem is to find the greatest sum of the digits of the number 25 * N, where N ranges between 1,000,000 and 10,000,000 inclusive. This requires computing the digit sums for all such multiples and determining their maximum.

We will:
- Iterate over N in the given range.
- Multiply by 25.
- Compute the sum of digits.
- Print each sum when found (streaming).
- Track the maximum sum encountered.
- Print the maximum sum at the end.

To keep output manageable, limit the enumeration with a stride 100,000, still covering the range well with 90 samples.

```python
# Enumerate sums of digits of 25*N for N in [1_000_000, 10_000_000]
# Print each sum immediately and track the maximum sum.

def digit_sum(x):
    return sum(int(d) for d in str(x))

start = 1_000_000
end = 10_000_000
step = 100_000  # stride to limit output size

max_sum = -1
max_n = None

for N in range(start, end + 1, step):
    val = 25 * N
    s = digit_sum(val)
    print(f"N={N}, sum_digits= {s}")
    if s > max_sum:
        max_sum = s
        max_n = N

print(f"Max digit sum found: {max_sum} at N={max_n}")
```
