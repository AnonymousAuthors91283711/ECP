[write_program]
The problem searches for digits (h,m,t,g,u,s,o,n,d,r) all distinct with h,g,r ≠ 0, that satisfy the cryptarithm:

  hmmt + guts = round

where

- hmmt = 1000*h + 100*m + 10*m + t
- guts = 1000*g + 100*u + 10*t + s
- round = 10000*r + 1000*o + 100*u + 10*n + d

and r is fixed to 1.

We want to find all solutions, print them out, and at the end print the maximum round.

To explore efficiently:
- r=1 fixed
- h,g,r ≠ 0, so h,g≥1
- digits 0..9 distinct

We can iterate over all digits 0..9 for h,m,t,g,u,s,o,n,d with constraints, compute and check if it matches the conditions.

```python
from itertools import permutations

def main():
    digits = set(range(10))
    r = 1
    print(f"Fixed digit r={r}")
    max_round = None
    max_solution = None
    # h,g,r !=0 and distinct digits overall
    # variables: h,m,t,g,u,s,o,n,d 
    for h,m,t,g,u,s,o,n,d in permutations(digits - {r}, 9):
        # constraints
        if h == 0 or g == 0:
            continue
        # distinctness guaranteed by permutations
        # compute values
        hmmt = 1000*h + 100*m + 10*m + t
        guts = 1000*g + 100*u + 10*t + s
        round_val = 10000*r + 1000*o + 100*u + 10*n + d
        if hmmt + guts == round_val:
            print(f"h={h} m={m} t={t} g={g} u={u} s={s} o={o} n={n} d={d} => {hmmt}+{guts}={round_val}")
            if max_round is None or round_val > max_round:
                max_round = round_val
                max_solution = (h,m,t,g,u,s,o,n,d,r)
    if max_round is not None:
        print(f"Maximum round = {max_round} from digits h,m,t,g,u,s,o,n,d,r = {max_solution}")
    else:
        print("No solution found")

if __name__ == "__main__":
    main()
```
