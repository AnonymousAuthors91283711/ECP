[write_program]
Here the problem is to find a unique polynomial P with rational coefficients, degree at most 3, interpolating points (x, y) with x in {1,2,3,4} and y = 1/(1 + x + x^2), then evaluate P at 5.

The polynomial is a degree ≤ 3 polynomial passing through those points, so it's unique. We want to conjecture the value P(5) exactly, which likely is rational or some simple rational number.

We can:

- Define points (x_i, y_i) = (1, 1/3), (2, 1/7), (3, 1/13), (4, 1/21)
- Use Lagrange interpolation to find P(x) exactly as a polynomial with rational coefficients
- Evaluate P(5) exactly (should be rational)

We'll print the polynomial coefficients and P(5). This helps conjecture what the answer is. The coefficients and P(5) will be rationals.

```python
from fractions import Fraction

# Points:
points = [(1, Fraction(1, 1+1+1**2)),
          (2, Fraction(1, 1+2+4)),
          (3, Fraction(1, 1+3+9)),
          (4, Fraction(1, 1+4+16))]

def lagrange_interpolate(x_val, points):
    # Lagrange formula: P(x) = sum y_i * L_i(x)
    # where L_i(x) = prod_{j!=i} (x - x_j)/(x_i - x_j)
    result = Fraction(0)
    for i,(x_i,y_i) in enumerate(points):
        term = y_i
        for j,(x_j,_) in enumerate(points):
            if i != j:
                term *= Fraction(x_val - x_j, x_i - x_j)
        result += term
    return result

def polynomial_coefficients(points):
    # For degree ≤3 polynomial through 4 points,
    # interpolate to get coefficients in basis 1,x,x^2,x^3
    # We'll solve linear system: A c = y
    # A_{ij} = x_i^{j}, c coefficients, y_i values
    n = len(points)
    A = []
    y_vec = []
    for x_i,y_i in points:
        row = [Fraction(1)]
        for deg in range(1, n):
            row.append(Fraction(x_i)**deg)
        A.append(row)
        y_vec.append(y_i)
    # Solve A c = y_vec using fractions
    # We'll do simple Gaussian elimination with fractions
    # Copy A and y_vec to avoid modification
    mat = [row[:] for row in A]
    vec = y_vec[:]
    # Gaussian elimination
    for i in range(n):
        # Find pivot
        pivot = i
        for r in range(i+1, n):
            if abs(mat[r][i]) > abs(mat[pivot][i]):
                pivot = r
        if pivot != i:
            mat[i], mat[pivot] = mat[pivot], mat[i]
            vec[i], vec[pivot] = vec[pivot], vec[i]
        # Normalize row i
        factor = mat[i][i]
        for c in range(i, n):
            mat[i][c] /= factor
        vec[i] /= factor
        # Eliminate below
        for r in range(i+1, n):
            f = mat[r][i]
            for c in range(i, n):
                mat[r][c] -= f * mat[i][c]
            vec[r] -= f * vec[i]
    # Back substitution
    coeffs = [Fraction(0)] * n
    for i in reversed(range(n)):
        coeffs[i] = vec[i]
        for c in range(i+1, n):
            coeffs[i] -= mat[i][c] * coeffs[c]
    return coeffs

coeffs = polynomial_coefficients(points)

print("Polynomial coefficients (constant to x^3):")
for i,c in enumerate(coeffs):
    print(f"x^{i}: {c}")

val_at_5 = lagrange_interpolate(5, points)
print(f"P(5) = {val_at_5}")
```

This outputs exact rational polynomial coefficients and P(5) value. From that, you can conjecture the exact answer.
