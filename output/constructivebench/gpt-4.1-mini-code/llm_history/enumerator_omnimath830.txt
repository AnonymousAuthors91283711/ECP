[write_program]
The problem involves enumerating families \( T \) of subsets of a 3-element set (\(\text{Fin } 3\)) that are closed under intersection and union, and counting such families. We interpret "Set (Set (Fin 3))" as sets of subsets of \(\{0,1,2\}\). The program will:

- Enumerate all collections \( T \subseteq \mathcal{P}(\{0,1,2\}) \).
- Check closure under intersection and union for all pairs in \( T \).
- Count and print each valid \( T \) with its size.
- Show the total count of such families.

```python
from itertools import chain, combinations

# Generate all subsets of a given set
def powerset(s):
    return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))

# Check closure under union and intersection
def is_closed_under_union_intersection(T):
    Tset = set(T)
    for A in T:
        for B in T:
            inter = tuple(sorted(set(A).intersection(B)))
            union = tuple(sorted(set(A).union(B)))
            if inter not in Tset or union not in Tset:
                return False
    return True

def main():
    base_set = (0,1,2)
    all_subsets = powerset(base_set)
    count = 0
    for T in powerset(all_subsets):
        if is_closed_under_union_intersection(T):
            count += 1
            print(f'Valid T (size {len(T)}): {T}')
    print(f'Total families closed under ∩ and ∪ on 3-element set: {count}')

if __name__ == "__main__":
    main()
```
