[write_program]
The problem looks to find pairs of positive integers (n, p), where p is prime, satisfying the equation:

sum_{i=1}^n i = 3 * sum_{j=1}^p j^2

That is,

n(n+1)/2 = 3 * (p(p+1)(2p+1)/6)

Simplifying the right side: 3 * sum of squares of first p numbers.

I will write a Python program to enumerate such pairs (n, p) for small values, printing all solutions where n > 0, p > 0 and p is prime, and the equation holds exactly.

I will scan p in primes up to a small limit (say 50), and for each p, compute RHS, then check if LHS = RHS for some integer n, solve for n, check if the solution is integral and positive, then print (n,p).

```python
# Enumerate (n, p) positive integers with p prime, satisfying:
# sum_i=1^n i = 3 * sum_j=1^p j^2
# That is: n(n+1)/2 = 3 * (p(p+1)(2p+1)/6)

def is_prime(x):
    if x < 2:
        return False
    for i in range(2, int(x**0.5)+1):
        if x % i == 0:
            return False
    return True

def sum_of_squares(p):
    return p*(p+1)*(2*p+1)//6

def enumerate_solutions(max_p=50):
    print(f"Enumerating solutions for primes p up to {max_p}...")
    for p in range(2, max_p+1):
        if not is_prime(p):
            continue
        rhs = 3 * sum_of_squares(p)
        # Solve n(n+1)/2 = rhs => n^2 + n - 2*rhs =0
        # Discriminant:
        D = 1 + 8*rhs
        sqrt_D = int(D**0.5)
        if sqrt_D*sqrt_D != D:
            continue  # discriminant not perfect square
        n = (-1 + sqrt_D)//2
        if n > 0 and n*(n+1)//2 == rhs:
            print(f"Found solution: n={n}, p={p}")

if __name__ == "__main__":
    enumerate_solutions()
```
