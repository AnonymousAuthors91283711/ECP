[write_program]
The problem can be interpreted as counting the number of 5-tuples \(d = (d_0, d_1, d_2, d_3, d_4)\) where each \(d_i\) is an integer from 0 to 9, satisfying:

1. \(d_0 \neq 0\)
2. The product of all \(d_i\) equals 180.

We'll write a Python program to enumerate all such 5-tuples, print each one immediately, and finally print the total count.

Note that the product is 180, and digits range from 0 to 9. Since 0 in any digit except \(d_0\) would zero out product, the absent of 0 in any position except possibly \(d_0\) is ensured by \(d_0 \neq 0\) and product=180, which 0 cannot produce. So all digits must be between 1 and 9 inclusive.

We'll compute efficiently by iterating \(d_0\) through 1 to 9, and for each possible 5-tuple, check if product equals 180. We'll stream the solutions and then print the count.

```python
# Enumerate all 5-tuples d: Fin5 -> Fin10, with d0 != 0,
# product of all digits = 180, digits in [0..9]
# Print each tuple satisfying conditions and count total.

def product(lst):
    p = 1
    for x in lst:
        p *= x
    return p

count = 0
for d0 in range(1,10):
    # Since product=180 and digits in [1..9], product of d0*d1*d2*d3*d4=180
    # so early pruning: if d0 >180 break
    # But d0 max=9 so no break here.
    for d1 in range(0,10):
        for d2 in range(0,10):
            for d3 in range(0,10):
                for d4 in range(0,10):
                    if d1 == 0 or d2 == 0 or d3 == 0 or d4 == 0:
                        # product zero no good
                        continue
                    if d0 * d1 * d2 * d3 * d4 == 180:
                        ans = (d0,d1,d2,d3,d4)
                        print(ans)
                        count += 1

print("Total count:", count)
```
