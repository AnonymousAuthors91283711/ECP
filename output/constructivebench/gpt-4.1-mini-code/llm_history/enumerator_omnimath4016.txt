[write_program]
The problem is to find all three-digit numbers \( n \) (i.e., \( 100 \le n \le 999 \)) such that the sum of \( n \) and the number formed by reversing its digits is a perfect square. More explicitly, for \( n = 100a + 10b + c \), consider

\[
n + \text{rev}(n) = 100a + 10b + c + 100c + 10b + a = 101(a + c) + 20b
\]

We want to enumerate all such \( n \) where the sum is a perfect square.

We will write a Python program that:
- Enumerates all \( n \) from 100 to 999,
- Computes the reversed number,
- Checks if their sum is a perfect square,
- Prints each \( n \) satisfying the condition and its sum (the perfect square).

We will also print the perfect square found for verification.

```python
import math

# Enumerate all 3-digit numbers
for n in range(100, 1000):
    # Extract digits
    a = n // 100
    b = (n // 10) % 10
    c = n % 10

    rev = 100 * c + 10 * b + a
    total = n + rev

    root = math.isqrt(total)
    if root * root == total:
        print(f"n = {n}, rev = {rev}, sum = {total} = {root}^2")
```
