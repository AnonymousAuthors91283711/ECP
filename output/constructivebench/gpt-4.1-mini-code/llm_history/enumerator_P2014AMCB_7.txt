[write_program]
This problem asks for the number of positive integers \( n \) less than 30 such that there exists a positive integer \( k \) with:
\[
n = k \times (30 - n).
\]
Rearranged, this implies:
\[
n = k(30 - n) \implies n + kn = 30k \implies n(1 + k) = 30k \implies n = \frac{30k}{k+1}.
\]
For \( n \) to be an integer, \( (k + 1) \) must divide \( 30k \). Since \( k \) and \( k+1 \) are consecutive integers and thus coprime, \( k + 1 \) divides 30.

We can enumerate \( n \) by letting each divisor \( d = k + 1 \) of 30 generate \( k = d - 1 \) and hence \( n = \frac{30(k)}{k+1} = \frac{30(d - 1)}{d} = 30 - \frac{30}{d} \). Since \( n \) must be between 1 and 29, and \( d > 1 \) (since \( k > 0 \) implies \( k+1 > 1 \)), we enumerate the divisors \( d \) of 30 greater than 1, compute \( n \), and count how many such \( n \) exist.

```python
# Enumerate n with 0 < n < 30 and âˆƒ k > 0: n = k*(30 - n)
# From the problem, n = 30*k/(k+1), k+1 divides 30*k
# Because k and k+1 are coprime, k+1 divides 30
# So for each divisor d of 30 with d>1, set k=d-1, n=30*k/d=30 - 30/d

def divisors(n):
    divs = []
    for i in range(1, n+1):
        if n % i == 0:
            divs.append(i)
    return divs

N = 30
divs = divisors(N)
results = []
print(f"Divisors of {N}: {divs}")
for d in divs:
    if d > 1:
        n = 30 - 30 // d
        if 0 < n < 30:
            print(f"d={d}, k={d-1}, n={n}")
            results.append(n)

# unique results count
unique_ns = sorted(set(results))
print(f"\nNumber of such n: {len(unique_ns)}")
print("Values of n:", unique_ns)
```
