[write_program]
The problem involves two 3-digit numbers (represented by grid rows) summing to 999 each, with a condition on the combined digits summing in a weighted way to 99. We enumerate all possible digit assignments for grid cells (digits 0-9), respecting the conditions, and print each valid grid along with the final count.

```python
# Enumerate pairs of three-digit numbers (digits 0-9) with conditions:
# row0 and row1 each sum (digits weighted by place value) to 999
# sum of corresponding digits weighted differently equals 99 
# grid: grid[row][col], rows 0 and 1, cols 0,1,2 (ones, tens, hundreds)

def main():
    count = 0
    # grid[row][col], col: 0 (ones),1(tens),2(hundreds)
    # digits 0-9 for each cell
    for g00 in range(10):
        for g01 in range(10):
            for g02 in range(10):
                # row0 number = g00*1 + g01*10 + g02*100
                if g00 + 10*g01 + 100*g02 != 999:
                    continue
                for g10 in range(10):
                    for g11 in range(10):
                        for g12 in range(10):
                            # row1 number
                            if g10 + 10*g11 + 100*g12 != 999:
                                continue
                            # weighted sum of sums of digits = 99
                            s = (g00+g10) + 10*(g01+g11) + 100*(g02+g12)
                            if s == 99:
                                # print exact solution (digits)
                                print(f"grid[0]: {g00} {g01} {g02} | grid[1]: {g10} {g11} {g12}")
                                count += 1
    print(f"Total valid grids: {count}")

if __name__ == "__main__":
    main()
```
