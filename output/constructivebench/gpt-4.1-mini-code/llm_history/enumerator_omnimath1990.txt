[write_program]
The problem asks to find the smallest natural number \( N > 2017 \) such that

\[
5 \times \#\{k < N : \text{first digit of } k = 1\} = 2 \times N.
\]

We want to enumerate values of \( N > 2017 \) and count how many numbers less than \( N \) start with digit 1, then check the condition.

```python
def first_digit(n):
    while n >= 10:
        n //= 10
    return n

def count_start_digit_1(limit):
    # Count numbers k < limit starting with digit 1.
    count = 0
    for k in range(limit):
        if first_digit(k) == 1:
            count += 1
    return count

def main():
    start = 2018
    found_candidates = []
    # We'll search up to 3000 to limit output size
    for N in range(start, 3000):
        c = count_start_digit_1(N)
        if 5 * c == 2 * N:
            print(f"N={N}, count={c}, 5*count={5*c}, 2*N={2*N}")
            found_candidates.append(N)
    if found_candidates:
        print("Minimum N found:", min(found_candidates))
    else:
        print("No N found in the range")

if __name__ == "__main__":
    main()
```
