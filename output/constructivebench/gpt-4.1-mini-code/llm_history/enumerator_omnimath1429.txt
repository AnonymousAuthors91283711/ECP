[write_program]
The problem appears to involve solving for the expected value \( E \) based on some Markov chain or probabilistic process with transition probabilities \( p_H = \frac{1}{4} \), \( p_M = \frac{1}{2} \), and \( p_T = \frac{1}{4} \). The expectation \( E \) satisfies an equation:

\[
E = 1 + p_H \cdot E + p_M \cdot (1 + p_H \cdot E + p_M \cdot 0 + p_T \cdot E) + p_T \cdot E
\]

We want to solve this equation for \( E \).

The program below enumerates calculations step by step and prints intermediate values, solving symbolically and numerically for \( E \).

```python
# Solve E = 1 + p_H * E + p_M * (1 + p_H * E + p_M * 0 + p_T * E) + p_T * E
# with p_H=1/4, p_M=1/2, p_T=1/4

def main():
    from fractions import Fraction
    p_H = Fraction(1,4)
    p_M = Fraction(1,2)
    p_T = Fraction(1,4)
    print(f"Using probabilities p_H={p_H}, p_M={p_M}, p_T={p_T}")

    # Let E be unknown
    # Write the equation:
    # E = 1 + p_H*E + p_M*(1 + p_H*E + p_M*0 + p_T*E) + p_T*E
    # Expand:
    # E = 1 + p_H*E + p_M*(1 + p_H*E + p_T*E) + p_T*E
    # E = 1 + p_H*E + p_M*1 + p_M*p_H*E + p_M*p_T*E + p_T*E
    # Collect terms of E on right side:
    # E = 1 + p_M + (p_H + p_M*p_H + p_M*p_T + p_T) * E

    const_term = 1 + p_M
    e_coeff = p_H + p_M*p_H + p_M*p_T + p_T

    print(f"Constant term on right side: {const_term} (exact)")
    print(f"Coefficient of E on right side: {e_coeff} (exact)")

    # So E = const_term + e_coeff * E
    # => E - e_coeff * E = const_term
    # => E * (1 - e_coeff) = const_term
    # => E = const_term / (1 - e_coeff)
    denom = 1 - e_coeff
    E = const_term / denom

    print(f"Denominator (1 - coefficient): {denom} (exact)")
    print(f"Expected value E = {E} (exact fraction)")
    print(f"Expected value E â‰ˆ {float(E):.6f}")

if __name__ == "__main__":
    main()
```
