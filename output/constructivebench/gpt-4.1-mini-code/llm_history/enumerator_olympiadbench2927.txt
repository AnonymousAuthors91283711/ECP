[write_program]
The problem asks to find the least positive real number x such that the floor of x divided by the fractional part of x equals 35. Formally, for T = 35:

⌊x⌋ / (x - ⌊x⌋) = 35

Let n = ⌊x⌋, f = x - n, then:

n / f = 35  =>  f = n / 35

Since f ∈ (0,1), we have n / 35 < 1 => n < 35

So n is an integer between 1 and 34.

Then:

x = n + n/35 = n * (1 + 1/35) = n * 36/35

We want the least x > 0 with these properties. Since n must be positive integer less than 35, the minimal x corresponds to the minimal n > 0:

For n=1: x=36/35 ≈1.028571...

Let’s enumerate all such x quickly to print them.

```python
# Enumerate all positive integers n with n < 35,
# compute x = n + n/35 = n * 36/35,
# print x and verify floor(x)/(x-floor(x)) = 35

def is_solution(x, T):
    from math import floor
    n = floor(x)
    f = x - n
    return f != 0 and abs(n / f - T) < 1e-12

def main():
    T = 35
    print(f"Parameter T = {T}")
    candidates = []
    for n in range(1, T):  # n from 1 to 34
        x = n * (1 + 1 / T)  # x = n + n/T
        if is_solution(x, T):
            print(f"x = {x} with floor(x) = {n} and fraction = {x - n}")
            candidates.append(x)
    if candidates:
        min_x = min(candidates)
        print(f"\nLeast x satisfying condition: {min_x}")

if __name__ == "__main__":
    main()
```
