[write_program]
The problem involves examining the asymptotic behavior of a sequence \( M(n) \) defined as the supremum of natural numbers \( m \geq n \) for which the binomial coefficient inequality \(\binom{m}{n-1} > \binom{m-1}{n}\) holds (for \( m \geq 1 \)). The goal is to understand the limit of \( \frac{M(n)}{n} \) as \( n \to \infty \).

To investigate this numerically, we enumerate \( n \) for some small values and search for the maximal \( m \geq n \) such that the inequality holds, then compute \( M(n)/n \). We print each \( n, M(n), M(n)/n \) found to provide insight into the behavior and conjecture the limit.

```python
from math import comb

def main():
    max_n = 20
    for n in range(1, max_n + 1):
        # We search for m >= n satisfying the inequality:
        # comb(m, n-1) > comb(m-1, n) if m >= 1
        # Since m>=n>=1, condition holds for all considered m
        # We test for increasing m until inequality fails, to find sup
        m = n  # start at n
        # To avoid infinite loops, impose an upper limit, say m <= 3*n
        max_m = 3 * n
        last_m = None
        for candidate in range(n, max_m + 1):
            lhs = comb(candidate, n - 1) if n > 1 else 1  # comb(m,0)=1 if n=1
            rhs = comb(candidate - 1, n) if n <= candidate - 1 else 0
            if lhs > rhs:
                last_m = candidate
            else:
                # Inequality fails, no need to check larger m as comb grows smoothly
                break
        if last_m is not None:
            ratio = last_m / n
            print(f"n={n}, M(n)={last_m}, M(n)/n={ratio:.6f}")

if __name__ == "__main__":
    main()
```
