[write_program]
The problem is about finding positive integers \(a, b\) such that there exists \(k > 0\) with 
\[
a^2 = k \left(2ab^2 - b^3 + 1 \right).
\]
We want to enumerate such \((a,b)\) pairs by testing small values.

We'll:
- Iterate over small \(a,b\).
- Check if \(\exists k > 0\) with \(a^2 = k \times (2ab^2 - b^3 + 1)\).
- If so, print \((a,b,k)\) and preferably \(k\) as exact integer \(k = \frac{a^2}{2ab^2 - b^3 + 1}\) if denominator divides numerator.
- The denominator must be positive (to ensure \(k>0\)).

We limit to \(1 \leq a,b \leq 20\) for output brevity.

```python
# Enumerate (a,b,k) with positive integers a,b,k <= 20 such that:
#   a^2 = k * (2*a*b^2 - b^3 + 1)
# and k > 0 integral.

def main():
    max_val = 20
    print("Enumerating (a,b,k) with a,b in [1..20]:")
    for a in range(1, max_val+1):
        a2 = a*a
        for b in range(1, max_val+1):
            denom = 2*a*b*b - b**3 + 1
            if denom <= 0:
                continue
            if a2 % denom == 0:
                k = a2 // denom
                if k > 0:
                    # Print exact solutions as soon as found
                    print(f"a={a}, b={b}, k={k}")

if __name__=="__main__":
    main()
```
