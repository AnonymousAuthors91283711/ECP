[write_program]
The problem is to find all quadruples (a,b,c,p) of positive integers with p prime that satisfy:
2^a * p^b = (p + 2)^c + 1.

We'll enumerate small primes p and small positive integers a,b,c. For each, check if 2^a * p^b - 1 is a perfect power of (p+2). We'll print all matches discovered.

```python
from sympy import isprime
from math import log

# Max bounds for iteration to control output size:
MAX_A = 10
MAX_B = 10
MAX_C = 10

primes = [2,3,5,7,11,13]

print("Enumerating (a,b,c,p) with p prime, a,b,c>0, 2^a * p^b = (p+2)^c +1\n")

for p in primes:
    base = p + 2
    for a in range(1, MAX_A+1):
        pow2a = 2**a
        for b in range(1, MAX_B+1):
            left = pow2a * (p**b) - 1
            # Check if left is a perfect power of base:
            # Try exponent c from 1 to MAX_C:
            for c in range(1, MAX_C+1):
                val = base**c
                if val == left:
                    print(f"a={a}, b={b}, c={c}, p={p}: 2^{a}*{p}^{b} = ({p}+2)^{c} + 1 => {pow2a}*{p**b} = {val}+1 = {val+1}")
```

