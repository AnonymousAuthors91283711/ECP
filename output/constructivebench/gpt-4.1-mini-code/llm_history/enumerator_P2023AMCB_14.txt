[write_program]
The problem concerns counting integer pairs (p.1, p.2) so that the cubic polynomial \(X^3 + p_1 X^2 + p_2 X + 6\) factors into linear terms with three distinct integer roots \(r, s, t\).

From the factorization:
\[
X^3 + p_1 X^2 + p_2 X + 6 = (X - r)(X - s)(X - t)
\] 
where \(r, s, t\) are distinct integers, expanding gives relations:
\[
p_1 = -(r + s + t), \quad p_2 = rs + rt + st, \quad 6 = -rst \implies rst = -6.
\]

So the problem reduces to finding all distinct triples of integers \((r,s,t)\) with distinct integers and product \(-6\), and then counting the distinct pairs \((p_1, p_2)\) determined by those triples.

The task: enumerate all distinct triples \((r,s,t)\) with \(r s t = -6\) and \(r,s,t\) distinct integers, print each corresponding \((p_1, p_2)\) pair, and output the count of distinct such pairs.

Below is a Python program that enumerates all such triples by factorizing âˆ’6, checking distinctness, printing pairs, and finally printing the count:

```python
# Enumerate all distinct integer triples (r,s,t) with r*s*t = -6,
# r,s,t distinct, and print the corresponding (p1, p2) values
# from p1 = -(r+s+t), p2 = rs+rt+st.

def integer_factorizations_of_minus6():
    # Factors of -6: Consider all triples of integers (r,s,t) with distinct values, product -6.
    # Since -6 is small, enumerate candidates in range -10 to 10.
    results = []
    seen_pairs = set()
    N = 10
    for r in range(-N, N+1):
        if r == 0:
            continue
        if -6 % r != 0:
            continue
        rem = -6 // r
        for s in range(-N, N+1):
            if s == 0 or s == r:
                continue
            if rem % s != 0:
                continue
            t = rem // s
            if t == 0 or t == r or t == s:
                continue
            triple = tuple(sorted([r,s,t]))
            if triple in results:
                continue
            results.append(triple)
    return results

triples = integer_factorizations_of_minus6()
pairs = set()
for (r,s,t) in triples:
    p1 = -(r + s + t)
    p2 = r*s + r*t + s*t
    if (p1, p2) not in pairs:
        pairs.add((p1,p2))
        print(f"p1={p1}, p2={p2} from roots {r}, {s}, {t}")

print(f"Total distinct (p1,p2) pairs: {len(pairs)}")
```
