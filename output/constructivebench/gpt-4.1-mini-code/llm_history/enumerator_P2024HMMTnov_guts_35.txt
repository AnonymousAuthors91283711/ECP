[write_program]
The problem involves analyzing the function expected_rounds(n) = sum_{k=0}^9 (1 - (n-1)/1024)^k for integer n between 1 and 1024, and finding the smallest n for which expected_rounds(n) < 2.

We'll enumerate n from 1 to 1024, compute expected_rounds(n) exactly using geometric series formula where possible, print all values with expected_rounds(n) < 2, and finally print the smallest such n.

Note:  
expected_rounds(n) = sum_{k=0}^9 r^k, where r = 1 - (n-1)/1024 = (1025 - n)/1024.  
sum_{k=0}^9 r^k = (1 - r^{10}) / (1 - r) if r != 1, otherwise 10.

We'll compute this exactly with fractions to avoid floating errors.

```python
from fractions import Fraction

def expected_rounds(n):
    # r = (1025-n)/1024
    r = Fraction(1025 - n, 1024)
    if r == 1:
        return 10  # sum of 10 ones
    numerator = 1 - r**10
    denominator = 1 - r
    return numerator / denominator

def main():
    candidates = []
    for n in range(1, 1025):
        val = expected_rounds(n)
        if val < 2:
            print(f"n={n}, expected_rounds={val} < 2")
            candidates.append((n, val))

    if candidates:
        min_n = min(c[0] for c in candidates)
        print(f"Minimum n with expected_rounds(n) < 2 is {min_n}")

if __name__ == "__main__":
    main()
```
