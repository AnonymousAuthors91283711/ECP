[write_program]
The problem involves finding a natural number \( n \) such that the sum of \(\log_{10}(d)\) over all divisors \( d \) of \( 10^n \) equals 792.

We can start by enumerating values of \( n \), compute the divisors of \( 10^n \), calculate the sum of their base-10 logarithms, and check which \( n \) yields 792.

Note:
- Divisors of \( 10^n = 2^n \cdot 5^n \) are of the form \( 2^a 5^b \) with \( 0 \leq a,b \leq n \).
- \(\log_{10}(2^a 5^b) = a \log_{10}(2) + b \log_{10}(5)\).
- We sum over all pairs \((a,b)\) with \(a, b \in [0,n]\).

By streaming the sums for increasing \( n \), print the value of the sum and check for equality to 792. Then output the \( n \) that satisfies the condition.

```python
from math import log10

def divisors_log_sum(n):
    # Calculate sum_{a=0}^n sum_{b=0}^n log10(2^a * 5^b)
    # = sum_{a=0}^n sum_{b=0}^n (a*log10(2) + b*log10(5))
    log2 = log10(2)
    log5 = log10(5)
    total = 0
    for a in range(n+1):
        for b in range(n+1):
            total += a*log2 + b*log5
    return total

def main():
    target = 792
    # Rough search for n, print sums as we go
    # Since number of divisors = (n+1)^2, and log values small,
    # we can try n up to 40 or so safely.
    for n in range(1, 50):
        s = divisors_log_sum(n)
        print(f"n={n} sum_of_logs={s}")
        if abs(s - target) < 1e-9:  # exact match due to limited sums
            print(f"Found n = {n} with sum_of_logs = {s}")
            break

if __name__ == "__main__":
    main()
```
