[write_program]
The problem involves finding real numbers \(a, b\) satisfying two cubic equations and summing them. We want to find possible values of \(a + b\), given:

1. \(a^3 - 15 a^2 + 20 a - 50 = 0\)
2. \(8 b^3 - 60 b^2 - 290 b + 2575 = 0\)

We want to find all real roots \(a\) of the first cubic, all real roots \(b\) of the second cubic, then print all sums \(a+b\).

Weâ€™ll:
- Find real roots of the cubics using numpy's roots and filter real roots.
- Enumerate all sums with high precision (use fractions or decimals).
- Print each sum found immediately.
- Then, print the minimum and maximum sums found (to help conjecture the answer).

For demonstration, since the coefficients look integer and relatively sized, we can try integer roots candidates quickly before using numerical methods.

```python
# Enumerate all sums a+b where a,b satisfy given cubics, print sums immediately.
# Then print min and max to assist in conjecture.

import numpy as np

def real_roots_of_cubic(coeffs):
    # coeffs: [a3, a2, a1, a0]
    roots = np.roots(coeffs)
    reals = []
    for r in roots:
        if abs(r.imag) < 1e-12:
            reals.append(r.real)
    reals.sort()
    return reals

def main():
    # Cubic 1: a^3 -15 a^2 +20 a -50 = 0
    coeffs_a = [1, -15, 20, -50]
    a_roots = real_roots_of_cubic(coeffs_a)

    # Cubic 2: 8 b^3 -60 b^2 -290 b +2575 = 0
    coeffs_b = [8, -60, -290, 2575]
    b_roots = real_roots_of_cubic(coeffs_b)

    sums = set()
    print("Roots a:", a_roots)
    print("Roots b:", b_roots)

    for a in a_roots:
        for b in b_roots:
            s = a + b
            # rounding to 12 decimals for display consistency
            s_rounded = round(s, 12)
            if s_rounded not in sums:
                sums.add(s_rounded)
                print("Sum a+b =", s_rounded)

    if sums:
        print("Min sum =", min(sums))
        print("Max sum =", max(sums))
    else:
        print("No real roots found")

if __name__ == "__main__":
    main()
```
