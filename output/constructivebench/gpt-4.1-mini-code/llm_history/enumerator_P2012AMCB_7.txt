[write_program]
# The problem involves a repeating pattern of traffic lights with 0 = red and 1 = green, pattern length 5.
# Pattern: [0, 0, 1, 1, 1]
# We have totalRedLights = 21 (number of red lights),
# and want to find the difference in position between the 3rd and 21st red lights,
# then multiply by 6 and divide by 12, and find that result.

# The positions are 0-based indices in the list of light positions (0 to 5*totalRedLights-1),
# filtered for red lights (pattern[n % 5] == 0).

# We'll enumerate the red positions for totalRedLights=21,
# find redPositions[2] and redPositions[20], compute ((pos20 - pos2)*6)/12,
# and print the result exactly when found.

print("Parameters: pattern = [0,0,1,1,1], totalRedLights = 21")

pattern = [0, 0, 1, 1, 1]
totalRedLights = 21
max_index = 5 * totalRedLights  # 105

redPositions = []
for n in range(max_index):
    if pattern[n % 5] == 0:
        redPositions.append(n)
        if len(redPositions) >= totalRedLights:
            break

# Check we have enough red positions
print(f"Number of red lights found: {len(redPositions)}")
thirdRed = redPositions[2]  # 3rd red light (0-based index = 2)
twentyFirstRed = redPositions[20]  # 21st red light (index 20)

print(f"3rd red light position: {thirdRed}")
print(f"21st red light position: {twentyFirstRed}")

diff = twentyFirstRed - thirdRed
result = (diff * 6) / 12  # fractions handled as float here, but output has denominator 12
print(f"Computed value ((21st - 3rd)*6)/12 = {diff} * 6 / 12 = {result}")

# We can print the exact fraction:
from fractions import Fraction
exact_result = Fraction(diff * 6, 12)
print(f"Exact result as fraction: {exact_result} = {float(exact_result)}")
