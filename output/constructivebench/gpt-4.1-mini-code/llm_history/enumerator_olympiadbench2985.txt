[write_program]
This problem involves the expression \(\frac{a^2 + b^2 + c^2 + 2ab + 2bc + 2ca}{a + b + c}\) with \(a=19,\ b=20,\ c=21\). Recognizing that the numerator equals \((a + b + c)^2\), the expression simplifies to \(a + b + c\). To validate and generalize this, the Python program will enumerate sample triples \((a,b,c)\) over small integers and check the expression's value, printing exact fraction forms when possible.

```python
from fractions import Fraction

# Enumerate sample triples (a,b,c) with small integer values and compute the expression.
# Expression: (a^2 + b^2 + c^2 + 2ab + 2bc + 2ca) / (a + b + c)
# Simplify numerator: (a + b + c)^2, so expression = a + b + c.
# The program verifies this by direct computation.

def main():
    print("Testing expression (a^2 + b^2 + c^2 + 2ab + 2bc + 2ca)/(a + b + c) for small integer triples:")
    for a in range(1, 6):
        for b in range(1, 6):
            for c in range(1, 6):
                denom = a + b + c
                if denom == 0:
                    continue
                numerator = a*a + b*b + c*c + 2*a*b + 2*b*c + 2*c*a
                val = Fraction(numerator, denom)
                # Exact simplified value should be a + b + c if our conjecture is correct
                print(f"a={a}, b={b}, c={c} => value = {val} = {val.numerator // val.denominator} (int division)")

    # Test the given values
    a, b, c = 19, 20, 21
    numerator = a*a + b*b + c*c + 2*a*b + 2*b*c + 2*c*a
    denom = a + b + c
    val = Fraction(numerator, denom)
    print(f"\nGiven a=19, b=20, c=21 => Expression value = {val} = {val.numerator // val.denominator}")

if __name__ == "__main__":
    main()
```
