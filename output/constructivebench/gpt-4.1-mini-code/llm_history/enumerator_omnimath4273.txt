[write_program]
The problem is to find real numbers \(\alpha\) such that for all positive integers \(n\), the sum 
\[
S(\alpha, n) = \sum_{i=0}^{n-1} \lfloor (i+1) \alpha \rfloor
\]
is divisible by \(n\). Equivalently, 
\[
S(\alpha,n) \equiv 0 \pmod{n} \quad \forall n > 0.
\]

To explore this, I’ll enumerate values for \(\alpha\) on a small rational grid, compute \(S(\alpha,n) \mod n\) for several \(n\), and print those \(\alpha\) that satisfy the divisibility condition up to some \(n_{\max}\).

```python
# Enumerate α = p/q for small integers p,q with q>0,
# check divisibility of S(α,n) = sum of floors((i+1)*α) modulo n for n=1..Nmax.
# Print α values (as fractions) passing divisibility test for all n.

from math import floor, gcd
from fractions import Fraction

def S(alpha, n):
    '''Compute sum_{i=0}^{n-1} floor((i+1)*alpha).'''
    return sum(floor((i+1)*alpha) for i in range(n))

def check_alpha(p, q, Nmax=12):
    '''Check if S(p/q, n) % n == 0 for all 1<=n<=Nmax.'''
    alpha = p/q
    for n in range(1, Nmax+1):
        val = S(alpha, n)
        if val % n != 0:
            return False
    return True

def main():
    Nmax = 12
    max_pq = 12
    print(f"Checking rational α = p/q with 1 ≤ p ≤ {max_pq}, 1 ≤ q ≤ {max_pq}, gcd(p,q)=1")
    for q in range(1, max_pq+1):
        for p in range(1, max_pq+1):
            if gcd(p, q) == 1:
                if check_alpha(p, q, Nmax):
                    print(f"α = {p}/{q} passes divisibility for n=1..{Nmax}")

if __name__ == "__main__":
    main()
```
