[write_program]
The problem involves solving a system of equations with parameters \(a,b,c\):
\[
\begin{cases}
\log_a(3+b) + c = 5 \\
\log_a(5+b) + c = 4 \\
\log_a(11+b) + c = 3 \\
a > 0, a \neq 1
\end{cases}
\]

We want to find \((a,b,c)\) that satisfy all. We fix small integer candidates for \(b\), solve for \(a,c\), using the difference of the logarithmic equations to express relations between \(a\) and \(b\). We'll print candidates directly to help conjecture the unique solution.

```python
from math import log

# log base a of x = ln(x)/ln(a)
# Given equations:
# log_a(3+b) + c =5
# log_a(5+b) + c =4
# log_a(11+b) + c =3

# From eq1 - eq2: log_a(3+b) - log_a(5+b) = 1
# => log_a((3+b)/(5+b)) =1 => (3+b)/(5+b) = a^1 = a
# Similarly, eq2 - eq3: log_a(5+b) - log_a(11+b) =1
# => (5+b)/(11+b) = a

# So both (3+b)/(5+b) = a and (5+b)/(11+b)=a => (3+b)/(5+b) = (5+b)/(11+b)
# Solve for b

def is_close(x,y,eps=1e-9):
    return abs(x-y)<eps

for b in range(-2,10):
    denom1 = 5+b
    denom2 = 11+b
    if denom1 == 0 or denom2 == 0:
        continue
    # Compute a from first ratio
    a1 = (3+b)/denom1
    a2 = denom1/denom2
    if a1 <= 0 or a1 == 1:
        continue
    if a2 <=0 or a2 ==1:
        continue
    if is_close(a1,a2):
        a = a1
        # Find c from eq1: log_a(3+b) + c =5 => c=5 - log_a(3+b)
        # log_a(x) = ln(x)/ln(a)
        try:
            la = log(a)
            if la ==0:
                continue
            c = 5 - log(3+b)/la
            # Verify eq2 and eq3 to confirm
            v2 = log(5+b)/la + c
            v3 = log(11+b)/la + c
            # Check if v2 approx 4 and v3 approx3
            if is_close(v2,4) and is_close(v3,3):
                print(f"a={a:.6f}, b={b}, c={c:.6f}")
        except (ValueError, ZeroDivisionError):
            continue
```

