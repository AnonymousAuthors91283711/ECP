[write_program]
This problem defines a sequence \( a_n \) with \( a_1 = 1 \) and for \( n > 1 \):
\[
a_n = \left\lfloor \frac{n^3}{a_{n-1}} \right\rfloor.
\]
We want to find \( a_{999} \).

The sequence is defined recursively with a floor function, so it's natural to compute values iteratively up to \( n=999 \). We'll print some intermediate values to conjecture the behavior and the value at 999.

```python
# Compute the sequence a_n defined by:
# a_1 = 1
# a_n = floor(n^3 / a_{n-1}) for n > 1
# Enumerate up to n=999 and print some intermediate values and a_999

def a_sequence(n_max=999, print_steps=[1,2,3,4,5,10,50,100,200,500,999]):
    a_prev = 1
    print(f"a(1) = {a_prev}")
    for n in range(2, n_max + 1):
        val = (n**3) // a_prev
        a_prev = val
        if n in print_steps:
            print(f"a({n}) = {val}")
    # Finally print the answer at 999
    print(f"Answer a(999) = {a_prev}")

if __name__ == "__main__":
    a_sequence()
```
