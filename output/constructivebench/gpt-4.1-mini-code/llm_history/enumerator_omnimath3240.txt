[write_program]
The problem defines a sequence \( c(n) \) on positive integers with initial value \( c(1) = 1 \), and recursive relations for even and odd indices:
- \( c(2n) = c(n) \)
- \( c(2n + 1) = (-1)^n c(n) \)

We want to evaluate the sum:
\[
\sum_{n=1}^{2013} c(n)c(n+2).
\]

The program below enumerates \( c(n) \) for \( 1 \le n \le 2015 \) (to get up to \( c(2015) \)) using the recursive rules, prints each computed product \( c(n)c(n+2) \) immediately, accumulates the sum, and finally prints the sum. This enables conjecturing the sum's value based on exact values for all terms.

```python
# Enumerate sequence c(n) defined by:
# c(1) = 1
# c(2n) = c(n)
# c(2n+1) = (-1)^n * c(n)
# Then compute sum_{n=1}^{2013} c(n)*c(n+2)

def c(n, memo={1:1}):
    if n in memo:
        return memo[n]
    if n % 2 == 0:
        val = c(n//2)
    else:
        k = n // 2
        val = (-1)**k * c(k)
    memo[n] = val
    return val

total = 0
N = 2013
for n in range(1, N+1):
    v = c(n)
    w = c(n+2)
    p = v * w
    print(f"n={n}, c(n)={v}, c(n+2)={w}, product={p}")
    total += p
print("Sum:", total)
```
