[write_program]
The problem is about finding the smallest natural number \( n \) that has three positive divisors \( d_1, d_2, d_3 \), all distinct, whose sum is 2022. We enumerate triples of distinct positive divisors \( d_1, d_2, d_3 \) whose sum is 2022 and check the least common multiple (or any number divisible by all three: some multiple of their least common multiple) to find the minimal such \( n \).

We can efficiently enumerate \( d_1, d_2, d_3 \) with \( d_1 < d_2 < d_3 \) to avoid duplicates and sum 2022. For each triple, compute the least common multiple (LCM) to get the minimal \( n \) divisible by these three divisors. Print all candidates with their triples and keep track of the minimal \( n \).

```python
# Enumerate triples of positive distinct divisors summing to 2022,
# find minimal n divisible by all three (ncm = lcm),
# output each found candidate immediately.

from math import gcd

def lcm(a, b):
    return a // gcd(a, b) * b

def lcm3(a, b, c):
    return lcm(a, lcm(b, c))

target_sum = 2022
min_n = None
min_triplet = None

print(f"Enumerating triples (d1,d2,d3) with d1+d2+d3={target_sum} and d1<d2<d3:")

for d1 in range(1, target_sum // 3 + 1):
    for d2 in range(d1 + 1, (target_sum - d1) // 2 + 1):
        d3 = target_sum - d1 - d2
        if d3 <= d2:
            continue  # ensure d1<d2<d3
        # Compute lcm
        n = lcm3(d1, d2, d3)
        # print candidate immediate
        print(f"Divisors = ({d1}, {d2}, {d3}), lcm = {n}")
        if (min_n is None) or (n < min_n):
            min_n = n
            min_triplet = (d1, d2, d3)

print("\nMinimum n found =", min_n)
print("With divisors triple =", min_triplet)
```
This will print all triples and their associated minimal n divisible by all three divisors summing to 2022, finally printing the minimal such n.
