[write_program]
The problem defines two sequences \(a_n, b_n\) starting with \(a_0 = -2\), \(b_0 = 1\) and then
\[
a_{n+1} = a_n + b_n + \sqrt{a_n^2 + b_n^2}, \quad b_{n+1} = a_n + b_n - \sqrt{a_n^2 + b_n^2}.
\]

We want to find \(a_{2012}\).

To explore possible patterns and conjecture \(a_{2012}\), we'll compute terms for small \(n\).

```python
# Enumerate initial terms of sequences a_n, b_n defined by:
# a_{n+1} = a_n + b_n + sqrt(a_n^2 + b_n^2)
# b_{n+1} = a_n + b_n - sqrt(a_n^2 + b_n^2)
# with a_0 = -2, b_0 = 1
# We print exact values when possible, else float approximations.

from math import sqrt

def main():
    a, b = -2, 1
    print(f"n=0: a={a}, b={b}")

    # track values exactly and numerically for pattern recognition
    for n in range(1, 12):  # small n to identify pattern
        r = sqrt(a*a + b*b)
        a1 = a + b + r
        b1 = a + b - r

        # Check if a1, b1 are integers or simple rationals
        if abs(a1 - round(a1)) < 1e-12:
            a1_str = str(int(round(a1)))
        else:
            a1_str = f"{a1:.12f}"

        if abs(b1 - round(b1)) < 1e-12:
            b1_str = str(int(round(b1)))
        else:
            b1_str = f"{b1:.12f}"

        print(f"n={n}: a={a1_str}, b={b1_str}")

        a, b = a1, b1

if __name__ == "__main__":
    main()
```

This enumerates initial terms to assist conjecturing the closed form or behavior of \(a_n\). The terms grow quickly, and the pattern might simplify with algebraic manipulation.
