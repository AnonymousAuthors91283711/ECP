[write_program]
The problem is from a 2009 AIME II contest, problem 4, which involves finding the least natural number \( n \) such that there exists an \( m \) where the sum over \( k \) from 0 to \( m-1 \) of \( n + 2 - 2(k + 1) \) equals 2009.

First, the sum expression can be simplified. The sum for fixed \( n, m \) is:

\[
S = \sum_{k=0}^{m-1} (n + 2 - 2(k+1)) = \sum_{k=0}^{m-1} (n + 2 - 2k - 2) = \sum_{k=0}^{m-1} (n - 2k) = m n - 2 \sum_{k=0}^{m-1} k = m n - 2 \cdot \frac{(m-1)m}{2} = m n - m(m-1)
\]

We want \( S = 2009 \), so:

\[
m n - m (m-1) = 2009 \implies m n = 2009 + m(m-1) \implies n = \frac{2009 + m (m-1)}{m} = m - 1 + \frac{2009}{m}
\]

Since \( n \) must be natural (integer), and the sum is over naturals, we require \( 2009 / m \) to be an integer. So \( m \) divides 2009.

Therefore, \( m \) must be a divisor of 2009.

The divisors of 2009 are:

Factor 2009:

\[
2009 = 7 \times 7 \times 41
\]

Actually:

\[
7 \times 287 = 2009
\]

And

\[
287 = 7 \times 41
\]

Thus:

\[
2009 = 7^2 \times 41
\]

The divisors come from multiplicating 7^0,7^1,7^2 with 41^0,41^1:

Divisors are:

1, 7, 41, 49 (7^2), 287 (7*41), 2009

So for each divisor m of 2009, compute:

\[
n = m -1 + \frac{2009}{m}
\]

We will enumerate these and print the results.

Then select the minimal \( n \).

We can implement this in code.

```python
# Enumerate n for each divisor m of 2009, where n = m - 1 + 2009 / m and m divides 2009.
def divisors(x):
    divs = []
    for i in range(1, int(x**0.5)+1):
        if x % i == 0:
            divs.append(i)
            if i != x//i:
                divs.append(x//i)
    return sorted(divs)

target = 2009
ds = divisors(target)
min_n = None
min_m = None
for m in ds:
    n = m -1 + target // m
    print(f"m={m}: n={n}")
    if (min_n is None) or (n < min_n):
        min_n = n
        min_m = m
print(f"Minimum n = {min_n} occurs at m = {min_m}")
```
