[write_program]
The problem concerns integers k in [-500, 500] such that the equation log(kx) = 2 log(x+2) has a unique real solution x. We rewrite and analyze the equation to enumerate such k:

log(kx) = 2 log(x+2)
=> log(kx) = log((x+2)^2)
=> kx = (x+2)^2, for x>0 and kx >0 (domain conditions)

This is:
kx = x^2 + 4x +4
=> x^2 + (4 - k) x + 4 = 0

We want exactly one real solution x>0 that satisfies kx > 0 and x+2 > 0 (x > -2) and log defined.

We check integer k in -500..500, and for each quadratic, count solutions meeting domain and uniqueness.

The code enumerates k, finds solutions, tests conditions, prints valid k, and finally prints the count.

```python
import math

def solutions_for_k(k):
    # Solve x^2 + (4-k)*x + 4 = 0
    a = 1
    b = 4 - k
    c = 4
    disc = b*b - 4*a*c
    if disc < 0:
        return []
    sqrt_d = math.sqrt(disc)
    sol1 = (-b + sqrt_d) / (2*a)
    sol2 = (-b - sqrt_d) / (2*a)
    return [sol1, sol2]

def valid_solution(k, x):
    # domain: x+2>0 -> x>-2 (always true for x>0)
    # log(kx) and log(x+2) defined: need kx>0 and x+2>0
    # Since (x+2)^2 = kx, kx = (x+2)^2 > 0, so kx>0
    # Just need k*x > 0 -> same sign
    return x > 0 and k * x > 0 and x+2 > 0

def main():
    count = 0
    print("Enumerating k in [-500,500] with unique positive solution:")
    for k in range(-500, 501):
        sols = solutions_for_k(k)
        valid_sols = [x for x in sols if valid_solution(k,x)]
        if len(valid_sols) == 1:
            print(f"k={k}, x={valid_sols[0]:.6f}")
            count += 1
    print(f"Total count of such k: {count}")

if __name__ == "__main__":
    main()
```
