[write_program]
The problem appears to involve finding a natural number \( n \) such that the sum of the base-4 digits of \( 2^n - 1 \) equals 2023. To explore this, we can enumerate values of \( n \), compute \( 2^n - 1 \), convert it to base 4, sum its digits, and check if the sum is 2023. We'll print each found \( n \) and corresponding sum to see if and when the sum matches 2023.

```python
def sum_base4_digits(x):
    s = 0
    while x > 0:
        s += x % 4
        x //=4
    return s

def main():
    # We try n from 1 up to a reasonable limit; 2023 is quite large,
    # so we limit to 2000 to avoid long runtime but can adjust.
    for n in range(1, 2000):
        val = (1 << n) -1  # 2^n -1
        s = sum_base4_digits(val)
        print(f"n={n}, sum_digits_base4={s}")
        if s == 2023:
            print(f"Found n with sum=2023: n={n}")
            break

if __name__ == "__main__":
    main()
```
