[write_program]
The problem asks us to find all integer pairs (x, y) satisfying the equation:

x² + x y + y² = ((x + y)/3 + 1)³.

We want to enumerate integers (x, y) over a reasonable small range, compute both sides, and print those that satisfy the equation exactly.

We'll try integer values for x, y in [-30,30] (adjust range if needed) and check if the cubic expression equals the quadratic form.

We print all solutions found, and no hardcoded results.

```python
# Enumerate integer pairs (x,y) satisfying:
# x^2 + x*y + y^2 == ((x + y)/3 + 1)^3

def lhs(x, y):
    return x*x + x*y + y*y

def rhs(x, y):
    s = (x + y)/3 + 1
    # check if s is rational, but (x+y)/3 might not be integer nor rational with denominator 3
    # since we want exact, s^3 must be integer and equal lhs.
    # but s^3 might be (fraction)**3, so check if s is rational with denominator dividing 3
    # we'll check if s is rational with denominator 3 only, else skip
    # Actually, (x+y)/3 could be fraction, but s is rational.
    # We might check s^3 as fraction exactly.
    # Alternatively multiply both sides by 27 to avoid fraction:
    # Left side * 27 = 27*(x^2 + xy + y^2)
    # Right side = (x + y + 3)^3 / 27
    # 27*(lhs) = (x + y + 3)^3 / 27 * 27 = (x + y + 3)^3
    # So equivalently:
    # 27*(x^2 + x*y + y^2) == (x + y + 3)^3  (integer equality)
    # So let's use that form to avoid floating error.

    return None  # will not use

def check_solution(x, y):
    left = 27*(x*x + x*y + y*y)
    right = (x + y + 3)**3
    return left == right

def main():
    print("Enumerating solutions (x,y) in [-30,30]×[-30,30]:")
    for x in range(-30,31):
        for y in range(-30,31):
            if check_solution(x, y):
                print(f"Solution found: x={x}, y={y}")

if __name__ == "__main__":
    main()
```
