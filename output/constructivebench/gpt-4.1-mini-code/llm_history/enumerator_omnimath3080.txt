[write_program]
The problem involves finding natural numbers \( n \) with \( 0 < n \leq 20000 \) such that the number of divisors of \( 2n \) is 64 and the number of divisors of \( 5n \) is 60. The divisor count function depends on the prime factorization of the argument. We want to enumerate such \( n \), print them immediately, and finally output the count of such \( n \).

```python
# Enumerate n (1 to 20000) so that:
#   d(2n) = 64 divisors
#   d(5n) = 60 divisors
# d(k) counted by product of (exponents+1) in prime factorization.

from math import sqrt

MAX_N = 20000

def prime_factors(x):
    # return dict of prime -> exponent for x
    factors = {}
    d = 2
    while d * d <= x:
        while x % d == 0:
            factors[d] = factors.get(d, 0) + 1
            x //= d
        d += 1 if d == 2 else 2
    if x > 1:
        factors[x] = factors.get(x, 0) + 1
    return factors

def divisor_count(x):
    f = prime_factors(x)
    prod = 1
    for e in f.values():
        prod *= (e + 1)
    return prod

count = 0
for n in range(1, MAX_N + 1):
    d_2n = divisor_count(2 * n)
    if d_2n == 64:
        d_5n = divisor_count(5 * n)
        if d_5n == 60:
            print(n)
            count += 1

print("Answer =", count)
```
