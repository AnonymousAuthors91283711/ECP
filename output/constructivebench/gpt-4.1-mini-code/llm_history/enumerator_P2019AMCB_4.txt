[write_program]
The problem is from a math competition and involves finding the least natural number \( n > 0 \) such that \((n+1)! + (n+2)! = n! \times 440\), and then summing the digits of that \( n \).

We'll enumerate \( n \) from 1 upwards and check the equation exactly using factorials, printing each \( n \) that satisfies the equation. Then we'll compute and print the sum of its digits as well. This will help conjecture the minimal such \( n \) and confirm the digit sum.

```python
import math

def sum_digits(num, base=10):
    s = 0
    while num > 0:
        s += num % base
        num //= base
    return s

def main():
    target_ratio = 440
    # Enumerate small n to find n satisfying (n+1)! + (n+2)! = n! * 440
    # Rewrite: (n+1)! + (n+2)! = n! * 440
    # (n+1)! + (n+2)! = (n+1)! * (1 + (n+2)) = (n+1)! * (n+3)
    # So (n+1)! * (n+3) = n! * 440
    # (n+1)! = n! * (n+1), so LHS = n! * (n+1) * (n+3)
    # Equation: n! * (n+1) * (n+3) = n! * 440
    # Cancel n! (nonzero): (n+1)(n+3) = 440
    # So n satisfies (n+1)(n+3) = 440
    # Let's find integer n > 0 satisfying that:
    results = []
    for n in range(1, 50):
        lhs = (n + 1) * (n + 3)
        if lhs == 440:
            print(f'n = {n} satisfies (n+1)*(n+3) = 440')
            results.append(n)
    # Print sum of digits for each candidate
    for n in results:
        s = sum_digits(n)
        print(f'Sum of digits of n={n} is {s}')
    # Also print the minimal such n and its digit sum
    if results:
        min_n = min(results)
        print(f'Minimal n: {min_n}')
        print(f'Digit sum: {sum_digits(min_n)}')

if __name__ == '__main__':
    main()
```
