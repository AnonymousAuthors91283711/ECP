[write_program]
The problem considers real numbers \( L \) such that for all \( x \in [0,1) \), the sum over even integers \( n \) where \( \lfloor nx \rfloor \) is even satisfies \( \sum_{n \in S_x} \frac{1}{2^n} \geq L \). We want the greatest such \( L \).

To explore and conjecture this, we'll discretize \( x \) in [0,1), check which natural numbers \( n \) satisfy \( n > 0 \) and \( \lfloor n x \rfloor \) even, then sum \( 1/2^n \) over those \( n \). We will consider a cutoff on \( n \) for computational feasibility, and sample multiple \( x \). We will print each \( x \) and the corresponding sum.

This will help spot a possible minimum sum over all \( x \in [0,1) \). We'll check small \( n \) values and many \( x \) in increments of 0.01 to 0.1 for speed.

```python
# Enumerate partial sums âˆ‘_{n>0, floor(n*x) even} 1/2^n over x in [0,1),
# print each sum to identify the minimal value which would be the greatest lower bound L.

def partial_sum(x, N_max=20):
    s = 0.0
    for n in range(1, N_max+1):
        floor_nx = int(n*x)
        if floor_nx % 2 == 0:  # floor(n*x) even
            s += 1/2**n
    return s

def main():
    N_max = 20  # cutoff for n to approximate the sum
    xs = [i/100 for i in range(100)]  # 0.00 to 0.99 in steps of 0.01
    print(f"N_max={N_max}")
    min_sum = float('inf')
    for x in xs:
        s = partial_sum(x, N_max)
        print(f"x={x:.2f} sum={s:.10f}")
        if s < min_sum:
            min_sum = s
    print(f"Minimal approximate sum over x in [0,1): {min_sum:.10f}")

if __name__ == "__main__":
    main()
```
This will print sums for many \(x\) values, enabling conjecture about the minimal \( L \). Increasing N_max improves precision, but here it balances accuracy and output length.
