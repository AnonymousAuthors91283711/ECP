[write_program]
The problem appears to involve computing the probability that a randomly drawn pair of cards from a deck of 50 cards is a pair with the same label. The deck consists of 12 labels with 4 cards each and 1 label with 2 cards, totaling 50 cards. We want to enumerate the pairs with the same label and then compute the ratio over total pairs.

We will:
- Enumerate the deck counts as given.
- Calculate total pairs (50 choose 2).
- Calculate the number of same-label pairs for the 12 labels with 4 copies each and the last one with 2 copies.
- Print intermediate values and final probability as an exact fraction.

```python
from math import comb

def main():
    # Deck has 12 labels with 4 cards each and 1 label with 2 cards = total 50 cards
    deck_counts = [4]*12 + [2]
    print(f"Deck counts (labels : cards): {deck_counts}")

    total_cards = sum(deck_counts)
    total_pairs = comb(total_cards, 2)
    print(f"Total cards: {total_cards}")
    print(f"Total pairs (C(50,2)): {total_pairs}")

    same_label_pairs = 0
    for i, count in enumerate(deck_counts):
        pairs = comb(count, 2) if count >= 2 else 0
        same_label_pairs += pairs
        print(f"Label {i+1} count: {count}, pairs: {pairs}")

    print(f"Same-label pairs total: {same_label_pairs}")

    # Probability as fraction
    from fractions import Fraction
    prob = Fraction(same_label_pairs, total_pairs)
    print(f"Probability same-label pair: {prob} = {float(prob)}")

if __name__ == "__main__":
    main()
```
