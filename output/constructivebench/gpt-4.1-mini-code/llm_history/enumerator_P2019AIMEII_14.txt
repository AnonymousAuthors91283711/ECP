[write_program]
This problem asks for the greatest \( n \) such that the greatest non-representable number using \( 5 \), \( n \), and \( n+1 \) as coefficients is \( 91 \). We want to enumerate candidate \( n \), for example \( n \) from 1 to 20, and for each, find the greatest integer not representable by \( 5a + n b + (n+1)c \). We then print \( n \) and this "Frobenius number" (greatest non representable number), and observe for which \( n \) this equals 91.

We'll check representability up to some limit (like 100) to identify missing integers and find the largest missing. We'll print results for each \( n \le 20 \).

```python
# Enumerate n from 1 to 20.
# For each n, check which numbers <=100 can be represented as 5*a + n*b + (n+1)*c with a,b,c >=0.
# Find largest number <=100 not representable.
# Print n and that largest unrepresentable number.

def representable_set(n, limit=100):
    reps = set()
    for a in range(limit//5+1):
        for b in range(limit//n+1):
            for c in range(limit//(n+1)+1):
                val = 5*a + n*b + (n+1)*c
                if val <= limit:
                    reps.add(val)
    return reps

def largest_nonrepresentable(n, limit=100):
    reps = representable_set(n, limit)
    for x in range(limit, -1, -1):
        if x != 0 and x not in reps:
            return x
    return 0 # everything representable

def main():
    limit = 100
    candidates = []
    for n in range(1, 21):
        lnr = largest_nonrepresentable(n, limit)
        print(f"n={n}, largest nonrepresentable = {lnr}")
        candidates.append((n, lnr))
    # Now find all n with largest nonrepresentable = 91
    print("\nCandidates with largest nonrepresentable = 91:")
    target = 91
    for n, lnr in candidates:
        if lnr == target:
            print(f"n = {n}")
    # Print max n among them
    max_n = max([n for n, lnr in candidates if lnr == target], default=None)
    if max_n is not None:
        print(f"Max n with largest nonrepresentable = {target} is {max_n}")

if __name__ == "__main__":
    main()
```
