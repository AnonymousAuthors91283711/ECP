[write_program]
This problem counts permutations of six distinct names satisfying ordering inequalities between indices. We'll enumerate permutations of the list ["Bobby","Peter","Greg","Cindy","Jan","Marcia"] and filter those that satisfy:
- Greg comes before Peter
- Peter comes before Bobby
- Marcia comes before Jan
- Jan comes before Cindy

We'll print each valid permutation immediately and finally print the total count.

```python
from itertools import permutations

names = ["Bobby", "Peter", "Greg", "Cindy", "Jan", "Marcia"]

def index_order_cond(perm):
    # indices of specified names
    idx = {name: i for i, name in enumerate(perm)}
    return (idx["Greg"] < idx["Peter"] < idx["Bobby"]) and (idx["Marcia"] < idx["Jan"] < idx["Cindy"])

count = 0
for perm in permutations(names):
    if index_order_cond(perm):
        print(perm)
        count += 1

print("Total valid permutations:", count)
```
