[write_program]
This problem asks us to find pairs (p1, p2) with 1 ≤ p1 ≤ p2 ≤ 100 such that there exists an integer k satisfying
 (p1 + p2)(p1 + p2 + 1) = k * p1 * p2.
We want to enumerate all such pairs and the corresponding k, then identify the greatest element in that set according to the product order on pairs.

We'll try all p1, p2 with 1 ≤ p1 ≤ p2 ≤ 100, and for each check if (p1+p2)(p1+p2+1) is divisible by p1*p2.
If divisible, print pair and k, then find the maximal pair with respect to (p1, p2).

```python
# Enumerate pairs (p1, p2), 1 <= p1 <= p2 <= 100
# For each, check if (p1+p2)*(p1+p2+1) divisible by p1*p2
# If yes, print (p1, p2) and k, track max pair

def main():
    max_pair = None
    max_p1 = -1
    max_p2 = -1
    for p1 in range(1, 101):
        for p2 in range(p1, 101):
            s = p1 + p2
            lhs = s * (s + 1)
            denom = p1 * p2
            if lhs % denom == 0:
                k = lhs // denom
                print(f"Pair: ({p1}, {p2}), k = {k}")
                # Update max pair in product order: p1 ascending, then p2 ascending
                if (p1 > max_p1) or (p1 == max_p1 and p2 > max_p2):
                    max_p1, max_p2 = p1, p2
                    max_pair = (p1, p2)
    if max_pair:
        print(f"Greatest pair: {max_pair}")

if __name__ == "__main__":
    main()
```
