[write_program]
The problem involves finding all functions \( f: \mathbb{R}^+ \to \mathbb{R}^+ \) such that for every \( x > 0 \), there exists a unique \( y > 0 \) satisfying \( x f(y) + y f(x) \leq 2 \).

To explore possible forms of \( f \), we test simple positive functions such as constant functions, linear functions, and reciprocal functions, and for sample values of \( x \), we find \( y \) satisfying the inequality uniquely.

Since the problem is functional and likely involves a specific form for \( f \), enumerating values for sample \( x \) and finding \( y \) satisfying the inequality will help us conjecture the function type.

```python
# Exploring candidate functions for the problem involving
#  x*f(y) + y*f(x) ≤ 2 with unique y > 0 per x > 0.
# We check sample x values, try candidate f, and find all y satisfying the constraint.

import math

def possible_ys(x, f, eps=1e-8):
    # Find y > 0 with x*f(y)+y*f(x) ≤ 2
    ys = []
    fy_x = f(x)
    # We'll sample y in a suitable range and check
    # Since inequality is linear in f(y) and y, and f positive,
    # let's scan y in (0,10] increasing to find candidate unique y.
    upper = 10.0
    step = 0.01
    y = step
    while y <= upper:
        val = x*f(y) + y*fy_x
        if val <= 2 + eps:
            ys.append(round(y,8))
        y += step
    # Filter unique ys by closeness (only unique values)
    unique_ys = []
    for v in ys:
        if not unique_ys or abs(unique_ys[-1]-v) > 1e-4:
            unique_ys.append(v)
    return unique_ys

def test_f(f_str, f):
    print(f"Testing f(y) = {f_str}")
    xs = [0.5, 1.0, 2.0, 3.0]
    for x in xs:
        ys = possible_ys(x, f)
        if len(ys) == 0:
            print(f"x={x}: no y satisfies inequality")
        else:
            print(f"x={x}: y satisfying inequality (count={len(ys)}) => {ys}")
        # We want unique y per x if problem is correct.


def f_const(y):  # constant function f(y) = 1
    return 1.0

def f_linear(y):  # f(y) = y
    return y

def f_reciprocal(y):  # f(y) = 1/y
    return 1.0 / y

def f_sqrt(y):  # f(y) = 1/sqrt(y)
    return 1.0 / math.sqrt(y)

# Test the candidate functions
test_f("1 (constant)", f_const)
test_f("y (linear)", f_linear)
test_f("1/y (reciprocal)", f_reciprocal)
test_f("1/sqrt(y)", f_sqrt)
```
