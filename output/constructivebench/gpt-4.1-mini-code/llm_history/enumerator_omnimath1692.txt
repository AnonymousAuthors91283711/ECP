[write_program]
The problem involves finding integer lists with specific positivity and negativity constraints on all sublists of lengths 7 and 11 respectively. We will enumerate integer lists of length at least 11 (to have sublists of lengths 7 and 11), checking for the properties. We'll test small lists and print those that meet the criteria.

```python
from itertools import product

def sublists_of_length(lst, n):
    return [lst[i:i+n] for i in range(len(lst)-n+1)]

def check_conditions(lst):
    if any(x == 0 for x in lst):
        return False
    for sublst in sublists_of_length(lst, 7):
        if sum(sublst) <= 0:
            return False
    for sublst in sublists_of_length(lst, 11):
        if sum(sublst) >= 0:
            return False
    return True

max_len = 11  # minimum length to have sublists length 7 and 11
values = [-3, -2, -1, 1, 2, 3]  # small nonzero integers to enumerate
print("Testing integer lists of length 11 with elements in", values)

# Enumerate all lists of length 11 with these values; this is 6^11 ~ 3.5 million, 
# so we limit the first 10000 for practical output
count = 0
for lst in product(values, repeat=max_len):
    count += 1
    if check_conditions(lst):
        print("Candidate list:", lst)
    if count >= 10000:
        break
```

