[write_program]
The problem asks for the greatest natural number \(n\) such that there exists some \(k \leq n\), and \(k + \frac{2}{3}(n-k) \leq 30\). We will enumerate possible \(n\) and \(k\) values and print those \(n\) satisfying the condition, then find the maximum such \(n\).

```python
# Enumerate n and k to find all n with some k ≤ n satisfying k + (2/3)*(n-k) ≤ 30
def main():
    max_n = 0
    # We check n up to some reasonable limit; since 2/3*n ≤ 30 => n ≤ 45
    for n in range(0, 46):
        satisfies = False
        # k ≤ n
        # k + (2/3)*(n-k) = (2/3)*n + (1/3)*k ≤ 30
        # To check quickly, k must satisfy (1/3)*k ≤ 30 - (2/3)*n
        # So k ≤ 3*(30 - (2/3)*n) = 90 - 2n
        max_k = min(n, int(90 - 2*n))
        if max_k >= 0:
            # There is a k ≤ max_k ≤ n satisfying the inequality
            satisfies = True

        if satisfies:
            print(f"n = {n} valid")
            if n > max_n:
                max_n = n
    print(f"Maximum n satisfying the condition: {max_n}")

if __name__ == "__main__":
    main()
```
