[write_program]
Let's enumerate primes \(p\) and check if \(p^2 - p + 1\) is a perfect cube. We'll do this for small primes and print any that satisfy the condition.

```python
from sympy import isprime, Integer

def integer_cube_root(n):
    # integer cube root of n (if cube exists)
    r = int(round(abs(n) ** (1/3)))
    # Check around r for exact cube root
    for x in range(max(0, r-2), r+3):
        if x**3 == n:
            return x
    return None

def main():
    print("Enumerating primes p with k^3 = p^2 - p + 1")
    limit = 10**6  # Search range upper limit for primes
    count = 0
    for p in range(2, limit+1):
        if isprime(p):
            val = p**2 - p + 1
            k = integer_cube_root(val)
            if k is not None:
                print(f"p={p}, k={k}, k^3={val}")
                count += 1
                # To limit output length, stop after some results
                if count >= 5:
                    break

if __name__ == "__main__":
    main()
```
