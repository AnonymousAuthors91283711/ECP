[write_program]
The problem involves summing all even numbers \( k < 10000 \) such that \( k^2 \) ends with \( k \) (in decimal), then summing the digits of that total. The goal is to find or conjecture the sum of digits of that sum.

We can:

- Loop over even numbers from 0 to 9998.
- Check if \( k^2 \) ends with \( k \).
- Sum all such \( k \).
- Compute digit sum of that total and print intermediate values.

```python
def ends_with(n, suffix):
    # Check if integer n ends with integer suffix
    return str(n).endswith(str(suffix))

def digit_sum(n):
    return sum(int(d) for d in str(n))

def main():
    limit = 10000
    total_sum = 0
    print(f"Checking even numbers k < {limit} for k^2 ending with k")

    for k in range(0, limit, 2):
        k_squared = k*k
        # Check if k^2 ends with k
        if ends_with(k_squared, k):
            print(f"Found k={k}, k^2={k_squared} ends with {k}")
            total_sum += k

    print(f"Sum of all matching k: {total_sum}")
    dsum = digit_sum(total_sum)
    print(f"Digit sum of total: {dsum}")

if __name__ == "__main__":
    main()
```
