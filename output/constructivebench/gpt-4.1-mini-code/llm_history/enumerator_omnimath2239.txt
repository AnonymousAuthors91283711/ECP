[write_program]
The problem involves three variables \(a, b, c\) and a real number \(x\) satisfying certain rational expressions. We want to find \(x\). To assist, I'll write a Python program that picks small distinct values for \(a, b, c\), checks the two given equations to find consistent triples, and then computes \(x\). The program will print all such \(x\) values found. This helps conjecture an exact formula or value for \(x\).

```python
# Enumerate triples (a,b,c) with distinct small integers (to avoid division by zero)
# and find x from the equations:
# (a^2)/(a+b) = (a^2)/(a+c) + 20 => 20 = (a^2)/(a+b) - (a^2)/(a+c)
# (b^2)/(b+c) = (b^2)/(b+a) + 14 => 14 = (b^2)/(b+c) - (b^2)/(b+a)
# then x = (c^2)/(c+a) - (c^2)/(c+b)

def fractions_eq(a, b, c):
    # Check denominators nonzero
    if (a+b) == 0 or (a+c) == 0 or (b+c) == 0 or (b+a) == 0 or (c+a) == 0 or (c+b) == 0:
        return None
    return True

def eq1(a,b,c):
    # lhs = (a^2)/(a+b), rhs=(a^2)/(a+c)+20
    # Check if these differ by 20 exactly:
    return abs((a**2)/(a+b) - (a**2)/(a+c) - 20) < 1e-9

def eq2(a,b,c):
    # (b^2)/(b+c) = (b^2)/(b+a)+14
    return abs((b**2)/(b+c) - (b**2)/(b+a) - 14) < 1e-9

def compute_x(a,b,c):
    # x = (c^2)/(c+a) - (c^2)/(c+b)
    return (c**2)/(c+a) - (c**2)/(c+b)

print("Enumerating candidates (a,b,c) and corresponding x:")

# Try small integers for a,b,c in range -10 to 10 excluding zero sums
for a in range(-10,11):
    for b in range(-10,11):
        for c in range(-10,11):
            # Avoid denominators zero, distinct a,b,c for meaningful denominators
            if a==0 or b==0 or c==0:
                continue
            if (a+b)==0 or (a+c)==0 or (b+c)==0 or (b+a)==0 or (c+a)==0 or (c+b)==0:
                continue
            if a==b or b==c or a==c:
                continue
            if not eq1(a,b,c):
                continue
            if not eq2(a,b,c):
                continue
            x = compute_x(a,b,c)
            print(f"a={a}, b={b}, c={c}, x={x:.6f}")

print("Done enumerating candidates.")
```
This enumerator tests integer triples and prints all consistent \(x\) values. Observing the outputs allows conjecture of the closed form for \(x\).
