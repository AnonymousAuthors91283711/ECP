[write_program]
The problem is looking for the smallest natural number \( n > 1 \) such that the average of the squares \( 1^2 + 2^2 + \cdots + n^2 \) is itself a perfect square. More precisely, we want:
\[
\frac{\sum_{i=1}^n i^2}{n} = k^2
\]
for some integer \( k \).

Recall the formula for the sum of squares:
\[
\sum_{i=1}^n i^2 = \frac{n(n+1)(2n+1)}{6}
\]

So the condition becomes:
\[
\frac{n(n+1)(2n+1)}{6n} = \frac{(n+1)(2n+1)}{6} = k^2
\]

We want to find the smallest \( n > 1 \) such that \(\frac{(n+1)(2n+1)}{6}\) is a perfect square.

The Python program below enumerates values of \(n\), computes \(\frac{(n+1)(2n+1)}{6}\) when divisible by 6, checks if the quotient is a perfect square, and prints the pair \( (n, k) \) immediately when found. It will also print the minimal such \( n \) at the end.

```python
import math

def is_perfect_square(x):
    r = int(math.isqrt(x))
    return r*r == x

def main():
    print("Enumerating n > 1 with ((n+1)*(2n+1)) / 6 = k^2")
    found = []
    # Check n up to a reasonable bound
    for n in range(2, 10000):
        numerator = (n+1)*(2*n+1)
        if numerator % 6 != 0:
            continue
        val = numerator // 6
        if is_perfect_square(val):
            k = int(math.isqrt(val))
            print(f"n = {n}, k = {k}, value = {val} = {k}^2")
            found.append((n,k))
    if found:
        smallest = min(found, key=lambda x: x[0])
        print(f"\nSmallest n: {smallest[0]} with k = {smallest[1]}")

if __name__ == "__main__":
    main()
```
