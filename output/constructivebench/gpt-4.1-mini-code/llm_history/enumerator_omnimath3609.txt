[write_program]
The problem involves a polynomial \( P \) of degree \( n \) with values \( P(k) = \frac{k}{k+1} \) for \( k = 0, 1, ..., n \). We want to find \( P(n+1) \).

A natural approach is to construct the unique polynomial of degree \( n \) that fits these points and evaluate it at \( n+1 \). Since the values are rational, the polynomial has rational coefficients.

We will:
- For \( n \) from 1 to 5 (small samples),
- Construct the points \((k, \frac{k}{k+1})\),
- Use Lagrange interpolation to find \( P(n+1) \),
- Print the exact rational value \( P(n+1) \) immediately.

This enumeration helps to conjecture a closed form or pattern for \( P(n+1) \).

```python
from fractions import Fraction

def lagrange_interpolation(x_vals, y_vals, x):
    """
    Compute Lagrange interpolation polynomial value at x,
    given nodes x_vals and values y_vals as lists of Fractions.
    """
    total = Fraction(0,1)
    n = len(x_vals)
    for i in range(n):
        term = y_vals[i]
        for j in range(n):
            if i != j:
                term *= Fraction(x - x_vals[j], x_vals[i] - x_vals[j])
        total += term
    return total

def main():
    # Enumerate n from 1 to 5
    for n in range(1, 6):
        # Nodes k = 0..n
        x_vals = [Fraction(k) for k in range(n+1)]
        y_vals = [Fraction(k, k+1) for k in range(n+1)]
        # Evaluate polynomial at n+1
        val = lagrange_interpolation(x_vals, y_vals, Fraction(n+1))
        print(f"n = {n}, P({n+1}) = {val} = {float(val)}")

if __name__ == "__main__":
    main()
```
