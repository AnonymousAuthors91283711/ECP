[write_program]
The problem is to find the least natural number \( n \) such that there exist natural numbers \( c, v \) with \( c+v=n \) and

\[
2 c v (c^2 + v^2) = 4800.
\]

We want to enumerate pairs \( (c,v) \) and compute \( n = c+v \) when the equation holds, then find the minimum such \( n \).

We can limit \( c, v \) to reasonable ranges since \( 2 c v (c^2 + v^2) = 4800 \) restricts their size.

The code below enumerates \( c,v \) from 1 to 100, checks the condition, prints each \( n = c+v \) it finds, and finally prints the minimum.

```python
# Enumerate natural numbers c,v with c+v = n and 2*c*v*(c^2+v^2) = 4800
# Print all found n immediately, then minimal

def main():
    found_ns = set()
    for c in range(1, 101):
        for v in range(1, 101):
            lhs = 2 * c * v * (c**2 + v**2)
            if lhs == 4800:
                n = c + v
                print(f"Found n = {n} with c={c}, v={v}")
                found_ns.add(n)
    if found_ns:
        min_n = min(found_ns)
        print(f"Minimum n = {min_n}")
    else:
        print("No solution found up to c,v=100")

if __name__ == "__main__":
    main()
```
