[write_program]
The problem involves finding the maximum number of negative coefficients in the square of a real polynomial of degree \( n \). To explore this, I will write a Python program that constructs polynomials of degree \( n \) with coefficients chosen from \(\{-1, 0, 1\}\), computes their squares, and counts the negative coefficients of the resulting polynomial. The program prints the number of negative coefficients found for each polynomial and keeps track of the maximum count, printing it at the end for each degree \( n \).

```python
from itertools import product

def poly_square(coeffs):
    n = len(coeffs)
    deg = 2*(n-1)
    res = [0]*(deg+1)
    for i in range(n):
        for j in range(n):
            res[i+j] += coeffs[i]*coeffs[j]
    return res

def count_neg(coeffs):
    return sum(c < 0 for c in coeffs)

max_degree = 4  # small sample values for n
for n in range(2, max_degree+1):
    print(f"Degree n={n}")
    max_neg = -1
    # Coefficients are from -1, 0, 1; leading coeff != 0
    for coeffs in product([-1,0,1], repeat=n):
        if coeffs[-1] == 0:
            continue
        sq = poly_square(coeffs)
        neg_count = count_neg(sq)
        print(f"Poly coeffs: {coeffs}, negative coeffs in square: {neg_count}")
        if neg_count > max_neg:
            max_neg = neg_count
    print(f"Maximum negative coefficients in square for degree {n}:", max_neg)
```

