[write_program]
The problem is about finding the least natural number s such that s equals the sum of the decimal digits of 3n² + n + 1, for some n in ℕ. We want to enumerate such sums s for small n to conjecture which is the smallest, printing all found sums as soon as they appear.

We will:
- Iterate over n starting from 0 upwards.
- Compute 3n² + n + 1, sum its digits in base 10.
- Print each sum s once when found.
- After reaching a threshold n_max, we output the minimum s found as the least element.

To keep it concise and efficient, n_max will be small (like 50), and we store unique sums only.

```python
# Enumerate sums s = sum of digits of 3n^2 + n + 1 for n in [0..50]
# Print each sum when first found, then print the minimal s found.

def digit_sum(x):
    return sum(int(d) for d in str(x))

def main():
    n_max = 50
    seen = set()
    min_s = None
    for n in range(n_max + 1):
        val = 3 * n * n + n + 1
        s = digit_sum(val)
        if s not in seen:
            seen.add(s)
            print(f"s = {s} found for n = {n}")
            if min_s is None or s < min_s:
                min_s = s
    print(f"Least s found = {min_s}")

if __name__ == "__main__":
    main()
```
