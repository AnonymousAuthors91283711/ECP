[write_program]
The problem involves assigning natural number values to characters such that several equations are satisfied simultaneously:

- v('S') + v('E') + v('T') = 2
- v('H') + v('A') + v('T') = 7
- v('T') + v('A') + v('S') + v('T') + v('E') = 3
- v('M') + v('A') + v('T') = 4

Our goal is to find all assignments (v values) satisfying these and compute v('M') + v('A') + v('T') + v('H') for each. The program will enumerate through small non-negative integers (likely 0 to 7, since sums are small) for each character and check these constraints immediately printing valid solutions and their sum.

```python
# Enumerate all natural number assignments to S, E, T, H, A, M in range 0..7 satisfying the given sums
# and print the value of M+A+T+H found.

def main():
    max_val = 7  # Based on sums max 7, so restricting domain

    print("Enumerating all solutions (S,E,T,H,A,M) in 0..7 satisfying constraints:")
    for S in range(max_val + 1):
        for E in range(max_val + 1):
            for T in range(max_val + 1):
                # Check first constraint: S + E + T = 2
                if S + E + T != 2:
                    continue
                for H in range(max_val + 1):
                    for A in range(max_val + 1):
                        # Check second constraint: H + A + T = 7
                        if H + A + T != 7:
                            continue
                        # Check third constraint: T + A + S + T + E = 3
                        # Simplify: 2*T + A + S + E = 3
                        if 2*T + A + S + E != 3:
                            continue
                        for M in range(max_val + 1):
                            # Check fourth constraint: M + A + T = 4
                            if M + A + T != 4:
                                continue
                            total = M + A + T + H
                            print(f"S={S} E={E} T={T} H={H} A={A} M={M} => M+A+T+H={total}")

if __name__ == "__main__":
    main()
```
