[write_program]
The problem is about finding an injective function \( f: \mathbb{N} \to \mathbb{N} \) whose range is the integer interval \([2,2000]\) such that for any distinct \( a, b \), \( \gcd(f(a), f(b)) = \gcd(a,b) \). We want to check if such a function exists or not.

To gain insight, let's enumerate small cases with smaller intervals and try to find candidates for \( f \). We print injective functions \( f \) and check the gcd condition.

```python
from math import gcd
from itertools import permutations

def check_function(f, n):
    # Check ∀ a≠b in [1..n], gcd(f(a),f(b))=gcd(a,b)
    for a in range(1, n+1):
        for b in range(a+1, n+1):
            if gcd(f[a-1], f[b-1]) != gcd(a, b):
                return False
    return True

def enumerate_candidates(n, start=2):
    # Candidate codomain range from start to start+n-1
    domain = list(range(1, n+1))
    codomain = list(range(start, start+n))
    for f in permutations(codomain):
        if check_function(f, n):
            print(f"n={n}, f={f}")

def main():
    # Test small values of n and print any candidate functions
    print("Testing n=3 with codomain [2..4]:")
    enumerate_candidates(3, 2)  # domain=1..3, codomain=2..4
    print("Testing n=4 with codomain [2..5]:")
    enumerate_candidates(4, 2)

if __name__ == "__main__":
    main()
```
This enumerates injective \( f \) from \(\{1,\dots,n\}\) to \(\{2,\dots,n+1\}\) checking gcd condition, printing all valid candidates immediately. This should guide conjectures about existence or nonexistence of such functions.
