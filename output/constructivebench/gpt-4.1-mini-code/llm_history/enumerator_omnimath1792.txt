[write_program]
This problem involves finding the smallest 4-digit number \( n = 1000a + 100b + 10c + d \) where \( a > b > c > d > 0 \) and the magnitude of the sum of the 13th roots of unity raised to these powers equals \(\sqrt{3}\).

We want to enumerate all strictly decreasing 4-tuples \( (a,b,c,d) \) with digits 1 to 9 (since \(d > 0\)) and check if the magnitude condition is met. We'll compute the complex sum using \( \exp(2 \pi i / 13) \) powers, check the absolute value against \(\sqrt{3}\) (allowing a tiny numerical tolerance), and print each qualifying \(n\).

We also print all candidates and finally print the smallest \(n\).

```python
import cmath

# 13th primitive root of unity
w = cmath.exp(2j * cmath.pi / 13)
target = 3 ** 0.5
tolerance = 1e-12

min_n = None

# a > b > c > d > 0, digits 1..9 (since digits)
for a in range(9, 3, -1):      # at least 4 to have room for others
    for b in range(a-1, 2, -1):
        for c in range(b-1, 1, -1):
            for d in range(c-1, 0, -1):
                val = w**a + w**b + w**c + w**d
                abs_val = abs(val)
                if abs(abs_val - target) < tolerance:
                    n = 1000*a + 100*b + 10*c + d
                    print(n)
                    if min_n is None or n < min_n:
                        min_n = n

if min_n is not None:
    print("Minimum n:", min_n)
else:
    print("No solution found")
```
