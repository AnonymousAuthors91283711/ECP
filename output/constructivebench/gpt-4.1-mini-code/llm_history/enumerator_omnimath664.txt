[write_program]
The problem involves a 10th-degree complex polynomial, and the sum of squares of its roots. By Vi√®te's formulas, sums of powers of roots can be related to coefficients using Newton's identities or by symmetric sums. Since the polynomial degree is 10, roots are complex, possibly not easy to find explicitly. We enumerate roots numerically (approximated, since exact is challenging) and then sum their squares to conjecture the value, printing partial sums as roots are found. The program prints each root and incremental sum of squares.

```python
import numpy as np

# Define polynomial coefficients (highest degree first)
coeffs = [4, -7, 5, -8, 12, -12, 12, -8, 5, -7, 4]

# Find all roots numerically
roots = np.roots(coeffs)

# Incrementally sum squares of roots and print results
sum_sq = 0
print("Roots and sum of squares:")
for i, r in enumerate(roots, 1):
    root_sq = r**2
    sum_sq += root_sq
    print(f"Root {i}: {r} (square: {root_sq})")
    print(f"Sum of squares of first {i} roots: {sum_sq}")

print(f"\nFinal sum of squares of all roots: {sum_sq}")
```
