[write_program]
The problem involves finding permutations of the digits [1, 2, 3, 3, 4, 5], interpreting each as a 6-digit number, and selecting those divisible by 264. We want to find the least such number.

We will:
- Generate distinct permutations of [1, 2, 3, 3, 4, 5]
- Convert each to a number
- Check divisibility by 264
- Print each divisible candidate immediately
- Track the minimum divisible value

```python
from itertools import permutations

digits = [1, 2, 3, 3, 4, 5]
seen = set()
min_divisible = None

for perm in permutations(digits):
    if perm in seen:
        continue  # skip duplicates
    seen.add(perm)
    # Leading digit can't be zero here, so all are valid 6-digit numbers
    n = 0
    for d in perm:
        n = n * 10 + d
    if n % 264 == 0:
        print(n)
        if min_divisible is None or n < min_divisible:
            min_divisible = n

if min_divisible is not None:
    print("Minimum divisible by 264:", min_divisible)
else:
    print("No divisible permutation found")
```
