[write_program]
The problem considers the set of rational numbers \( p \) defined as 
\[
p = \frac{\sum_{x=1}^N \sum_{y=1}^N \mathbf{1}_{10 \mid xy}}{N^2}
\]
for some natural number \( N \).

We want to find the supremum (maximum) of this sequence \( p_N \).

The indicator \(\mathbf{1}_{10 \mid xy}\) equals 1 if and only if the product \(xy\) is divisible by 10.

To analyze and conjecture, we can enumerate \(p_N\) for \(N=1, 2, \dots, 50\) and print the values to observe their behavior.

Note:
- Multiplication modulo 10 depends on factors of 2 and 5.
- \(xy\) divisible by 10 means at least one of \(x\) or \(y\) contributes a factor 2 and a factor 5 combined.
- Instead of nested loops over all \(x,y\), we can efficiently count the number of pairs where \(xy \equiv 0 \pmod{10}\).

The program below enumerates \(p_N\) for \(N=1\ldots 50\), printing the rational values and also floating-point approximations for observations.

```python
# Enumerate p_N = (# of (x,y) with 1<=x,y<=N and 10 | xy) / N^2 for N=1..50
# Print exact fraction and float approximation for easier analysis

from fractions import Fraction

def divisible_by_10_count(N):
    count = 0
    for x in range(1, N+1):
        for y in range(1, N+1):
            if (x * y) % 10 == 0:
                count += 1
    return count

def main():
    print("N, count, fraction, decimal")
    for N in range(1, 51):
        c = divisible_by_10_count(N)
        frac = Fraction(c, N*N)
        print(f"{N}, {c}, {frac}, {float(frac):.6f}")

if __name__ == "__main__":
    main()
```

This will help us conjecture the supremum as \(N\) grows.
