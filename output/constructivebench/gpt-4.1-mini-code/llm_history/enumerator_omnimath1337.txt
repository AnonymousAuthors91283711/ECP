[write_program]
The problem defines a sequence S and a_i based on the values of S and exploring where S_k = 0 for k ≤ 2010. We want to enumerate k in [1..2010] with S_k = 0 and possibly identify the greatest such k. The conditions are:

- S_0 = 0
- For k ≥ 1, S_k = sum_{i=1}^k i * a_i
- Each a_i in {1, -1} decided by comparing S_{i-1} with i:
   a_i = 1 if S_{i-1} < i else -1

We can implement these definitions directly, compute S_k for k = 0..2010, and print when S_k = 0. Then print the maximum.

```python
# Enumerate k ≤ 2010 with S_k = 0 given the recurrence definitions.

def main():
    MAX_K = 2010
    S = [0]  # S_0 = 0
    a = []   # will fill a_i for i = 1..MAX_K

    for k in range(1, MAX_K + 1):
        prev_S = S[-1]
        # Determine a_k:
        if prev_S < k:
            a_k = 1
        else:
            a_k = -1
        a.append(a_k)
        # Compute S_k = sum_{i=1}^k i * a_i
        # To avoid recomputing sum each time, maintain partial sum:
        # At step k, S_k = S_{k-1} + k * a_k
        new_S = prev_S + k * a_k
        S.append(new_S)
        if new_S == 0:
            print(f"S_{k} = 0 with a_{k} = {a_k}")

    # Print the greatest k ≤ 2010 with S_k = 0
    zero_indices = [k for k in range(1, MAX_K + 1) if S[k] == 0]
    if zero_indices:
        print(f"Greatest k ≤ {MAX_K} with S_k=0: {max(zero_indices)}")
    else:
        print(f"No k ≤ {MAX_K} with S_k=0 found")

if __name__ == "__main__":
    main()
```
