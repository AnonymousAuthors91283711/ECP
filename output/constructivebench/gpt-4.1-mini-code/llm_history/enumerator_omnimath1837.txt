[write_program]
The problem concerns sets \( S \subseteq \{1, \ldots, 10\} \) such that for every \( i \in \{1, \ldots, 9\} \), either \( i \in S \) or \( i+1 \in S \). We want to count how many such sets there are.

This is a classic coverage problem: each consecutive pair \(\{i, i+1\}\) must have at least one element in \( S \). Another way to think about it is that \(S\) is a "dominating set" for the path graph on vertices 1 to 10.

We will enumerate all subsets \(S\) of \(\{1,\ldots,10\}\) and check this coverage condition, printing each valid set as we go.

```python
# Enumerate subsets S of {1,...,10} that cover consecutive pairs: 
# For all i in 1..9, i in S or i+1 in S.
# Print each valid set immediately.

def covers_condition(S):
    # S is a set of ints
    for i in range(1, 10):
        if i not in S and i+1 not in S:
            return False
    return True

def main():
    universe = list(range(1,11))
    count = 0
    # 2^10 = 1024 subsets - small enough to brute force
    from itertools import combinations
    # Enumerate subsets by size
    for r in range(0, 11):
        for comb in combinations(universe, r):
            S = set(comb)
            if covers_condition(S):
                count += 1
                print(f"Valid set #{count}: {sorted(S)}")
    print(f"Total valid sets: {count}")

if __name__ == "__main__":
    main()
```
