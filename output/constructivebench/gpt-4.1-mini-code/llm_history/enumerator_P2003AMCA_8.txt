[write_program]
The problem counts the number of positive divisors of 60 and among them how many are less than 7, then finds the ratio of these counts.

We will enumerate all positive divisors of 60, print each divisor, indicate if it is favorable (less than 7), then print the ratio as a fraction.

```python
from math import gcd

def divisors(n):
    divs = []
    for i in range(1, n+1):
        if n % i == 0:
            divs.append(i)
    return divs

def gcd_ext(a,b):
    # Extended Euclidean Algorithm for gcd if needed for fraction simplification
    if b == 0:
        return a,1,0
    else:
        g,x,y = gcd_ext(b, a%b)
        return g,y,x - (a//b)*y

def simplify_fraction(num, den):
    g = gcd(num, den)
    return num // g, den // g

def main():
    n = 60
    divs = divisors(n)
    print(f"Divisors of {n}:")
    for d in divs:
        if d < 7:
            print(f"Favorable divisor: {d}")
        else:
            print(f"Other divisor: {d}")

    favorable_count = len([d for d in divs if d < 7])
    total_count = len(divs)
    num, den = simplify_fraction(favorable_count, total_count)
    print(f"Ratio favorable/total = {favorable_count}/{total_count} = {num}/{den}")

if __name__ == "__main__":
    main()
```
