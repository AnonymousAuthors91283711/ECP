[write_program]
The problem is to find the smallest natural number n such that \(100 \times 2^n > 10000 \times \left(\frac{1}{2}\right)^n\).

This can be rewritten as: 
\[100 \cdot 2^n > 10000 \cdot 2^{-n}\]
which implies:
\[100 \cdot 2^n \cdot 2^n > 10000\]
\[100 \cdot 2^{2n} > 10000\]
\[2^{2n} > 100\]
\[2^{2n} > 100\]

We want the smallest n satisfying this. Let's enumerate small values of n to find the exact smallest n.

```python
# Enumerate small values of n to find smallest n such that 
# 100 * 2^n > 10000 * (1/2)^n

def main():
    threshold = 10000
    for n in range(20):  # 20 is a safe upper bound for quick enumeration
        left = 100 * 2**n
        right = 10000 * (0.5)**n
        # Since (1/2)^n = 2^{-n}, the inequality is equivalent to:
        # 100 * 2^n > 10000 * 2^{-n}  =>  100*2^{2n} > 10000
        # We'll print exact values to see the behavior
        print(f"n = {n}, 100*2^{n} = {left}, 10000*(1/2)^{n} = {right}")
        if left > right:
            # Output the smallest n found and stop
            print(f"Smallest n with 100*2^n > 10000*(1/2)^n: {n}")
            break

if __name__ == "__main__":
    main()
```
