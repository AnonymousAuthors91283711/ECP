[write_program]
The problem is to find the smallest positive integer \( n \) with no leading zero digit, such that it contains exactly 11 overlapping two-digit pairs that are prime numbers.

The program enumerates candidates with increasing digit lengths and outputs those with exactly 11 prime pairs. Once it finds candidates, it prints them immediately to help conjecture the smallest solution.

```python
from sympy import isprime

def digits(n):
    return list(map(int, str(n)))

def count_prime_pairs(n):
    ds = digits(n)
    if ds[0] == 0:
        return -1  # leading zero disallowed
    count = 0
    for i in range(len(ds) - 1):
        pair = ds[i] * 10 + ds[i+1]
        if isprime(pair):
            count += 1
    return count

def generate_numbers_with_length(length):
    start = 10**(length-1)
    end = 10**length
    for n in range(start, end):
        yield n

def main():
    target = 11
    found = []
    for length in range(3, 20):  # starting from 3 digits (minimum for 11 pairs is 12 digits but test shorter)
        for n in generate_numbers_with_length(length):
            c = count_prime_pairs(n)
            if c == target:
                print(n)
                found.append(n)
        if found:
            print("Smallest with 11 prime pairs:", min(found))
            break

if __name__ == "__main__":
    main()
```
