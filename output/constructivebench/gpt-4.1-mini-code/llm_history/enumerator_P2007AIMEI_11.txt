[write_program]
The problem defines a function \( b(p) \) that rounds \(\sqrt{p}\) to the nearest integer, using a custom rounding logic based on whether the fractional part is less than \(1/2\). We want to sum \( b(p) \) over \( p = 1 \) to \( 2007 \) and find the last three digits of the sum.

To investigate the behavior, we enumerate and print values of \( b(p) \) for smaller \( p \) ranges and sum these values cumulatively. This will help identify patterns or simplifications before scaling up to 2007.

```python
import math

def b(p):
    if p == 0:
        return 0
    k = round(math.sqrt(p))
    diff = abs(k - math.sqrt(p))
    if diff < 0.5:
        return k
    else:
        if k - math.sqrt(p) < 0:
            return k + 1
        else:
            return k - 1

def main():
    print("Enumerating b(p) for p=1..50:")
    s = 0
    for p in range(1, 51):
        val = b(p)
        s += val
        print(f"p={p}, b(p)={val}, partial_sum={s}")
    print()
    
    print("Enumerating cumulative sums mod 1000 for p=1..2007:")
    total = 0
    for p in range(1, 2008):
        val = b(p)
        total += val
        if p % 200 == 0 or p == 2007:
            print(f"Sum b(1..{p}) mod 1000 = {total % 1000}")
    print()
    print("Note: Sum modulo 1000 is printed for increments of 200 to track progress.")

if __name__ == "__main__":
    main()
```
