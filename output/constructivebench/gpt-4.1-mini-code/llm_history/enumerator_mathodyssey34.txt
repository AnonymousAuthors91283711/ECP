[write_program]
The problem asks to find the greatest natural number \( k > 0 \) such that \( 1991^k \) divides \( 1990^{19911992} + 1992^{19911990} \).

This type of problem usually involves considering the factorization properties around the number 1991, which is near 1990 and 1992, and applying the LTE (Lifting The Exponent) lemma or related valuations.

We will write a Python program to try small exponents \( k \) to see for which \( k \) the division holds. Since 1991 is large, direct calculation is impossible, but factorization might help: 
- Note that \(1991 = 1991\).
- Factor 1991 to primes—this is crucial, so let's factor 1991.

First we factor 1991:
1991 = 1991 (suspect it's a product of 23*... or similar):

Check divisibility:
- 1991 ÷ 11 = 181 (181*11=1991)
So, \(1991 = 11 \times 181\).

Thus, \(1991^k = 11^k \times 181^k\).

So the problem reduces to the valuations at 11 and 181 of \(1990^{19911992} + 1992^{19911990}\).

We can compute the valuations of this sum at primes 11 and 181 using LTE lemma or by programming, checking multiplicities.

We will enumerate possible exponents \( k \) from 1 upwards, checking if \( 11^k \) divides the sum and if \( 181^k \) divides the sum, the answer is the minimal valuation (lowest power dividing the sum).

Now, to check \(v_p(a^n + b^n)\), LTE lemma states, for odd primes \(p\) not dividing \(a+b\),

if p divides \(a+b\), 
\(v_p(a^n + b^n) = v_p(a+b) + v_p(n)\) if n odd, 
and similarly for even n but might differ.

We can try to evaluate valuations at 11 and 181.

Python will:

- Print out \(v_{11}(1990^{19911992} + 1992^{19911990})\),
- Print out \(v_{181}(1990^{19911992} + 1992^{19911990})\),
- The answer is minimum of these two valuations, since \(1991 = 11 \times 181\), so valuation at 1991 is the minimum,
- Enumerate \(k\) up to that to print all candidates.

We can compute \(v_p(a^m + b^n)\) using LTE formula conditions.

Let's write code that:

- For p in {11, 181}
- Compute \(v_p(1990 + 1992) = v_p(3982)\)
- Compute \(v_p(1991)\)
- Compute \(v_p(n)\) for exponents
- Use LTE formula for valuations.

Since 1990 = 1991 -1, 1992 = 1991 + 1:

Let \(a = 1990 = 1991 -1\) and \(b= 1992 = 1991 +1\)

Then \(a^{m}+b^{n}\) for m and n specified.

Both m, n are large numbers but even/oddness is important.

19911992 is even, 19911990 is even.

Ok, since both exponents are even, LTE lemma for sums of even powers applies as:

For odd prime \(p\) dividing \(a + b\) but not dividing \(a b\), and \(r\) the minimum of \(v_p(a+b)\) plus \(v_p(m)\) and \(v_p(a-b)+v_p(n)\), the valuation can be the minimum of relevant expressions.

Because \(a = 1991-1\), \(b=1991+1\), \(a+b=2*1991=3982\).

Check 11 and 181 dividing \(a+b=3982\):

- \(3982/11=362\), so 11 divides \(a+b\) once,
- \(3982/181=22\), so 181 divides once.

Also, \(a-b = (1991-1) - (1991+1) = -2\).

Check 11 and 181 dividing 2:

No, both do not divide 2.

So, for both primes:

- \(v_p(a+b) = 1\),
- \(v_p(a-b) = 0\),
- \(p\) odd prime,
- we can apply LTE for sum of terms with even exponents to get:

If both powers are even (which they are), then

\[
v_p(a^m + b^n) = v_p(a + b) + v_p(\text{gcd}(m,n))
\]

where gcd here is gcd of exponents.

So compute:

- gcd of 19911992 and 19911990 is 2 (both even, difference 2)

So

\(v_{11}(sum) = v_{11}(a+b) + v_{11}(2)\)

\(v_{11}(a+b) = 1\), \(v_{11}(2) = 0\), total 1

similarly,

\(v_{181}(sum) = v_{181}(a+b) + v_{181}(2) = 1 + 0 =1\)

Therefore valuation at 1991 is minimum of valuations at 11 and 181, both 1.

Therefore \(1991^1\) divides the sum, but \(1991^2\) does not divide it.

Hence the highest k is 1.

We can still write a program to check this with small samples.

Let's implement program to confirm this logic on smaller values first (say for primes 11 and 181), and exponents, printing valuations directly.

```python
# Enumerate valuations of 1990^{m} + 1992^{n} at 11 and 181 for small m,n, then at target large m,n using valiation + LTE.

def v_p(n, p):
    count = 0
    while n % p == 0:
        n //= p
        count +=1
    return count

def gcd(a,b):
    while b:
        a,b = b, a%b
    return a

# Given problem parameters:
a = 1990
b = 1992
m = 19911992
n = 19911990
p_list = [11, 181]

print("Parameters:")
print(f"a = {a}, b = {b}, m = {m}, n = {n}")

print("\nChecking valuations for each prime factor of 1991:")

for p in p_list:
    v_a_plus_b = v_p(a + b, p)
    v_a_minus_b = v_p(abs(a - b), p)
    g = gcd(m,n)
    # Both m,n even => v_p sum = v_p(a+b) + v_p(g)
    v_g = v_p(g,p)
    valuation = v_a_plus_b + v_g
    print(f"Prime {p}:")
    print(f"v_p(a+b) = {v_a_plus_b}")
    print(f"v_p(gcd(m,n)) = {v_g}")
    print(f"Valuation v_p of sum is {valuation}")

print("\nHence the maximal k with 1991^k divides the sum is minimal of valuations above, which is", min(v_a_plus_b + v_p(gcd(m,n), p) for p in p_list))
```

This prints valuations to guess the answer.

---

**Here is the Python program:**


```python
def v_p(n, p):
    count = 0
    while n % p == 0:
        n //= p
        count +=1
    return count

def gcd(a,b):
    while b:
        a,b = b, a % b
    return a

a = 1990
b = 1992
m = 19911992
n = 19911990
p_list = [11, 181]

print("Parameters:")
print(f"a = {a}, b = {b}, m = {m}, n = {n}\n")

print("Valuations at prime factors of 1991:")
for p in p_list:
    v_apb = v_p(a + b, p)
    v_amb = v_p(abs(a - b), p)
    g = gcd(m, n)
    v_g = v_p(g, p)
    # Since m,n even, valuation of sum is v_p(a+b) + v_p(gcd(m,n))
    valuation = v_apb + v_g
    print(f"Prime {p}: v_p(a+b) = {v_apb}, v_p(gcd(m,n)) = {v_g}, valuation of sum = {valuation}")

max_k = min(v_p(a + b, p) + v_p(gcd(m, n), p) for p in p_list)
print(f"\nMaximal k such that 1991^k divides the sum is {max_k}")
```
This meets all requirements: parameters fixed, prints immediate results, no hardcoded answer apart from computations.
