[write_program]
The problem is asking for the number of pairs \((m,n)\) of natural numbers with \(m > 0\) and \(n > 1\) such that the sum of integers from \(m\) to \(m+n-1\) equals 15.

The sum of consecutive integers from \(m\) to \(m+n-1\) is 
\[
S = \frac{n}{2}(2m + n - 1)
\]
We want to find all pairs \((m,n)\) with \(m \geq 1\), \(n \geq 2\) such that this sum equals 15. 

I will enumerate small values of \(n\) (say up to 15, since the sum is small), and for each \(n\), solve for \(m\) and verify if \(m \in \mathbb{N}\), \(m > 0\).

Print all pairs found and their count.

```python
# Enumerate pairs (m,n) with m>0, n>1 and sum of n terms starting at m equals 15
# sum = n/2 * (2m + n -1) = 15

target = 15
max_n = 15  # upper bound for n

count = 0
for n in range(2, max_n+1):
    # Solve for m: n/2*(2m + n -1) = 15 => 2m + n -1 = 30/n => m = (30/n - n +1)/2
    if 30 % n == 0:  # 30/n integer
        val = 30 // n - n + 1
        if val % 2 == 0:
            m = val // 2
            if m > 0:
                print(f"Found pair m={m}, n={n}")
                count += 1
print(f"Total count = {count}")
```
