[write_program]
The problem is to find the least positive integer \( n \) such that the set 
\[
\{ x \in \mathbb{R} : |2\{x\} - 1| = \{n x\} \}
\]
has at least 2012 elements, where \(\{y\}\) denotes the fractional part of \(y\).

To explore this, we will try small values of \( n \) and count how many real numbers satisfy 
\[
|2\{x\} - 1| = \{n x\}.
\]
Because the problem involves fractional parts and infinitely many real numbers, the key is to analyze the solutions modulo 1 and detect the count of solutions within one period, which can then be lifted to the whole line.

In the script below:
- We will check \( n \) values from 1 up to an upper bound (e.g., 30).
- For each \( n \), we check all possible fractional parts \( \{x\} \) in fractions with denominator \( n \).
- Use symbolic reasoning to find \( x \) with fractional part \( f \) such that \( |2f - 1| = \{n x\} \).
- We enumerate solutions to count how many distinct solutions exist per \( n \).
- We print the count for each \( n \) and once the count reaches or exceeds 2012, we print the minimal such \( n \).

This enumerates possible answers but does not prove the minimality rigorously.

```python
# Iterate over n and enumerate solutions x in [0,1), counting solutions
# that satisfy |2*frac(x)-1| = frac(n*x).
# frac(x) = x when x in [0,1).
# frac(n*x) depends on n and frac(x).
# We check all possible frac(x) = k/m for denominators m up to an upper bound.

def frac_eq_condition(n):
    # For a fixed n, the condition is:
    # |2*f -1| = frac(n*x) = frac(n*f) since n*floor(x)+n*f fractional part = n*f mod 1
    # So for fractional part f in [0,1):
    # |2*f -1| = frac(n*f)
    # frac(n*f) = n*f - floor(n*f)

    # Because frac(n*f) in [0,1), floor(n*f) is an integer 0,..,n-1
    # We can try all possible floor(n*f) = t, then:
    # |2*f-1| = n*f - t  =>  Solve for f:
    # For |2f-1| = 2f-1 if f >= 0.5 else 1 - 2f

    # We'll try to solve separately on intervals [0,0.5) and [0.5,1)
    solutions = set()

    # On [0,0.5), |2f-1| = 1 - 2f
    # 1 - 2f = n*f - t => 1 - 2f - n*f + t =0 => ( -2 - n)*f + (1 + t) =0 => f = (1+t)/(2+n)
    for t in range(n+1):
        f = (1 + t) / (2 + n)
        if 0 <= f < 0.5:
            # Check if floor(n*f) == t
            if int(n*f) == t:
                solutions.add(f)

    # On [0.5,1), |2f-1|= 2f - 1
    # 2f -1 = n*f - t => 2f -1 - n*f + t = 0 => (2 - n)*f + (t -1) = 0 => f = (1 - t)/(2 - n)
    # Note denominator 2-n can be zero or negative:
    if n != 2:
        for t in range(n+1):
            denom = 2 - n
            f = (1 - t) / denom
            if 0.5 <= f <1:
                # Check floor(n*f) == t
                if int(n*f) == t:
                    solutions.add(f)

    return solutions

def main():
    target = 2012
    max_n = 30
    for n in range(1, max_n+1):
        sols = frac_eq_condition(n)
        count = len(sols)
        print(f"n={n} solutions count={count}: {sorted(sols)}")
        if count >= target:
            print(f"Minimal n with â‰¥{target} solutions is {n}")
            break

if __name__ == "__main__":
    main()
```
