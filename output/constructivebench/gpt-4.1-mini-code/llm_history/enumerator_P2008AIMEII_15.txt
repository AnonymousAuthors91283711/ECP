[write_program]
The problem is about integers \( n \) such that \( n^2 = (m+1)^3 - m^3 \) for some integer \( m \), and identifying the greatest such \( n \). Since the expression simplifies to \( (m+1)^3 - m^3 = 3m^2 + 3m + 1 \), we want \( n^2 = 3m^2 + 3m + 1 \). The program below enumerates \( m \) over a range and checks whether \( 3m^2 + 3m + 1 \) is a perfect square, printing each \( n \) found, and then declares the greatest found.

```python
# Enumerate integers m in a reasonable range and check if 3m^2 + 3m + 1 is a perfect square.
# Print each integer n such that n^2 = 3m^2 + 3m + 1, then print the largest found.

import math

max_abs_m = 1000  # Limits search
max_n = None
max_m = None

print("Enumerating integers m in [-1000,1000]:")
for m in range(-max_abs_m, max_abs_m + 1):
    val = 3*m*m + 3*m + 1
    if val < 0:
        continue
    root = int(math.isqrt(val))
    if root * root == val:
        print(f"m = {m}, n = Â±{root}, n^2 = {val}")
        if max_n is None or root > max_n:
            max_n = root
            max_m = m

if max_n is not None:
    print(f"Greatest n found: {max_n} for m = {max_m}, since {max_n}^2 = 3*{max_m}^2 + 3*{max_m} + 1")
else:
    print("No integer n found such that n^2 = (m+1)^3 - m^3 for m in given range.")
```
