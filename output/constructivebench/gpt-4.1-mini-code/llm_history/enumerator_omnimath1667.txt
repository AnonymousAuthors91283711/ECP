[write_program]
The problem is about finding permutations \( \sigma \) of the numbers 1 to 9 (indexed by Fin 9 in Lean) such that certain sums and sums of squares of four-element subsets match.

Translating this condition, if \( nums = \sigma(i) + 1 \) for \( i = 0,...,8 \), and denote:

- \( a = nums(0) \)
- \( b = nums(1) \)
- \( c = nums(2) \)
- \( d = nums(3) \)
- \( e = nums(4) \)
- \( f = nums(5) \)
- \( g = nums(6) \)
- \( h = nums(7) \)
- \( k = nums(8) \)

Then conditions are:

1. \( a + b + c + d = d + e + f + g \)
2. \( a + b + c + d = g + h + k + a \)
3. \( a^2 + b^2 + c^2 + d^2 = d^2 + e^2 + f^2 + g^2 \)
4. \( a^2 + b^2 + c^2 + d^2 = g^2 + h^2 + k^2 + a^2 \)

And the set \( \{a,b,c,d,e,f,g,h,k\} = \{1,...,9\} \).

We want to enumerate all permutations of 1..9 and find those satisfying these equations.

Because permutations of 9 elements (362,880) is big but manageable in Python, and the checks are straightforward, we can brute force efficiently.

Approach:
- Try all permutations of 1..9.
- Compute the relevant sums and squares.
- Print the exact solutions immediately when found.

We'll do this with itertools in Python.

```python
# Enumerate permutations of 1..9 and find those satisfying the problem's equations.

from itertools import permutations

nums_range = range(1, 10)

for p in permutations(nums_range):
    a,b,c,d,e,f,g,h,k = p
    s1 = a+b+c+d
    s2 = d+e+f+g
    s3 = g+h+k+a
    if s1 == s2 == s3:
        sq1 = a*a + b*b + c*c + d*d
        sq2 = d*d + e*e + f*f + g*g
        sq3 = g*g + h*h + k*k + a*a
        if sq1 == sq2 == sq3:
            print(p)
```

This program prints every solution tuple immediately upon finding it, allowing us to conjecture properties and count solutions.
