[write_program]
The problem is to find all triples \((x, y, z) \in \mathbb{N}^3\) such that 
\[ x^5 + x^4 + 1 = 3^y \cdot 7^z. \]

We want to enumerate small values of \(x, y, z\) and check when \(x^5 + x^4 + 1\) factors purely into powers of 3 and 7.

Because the values grow rapidly, we'll choose a suitable upper bound for \(x\), e.g., up to 50, and factor \(x^5 + x^4 + 1\). For each number, if the prime factorization contains only 3 and 7, we'll print the triple \((x, y, z)\).

To factor, we'll perform prime factorization by dividing out powers of 3 and 7 and check if there's any leftover factor.

```python
# Enumerate triples (x, y, z) of natural numbers with x^5 + x^4 + 1 = 3^y * 7^z
# Print all candidates for x in range 1 to 50, and y, z deduced from factorization

def factor_powers(n, p):
    # Return exponent of prime p in factorization of n, and residual after dividing out p powers
    count = 0
    while n % p == 0:
        n //= p
        count += 1
    return count, n

def main():
    max_x = 50
    for x in range(1, max_x+1):
        val = x**5 + x**4 + 1
        y, rem = factor_powers(val, 3)
        z, rem2 = factor_powers(rem, 7)
        if rem2 == 1:  # only 3 and 7 factors remain
            print(f"(x={x}, y={y}, z={z}) â†’ {x}^5 + {x}^4 + 1 = 3^{y} * 7^{z}")

if __name__ == "__main__":
    main()
```
