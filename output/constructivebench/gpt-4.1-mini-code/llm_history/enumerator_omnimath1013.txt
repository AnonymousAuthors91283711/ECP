[write_program]
This problem involves finding the greatest natural number \(n\) such that the volume of \(n\) spheres of radius 4 is at most the volume of one sphere of radius 10. The volume of a sphere is given by \( \frac{4}{3} \pi r^3 \), so the inequality to check is:

\[
n \times \frac{4}{3} \pi (4^3) \leq \frac{4}{3} \pi (10^3)
\]

The factor \(\frac{4}{3}\pi\) cancels out, and the condition reduces to:

\[
n \times 4^3 \leq 10^3
\]

We can enumerate \(n \in \mathbb{N}\) and find the maximum \(n\) satisfying this condition. The program will print all valid \(n\), and finally the greatest valid \(n\).

```python
# Enumerate natural numbers n where n * 4^3 <= 10^3, print all valid n and the maximum
def main():
    r_small = 4
    r_large = 10
    vol_small = r_small ** 3  # volume factors (without 4/3*pi)
    vol_large = r_large ** 3

    print(f"Enumerating n where n * {vol_small} <= {vol_large}:")
    max_n = None
    for n in range(1, vol_large + 1):
        if n * vol_small <= vol_large:
            print(n)
            max_n = n
        else:
            break
    print("Maximum n satisfying the inequality:", max_n)

if __name__ == "__main__":
    main()
```
