[write_program]
The problem involves four positive integers \(a, b, c, d\) satisfying two sum conditions:

- \(a + b + c + d = m^2\)
- \(a^2 + b^2 + c^2 + d^2 = 1989\)

and \(n^2\) is the maximum of the four numbers. The goal is to find pairs \((m, n)\).

To assist in conjecturing the answer, I will enumerate all quadruples \((a,b,c,d)\) with positive integers whose squares sum to 1989, compute \(m^2 = a+b+c+d\), then find the maximum value \(n^2 = \max(a,b,c,d)\), and print these \((m, n)\) values.

Because 1989 is fixed and positive integers must be relatively small, I will limit the search range up to a reasonable bound. Since all are positive and squares sum to 1989, each \(a,b,c,d \leq \sqrt{1989} < 45\).

The program will:

- Iterate all quadruples of positive integers up to 44.
- Check sum of squares = 1989.
- Compute sum = \(m^2\) and test whether sum is a perfect square.
- Compute max = \(n^2\) and test whether max is a perfect square.
- Print \((m,n)\) pairs found.

Print results immediately when found.

```python
# Enumerate quadruples (a,b,c,d) of positive integers <=44,
# with sum of squares = 1989,
# sum = m^2 (perfect square),
# max = n^2 (perfect square).
import math

def is_square(x):
    r = int(math.isqrt(x))
    return r*r == x, r

MAX = 44  # sqrt(1989) â‰ˆ 44.6

found_pairs = set()
for a in range(1, MAX+1):
    a2 = a*a
    for b in range(1, MAX+1):
        b2 = b*b
        for c in range(1, MAX+1):
            c2 = c*c
            d2 = 1989 - (a2 + b2 + c2)
            if d2 <= 0:
                continue
            sd, d = is_square(d2)
            if not sd:
                continue
            d_val = d
            # check d in range
            if d_val < 1 or d_val > MAX:
                continue
            # sum of integers
            s = a + b + c + d_val
            s_sq, m = is_square(s)
            if not s_sq:
                continue
            m_val = m
            # max of integers
            mx = max(a,b,c,d_val)
            mx_sq, n = is_square(mx)
            if not mx_sq:
                continue
            n_val = n
            pair = (m_val, n_val)
            if pair not in found_pairs:
                found_pairs.add(pair)
                print(f"(m, n) = {pair}")
```
