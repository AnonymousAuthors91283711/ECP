[write_program]
The problem is to find the greatest possible sum A + B of digits A, B (from Fin 10 means digits 0-9) where the number formed by concatenating digits A, A, B, then digits of 2018 ([2,0,1,8]) is divisible by 11.

The number's decimal digits: [A, A, B, 2, 0, 1, 8].

We want to enumerate all digits A, B (0 to 9), form the number N = int('AAB2018'), check if N % 11 == 0, and print the sum A+B when valid.

In the end, print the maximum sum found.

We can print each candidate sum as we find it, then print the max sum.

```python
# Enumerate all A, B in 0..9
# number formed: digitsAAB + digitsT = [A, A, B, 2, 0, 1, 8]
# number = int("AAB2018")
# Check number % 11 == 0
# Print sums A+B for valid, and finally print max sum

def main():
    digitsT = [2,0,1,8]
    max_sum = -1
    for A in range(10):
        for B in range(10):
            digitsAAB = [A, A, B]
            digits = digitsAAB + digitsT
            # Convert digits to number
            number = 0
            for d in digits:
                number = number*10 + d
            if number % 11 == 0:
                s = A + B
                print(s)
                if s > max_sum:
                    max_sum = s
    print("Maximum sum:", max_sum)

if __name__ == "__main__":
    main()
```
