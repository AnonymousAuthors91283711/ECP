[write_program]
The problem involves counting certain paths with given constraints and finding the reduced fraction of successful paths over total paths. The known parameters are total_paths = \(3 \times 2^7 = 384\) and successful_paths = 82. The fraction \(\frac{82}{384}\) can be reduced by their gcd.

This script enumerates possible simplified fractions for total_paths = 384 and successful_paths calculated by iterating near 82 to verify coprimality and equivalently reduced form, printing all candidates and the minimal fraction.

```python
from math import gcd

total_paths = 3 * 2**7  # 384
print("Total paths:", total_paths)

# We'll check numerators around 82 to find fractions close to 82/384 in reduced form
for successful_paths in range(75, 90):
    g = gcd(successful_paths, total_paths)
    m, n = successful_paths // g, total_paths // g
    # Print coprime fractions with their numerators and denominators
    print(f"Successful paths: {successful_paths}, fraction reduced: {m}/{n}")

# Specifically print the fraction from the problem
g = gcd(82, total_paths)
m, n = 82 // g, total_paths // g
print("Fraction from the problem (reduced):", f"{m}/{n}")
```
