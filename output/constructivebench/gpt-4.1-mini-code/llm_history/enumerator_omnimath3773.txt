[write_program]
The problem asks to describe all integer functions \( f:\mathbb{Z} \to \mathbb{Z} \) such that for all integers \(a,b,c\) with \(a+b+c=0\), we have
\[
f(a) + f(b) + f(c) = a^2 + b^2 + c^2.
\]

To explore this, I'll enumerate functions \( f \) defined on a small integer domain, say \(\{-2,-1,0,1,2\}\), checking the condition for all triples with sum zero. This will help conjecture the form of \( f \).

```python
def triples_sum_zero(nums):
    triples = []
    n = len(nums)
    # Enumerate all triples (a,b,c) with sum zero
    for i in range(n):
        a = nums[i]
        for j in range(n):
            b = nums[j]
            c = -a - b
            if c in nums:
                triples.append((a,b,c))
    return triples

def verify(f, nums, triples):
    # Check f(a)+f(b)+f(c) = a^2+b^2+c^2 for all triples
    for (a,b,c) in triples:
        lhs = f(a)+f(b)+f(c)
        rhs = a**2 + b**2 + c**2
        if lhs != rhs:
            return False
    return True

def main():
    nums = list(range(-2,3)) # domain to test
    triples = triples_sum_zero(nums)

    # Because f:Z->Z infinite, we test affine polynomials: f(x) = A x^2 + B x + C for A,B,C int in -10..10
    # Print all that satisfy the constraints on domain
    
    for A in range(-2,3):
        for B in range(-2,3):
            for C in range(-10,11):
                f = lambda x, A=A, B=B, C=C: A*x*x + B*x + C
                if verify(f, nums, triples):
                    print(f"f(x) = {A}*x^2 + {B}*x + {C}")

if __name__ == "__main__":
    main()
```
This program will print candidate functions \( f \) that fit the relation on a small sample set of integers, helping to conjecture the exact form of \( f \).
