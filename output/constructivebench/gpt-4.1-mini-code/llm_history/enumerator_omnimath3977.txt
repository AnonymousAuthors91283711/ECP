[write_program]
The problem is to find all natural number pairs \((m, n) \in \mathbb{N} \times \mathbb{N}\) satisfying the equation 
\[ m^2 + 2 \cdot 3^n = m \cdot (2^{n+1} - 1). \]

Our approach:
- Enumerate \(n\) from 0 to a small limit (e.g., 15).
- For each \(n\), compute the quadratic equation in terms of \(m\):
  \[
  m^2 - m \cdot (2^{n+1} - 1) + 2 \cdot 3^n = 0.
  \]
- Use the quadratic formula to find \(m\).
- Check if \(m\) is a natural number.
- Print all such pairs immediately.

This can help conjecture the exact form of the solution set.

```python
import math

# Enumerate possible solutions to m^2 + 2*3^n = m*(2^{n+1}-1)
# for n=0 to 15, m in ℕ, check if m satisfies the quadratic exactly.

MAX_N = 15

def is_perfect_square(x):
    r = int(math.isqrt(x))
    return r*r == x

print("Enumerating (m,n) pairs satisfying m^2 + 2*3^n = m*(2^{n+1}-1):")
for n in range(MAX_N+1):
    a = 1
    b = -(2**(n+1) - 1)
    c = 2 * (3**n)
    discriminant = b*b - 4*a*c
    if discriminant < 0:
        continue
    if is_perfect_square(discriminant):
        sqrt_d = int(math.isqrt(discriminant))
        # Roots = (-b ± sqrt_d)/2
        for sign in [1, -1]:
            m_num = -b + sign * sqrt_d
            if m_num % 2 == 0:
                m = m_num // 2
                if m >= 0:
                    # Verify equation (optional, for safety)
                    lhs = m*m + 2*(3**n)
                    rhs = m*(2**(n+1)-1)
                    if lhs == rhs:
                        print(f"(m,n) = ({m},{n})")
```
