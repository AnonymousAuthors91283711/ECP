[write_program]
The problem involves a quadratic polynomial \( f(x) = a x^2 + b x + c \) with integer coefficients, and given constraints:
- \( f(1) = 0 \)
- \( 50 < f(7) < 60 \)
- \( 70 < f(8) < 80 \)
- There exists an integer \( k \) such that \( 5000 k < f(100) < 5000(k+1) \).

We want to find the unique \( k \) satisfying these.

We'll enumerate all integer triples \((a,b,c)\) with \( f(1) = 0 \implies a + b + c = 0 \), then check the other inequalities, and collect candidates for \( k \).

To limit computation, we will try small ranges for \( a \), and compute \( b \) and \( c = -a - b \). For each candidate, we check the inequalities and print candidate \( k \) values.

```python
# Enumerate integer quadratic polynomials f(x) = a x^2 + b x + c with f(1) = 0,
# subject to inequalities on f(7), f(8), and f(100).
# Print candidates for k with 5000*k < f(100) < 5000*(k+1).

def f(a,b,x):
    c = -a - b
    return a*x*x + b*x + c

def main():
    # Small ranges for a and b to keep computation short.
    # Since f(7) and f(8) values are between ~50-80, and coefficients are integers,
    # we pick a,b from -20 to 20.
    candidates_k = set()
    for a in range(-20,21):
        for b in range(-20,21):
            c = -a - b
            val7 = f(a,b,7)
            if not (50 < val7 < 60):
                continue
            val8 = f(a,b,8)
            if not (70 < val8 < 80):
                continue
            val100 = f(a,b,100)
            if val100 <= 0:
                continue  # k must be integer, positive presumably
            k = val100 // 5000
            if 5000*k < val100 < 5000*(k+1):
                print(f"a={a}, b={b}, c={c}, f(7)={val7}, f(8)={val8}, f(100)={val100}, k={k}")
                candidates_k.add(k)
    # After enumeration print unique k's
    print("Candidate k values found:", sorted(candidates_k))
    if candidates_k:
        print("Unique k (if exists):", sorted(candidates_k)[0] if len(candidates_k)==1 else "More than one candidate")

if __name__ == "__main__":
    main()
```
