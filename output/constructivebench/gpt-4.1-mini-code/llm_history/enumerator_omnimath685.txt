[write_program]
The problem involves finding a set of Boolean lists of length 8, where any two distinct lists differ in at least 3 positions. This resembles a code with minimum Hamming distance 3, on 8-bit binary lists.

We'll enumerate all binary lists of length 8, and try to find all subsets with the property that every pair differs in at least 3 bits. 

We'll:
- Print each candidate list immediately.
- Use small samples and progressive construction.
- The program outputs the length-8 lists as sequences of 0/1.
- Enumerate the maximum size such code.

```python
from itertools import product, combinations

def hamming_dist(a,b):
    return sum(x != y for x,y in zip(a,b))

def is_valid_code(code, candidate):
    # Check if candidate differs by at least 3 from all in code
    for c in code:
        if hamming_dist(c,candidate) < 3:
            return False
    return True

def main():
    # Enumerate all length-8 bitlists
    all_lists = list(product((0,1), repeat=8))
    code = []
    print("Constructing a code with minimum distance 3 on 8-bit lists:")
    for candidate in all_lists:
        if is_valid_code(code, candidate):
            code.append(candidate)
            print(candidate)
    print(f"Constructed code size: {len(code)}")
    # Print max size found
    max_size = len(code)
    print(f"Maximum code size found (greedy): {max_size}")

if __name__=='__main__':
    main()
```
