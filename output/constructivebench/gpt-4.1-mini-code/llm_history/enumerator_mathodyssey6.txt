[write_program]
The problem asks to find the least natural number \( n \) such that \(3n + 1\) and \(5n + 1\) are both perfect squares.

We'll enumerate \( n \) from 0 upwards, check if \(3n + 1\) and \(5n + 1\) are both perfect squares, and print such \( n \) along with the corresponding squares \( k, m \). Then, we'll print the least such \( n \).

```python
# Enumerate n to find all solutions to:
# 3n + 1 = k^2 and 5n + 1 = m^2 for some integers k,m
# Print each n,k,m solution found, then print the minimal n.

import math

def is_square(x):
    r = int(math.isqrt(x))
    return r*r == x

def main():
    # Limit search to first 10,000 n, reasonable for quick enumeration
    max_n = 10000
    candidates = []
    for n in range(max_n+1):
        val1 = 3*n + 1
        val2 = 5*n + 1
        if is_square(val1) and is_square(val2):
            k = int(math.isqrt(val1))
            m = int(math.isqrt(val2))
            print(f"Found n={n} with k={k}, m={m}")
            candidates.append(n)
    if candidates:
        print(f"Minimum n satisfying conditions: {min(candidates)}")
    else:
        print("No solutions found up to n=10000")

if __name__ == "__main__":
    main()
```
