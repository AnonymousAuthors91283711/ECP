[write_program]
This problem asks for the last digit of the expression 23^2023 + 23^20 - 23^23. To find that, we need to compute the expression modulo 10. Since the last digit repeats in cycles for powers mod 10, we can enumerate the powers of 23 modulo 10 and find the cycle length, then compute the values for the given exponents. The program below enumerates powers modulo 10 and prints the intermediate cycle and the final result.

```python
def last_digit_of_power(base, exponent):
    # Compute last digit of base^exponent efficiently using cycle detection
    base %= 10
    cycle = []
    seen = set()
    current = base
    while current not in seen:
        cycle.append(current)
        seen.add(current)
        current = (current * base) % 10
    # cycle repeats starting at some index, but for mod 10 bases, cycle starts at 0
    cycle_length = len(cycle)
    return cycle[(exponent - 1) % cycle_length]

def main():
    base = 23
    exps = [2023, 20, 23]
    print(f"Base: {base}, Computing powers mod 10 for exponents: {exps}")
    powers_mod_10 = []
    for e in exps:
        val = last_digit_of_power(base, e)
        print(f"23^{e} mod 10 = {val}")
        powers_mod_10.append(val)
    result = (powers_mod_10[0] + powers_mod_10[1] - powers_mod_10[2]) % 10
    print("Final result:")
    print(result)

if __name__ == "__main__":
    main()
```
