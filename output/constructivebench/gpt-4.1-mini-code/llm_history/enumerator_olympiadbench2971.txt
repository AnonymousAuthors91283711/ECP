[write_program]
The problem is to find the greatest number \( n \) with 5 digits (10000 ≤ \( n \) ≤ 99999), whose decimal digits are all distinct (no duplicates), and divisible by 63.

Since 63 = 7 × 9, divisibility by 63 means the number is divisible by both 7 and 9.

We will enumerate numbers in the range, check for distinct digits, and divisibility by 63. We will output all such numbers found, and at the end output the greatest such number found.

To keep output reasonable, we will start from the largest 5-digit number, and go downwards until 10^4, and print each matching number immediately.

```python
def has_unique_digits(n):
    s = str(n)
    return len(set(s)) == len(s)

def divisible_by_63(n):
    return n % 63 == 0

def main():
    print("Searching for 5-digit numbers with distinct digits divisible by 63:")
    max_n = None
    for n in range(99999, 9999, -1):
        if has_unique_digits(n) and divisible_by_63(n):
            print(n)
            if max_n is None or n > max_n:
                max_n = n
    if max_n is not None:
        print("Greatest such number:", max_n)
    else:
        print("No such number found.")

if __name__ == "__main__":
    main()
```
