[write_program]
The problem involves enumerating the sizes \( n \) of certain configurations defined by functions `home` and `away` with constraints on sets derived from elements of a finite set of size \( c \), where \( c \geq 4 \) and is even. The goal is to identify, for given \( c \), the greatest \( n \) such that these constraints hold. We'll try small even values of \( c \) (4 and 6), and enumerate candidate \( n \) values and mappings to check feasibility.

Because the search space grows fast, we'll consider small \( n \) and sample mappings, printing all valid \( n \) found and the parameters \( c \) being used.

```python
from itertools import combinations, product

def verify_configuration(c, n):
    # Elements of Fin c labeled 0..c-1
    # home: Fin n -> Sym2(Fin c) := unordered pairs of distinct elements
    # away: Fin n -> Fin c
    # Constraints:
    # (1) ∀i, away[i] not in home[i]
    # (2) if home[i] = home[j], then away[i] ≠ away[j]
    # (3) ∀i, no j s.t. away[i] in home[j] and away[j] in home[i]

    elements = list(range(c))
    sym2 = list(combinations(elements, 2))  # All pairs (x,y) with x<y

    # For efficiency:
    pair_to_indices = {}
    for idx, p in enumerate(sym2):
        pair_to_indices[p] = idx

    # Generate all assignments of home: [0..n-1] -> sym2
    # with condition (2) on away: if i,j share same home, away[i] ≠ away[j]
    # We'll try all assignments home_list in sym2^n, then away_list in [0..c-1]^n with constraints

    # To reduce search space, enumerate home first with possible repeats
    # After that, for each home vector, assign away values so that conditions hold

    # We will prune early if conditions can't be met

    from collections import defaultdict

    # Enumerate home assignments
    # sym2 has length s = c*(c-1)/2, for c=4 it's 6, for c=6 it's 15

    s = len(sym2)
    # To limit runtime, we try a subset of possible home assignments selecting from sym2 with replacement
    # but for demo, just try all home assignments if small n,s

    # If s^n too big, abort early (limit n<=4 or 5)
    limit = 5
    if n > limit:
        return False

    # We'll enumerate all home assignments (sym2^n)
    for home_tuple in product(sym2, repeat=n):
        # For each home, group indices by the pair = home value
        groups = defaultdict(list)
        for i, h in enumerate(home_tuple):
            groups[h].append(i)

        # For away assignments:
        # Condition (1): away[i] not in home[i]
        # Condition (2): in each group, away values distinct
        # Condition (3): for all i,j no mutual 'cross' membership: away[i] in home[j] and away[j] in home[i]

        # Build possible away candidates per i
        away_candidates = []
        for i in range(n):
            pair = home_tuple[i]
            allowed = [x for x in elements if x not in pair]
            away_candidates.append(allowed)
            if len(allowed) == 0:
                break
        else:
            # Now assign away values, obeying constraint (2) and (3)
            # We'll backtrack

            assigned = [None]*n

            # For constraint (2): in group all away values distinct
            def backtrack(pos):
                if pos == n:
                    # check (3)
                    for i1 in range(n):
                        a1 = assigned[i1]
                        h1 = home_tuple[i1]
                        for i2 in range(n):
                            if i1 == i2:
                                continue
                            a2 = assigned[i2]
                            h2 = home_tuple[i2]
                            if a1 in h2 and a2 in h1:
                                return False
                    # All constraints satisfied
                    return True

                # Index pos
                # We must assign assigned[pos] in away_candidates[pos]
                # and distinct in group

                # find group of pos
                gp = groups[home_tuple[pos]]

                # Collect away values already assigned in group except pos
                taken = set(assigned[i] for i in gp if assigned[i] is not None and i != pos)

                for val in away_candidates[pos]:
                    if val in taken:
                        continue
                    assigned[pos] = val
                    if backtrack(pos+1):
                        return True
                assigned[pos] = None
                return False

            if backtrack(0):
                return True
    return False

def main():
    for c in [4,6]:
        print(f"c = {c}")
        # n candidate range from 1 up to c*(c-1)//2 * c (rough guess)
        # We'll test from n=1 up to 8 for demo
        max_n_found = 0
        for n in range(1, 9):
            if verify_configuration(c, n):
                print(f"  n = {n} feasible")
                if n > max_n_found:
                    max_n_found = n
        print(f"Max feasible n for c={c} looks like {max_n_found}")

if __name__ == "__main__":
    main()
```

