[write_program]
The problem asks for the smallest natural number \( n \) such that there exist four *distinct* primes \( p, q, r, s \) satisfying:
- \( 30 \mid (p q - r s) \)
- \( p + q + r + s = n \)

We'll enumerate distinct quadruples of primes (from a small prime list), check the divisibility condition, and print possible sums \( n \). Then we'll identify the minimal such \( n \).

```python
# Enumerate sums n = p+q+r+s for four distinct primes p,q,r,s
# with 30 dividing (p*q - r*s). Print all found sums and
# finally print the minimal sum found.

from sympy import primerange

primes = list(primerange(2, 50))  # small prime list, can increase limit if no result
found_sums = set()

def distinct_quadruples(primes):
    n = len(primes)
    for i in range(n):
        p = primes[i]
        for j in range(i+1, n):
            q = primes[j]
            for k in range(j+1, n):
                r = primes[k]
                for l in range(k+1, n):
                    s = primes[l]
                    yield (p,q,r,s)

min_sum = None
for p,q,r,s in distinct_quadruples(primes):
    # Check divisibility: 30 divides p*q - r*s
    if ((p*q - r*s) % 30) == 0:
        ssum = p+q+r+s
        if ssum not in found_sums:
            print(f"Found sum n = {ssum} from primes {p},{q},{r},{s}")
            found_sums.add(ssum)
            if min_sum is None or ssum < min_sum:
                min_sum = ssum

if min_sum is not None:
    print(f"Minimal sum n = {min_sum}")
else:
    print("No quadruple found with given conditions in the prime range.")
```
