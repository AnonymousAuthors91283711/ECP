[write_program]
This problem is asking to find the number of divisors \( d \) of 128 that satisfy:
- \( d \mid 128 \) (i.e., \( d \) divides 128)
- \( d \) is a perfect square
- \( d > 1 \)

We will enumerate all divisors of 128, check which are perfect squares greater than 1, and count them. We will also print each divisor that fits these criteria. Since 128 = \( 2^7 \), its divisors are \( 2^k \) for \( k = 0, \dots, 7 \).

```python
# Enumerate divisors d of 128, check if d is a perfect square and d > 1
# Print each such divisor immediately, then print the count

def is_square(n):
    if n < 0:
        return False
    root = int(n**0.5)
    return root*root == n

divisors = [2**k for k in range(8)]  # divisors of 128
count = 0
for d in divisors:
    if d > 1 and is_square(d):
        print(d)
        count += 1
print("Count:", count)
```
