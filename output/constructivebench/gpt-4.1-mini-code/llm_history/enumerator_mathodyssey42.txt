[write_program]
The problem asks to find the number of integers \(\alpha\) with \(|\alpha| \leq 2005\) such that there exist integers \(x,y\) satisfying:
\[
x^2 = y + \alpha, \quad y^2 = x + \alpha.
\]
We want to enumerate such \(\alpha\) values.

Rewrite the equations as:
\[
x^2 - y = \alpha, \quad y^2 - x = \alpha.
\]
Equating:
\[
x^2 - y = y^2 - x \implies x^2 - y^2 = y - x \implies (x - y)(x + y) = y - x.
\]
Since \(y - x = -(x - y)\), this becomes:
\[
(x - y)(x + y) = -(x - y) \implies (x - y)(x + y + 1)=0.
\]
So either:
1. \(x=y\), or 
2. \(x + y = -1\).

Check these two cases and find possible \(\alpha\).

We will enumerate \(|\alpha| \leq 20\) for faster output and testing (you can increase to 2005 to get full result).

```python
# Enumerate alpha in range -N to N and check if integer solutions exist to the system
# Equations:
# x^2 = y + alpha
# y^2 = x + alpha
# From simplification, either x=y or x+y = -1

N = 20  # can increase to 2005 for full problem

found_alphas = set()

for alpha in range(-N, N+1):
    solutions = []
    # Case 1: x=y
    # then x^2 = x + alpha => x^2 - x - alpha = 0
    # discriminant = 1 + 4 alpha
    D = 1 + 4 * alpha
    if D >= 0:
        from math import isqrt
        sqrtD = isqrt(D)
        if sqrtD * sqrtD == D:
            # roots: (1 +- sqrtD)//2
            for sign in [1, -1]:
                num = 1 + sign * sqrtD
                if num % 2 == 0:
                    x = num // 2
                    y = x
                    # verify original eqs (just to be sure)
                    if x * x == y + alpha and y * y == x + alpha:
                        solutions.append((x,y))
    # Case 2: x + y = -1 => y = -1 - x
    # Substitute into x^2 = y + alpha
    # x^2 = (-1 - x) + alpha => x^2 + x + 1 = alpha
    # Substitute into y^2 = x + alpha
    # y^2 = x + alpha
    # y = -1 - x, so y^2 = (-1 - x)^2 = x^2 + 2x +1
    # So x^2 + 2x + 1 = x + alpha => x^2 + x + 1 = alpha (same as before)
    # So alpha = x^2 + x + 1 and from first eq also alpha = x^2 + x + 1 consistent
    # So for any integer x, alpha = x^2 + x +1 has solution (x,y) with y=-1 - x
    
    # Check if alpha can be expressed as x^2 + x +1
    # Iterate x in reasonable range to match alpha
    # Since alpha in [-N, N], x^2 + x +1 in the range
    # Find x such that x^2 + x +1 == alpha
    # Solve quadratic x^2 + x + (1 - alpha) = 0
    # Discriminant = 1 -4(1 - alpha) = 4 alpha -3
    D2 = 4 * alpha - 3
    if D2 >= 0:
        from math import isqrt
        sqrtD2 = isqrt(D2)
        if sqrtD2 * sqrtD2 == D2:
            for sign in [1, -1]:
                numerator = -1 + sign * sqrtD2
                # check if integer x
                if numerator % 2 == 0:
                    x = numerator // 2
                    y = -1 - x
                    # verify original eqs
                    if x*x == y + alpha and y*y == x + alpha:
                        solutions.append((x,y))
    if solutions:
        print(f"alpha={alpha} has solutions: {solutions}")
        found_alphas.add(alpha)

print()
print(f"Found {len(found_alphas)} alphas with |alpha| <= {N}")
# For full range: set N=2005
```
This program enumerates \(\alpha\) values and prints out all \(\alpha\) with integer solutions \((x,y)\).  
You can run it with larger N for full problem.
