[write_program]
The problem is about counting perfect squares within the interval [10^6, 10^9] that are divisible by 7. A number \( n \) divisible by 7 and \( n = m^2 \) implies \( m^2 \equiv 0 \pmod{7} \), which means \( m \equiv 0 \pmod{7} \).

Thus, \( m \) must be a multiple of 7, and \( m^2 \in [10^6, 10^9] \).

Letâ€™s compute \( m \) such that:
\[ m^2 \geq 10^6 \quad \Rightarrow \quad m \geq 10^3 = 1000 \]
\[ m^2 \leq 10^9 \quad \Rightarrow \quad m \leq 31622 \] (since \( \sqrt{10^9} = 31622.776...\))

Now \( m = 7k \), so:
\[ 7k \geq 1000 \Rightarrow k \geq \lceil 1000/7 \rceil = 143 \]
\[ 7k \leq 31622 \Rightarrow k \leq \lfloor 31622/7 \rfloor = 4517 \]

Number of such \( m \) is \( 4517 - 143 + 1 = 4375 \).

We will enumerate \( m \) values in this range and print corresponding \( n = m^2 \).

```python
# Enumerate perfect squares n in [10^6, 10^9] divisible by 7
# Since n = m^2 and 7|n => 7|m, we consider m = 7k
# Find k such that (7k)^2 in [10^6, 10^9]

lo = 10**6
hi = 10**9

import math

min_m = math.ceil(math.sqrt(lo))
max_m = math.floor(math.sqrt(hi))

# m must be multiple of 7
min_k = (min_m + 6)//7  # ceil division for min_k
max_k = max_m // 7

count = 0
for k in range(min_k, max_k+1):
    m = 7 * k
    n = m * m
    if lo <= n <= hi:
        print(n)
        count += 1

print("Total count:", count)
```
