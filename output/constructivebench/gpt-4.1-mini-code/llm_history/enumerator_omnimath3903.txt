[write_program]
The problem is to find all positive integers \( n \) such that the cube of the number of divisors of \( n \) equals \( 4n \). That is:

\[
(d(n))^{3} = 4n
\]

where \( d(n) = \) number of divisors of \( n \).

Since divisor counts grow slowly and \(4n\) grows linearly, the equation restricts \( n \) to be small or have special factorization properties.

We'll write a Python program to enumerate positive integers \( n \) up to some reasonable limit (e.g. 10,000), compute \( d(n) \), then check if

\[
d(n)^3 = 4n
\]

and print all such \( n \), streaming results immediately. At the end, print the smallest and largest solutions found.

```python
# enumerator.py
from math import isqrt

def divisors_count(n):
    # Count number of divisors via pair counting up to sqrt(n)
    cnt = 0
    root = isqrt(n)
    for i in range(1, root+1):
        if n % i == 0:
            cnt += 1 if i * i == n else 2
    return cnt

def main():
    # Reasonable upper bound guessed by quick tests
    limit = 10_000
    answers = []
    print("Checking n with (d(n))^3 = 4n, for n in 1..{}:".format(limit))
    for n in range(1, limit+1):
        d = divisors_count(n)
        lhs = d**3
        rhs = 4*n
        if lhs == rhs:
            print(f"n={n}, d(n)={d}, d(n)^3={lhs}, 4*n={rhs}")
            answers.append(n)
    if answers:
        print(f"Smallest solution: {min(answers)}")
        print(f"Largest solution: {max(answers)}")
    else:
        print("No solutions found up to", limit)

if __name__ == "__main__":
    main()
```
