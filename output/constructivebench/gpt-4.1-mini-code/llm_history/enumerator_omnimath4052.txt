[write_program]
The problem is to find the smallest positive integer \( n \) such that there exists a subset \( s \) of positive integers with cardinality \( n \) and
\[
\prod_{i \in s} \left(1 - \frac{1}{i}\right) = \frac{51}{2010}.
\]

We will enumerate subsets with small sizes and positive integers, compute the product exactly as a rational number, and check if it equals \( \frac{51}{2010} \).

```python
from math import gcd
from itertools import combinations

# Target fraction numerator and denominator
target_num, target_den = 51, 2010

def simplify_fraction(num, den):
    g = gcd(num, den)
    return num // g, den // g

target_num, target_den = simplify_fraction(target_num, target_den)

def prod_fraction(lst):
    # Computes product of (1 - 1/i) for i in lst as a fraction (num, den)
    num, den = 1, 1
    for i in lst:
        # (1 - 1/i) = (i - 1)/i
        num *= (i - 1)
        den *= i
        g = gcd(num, den)
        num //= g
        den //= g
    return num, den

max_n = 6  # We try small n up to 6, adjust if needed.
max_i = 12  # Limit integers up to 12 for tractability.

found_solutions = []

for n in range(1, max_n + 1):
    print(f"Trying subsets of size {n}")
    # combinations of positive integers from 2 to max_i
    # start from 2 because i=1 makes term 0, product=0
    candidates = list(combinations(range(2, max_i + 1), n))
    for s in candidates:
        num, den = prod_fraction(s)
        if (num, den) == (target_num, target_den):
            print(f"Found subset {s} with product = {num}/{den}")
            found_solutions.append((n, s))
    if found_solutions:
        # We have found solutions for minimal n, no need to try larger
        break

if found_solutions:
    min_n = found_solutions[0][0]
    print(f"\nMinimum n is {min_n} with subsets:")
    for _, subset in found_solutions:
        print(subset)
else:
    print("No solutions found with chosen bounds.")
```
