[write_program]
The problem defines a sequence a(n) with a(1) = 1 and for n â‰¥ 1, a(n+1) = (a(n) + n+1) mod 2012. We want to evaluate a(2012) modulo 2012.

Note: a(n) is basically the sum of first n natural numbers modulo 2012, starting with a(1)=1.

Sum of first n numbers = n(n+1)/2.

So a(2012) = sum_{k=1}^{2012} k mod 2012.

Since 2012 is the modulus, sum = 2012*2013/2 mod 2012.

As 2012 divides numerator, this becomes 0 mod 2012?

But we need to confirm by enumerating.

I will write a program that enumerates a(n) for small n, and finally for 2012, printing values as found. Also try to confirm the sum formula.

Since printing all 2012 values might be too verbose, we print selected values and the final answer.

```python
# Enumerate sequence a_n defined by a(1)=1, a(n+1) = (a(n)+n+1) mod 2012
# Print values a(n) for n=1..2012, primarily focusing on a(2012)

def main():
    MOD = 2012
    a = 0  # dummy a(0)
    print(f"a(0) = {a}")
    for n in range(1, MOD+1):
        a = (a + n) % MOD
        print(f"a({n}) = {a}")
        # For brevity, print some key points
        if n in [1, 2, 10, 100, 2011, 2012]:
            print(f"Key a({n}) = {a}")

    # Confirm sum formula calculation
    sum_n = MOD * (MOD +1)//2
    print(f"Sum of 1..{MOD} is {sum_n}")
    print(f"Sum mod {MOD} = {sum_n % MOD}")

if __name__ == "__main__":
    main()
```

This prints values, key values, final value a(2012), sum formula and confirm modulo result.

Let's output the code.
