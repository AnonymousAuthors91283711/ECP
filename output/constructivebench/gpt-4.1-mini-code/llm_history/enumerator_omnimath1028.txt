[write_program]
The problem asks for the count of numbers \( n \) between 2 and 2016 such that for every prime \( p < 8 \), \( p \) divides \( n^n - 1 \). The primes less than 8 are 2, 3, 5, and 7.

We want to find all \( n \in [2, 2016] \) such that:
- \( 2 \mid n^n - 1 \)
- \( 3 \mid n^n - 1 \)
- \( 5 \mid n^n - 1 \)
- \( 7 \mid n^n - 1 \)

Since \( p \mid n^n - 1 \) means \( n^n \equiv 1 \pmod p \), we can check this condition for each \( p \).

We'll enumerate all \( n \) from 2 to 2016, test the divisibility, and count how many satisfy all conditions. The program will print each valid \( n \) as soon as it's found. Finally, it will print the total count.

```python
# Enumerate n in [2..2016] such that for each prime p<8, p divides n^n - 1.
def pow_mod(base, exp, mod):
    # Efficient modular exponentiation
    result = 1
    cur = base % mod
    e = exp
    while e > 0:
        if e & 1:
            result = (result * cur) % mod
        cur = (cur * cur) % mod
        e >>= 1
    return result

def main():
    primes = [2, 3, 5, 7]
    count = 0
    for n in range(2, 2017):
        if all(pow_mod(n, n, p) == 1 for p in primes):
            print(n)
            count += 1
    print("Total count:", count)

if __name__ == "__main__":
    main()
```
