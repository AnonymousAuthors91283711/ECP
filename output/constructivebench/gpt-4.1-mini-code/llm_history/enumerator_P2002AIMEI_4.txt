[write_program]
The problem is to find positive integers \(m < n\) such that

\[
\sum_{k=m}^{n-1} \frac{1}{k^2 + k} = \frac{1}{29}
\]

and then find the sum \(m + n\).

Note that

\[
\frac{1}{k^2 + k} = \frac{1}{k(k+1)} = \frac{1}{k} - \frac{1}{k+1}
\]

So the sum telescopes:

\[
\sum_{k=m}^{n-1} \left(\frac{1}{k} - \frac{1}{k+1}\right) = \frac{1}{m} - \frac{1}{n}
\]

Hence the problem reduces to finding \(m, n \in \mathbb{N}\), \(0 < m < n\), such that

\[
\frac{1}{m} - \frac{1}{n} = \frac{1}{29}
\]

Rearranged:

\[
\frac{1}{n} = \frac{1}{m} - \frac{1}{29} = \frac{29 - m}{29 m}
\]

Then

\[
n = \frac{29 m}{29 - m}
\]

Since \(n\) has to be a positive integer and \(n > m\), we must find integer \(m\) with \(0 < m < 29\) such that \(\frac{29 m}{29 - m}\) is a positive integer greater than \(m\).

We will enumerate \(m\) from 1 to 28 and for each compute \(n\). If \(n\) is integer and \(n > m\), print the pair and the sum.

Finally, print the sum \(m + n\).

```python
# Enumerate all pairs (m, n) where 0 < m < n and (1/m - 1/n) = 1/29
# i.e., n = 29*m / (29 - m), n integer and n > m.

def main():
    results = []
    for m in range(1, 29):
        numerator = 29 * m
        denominator = 29 - m
        if denominator == 0:
            continue
        if numerator % denominator == 0:
            n = numerator // denominator
            if n > m:
                print(f"m={m}, n={n}, sum={m+n}")
                results.append((m, n))
    # If multiple answers, print sums and minimum sum:
    sums = [m + n for m, n in results]
    if sums:
        min_sum = min(sums)
        print(f"Minimum sum m+n = {min_sum}")

if __name__ == "__main__":
    main()
```
