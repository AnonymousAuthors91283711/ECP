[write_program]
This problem asks to find all positive integer triples \( (a,b,c) \) with \( a^3 + b^3 + c^3 = 2001 \). The task is to enumerate all such triples and print them as they are found. Given the cube sum, we can limit each variable to be at most \(\sqrt[3]{2001} \approx 12.6\), so it's sufficient to iterate from 1 to 12 for each.

```python
# Enumerate positive integer triples (a,b,c) with a^3 + b^3 + c^3 = 2001
# Search space for a,b,c: 1 to 12 (since 13^3=2197 > 2001)
target = 2001
max_val = 12

for a in range(1, max_val + 1):
    a_cubed = a**3
    if a_cubed >= target:
        continue
    for b in range(1, max_val + 1):
        b_cubed = b**3
        sum_ab = a_cubed + b_cubed
        if sum_ab >= target:
            continue
        c_cubed = target - sum_ab
        # Check if c_cubed is a perfect cube of a positive integer c
        c = round(c_cubed ** (1/3))
        if c > 0 and c <= max_val and c**3 == c_cubed:
            print(f"Found triple: (a={a}, b={b}, c={c}) with sum {a}^3+{b}^3+{c}^3={target}")
```
