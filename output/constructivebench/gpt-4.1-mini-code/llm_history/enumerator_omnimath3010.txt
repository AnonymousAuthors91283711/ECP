[write_program]
The equation to solve is:
4 * x + 14 = 8 * x - 48

Let's rearrange:
4 * x + 14 = 8 * x - 48
=> 14 + 48 = 8 * x - 4 * x
=> 62 = 4 * x
=> x = 62 / 4 = 15.5

The problem involves integer x, so no integer x satisfies.

But the theorem states x : ℤ, so either the solution is not integer (which it is not), or the problem wants to find 2 * x as omnimath3010_answer.

We can write a Python program that enumerates integers x and checks which x satisfies the given equation. Since no integer x satisfies, it should print nothing or that no integer x found.

Instead, perhaps let’s try x as rational number (simulate as numerator and denominator) or print 2 * x for approximate x.

But per requirements, the code should enumerate values. To quickly detect x, we can solve for x directly.

Since x = (14 + 48) / (8 - 4) = 62 / 4 = 15.5

print 2 * 15.5 = 31 exactly.

This is the answer.

We print x and 2 * x.

```python
# Enumerate integer x between -100 and 100 that satisfy 4x + 14 = 8x - 48
# Since no integer x satisfies, check and print approximate solution

print("Enumerating integer x in [-100,100]:")
for x in range(-100, 101):
    left = 4 * x + 14
    right = 8 * x - 48
    if left == right:
        print(f"x={x} satisfies the equation exactly.")
        print(f"2 * x = {2 * x}")

# Calculate exact solution
numerator = 14 + 48  # 62
denominator = 8 - 4  # 4

from fractions import Fraction
x_exact = Fraction(numerator, denominator)  # 62/4 = 31/2

print(f"Exact solution: x = {x_exact} = {float(x_exact)}")
print(f"2 * x = {2 * x_exact} = {float(2 * x_exact)}")
```
