[write_program]
The problem explores integer quadruples \((a,b,n,p)\) with \(p\) prime satisfying \(2^a + p^b = n^{p-1}\). We want to enumerate small values of \(a,b,n,p\) (with \(p\) prime) and print all solutions discovered.

We'll:
- Iterate around small primes \(p\) (e.g., 2,3,5,7).
- For each prime \(p\), iterate a range of \(a,b,n\).
- Check if \(2^a + p^b = n^{p-1}\).
- Print all such quadruples immediately when found.

```python
import math

# List small primes p for testing
primes = [2, 3, 5, 7]

max_exp = 12  # Max exponent for a, b, n to limit runtime/output

def is_prime(p):
    if p < 2:
        return False
    for i in range(2, int(math.isqrt(p)) + 1):
        if p % i == 0:
            return False
    return True

# Enumerate possible answers (a,b,n,p) satisfying 2^a + p^b = n^{p-1}
for p in primes:
    if not is_prime(p):
        continue
    print(f"Checking prime p={p}")
    power = p - 1
    for a in range(max_exp):
        val_a = 2 ** a
        for b in range(max_exp):
            val_b = p ** b
            s = val_a + val_b
            # To find n such that n^(p-1)=s, compute nth root
            # n = round(s^(1/(p-1))).
            n_approx = int(round(s ** (1 / power)))
            # Check around n_approx in case rounding affects
            for n in range(max(0, n_approx - 1), n_approx + 2):
                lhs = n ** power
                if lhs == s:
                    print(f"Solution found: a={a}, b={b}, n={n}, p={p} => 2^{a} + {p}^{b} = {n}^{power} = {s}")
```

