[write_program]
The problem defines a function f on positive integers:

- f(1) = 1,
- f(n) = 2 * f(n/2) if n is even,
- f(n) = 2 * f(n//2) - 1 if n is odd and > 1.

We want to find all positive integers x in [1..2019] such that f(x) = 19, and sum them.

To assist, I'll write a Python program that:

- Implements the function f iteratively or with memoization for efficiency,
- Iterates over 1 to 2019, prints each x s.t. f(x) = 19,
- Prints the sum of all such x.

This will help conjecture the sum which is the theorem's claim.

```python
def f(n, memo={0:0, 1:1}):
    if n in memo:
        return memo[n]
    if n % 2 == 0:
        memo[n] = 2 * f(n // 2)
    else:
        memo[n] = 2 * f(n // 2) - 1
    return memo[n]

total = 0
for x in range(1, 2020):
    val = f(x)
    if val == 19:
        print(x)
        total += x
print("Sum:", total)
```
