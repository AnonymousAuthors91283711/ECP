[write_program]
The problem involves counting integer triples \((a,b,c)\) with \(1 \leq a,b,c \leq 100\) satisfying the symmetric equation:

\[
a^2 b + b^2 c + c^2 a = a b^2 + b c^2 + c a^2.
\]

We can rearrange this as

\[
a^2 b - a b^2 + b^2 c - b c^2 + c^2 a - c a^2 = 0,
\]

or equivalently

\[
ab(a - b) + bc(b - c) + ca(c - a) = 0.
\]

We want to enumerate all triples \((a,b,c)\) in the given range satisfying this, print each such triple immediately as found, and in the end print the total count, which is the `ncard` of the set (number of solutions). We consider \(a,b,c\) integers from 1 to 100. The Python code below implements an efficient enumeration and prints all solutions streaming as they are found, and prints the total count at the end.

```python
# Enumerate all triples (a,b,c) in [1..100]^3 satisfying
# a^2 b + b^2 c + c^2 a = a b^2 + b c^2 + c a^2,
# i.e., ab(a - b) + bc(b - c) + ca(c - a) = 0.
# Print each triple on discovery and then total count.

def main():
    max_val = 100
    count = 0
    for a in range(1, max_val+1):
        for b in range(1, max_val+1):
            ab_diff = a*b*(a - b)
            for c in range(1, max_val+1):
                bc_diff = b*c*(b - c)
                ca_diff = c*a*(c - a)
                if ab_diff + bc_diff + ca_diff == 0:
                    print(f"(a,b,c)=({a},{b},{c})")
                    count += 1
    print(f"Total solutions: {count}")

if __name__ == "__main__":
    main()
```
