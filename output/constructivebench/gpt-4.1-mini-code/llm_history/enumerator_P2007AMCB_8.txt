[write_program]
The problem involves natural numbers \(T, N, c_1, c_2, c_3\) with conditions:
- \(0 < N < T\)
- \(c_1 + c_2 + c_3 = T\)
- \(T - N = 2 \big((c_1 - N) + (c_2 - N) + (c_3 - N)\big)\)

We want to understand the ratio \( \frac{T}{N} \).

Rewrite the last equation:
\[
T - N = 2(c_1 + c_2 + c_3 - 3N) = 2(T - 3N)
\]
So:
\[
T - N = 2T - 6N \implies -N = T - 6N \implies T = 5N
\]

So the main constraint appears to be \( T = 5 N \).

Next, since \( c_1 + c_2 + c_3 = T = 5N \), and also \( c_i \geq N \) (because \( c_i - N \) appear in sums), it suggests exploring triples \( (c_1, c_2, c_3) \) where each \( c_i \geq N \) and sum \(5N\).

We'll enumerate possible triples for small \(N\), verify the condition \( T - N = 2 ((c_1 - N) + (c_2 - N) + (c_3 - N)) \) and print \(T/N\).

In the code:
- For small N (1 to 5) and T = 5N,
- Enumerate \(c_1, c_2\) from N to T - N,
- Compute \(c_3 = T - c_1 - c_2\),
- Check if \(c_3 \geq N\),
- Check the linear constraint,
- Print results and the ratio \(T/N\).

```python
# Enumerate (N,T,c1,c2,c3) with given constraints to conjecture T/N
# We expect T/N to be 5, but we enumerate to verify.

def main():
    maxN = 5
    for N in range(1, maxN+1):
        T = 5 * N  # inferred from algebra
        print(f"Trying N={N}, T={T}")
        count = 0
        # c1, c2 ≥ N, c3 = T - c1 - c2 ≥ N
        for c1 in range(N, T - 2*N + 1):
            for c2 in range(N, T - c1 - N + 1):
                c3 = T - c1 - c2
                if c3 < N:
                    continue
                lhs = T - N
                rhs = 2 * ((c1 - N) + (c2 - N) + (c3 - N))
                if lhs == rhs:
                    count += 1
                    print(f"Solution {count}: c1={c1}, c2={c2}, c3={c3}, T/N={T}/{N}= {T/N}")
        if count == 0:
            print("No solutions found for this N")

if __name__ == "__main__":
    main()
```
