[write_program]
The problem appears to be about two sequences \( x_i \) for \( i=1,\dots,20 \) and \( y_j \) for \( j=1,\dots,30 \) with given average values:

\[
\frac{\sum_{i=1}^{20} x_i}{20} = 30, \quad \frac{\sum_{j=1}^{30} y_j}{30} = 20
\]

and the problem asks for the average of the combined 50 elements:

\[
\frac{\sum_{i=1}^{20} x_i + \sum_{j=1}^{30} y_j}{50} = ?
\]

This is essentially a weighted average problem. The code below enumerates some example sequences \(x_i\) and \(y_j\) that satisfy these average constraints and computes the combined average to check if it matches the weighted average computed directly by the weighted sum of averages.

```python
# Enumerates example sequences xs and ys with given averages and prints combined average.

def mean(seq):
    return sum(seq) / len(seq)

def generate_sequences(n, target_mean):
    # To keep simple, generate sequences of n elements with sum n*target_mean
    # We try some variations: all elements equal to target_mean,
    # some with small deviations but sum fixed.
    base_seq = [target_mean] * n
    yield base_seq
    # Try one element increased by 1, another decreased by 1, sum fixed
    if target_mean > 1:
        seq = base_seq.copy()
        seq[0] += 1
        seq[1] -= 1
        yield seq
    # Another variation
    seq = base_seq.copy()
    seq[0] += 0.5
    seq[1] -= 0.5
    yield seq

def main():
    n_x, mean_x = 20, 30
    n_y, mean_y = 30, 20

    print(f"Sequences length and target means:")
    print(f"xs: length={n_x}, mean={mean_x}")
    print(f"ys: length={n_y}, mean={mean_y}")

    for xs in generate_sequences(n_x, mean_x):
        for ys in generate_sequences(n_y, mean_y):
            combined = xs + ys
            combined_mean = mean(combined)
            # Print exact decimal representation if possible
            print(f"xs mean: {mean(xs):.6f}, ys mean: {mean(ys):.6f}, combined mean: {combined_mean:.6f}")

    # Theoretical combined mean by weighted average
    theoretical = (n_x * mean_x + n_y * mean_y) / (n_x + n_y)
    print(f"Theoretical combined mean (weighted average): {theoretical:.6f}")

if __name__ == "__main__":
    main()
```
