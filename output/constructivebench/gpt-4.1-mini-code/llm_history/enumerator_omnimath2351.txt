[write_program]
The problem defines a sequence of quadratic polynomials \(a_n\) with given initial polynomials and a linear recurrence relation on the polynomials: 
\[ a_{n+2} = \frac{5}{2} a_{n+1} - a_n. \]

We want to find the limit of the sum of the roots of \(a_n\).

Recall that the sum of the roots of a quadratic polynomial \(p(x) = ax^2 + bx + c\) is \(-b/a\).

By enumerating \(a_n\) for small \(n\) and extracting the sum of roots, we may find a pattern and conjecture the limit.

We'll:
- define \(a_1, a_2\) explicitly
- generate \(a_3, a_4, ...\) up to some small \(n\) by the recurrence
- print sums of roots for each
- conjecture the limit from the values

```python
# enumerator.py

from sympy import symbols, Poly
import sympy

X = symbols('X')

# Given polynomials:
a1 = 3*X**2 - X
a2 = 3*X**2 - 7*X + 3

def sum_roots(poly):
    # sum of roots = -b/a for quadratic aX^2 + bX + c
    p = Poly(poly, X)
    coeffs = p.all_coeffs()  # [a, b, c]
    if len(coeffs) == 3 and coeffs[0] != 0:
        a, b, _ = coeffs
        return -b/a
    else:
        return None

print("a_1:", a1)
print("sum roots a_1:", sum_roots(a1))

print("a_2:", a2)
print("sum roots a_2:", sum_roots(a2))

a = {1: a1, 2: a2}
# Recurrence: a_{n+2} = (5/2)*a_{n+1} - a_n
from sympy import Rational
five_half = Rational(5,2)

N = 10
for n in range(3, N+1):
    a[n] = five_half * a[n-1] - a[n-2]
    s = sum_roots(a[n])
    print(f"a_{n}: {a[n]}")
    print(f"sum roots a_{n}: {s}")

# From printed sums, one might conjecture the limit.
```
This code enumerates \(a_n\), prints each polynomial and the sum of its roots for \(n=1\ldots 10\), allowing to conjecture the limiting value.
