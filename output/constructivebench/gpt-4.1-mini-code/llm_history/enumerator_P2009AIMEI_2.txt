[write_program]
The problem asks for the smallest positive integer \( n \) such that there exists a complex number \( z \) with imaginary part 164 and \( z = \prod_{k=0}^{n-1} \left(1 + (k+1)i \right) \).

We'll enumerate values of \( n \) by computing partial products and check whether the imaginary part matches 164.

```python
# Enumerate n and compute product \prod_{k=1}^n (1 + k i), checking imaginary part == 164
def main():
    prod = complex(1, 1)  # start with first term 1 + 1i
    print(f"n=1, product={prod}")
    # We try n from 1 to 100 (arbitrary upper bound)
    for n in range(2, 101):
        prod *= complex(1, n)
        # Print partial results with exact components
        # Only print when imaginary part is an integer (close to integer)
        im = prod.imag
        if abs(im - round(im)) < 1e-9:
            print(f"n={n}, product={prod}, imag={im}")
        if round(im) == 164:
            print(f"Found n={n} with imaginary part {round(im)}")
            print(f"Exact product: {prod}")
            break

if __name__ == '__main__':
    main()
```
