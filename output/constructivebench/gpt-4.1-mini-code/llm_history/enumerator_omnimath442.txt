[write_program]
The problem is to find the number of positive integer solutions \((a,b,c)\) to the linear Diophantine equation:

\[6a + 10b + 15c = 3000\]

We want to enumerate all triples \((a,b,c)\) with positive integers \(a,b,c > 0\) satisfying this equation.

The approach:
- Loop over possible values of \(c\).
- For each \(c\), the equation reduces to \(6a + 10b = 3000 - 15c\).
- For each valid \(b\), check whether \((3000 - 15c - 10b)\) is divisible by 6 and positive.
- Count the number of such \((a,b,c)\).

We'll keep the enumeration efficient by limiting \(c\) from 1 to at most \(\lfloor 3000/15 \rfloor\). Similarly for \(b\), from 1 up to where \(10b\) does not exceed the residual amount.

Print each valid triple immediately, and at the end print the total count.

```python
# Enumerate positive integer solutions (a,b,c) to 6a+10b+15c=3000
# Print each solution immediately; at the end print total count.

def main():
    total = 0
    # Max c so that 15*c <= 3000
    max_c = 3000 // 15
    for c in range(1, max_c+1):
        rhs = 3000 - 15*c
        # For each c, loop for b positive with 10*b < rhs
        max_b = rhs // 10  # max b that still possible
        for b in range(1, max_b+1):
            rem = rhs - 10*b
            if rem <= 0:
                continue
            # Check if rem divisible by 6
            if rem % 6 == 0:
                a = rem // 6
                if a > 0:
                    print(f"a={a}, b={b}, c={c}")
                    total += 1
    print(f"Total solutions: {total}")

if __name__ == "__main__":
    main()
```
