[write_program]
The problem asks to check if there exist integers \(a, b\) such that both \(a^5 b + 3\) and \(a b^5 + 3\) are perfect cubes. We'll enumerate integer pairs \((a,b)\) within a small range and check these conditions. Printing values as soon as they are found allows us to conjecture whether such pairs exist.

```python
# Enumerate integer pairs (a, b) in a small range to find if both a^5*b + 3 and a*b^5 + 3 are cubes.
def is_cube(n):
    # Check if n is a perfect cube (handles negative cubes)
    if n < 0:
        root = round(-(-n) ** (1/3))
        return root**3 == -n
    else:
        root = round(n ** (1/3))
        return root**3 == n

max_abs = 20
found = False
for a in range(-max_abs, max_abs+1):
    for b in range(-max_abs, max_abs+1):
        val1 = a**5 * b + 3
        val2 = a * b**5 + 3
        if is_cube(val1) and is_cube(val2):
            print(f"a={a}, b={b} -> a^5*b+3={val1}, a*b^5+3={val2} are both cubes")
            found = True

if not found:
    print(f"No such (a,b) found with |a|,|b| â‰¤ {max_abs}")
```

