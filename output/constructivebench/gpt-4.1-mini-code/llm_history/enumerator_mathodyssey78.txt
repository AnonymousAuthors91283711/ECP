[write_program]
The problem defines a sequence a(n) with base conditions a(0)=0 and a(1)=1, and recurrence relations splitting even and odd indices:
- a(2n) = a(n)
- a(2n+1) = a(n) + 1

The goal is to find a(2024).

This is a well-known sequence: a(n) counts the number of 1's in the binary expansion of n (the binary weight or popcount). Since a(2n) = a(n), dividing by two removes the last bit; and a(2n+1)=a(n)+1 adds 1 due to the least significant bit being 1.

We can enumerate several values and confirm the pattern for a(n). The code will:
- Define a function a(n) implementing the relation
- Print values for n in a small range
- Print the value a(2024)

```python
# Enumerate and confirm the sequence defined by:
# a(0)=0, a(1)=1,
# a(2n)=a(n),
# a(2n+1)=a(n)+1
# It equals the popcount/number of 1s in binary of n.

def a(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n % 2 == 0:
        return a(n // 2)
    else:
        return a(n // 2) + 1

print("n, a(n) enumeration for n=0..20:")
for n in range(21):
    print(f"{n}: {a(n)}")

print("\na(2024) computation:")
print("a(2024) =", a(2024))
```
