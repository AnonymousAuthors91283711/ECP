[write_program]
The problem involves counting the fraction of length-2012 paths on a grid, with each step moving diagonally by (±1, ±1), such that the final position is a multiple of 8 in both coordinates.

To explore and conjecture on this, we can:
- Enumerate smaller n values to count valid paths.
- For each path represented as a sequence choosing one of 4 moves:
  - Update position accordingly.
  - Check divisibility by 8 at the end.
- Print ratio of valid paths to total paths for each n.

Because 4^n grows too fast, we try small n and print results immediately.

```python
# Enumerate and count paths of length n with steps (±1, ±1)
# ending at positions divisible by 8 in both coordinates.
# Print ratio valid/total for small n.

# Moves indexed by 0..3:
# 0 -> (1,1), 1 -> (1,-1), 2 -> (-1,1), 3 -> (-1,-1)
moves = [(1,1), (1,-1), (-1,1), (-1,-1)]

def count_valid_paths(n):
    from collections import Counter
    # dp[position] = count of ways to reach position after i steps
    dp = Counter()
    dp[(0,0)] = 1
    for step in range(n):
        new_dp = Counter()
        for (x,y), c in dp.items():
            for dx, dy in moves:
                nx, ny = x+dx, y+dy
                new_dp[(nx, ny)] += c
        dp = new_dp
    total = 4**n
    valid = sum(c for (x,y), c in dp.items() if x%8 == 0 and y%8 == 0)
    print(f"n={n}: valid_paths={valid}, total_paths={total}, ratio={valid/total:.6f}")

def main():
    for n in range(0,13):  # Up to 12 steps, to limit runtime
        count_valid_paths(n)

if __name__ == "__main__":
    main()
```
