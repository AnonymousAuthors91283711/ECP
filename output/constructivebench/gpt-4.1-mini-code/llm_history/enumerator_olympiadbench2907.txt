[write_program]
The problem models a journey with alternating "up" and "down" phases, each with given times and speeds. For \( T = 10 \), the program enumerates the total distance traveled in \( T \times 60 \) minutes, calculating full cycles and any remaining partial cycle climb or descent.

We will:
- Fix \( T = 10 \).
- Use the given times: up_time = 80, down_time = 70 (seconds assumed).
- Enumerate total_distance traveled.
- Print intermediate distances during computation.

We try to confirm the exact final distance value (olympiadbench2907_answer), matching the formula:
\[
\text{distance} = \text{full_cycles} \times (T + T) + \text{remaining_climb}
\]

Here's the Python enumerator to check results precisely.

```python
# Enumerate total distance traveled for fixed T=10 in a cyclic up/down journey.
def main():
    T = 10.0
    up_time = 80.0
    down_time = 70.0
    cycle_time = up_time + down_time
    total_time = T * 60  # total time = 600 minutes (or seconds?), use consistent units
    
    # Interpret units as minutes to be consistent:
    # If times are seconds, convert T*60 to seconds (T=10 min, so 600 seconds)
    total_time = T * 60  # seconds
    cycle_time = up_time + down_time  # seconds
    
    up_speed = T / up_time  # distance per second during up
    down_speed = T / down_time  # distance per second during down
    
    full_cycles = int(total_time // cycle_time)
    remaining_time = total_time - full_cycles * cycle_time
    
    # Compute remaining climb or descent distance exactly:
    if remaining_time <= up_time:
        remaining_climb = remaining_time * up_speed
    else:
        # climbed full up segment + partial down:
        remaining_climb = T + (remaining_time - up_time) * (-down_speed)
    
    total_distance = full_cycles * (T + T) + remaining_climb
    
    print(f"T={T}, up_time={up_time}, down_time={down_time}")
    print(f"full_cycles={full_cycles}, remaining_time={remaining_time:.6f}")
    print(f"up_speed={up_speed:.6f}, down_speed={down_speed:.6f}")
    print(f"remaining_climb={remaining_climb:.6f}")
    print(f"total_distance = {total_distance:.6f}")

if __name__ == "__main__":
    main()
```
