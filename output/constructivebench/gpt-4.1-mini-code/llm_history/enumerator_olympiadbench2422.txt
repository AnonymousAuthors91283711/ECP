[write_program]
The problem looks for the greatest natural number \( y \) such that there exist two perfect squares \( d \) and \( s \) with:
- \( d \) in \([1300, 1400)\),
- \( s \) in \([1400, 1500)\),
- \( y \) lies in the interval \([\max(d,s), \min(d+110, s+110)]\),
- and both \( y-d \) and \( y-s \) are perfect squares.

We want to enumerate all such \( y \) to guess the maximum \( y \).

We will:
- Enumerate perfect squares in the given ranges for \( d \) and \( s \).
- For each pair \( (d,s) \), find all \( y \) in the intersection interval.
- Check if \( y-d \) and \( y-s \) are perfect squares.
- Print each valid \( y \), and finally print the greatest found \( y \).

```python
# Enumerate candidates y satisfying conditions in the problem to conjecture the max y.

import math

def is_square(n):
    r = int(math.isqrt(n))
    return r*r == n

def squares_in_range(lo, hi):
    # Return all squares x^2 with lo <= x^2 < hi
    start = int(math.ceil(math.sqrt(lo)))
    end = int(math.floor(math.sqrt(hi - 1))) + 1
    return [x*x for x in range(start, end)]

def main():
    d_candidates = squares_in_range(1300, 1400)
    s_candidates = squares_in_range(1400, 1500)

    max_y = -1
    # For efficiency, convert s_candidates to a sorted list
    s_candidates_set = set(s_candidates)

    for d in d_candidates:
        for s in s_candidates:
            low = max(d, s)
            high = min(d + 110, s + 110)
            if low > high:
                continue
            # Check y in [low, high]
            for y in range(low, high + 1):
                yd = y - d
                ys = y - s
                if yd < 0 or ys < 0:
                    continue
                if is_square(yd) and is_square(ys):
                    print(f'y={y}, d={d}, s={s}, y-d={yd}, y-s={ys}')
                    if y > max_y:
                        max_y = y
    print('Max y found:', max_y)

if __name__ == "__main__":
    main()
```
