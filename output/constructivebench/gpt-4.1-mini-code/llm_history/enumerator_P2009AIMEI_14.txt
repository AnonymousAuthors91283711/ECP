[write_program]
The problem asks to find the minimum possible value of \(\sum_i (a_i)^2\), given:
- \(a_i \in \{1, 2, 3, 4\}\) for \(i = 1, \ldots, 350\),
- \(\sum_i a_i = 513\),
- \(\sum_i (a_i)^4 = 4745\).

We want to enumerate all possible multisets \(\{a_i\}\) satisfying these constraints and print corresponding \(\sum_i (a_i)^2\).

Because \(a_i\) takes values in a small set, it's easier to work with counts of each value. Let:
- \(x_1 = \#\{i: a_i=1\}\),
- \(x_2 = \#\{i: a_i=2\}\),
- \(x_3 = \#\{i: a_i=3\}\),
- \(x_4 = \#\{i: a_i=4\}\).

Constraints are:
1. \(x_1 + x_2 + x_3 + x_4 = 350\),
2. \(1\cdot x_1 + 2\cdot x_2 + 3\cdot x_3 + 4\cdot x_4 = 513\),
3. \(1^4 x_1 + 2^4 x_2 + 3^4 x_3 + 4^4 x_4 = 4745\).

We enumerate all integer quadruples \((x_1, x_2, x_3, x_4)\) satisfying these with nonnegative integers and print \(\sum_i (a_i)^2 = 1^2 x_1 + 2^2 x_2 + 3^2 x_3 + 4^2 x_4 = x_1 + 4 x_2 + 9 x_3 +16 x_4\).

We'll enumerate with nested loops on \(x_4, x_3, x_2\) and calculate \(x_1\) from the first constraint.

```python
# Enumerate all quadruples (x1,x2,x3,x4) of non-negative integers with x1+x2+x3+x4=350
# and sum x_i * i = 513, sum x_i * i^4 = 4745.
# Then print sum of squares sum x_i i^2 for all solutions.

def main():
    total = 350
    target_sum = 513
    target_fourth = 4745

    # We'll keep track of minimal sum of squares found
    min_squares = None

    for x4 in range(total +1):
        # Fourth powers: 4^4=256
        sum_4th_4 = 256 * x4
        if sum_4th_4 > target_fourth:
            break  # No point increasing x4 further

        for x3 in range(total - x4 +1):
            # 3^4=81
            sum_4th_43 = sum_4th_4 + 81 * x3
            if sum_4th_43 > target_fourth:
                break

            max_x2 = total - x4 - x3
            # 2^4=16
            # Calculate x1 from sum constraints:
            # sum of i = 513: x1 = 513 - 2*x2 -3*x3 -4*x4
            # sum of counts: x1 = 350 - x2 - x3 - x4

            # We can express x1 two ways:
            # From sum of counts: x1 = total - x2 - x3 - x4
            # From sum: x1 = target_sum - 2*x2 -3*x3 -4*x4
            #
            # Both must be equal:
            # total - x2 - x3 - x4 = target_sum - 2*x2 - 3*x3 - 4*x4
            # Rearranged:
            # total - x2 - x3 - x4 = target_sum - 2*x2 - 3*x3 - 4*x4
            # total - target_sum = - x2 - x3 - x4 + 2*x2 + 3*x3 + 4*x4
            # total - target_sum = x2 + 2*x3 + 3*x4

            # Thus:
            # x2 + 2*x3 + 3*x4 = total - target_sum = 350 - 513 = -163
            # Negative, impossible. So maybe better to use other logic.

            # Instead, iterate x2 and check x1:
            # sum_fourth total:
            sum_4th_43x2 = sum_4th_43
            for x2 in range(max_x2 +1):
                sum_4th = sum_4th_43 + 16 * x2
                if sum_4th > target_fourth:
                    break
                # x1 = total - x2 - x3 - x4
                x1 = total - x2 - x3 - x4
                if x1 < 0:
                    continue
                # Check sum of i
                s = 1*x1 + 2*x2 + 3*x3 + 4*x4
                if s != target_sum:
                    continue
                # Check sum of fourth power
                sum_4 = 1*x1 + 16*x2 + 81*x3 + 256*x4
                if sum_4 != target_fourth:
                    continue
                # If passed all checks print sum squares
                sum_squares = 1*x1 + 4*x2 + 9*x3 +16*x4
                print(f"x1={x1}, x2={x2}, x3={x3}, x4={x4}, sum_squares={sum_squares}")
                if (min_squares is None) or (sum_squares < min_squares):
                    min_squares = sum_squares

    if min_squares is not None:
        print(f"Minimum sum of squares is {min_squares}")

if __name__ == "__main__":
    main()
```
