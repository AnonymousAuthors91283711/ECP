[write_program]
The problem involves a natural number \( n \) such that the number of divisors of \( n \) is 60, and the number of divisors of \( 7n \) is 80. We want to find the greatest exponent \( k \) such that \( 7^k \) divides \( n \).

Key observations:
- The number of divisors function is multiplicative, and for prime powers \( p^a \), it is \( a+1 \).
- Since \( 7n \) has more divisors than \( n \), the power of 7 in \( n \) affects this increase.
- We can factor \( n = 7^k \times m \) where \( 7 \nmid m \). Then the divisor count for \( n \) is \( (k+1) \cdot d \) where \( d = \tau(m) \), and for \( 7n = 7^{k+1} m \), it is \( (k+2) \cdot d \).
- Given:
  \[
  (k+1)d = 60, \quad (k+2)d = 80
  \]
  So:
  \[
  (k+2)d - (k+1)d = d = 20 \implies d = 20
  \]
  Then:
  \[
  (k+1) \cdot 20 = 60 \implies k+1=3 \implies k=2
  \]

We can verify by enumerating possible divisor counts factoring 60 into \((k+1)*d\) and verifying the increment for \( 7n \).

The program below will enumerate candidates for \( (k+1, d) \) dividing 60, check if \((k+2)*d = 80\), then print \( k \) values.

```python
# Enumerate (k+1, d) pairs with (k+1)*d=60 and check (k+2)*d=80
def divisors(x):
    divs = set()
    for i in range(1, int(x**0.5)+1):
        if x % i == 0:
            divs.add(i)
            divs.add(x//i)
    return divs

n_divisors = 60
seven_n_divisors = 80

print(f"Number of divisors of n: {n_divisors}")
print(f"Number of divisors of 7*n: {seven_n_divisors}\n")

for k_plus_1 in divisors(n_divisors):
    d = n_divisors // k_plus_1
    if (k_plus_1 + 1) * d == seven_n_divisors:
        k = k_plus_1 - 1
        print(f"Possible k: {k} (because (k+1)*d = {k_plus_1}*{d} = {n_divisors}, (k+2)*d = {k_plus_1+1}*{d} = {seven_n_divisors})")
```
This enumerates all pairs \( (k+1,d) \) that satisfy the given constraints and prints the candidate \( k \).
