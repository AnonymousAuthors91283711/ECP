[write_program]
The problem involves Boolean functions \( c: \mathbb{Z} \to \{ \text{True, False} \} \) satisfying two conditions:

1. \( c \) is 7-periodic: \( c(n) = c(n+7) \) for all \( n \).
2. There is no integer \( k \) such that both \( c(k) = c(k+1) \) and \( c(2k) = c(k) \) hold.

We want to enumerate such functions \( c \), which are essentially Boolean 7-periodic sequences \( (c_0, ..., c_6) \), and count how many satisfy the second condition.

To explore, we enumerate all \(2^7 = 128\) possible 7-periodic Boolean sequences \( c \), and for each check if there exists a \( k \in \mathbb{Z} \) violating the condition.

Because \( c \) is 7-periodic, checking \( k \) modulo 7 suffices for the condition \( c(k) = c(k+1) \) and \( c(2k) = c(k) \).

We'll consider \(k\) modulo 7 and check for any \(k \in \{0,\ldots,6\}\) if the forbidden property exists.

The program enumerates all \(c\), tests the condition, prints each valid \(c\), and finally prints the total count.

```python
# Enumerate all 7-periodic Boolean functions c: ℤ → Bool
# c is characterized by a 7-bit tuple c[0],...,c[6]
# Condition: no k in ℤ with c(k)=c(k+1) and c(2k)=c(k)
# Since c is 7-periodic, check k in {0,...,6} modulo 7

def check_condition(c):
    # c is a list of 7 bools
    for k in range(7):
        if c[k] == c[(k+1)%7] and c[(2*k)%7] == c[k]:
            return False
    return True

def as_str(c):
    return ''.join('1' if x else '0' for x in c)

def main():
    valid_count = 0
    for num in range(128):  # 2^7
        c = [(num >> i) & 1 == 1 for i in range(7)]
        if check_condition(c):
            valid_count += 1
            print(f"Valid c: {as_str(c)}")
    print(f"Total valid sequences: {valid_count}")

if __name__ == "__main__":
    main()
```
