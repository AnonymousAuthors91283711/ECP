[write_program]
The problem is to find the smallest positive integer \(n\) such that the floor of the \(k\)-th root of \(n\) is distinct for each \(k\) in \(\{1, \ldots, 8\}\). That is, for each pair \(k \neq l\), \(\lfloor n^{1/k} \rfloor \neq \lfloor n^{1/l} \rfloor\).

We will enumerate \(n\) starting from 1 upwards and compute the 1st to 8th roots' floors, checking if all are distinct. When found, we print the candidate immediately and, at the end, the minimal such number found within a certain search limit.

We do not hardcode the answer or threshold; for demonstration, we choose a reasonable limit like \(10^6\).

```python
import math

def floors(n):
    # Compute floors of k-th roots for k=1..8
    return [math.floor(n ** (1 / k)) for k in range(1, 9)]

def distinct(lst):
    return len(set(lst)) == len(lst)

def main():
    limit = 10**6  # search limit
    found = []
    for n in range(1, limit + 1):
        fs = floors(n)
        if distinct(fs):
            print(f"n={n}, floors={fs}")
            found.append((n, fs))
            # Stop if we want the minimal, but here we enumerate all up to limit

    if found:
        min_n = min(f[0] for f in found)
        print(f"Minimum n with distinct floors for k=1..8 is {min_n}")

if __name__ == "__main__":
    main()
```
