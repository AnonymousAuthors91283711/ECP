[write_program]
The problem involves a positive integer \( T = 2069 \), computing the sum of its decimal digits \( K \), then evaluating the difference between the roots \( r \) and \( s \) of the quadratic equation \( x^2 - 18x + K = 0 \), where:

\[
r = \frac{18 + \sqrt{D}}{2}, \quad s = \frac{18 - \sqrt{D}}{2}, \quad D = 18^2 - 4K.
\]

The problem asks to evaluate \(\lvert r - s \rvert\) (the absolute difference between the roots).

This difference simplifies to

\[
\lvert r - s \rvert = \left| \frac{18 + \sqrt{D}}{2} - \frac{18 - \sqrt{D}}{2} \right| = |\sqrt{D}|
\]

(since subtracting leaves \( \sqrt{D} \)). We want to compute \( D = 324 - 4K \), then check \( |\sqrt{D}| \). Since \( K \) depends on the sum of digits of \( T \), we can investigate for a range of numbers near 2069 to see which values of \( K \) yield integer roots.

Let's write a program to:

- Compute \( K \) for \( T = 2069 \).
- Compute \( D \), its square root if it exists.
- Print the difference of roots if \( \sqrt{D} \) is integral.
- Also test some small values of \( T \) for general insights.

```python
# Program to enumerate the absolute difference of roots r and s of x^2 - 18x + K = 0,
# where K is the sum of digits of T, for T in a small range including 2069.

import math

def sum_digits(n):
    return sum(int(d) for d in str(n))

# Check for T values in a small range near 2069 to explore the pattern
for T in range(2050, 2081):
    K = sum_digits(T)
    D = 18*18 - 4*K
    # Check if discriminant is non-negative and perfect square
    if D >= 0:
        sqrt_D = int(math.isqrt(D))
        if sqrt_D * sqrt_D == D:
            diff = sqrt_D  # difference between roots = sqrt(D)
            print(f"T={T}, K={K}, D={D}, |r - s| = {diff}")
```

This program prints all cases in the range 2050 to 2080 where the discriminant is a perfect square and thus difference of roots can be exactly computed. It also prints the intermediate values for inspection.
