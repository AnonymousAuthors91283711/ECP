[write_program]
The problem asks to find the greatest natural number \( n < 10^{10} \) that is divisible by 8 and has all distinct digits. Then, we want its last three digits as the answer.

We will:
- Enumerate numbers with distinct digits divisible by 8 (checking divisibility by 8 using the last three digits).
- Start from the largest 10-digit number with distinct digits, going down.
- Print candidates as we find them.
- Finally, print the maximum found modulo 1000.

Because the range is huge (up to 10^10), we optimize by:
- Generating digit permutations directly rather than checking all numbers.
- Only consider numbers with 10 distinct digits (or fewer). For distinct digits, 10-digit numbers fully use digits 0 to 9.
- Ensure leading digit is not zero.
- Check divisibility by 8 using last three digits.

We will generate permutations of digits to form numbers and check the criteria.

```python
from itertools import permutations

def is_divisible_by_8(n):
    # Divisible by 8 if last three digits as number divisible by 8
    return int(n[-3:]) % 8 == 0

max_num = -1

# Digits 0-9 for 10-digit number
digits = '0123456789'

# To maximize number, start with permutations in descending order
# Using permutations with r=10 (all digits), leading digit != '0'
for perm in permutations(digits, 10):
    if perm[0] == '0':
        continue
    num_str = ''.join(perm)
    if is_divisible_by_8(num_str):
        num = int(num_str)
        print(f"Found candidate: {num}")
        if num > max_num:
            max_num = num

print("Maximum number found:", max_num)
if max_num != -1:
    print("Maximum number modulo 1000:", max_num % 1000)
```
This will efficiently enumerate the candidates and print the maximumâ€™s last three digits.
