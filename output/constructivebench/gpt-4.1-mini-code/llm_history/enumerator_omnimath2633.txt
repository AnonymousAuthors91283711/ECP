[write_program]
The problem is to count 8-digit numbers starting with 1, ending with digit 3, and with each subsequent digit increasing by either +1 or +2 modulo 10 from the previous digit. The digits are:

- n / 10^7 = 1 (the first digit)
- n % 10 = 3 (the last digit)
- Each digit increases by +1 or +2 mod 10 from the previous digit

We'll enumerate all such sequences digit-by-digit using backtracking and print sequences (numbers) as they are found.

```python
def digits_to_number(digs):
    return int(''.join(str(d) for d in digs))

def generate_sequences():
    # We want 8-digit numbers: d0..d7
    # d0=1, d7=3, and for each i in 0..6:
    # d[i+1] = (d[i] + 1) % 10 or (d[i] + 2) % 10
    d = [0]*8
    d[0] = 1
    # We'll recurse from i=0 to i=6 to generate d[i+1]

    results = 0

    def backtrack(i):
        nonlocal results
        if i == 7:
            if d[7] == 3:
                n = digits_to_number(d)
                print(n)
                results += 1
            return
        for diff in [1,2]:
            d[i+1] = (d[i] + diff) % 10
            backtrack(i+1)

    backtrack(0)
    print("Count:", results)

if __name__ == "__main__":
    generate_sequences()
```
