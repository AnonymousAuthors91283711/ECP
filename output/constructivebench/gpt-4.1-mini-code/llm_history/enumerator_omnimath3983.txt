[write_program]
The problem describes a recurrence on integers with parameter m>0 and a function a:ℤ→ℤ with a(1)>0, defined by 

a(n+1) = (a(n))^2 + 2^m if a(n) < 2^m, else a(n)/2,

for all n≥1.

We want to characterize the set of initial values a(1) that produce integer sequences.

We will enumerate values of m (like 1,2,3), and initial integer a1>0 (up to, say, 10·2^m), generate the sequence and check if all terms are integers (observe integer division by 2), print sequences where all a_n are in ℤ for n in some range, say 1 to 10.

```python
# Enumerate sequences for parameters m = 1..3 and initial a1 in [1..20].
# Print initial values for which the sequence remains integral for first 10 terms.
def sequence_integral(m, a1, nmax=10):
    a = a1
    vals = [a]
    for _ in range(1, nmax):
        if a < 2**m:
            a = a*a + 2**m
        else:
            # integer division: ensure divisible by 2
            if a % 2 != 0:
                return False, vals
            a = a // 2
        vals.append(a)
    return True, vals

def main():
    for m in range(1, 4):
        limit = 20
        print(f"m={m}")
        for a1 in range(1, limit+1):
            integral, seq = sequence_integral(m, a1)
            if integral:
                print(f"a1={a1}: sequence={seq}")

if __name__ == '__main__':
    main()
```
