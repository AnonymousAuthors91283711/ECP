[write_program]
The problem involves maximizing the function f(p) = (p - c) * (1 - p / u) over the interval [c, u], with parameters u > 0 and 0 ≤ c ≤ u. To assist in understanding and conjecturing about this maximum, the following Python program enumerates candidate values of p within [c, u] for some sample parameters and evaluates the function.

We print parameter values and each candidate p with its function value, focusing on exact rational candidates whenever possible (here, fractions of u and c), and then output the maximum found. This will help in conjecturing the exact formula for the maximizer p and maximum value.

```python
# Enumerate candidates for maximizing f(p) = (p - c)*(1 - p/u) on p in [c,u]
# Parameters: u > 0, 0 <= c <= u
# We try a few sample values of u and c, then check values at c, u, and critical point(s).

def f(p, c, u):
    return (p - c) * (1 - p / u)

def critical_point(u, c):
    # Derivative f'(p) = 1 - 2p/u + c/u
    # Setting derivative zero: 1 - 2p/u + c/u = 0
    # => 2p/u = 1 + c/u
    # => p = u*(1 + c/u)/2 = (u + c)/2
    return (u + c) / 2

def enumerate_max(u, c):
    print(f"Parameters: u={u}, c={c}")
    candidates = [c, u]
    cp = critical_point(u, c)
    # Include critical point only if in [c,u]
    if c <= cp <= u:
        candidates.append(cp)
    # Sort candidates
    candidates = sorted(set(candidates))
    max_val = None
    max_p = None
    for p in candidates:
        val = f(p, c, u)
        print(f"p={p:.6g}, f(p)={val:.6g}")
        if (max_val is None) or (val > max_val):
            max_val = val
            max_p = p
    print(f"Maximum value: f({max_p:.6g}) = {max_val:.6g}\n")

def main():
    sample_params = [
        (1.0, 0.0),
        (1.0, 0.5),
        (2.0, 1.0),
        (2.0, 1.5),
        (3.0, 1.0),
    ]
    for u, c in sample_params:
        # Only valid if 0 <= c <= u and u > 0
        if 0 <= c <= u and u > 0:
            enumerate_max(u, c)

if __name__ == "__main__":
    main()
```
