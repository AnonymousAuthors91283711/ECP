[write_program]
The problem asks to find all pairs of natural numbers \((S_1, S_2)\) that are squares of natural numbers \(n_1, n_2\), respectively, such that 

\[n_1^2 - n_2^2 = 1989.\]

We want to enumerate these pairs \((S_1, S_2) = (n_1^2, n_2^2)\) for small \(n_2\), since this difference must be positive and equal to 1989. By rewriting:

\[
n_1^2 - n_2^2 = (n_1 - n_2)(n_1 + n_2) = 1989.
\]

Since \(n_1 > n_2\), both \(n_1 - n_2\) and \(n_1 + n_2\) are positive integers, and their product equals 1989. From each factor pair \((d, \frac{1989}{d})\), we can find \(n_1, n_2\) by solving:

\[
n_1 = \frac{d + \frac{1989}{d}}{2}, \quad n_2 = \frac{\frac{1989}{d} - d}{2}.
\]

We check for integrality and positivity of \(n_1, n_2\).

The program enumerates all divisors \(d\) of 1989, computes these values, checks if they are natural numbers, then prints the pairs \((S_1, S_2) = (n_1^2, n_2^2)\).

```python
def divisors(n):
    # Return all positive divisors of n
    divs = []
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            divs.append(i)
            if i * i != n:
                divs.append(n // i)
    return sorted(divs)

def main():
    target = 1989
    print(f"Looking for (S1, S2) with n1^2 - n2^2 = {target}")
    divs = divisors(target)
    found = []
    for d in divs:
        q = target // d
        # (n1 - n2) = d, (n1 + n2) = q with d <= q
        if (d + q) % 2 != 0 or (q - d) % 2 != 0:
            continue  # n1, n2 not integers
        n1 = (d + q) // 2
        n2 = (q - d) // 2
        if n2 < 0 or n1 < 0:
            continue
        S1 = n1**2
        S2 = n2**2
        print(f"Found: n1={n1}, n2={n2} => (S1, S2)=({S1}, {S2})")
        found.append((S1, S2))
    if not found:
        print("No solutions found.")
    else:
        print(f"Total solutions: {len(found)}")

if __name__ == "__main__":
    main()
```
