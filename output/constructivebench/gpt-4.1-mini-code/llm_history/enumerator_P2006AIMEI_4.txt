[write_program]
This problem involves finding the number of trailing zeros of the product of factorials from 1! to 100!, then taking the result modulo 1000. The number of trailing zeros is given by the exponent of 5 in the prime factorization since there are always more factors of 2 than 5.

We want to find:
Trailing zeros of (1! * 2! * 3! * ... * 100!) = v_5( ∏_{k=1}^{100} k! ) = ∑_{k=1}^{100} v_5(k!)

Recall that v_5(k!) = sum_{i=1}^∞ floor(k / 5^i).

We can compute sum_{k=1}^100 v_5(k!) efficiently without direct large factorial computation by summing floor(k/5^i) over k and i.

We'll implement this in Python, print results of v_5(k!) for each k, and maintain a running sum, then output sum modulo 1000.

```python
# Enumerate the exponent of 5 in k! for k=1 to 100 and sum them up.

def v_5_factorial(k):
    # exponent of 5 in k!
    count = 0
    divisor = 5
    while divisor <= k:
        count += k // divisor
        divisor *= 5
    return count

total = 0
for k in range(1, 101):
    val = v_5_factorial(k)
    total += val
    print(f"v_5({k}!) = {val}")

print(f"Sum of v_5(k!) for k=1 to 100 = {total}")
print(f"Answer modulo 1000 = {total % 1000}")
```
