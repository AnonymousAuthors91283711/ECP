[write_program]
The problem conditions are:
- \( n > 0 \)
- \( n+1 \) is divisible by 210
- sum of digits base 10 of \( n \) equals twice the number of digits
- number of digits \(\leq 12\)
- parity of digit index matches parity of digit value (digits at even indices are even, odd indices digits are odd)

We want to enumerate such numbers \(n\) meeting these constraints to conjecture the solution set.

We'll try all digit lengths \(\leq 12\), generate digit sequences with alternating parity constraints, check if sum of digits = 2 * number of digits, then check if \(n+1\) divisible by 210. Print all candidates found.

```python
# Enumerate n up to 12 digits:
# d = digits count
# digits: at even pos -> even digit; odd pos -> odd digit
# sum(digits) = 2*d
# (n+1) % 210 == 0 => n+1 divisible by 2,3,5,7
# We'll build the number from digits, check constraints early to prune

def digits_to_num(digs):
    return int("".join(map(str, digs)))

def gen(d, pos=0, current_sum=0, prefix=[]):
    if pos == d:
        if current_sum == 2*d:
            n = digits_to_num(prefix)
            if n > 0 and (n+1) % 210 == 0:
                print(n)
        return
    # possible digits depending on pos parity
    if pos % 2 == 0:
        candidates = [0,2,4,6,8]
    else:
        candidates = [1,3,5,7,9]
    # For leading digit (pos=0), cannot be 0
    if pos == 0:
        candidates = [x for x in candidates if x != 0]
    # Prune by sum cannot exceed 2*d or be too small
    for c in candidates:
        new_sum = current_sum + c
        # minimal/maximum sums with remaining digits
        rem = d - pos -1
        min_sum_rem = rem  # min odd digits=1, even digits=0 for each pos, but more accurately:
        # For positions left, minimal digit per parity (0 for even pos,1 for odd pos)
        # Let's compute minimal sum for remaining positions:
        min_sum = 0
        max_sum = 0
        for i in range(pos+1, d):
            if i %2 == 0:
                min_sum += 0
                max_sum += 8
            else:
                min_sum += 1
                max_sum += 9
        total_min = new_sum + min_sum
        total_max = new_sum + max_sum
        if total_min <= 2*d <= total_max:
            gen(d, pos+1, new_sum, prefix+[c])

print("Starting enumeration:")
for length in range(1,13):
    print(f"Digits length: {length}")
    gen(length)
```

