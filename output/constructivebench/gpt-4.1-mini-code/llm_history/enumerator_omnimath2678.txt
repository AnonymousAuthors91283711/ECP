[write_program]
This problem is to find the last digit of \(5^{35} - 6^{21}\), i.e., \((5^{35} - 6^{21}) \bmod 10\).

To address this, we can enumerate powers modulo 10 and immediately output intermediate results for small bases. The last digit of \(5^n\) is always 5 for all \(n > 0\). For \(6^n\), the last digit is always 6 for all \(n > 0\). So the difference last digit is \(5 - 6 = -1 \equiv 9 \pmod{10}\).

The enumeration will confirm this pattern. The program prints immediate partial results for powers of 5 and 6 modulo 10 up to the required exponents and then prints the final difference mod 10.

```python
# Enumerate 5^35 mod 10 and 6^21 mod 10 and find (5^35 - 6^21) mod 10
def mod_exp(base, exp, mod):
    result = 1
    for e in range(1, exp + 1):
        result = (result * base) % mod
        print(f"{base}^{e} mod {mod} = {result}")
    return result

def main():
    mod = 10
    print("Computing 5^35 mod 10:")
    five_mod = mod_exp(5, 35, mod)
    print("Computing 6^21 mod 10:")
    six_mod = mod_exp(6, 21, mod)
    diff = (five_mod - six_mod) % mod
    print(f"(5^35 - 6^21) mod 10 = ({five_mod} - {six_mod}) mod {mod} = {diff}")

if __name__ == "__main__":
    main()
```
