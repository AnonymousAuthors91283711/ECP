[write_program]
The problem is about characterizing integer-valued functions \( f: \mathbb{Q} \to \mathbb{Z} \) that satisfy the functional equation
\[
f(f(x) + \frac{a}{b}) = f(-x + \frac{a}{b})
\]
for all rationals \( x \), integers \( a \), and positive integers \( b \).

To help conjecture the form of such functions, this program will enumerate candidate functions on a small finite domain (e.g. rationals with denominators and numerators bounded by small integers), check the condition, and print functions that satisfy it. Since infinitely many functions exist, we limit to piecewise constant functions defined on a finite domain.

```python
# Enumerate integer-valued functions f: Q -> Z on rationals with numerator, denominator in [-2..2], denominator>0
# Check the condition f(f(x) + a/b) == f(-x + a/b) for various small x,a,b and print candidates.

from fractions import Fraction

# Small domain of rationals
domain = [Fraction(n,d) for d in range(1,3) for n in range(-2,3)]

# Small test parameters a,b
params = [(a,b) for b in [1,2] for a in range(-2,3)]

# We only consider functions that map domain to range of integers -2..2 for tractability
range_vals = range(-2,3)

# Represent functions as dict: Fraction -> int
# Enumerate all functions that have constant value on each x (total 5 domain points)
# Since total domain 10 points and 5 possible values, 5^10 = 9,765,625 functions too large.
# We restrict further by only checking functions constant on intervals or of special form.
# Here we try constant functions and the identity function as simplest examples.

def check_condition(f):
    # For all x in domain, a,b params with b>0, check
    # f(f(x) + a/b) == f(-x + a/b)
    for x in domain:
        for a,b in params:
            px = f.get(x,0)
            val1_arg = px + Fraction(a,b)
            val2_arg = -x + Fraction(a,b)
            # Only check val1_arg and val2_arg in domain
            # We skip if out of domain for this enumeration
            if val1_arg not in f or val2_arg not in f:
                continue
            if f[val1_arg] != f[val2_arg]:
                return False
    return True

# Generate some sample functions and print those that satisfy the condition
# 1) Constant functions
for c in range_vals:
    f = {x:c for x in domain}
    if check_condition(f):
        print(f"Constant function f(x)= {c} satisfies.")

# 2) Identity on domain mapped mod 5 into range_vals (just trial)
f_id = {x:(x.numerator % 5 -2) for x in domain}
if check_condition(f_id):
    print("Identity-like function modulo 5 satisfies")
else:
    print("Identity-like function fails")

# 3) Try f(x)= -f(-x) (oddness constraint) - test f(x)=0 always or f(x)= sign(x)
def sign_frac(x):
    return -1 if x<0 else (1 if x>0 else 0)

# f(x) = 0
f0 = {x:0 for x in domain}
if check_condition(f0):
    print("Zero function satisfies.")

# f(x) = sign(x)
f_sign = {x:sign_frac(x) for x in domain}
if check_condition(f_sign):
    print("Sign function satisfies.")

# f(x) = constant multiple of floor part of x numerator over denominator
# Not enumerating all but just printing trial outputs for these samples.
```
