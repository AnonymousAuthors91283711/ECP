[write_program]
The problem is about finding the smallest natural number \( n > 10 \) such that the sum of the digits of \( n \) in base 17 equals the sum of the digits of \( n \) in base 10. The program below enumerates \( n \), computes the sum of its digits in both bases, and prints all \( n \) satisfying the condition up to a certain limit, then prints the smallest such number found.

```python
def digit_sum(n, base):
    s = 0
    while n > 0:
        s += n % base
        n //=base
    return s

def main():
    print("Searching for n > 10 with sumDigits_base17(n) == sumDigits_base10(n)...")
    limit = 10_000  # Search space limit
    found = []
    for n in range(11, limit):
        s10 = digit_sum(n,10)
        s17 = digit_sum(n,17)
        if s10 == s17:
            print(f"Found n = {n}, sumDigits(10) = {s10}, sumDigits(17) = {s17}")
            found.append(n)
    if found:
        least = min(found)
        print(f"Least such n = {least}")
    else:
        print("No matching n found up to limit.")

if __name__ == "__main__":
    main()
```
