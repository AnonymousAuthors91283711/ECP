[write_program]
The problem asks if there exist integers \(k, n\) such that \(k^3 = 3n^2 + 3n + 7\). To explore this, the program will enumerate integer values \(n\) in a small range and compute \(3n^2 + 3n + 7\), then check if it is a perfect cube by verifying if some integer \(k\) satisfies \(k^3\) equals that value. It will print every triplet \((k, n, k^3)\) found and finally report if any such pair exists in the chosen range.

```python
# Enumerate integers n in a small range and check if 3*n^2 + 3*n + 7 is a perfect cube k^3 for some integer k.
# Print each found solution immediately.

def is_perfect_cube(x):
    # Check cube roots near the rounded root since rounding errors for negatives can occur
    if x < 0:
        root = round(-(-x)**(1/3))
        return root**3 == x or (root+1)**3 == x or (root-1)**3 == x
    else:
        root = round(x**(1/3))
        return root**3 == x or (root+1)**3 == x or (root-1)**3 == x

def cube_root_int(x):
    # Return cube root integer if perfect cube, else None
    if x < 0:
        r = round(-(-x)**(1/3))
        for candidate in [r-1, r, r+1]:
            if candidate**3 == x:
                return candidate
    else:
        r = round(x**(1/3))
        for candidate in [r-1, r, r+1]:
            if candidate**3 == x:
                return candidate
    return None

def main():
    # Enumerate n from -100 to 100
    found = False
    for n in range(-100, 101):
        val = 3*n**2 + 3*n + 7
        k = cube_root_int(val)
        if k is not None:
            print(f"Found k={k}, n={n}: k^3 = {val}")
            found = True
    if not found:
        print("No integers k,n found in range with k^3 = 3n^2 + 3n + 7")

if __name__ == "__main__":
    main()
```
