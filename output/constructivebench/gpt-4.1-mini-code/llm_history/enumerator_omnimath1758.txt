[write_program]
The problem aims to find the smallest positive integer \( n \) such that every positive integer \( m \) can be represented as a sum of \( n \) integer 2015-th powers. We will enumerate values of \( n \) starting from 1, checking whether a range of positive integers (say 1 to 50) can be represented as such sums. This helps conjecture the minimal \( n \).

We will:

- For each \( n \) in a small range (1 to 5),
- Compute all possible sums of \( n \) integers raised to the 2015th power,
- Check which positive integers up to 50 can be represented,
- Print these representable integers immediately.

This will assist in determining the minimal \( n \).

```python
# Enumerate sums of n integer 2015-th powers to check representability

def powers2015(limit):
    # Since x^2015 grows fast, only small abs(x) are relevant
    # Find all integers x such that |x|^2015 <= limit
    # To be safe, consider abs(x) <= 3 (3^2015 huge but used for correctness under small sums)
    candidates = []
    abs_limit = int(limit ** (1/2015)) + 2
    for x in range(-abs_limit, abs_limit+1):
        val = x ** 2015
        # Only consider values that can contribute to sums <= limit * n (heuristic limit)
        candidates.append(val)
    return list(sorted(set(candidates)))

def representable_numbers(n, max_m):
    # Enumerate all sums of n powers from candidates, prune large sums
    candidates = powers2015(max_m)
    sums = {0}
    for _ in range(n):
        new_sums = set()
        for s in sums:
            for c in candidates:
                val = s + c
                # Limit to some range to keep computation feasible
                if 0 < val <= max_m:
                    new_sums.add(val)
        sums = new_sums
    return sums

max_check = 50  # Check only up to 50 for computational feasibility

for n in range(1, 6):
    rep = representable_numbers(n, max_check)
    print(f"n={n}, representable numbers up to {max_check}:")
    # Print sorted results
    print(sorted(rep))
```
