[write_program]
The problem is to find the least natural number \( n \) such that \( 2024 \) divides \( n! \) (factorial of \( n \)). Since 2024 factors into primes, the approach is to:

1. Factorize 2024 into its prime components.
2. For increasing \( n \), count the exponent of each prime in \( n! \) to check if all prime exponents meet or exceed those in 2024.
3. Output each \( n \) tested when the factorial contains enough prime factors, then stop.

The following program enumerates \( n \) starting from 1, calculates prime factor exponents in \( n! \), and prints when divisibility is achieved.

```python
# Enumerate least n with 2024 | n!
from math import floor

def prime_factorization(m):
    factors = {}
    d = 2
    while d * d <= m:
        while m % d == 0:
            factors[d] = factors.get(d, 0) + 1
            m //= d
        d += 1 if d == 2 else 2
    if m > 1:
        factors[m] = factors.get(m, 0) + 1
    return factors

def count_p_in_factorial(n, p):
    # Count exponent of prime p in n!
    count = 0
    power = p
    while power <= n:
        count += n // power
        power *= p
    return count

def main():
    M = 2024
    factors = prime_factorization(M)
    print(f"Prime factorization of {M}: {factors}")

    n = 1
    while True:
        # Check if n! contains enough prime factors
        if all(count_p_in_factorial(n, p) >= exp for p, exp in factors.items()):
            print(f"Found minimum n = {n} with {M} dividing {n}!")
            break
        if n % 10 == 0:  # print progress for n multiple of 10
            print(f"Checked n={n}, not enough prime factors yet.")
        n += 1

if __name__ == "__main__":
    main()
```
