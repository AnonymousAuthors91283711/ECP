[write_program]
The problem is to find pairs of natural numbers (p.1, p.2) with 0 < p.1 < p.2 such that ((2020 - p.1)/p.1) * ((2020 - p.2)/p.2) = 2. I will write a Python program to enumerate pairs (x,y) with x and y natural numbers, x<y, subject to conditions, and print those pairs that satisfy the equation exactly.

```python
# Enumerate pairs (x,y), 1 <= x < y, checking ((2020 - x)/x)*((2020 - y)/y) == 2
# Print pairs when exact equality holds
# Stop enumerating y when fraction drops below 0

def main():
    N = 2020
    for x in range(1, N):  # x < N
        val_x = (N - x) / x
        if val_x <= 0:
            break  # no valid x beyond this
        for y in range(x+1, N+1):
            val_y = (N - y) / y
            if val_y <= 0:
                break  # no valid y beyond this for this x
            prod = val_x * val_y
            # Check exact equality by cross multiplication to avoid float precision issues:
            # ((N - x)/x)*((N - y)/y) == 2
            # <=> (N - x)*(N - y) == 2 * x * y
            lhs = (N - x) * (N - y)
            rhs = 2 * x * y
            if lhs == rhs:
                print(f"x={x}, y={y} satisfy ((2020 - x)/x)*((2020 - y)/y) = 2")

if __name__ == "__main__":
    main()
```
