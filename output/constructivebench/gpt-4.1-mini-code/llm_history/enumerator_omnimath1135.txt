[write_program]
The problem counts the number of 27-cube configurations with exactly 2 "true" cubes, selecting those with exactly 4 visible cubes on the cube surface. We'll enumerate all 2-cube subsets of a 3x3x3 cube and count how many have exactly 4 visible "true" cubes (visible means on any boundary face).

We print each qualifying configuration's cube positions (the two cube indices), and finally display the total count matching conditions.

```python
# Enumerate subsets of 2 cubes in a 3x3x3 cube (27 cubes indexed 0..26),
# count how many have exactly 4 visible true cubes.
# Visible cubes lie on faces x=0 or 2, y=0 or 2, z=0 or 2.

def index_to_coords(i):
    z, r = divmod(i, 9)
    y, x = divmod(r, 3)
    return (x, y, z)

def is_visible(x, y, z):
    return x == 0 or x == 2 or y == 0 or y == 2 or z == 0 or z == 2

from itertools import combinations

cube_indices = list(range(27))
count = 0

for c1, c2 in combinations(cube_indices, 2):
    # Set config true for cubes c1, c2 only
    pos1 = index_to_coords(c1)
    pos2 = index_to_coords(c2)
    # Count visible true cubes
    visible_count = sum(is_visible(*p) for p in (pos1, pos2))
    if visible_count == 4:
        print(f"True cubes at indices {c1} and {c2} -> coords {pos1} and {pos2} with 4 visible cubes")
        count += 1

print(f"Total configurations with exactly 2 cubes and 4 visible true cubes: {count}")
```
