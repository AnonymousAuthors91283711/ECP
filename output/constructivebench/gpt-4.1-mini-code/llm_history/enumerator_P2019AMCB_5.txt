[write_program]
The problem is to find the least positive integer \( n \) such that there exist natural numbers \( r, g, b \) with:
\[
12r = 20n, \quad 14g = 20n, \quad 15b = 20n.
\]
This means \(20n\) must be divisible by 12, 14, and 15 via suitable \(r, g, b\).

Equivalently, \(20n\) must be a common multiple of \(\{12,14,15\}\), so \(20n\) is a common multiple of these numbers, and \(n\) must be a multiple of that common multiple divided by 20.

The program enumerates multiples of each number and checks if it's of the form \(20n\) for some \(n\), then collects candidates to find the least such \(n\).

```python
# To find the smallest n such that 20n is divisible by 12,14,15,
# equivalently 20n is a common multiple of {12,14,15}.
# So find lcm of (12,14,15), then n = lcm / 20.

from math import gcd

def lcm(a, b):
    return a * b // gcd(a, b)

def main():
    l = lcm(12, lcm(14, 15))  # lcm of (12,14,15)
    # Now find smallest n: 20n = l * k for some integer k >=1
    # so n = (l * k) / 20 must be integer
    # try k from 1 up to some limit
    limit = 20
    candidates = []
    for k in range(1, limit+1):
        multiple = l * k
        if multiple % 20 == 0:
            n = multiple // 20
            # check if 12*r=20*n, so r = 20*n/12 integer
            r = 20*n // 12
            g = 20*n // 14
            b = 20*n // 15
            if 12*r == 20*n and 14*g == 20*n and 15*b == 20*n:
                print(f"Found n={n} with k={k}, r={r}, g={g}, b={b}")
                candidates.append(n)
    if candidates:
        minimal_n = min(candidates)
        print(f"\nMinimum n satisfying conditions: {minimal_n}")
    else:
        print("No suitable n found up to limit.")

if __name__ == "__main__":
    main()
```
