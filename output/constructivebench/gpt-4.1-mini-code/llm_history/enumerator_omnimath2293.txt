[write_program]
The problem asks to count natural numbers n between 1 and 1,000,000 for which there exists an integer k > 1 such that k^3 divides n. In other words, counting numbers divisible by at least one cube greater than 1^3.

Approach:
- The cubes to consider are 2^3=8, 3^3=27, 4^3=64, ... up to k^3 ≤ 1,000,000.
- Use Inclusion-Exclusion principle on cubes to count how many numbers ≤ 1,000,000 are divisible by any cube >1^3.
- This is a standard counting problem of numbers divisible by cube numbers.

I will enumerate cubes up to 100 to find all cubes ≤ 1,000,000 (since 100^3=1,000,000).
Then use Inclusion-Exclusion over these cubes to count the numbers ≤1,000,000 divisible by at least one cube >1^3.

Print candidate counts from partial inclusion-exclusion steps and finally the total count.

```python
from math import gcd
from math import floor

MAX_N = 10**6

def lcm(a, b):
    return a // gcd(a,b) * b

# collect cubes of k > 1 with k^3 <= MAX_N
cubes = []
k = 2
while True:
    c = k**3
    if c > MAX_N:
        break
    cubes.append(c)
    k += 1

print(f"Cubes up to {MAX_N}:", cubes)

# Inclusion-Exclusion over the cubes list
# To limit output length, only partial inclusion-exclusion up to triples

from itertools import combinations

def count_divisible(n, divisors):
    # count numbers ≤ n divisible by lcm of divisors
    l = 1
    for d in divisors:
        l = lcm(l, d)
        if l > n:
            return 0
    return n // l

total = 0
sign = 1
max_comb_len = 3  # up to triples to keep output small

for r in range(1, max_comb_len+1):
    combs = list(combinations(cubes, r))
    s = 0
    for comb in combs:
        c = count_divisible(MAX_N, comb)
        s += c
    if sign == 1:
        print(f"Sum of counts divisible by {r}-cube intersections:", s)
    else:
        print(f"Subtract counts divisible by {r}-cube intersections:", s)
    total += sign * s
    sign *= -1

print("Count of numbers divisible by some cube > 1^3 up to 1,000,000 is approximately:", total)
```

