[write_program]
The problem asks for the count of integers \( n \) in the range \(1 \leq n \leq 100\) for which there exists an integer \( m \) such that \( m^2 = n^3 + 5n^2 \). We can rewrite the right side as \( n^2 (n + 5) \). To have \( m^2 = n^2 (n + 5) \), we need \( m = n \sqrt{n+5} \), so \( n+5 \) must be a perfect square.

The program enumerates \( n \) in the range and checks if \( n+5 \) is a perfect square (since \( n^3 + 5n^2 \) is a perfect square iff \( n+5 \) is).

```python
import math

def is_perfect_square(x):
    r = int(math.isqrt(x))
    return r*r == x

def main():
    count = 0
    for n in range(1, 101):
        val = n**3 + 5*n**2  # equivalent to n^2*(n+5)
        # To have m^2 = val, m = n * sqrt(n+5) => sqrt(n+5) must be integer
        # So check if n+5 is a perfect square
        if is_perfect_square(n + 5):
            print(f"n={n} -> m^2 = {val}, n+5={n+5} is a perfect square")
            count += 1
    print(f"Total count of such n in 1..100: {count}")

if __name__ == "__main__":
    main()
```
