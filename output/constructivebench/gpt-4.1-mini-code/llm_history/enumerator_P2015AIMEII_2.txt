[write_program]
The problem involves determining the probability a randomly chosen Latin student is a sophomore. Given ratios of students and Latin participation rates by class, the probability is a rational number. We want to express it as a reduced fraction m/n and find all pairs (m,n) summing to some value.

We can approximate total = 100 to scale counts nicely. Compute each subgroup and their Latin counts exactly, then find numerator and denominator of the probability fraction in reduced form. We enumerate possible numerator and denominator pairs that satisfy this, and print as soon as one is found. Finally, print the sum m+n.

```python
from math import gcd

def reduced_fraction(num, den):
    g = gcd(num, den)
    return num // g, den // g

def main():
    total = 100
    freshmen = 40
    sophomores = 30
    juniors = 20
    seniors = 10

    # Latin counts:
    latin_freshmen = 1.0 * freshmen    # =40
    latin_sophomores = 0.8 * sophomores  #=24
    latin_juniors = 0.5 * juniors     #=10
    latin_seniors = 0.2 * seniors     #=2

    total_latin = latin_freshmen + latin_sophomores + latin_juniors + latin_seniors  # 76

    # Probability sophomore given Latin:
    # prob = latin_sophomores / total_latin = 24 / 76

    # Scale to integers:
    # prob = 24/76 which reduces to 6/19

    num, den = reduced_fraction(int(latin_sophomores), int(total_latin))
    print(f"probability as reduced fraction: {num}/{den}")

    # Print all pairs (m,n) with m/n = num/den and m+n <= 40 for demonstration:
    # Actually, only (num,den) satisfies this exactly.
    # Print sum:
    print(f"m+n = {num + den}")

if __name__ == "__main__":
    main()
```
