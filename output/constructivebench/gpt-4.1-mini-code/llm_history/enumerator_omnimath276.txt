[write_program]
The problem concerns characterizing a subset \(X \subseteq \mathbb{Z}\) such that for every integer \(n\), the equation \(p_1 + 2 p_2 = n\) has exactly one solution \((p_1, p_2) \in X \times X\).

We want to enumerate small candidate sets \(X\), for example finite subsets of integers around 0, and check if for each integer \(n\) in some range, the equation \(p_1 + 2 p_2 = n\) has a unique solution in \(X \times X\).

The program will:
- Enumerate subsets \(X\) in a small integer range.
- For each candidate \(X\), check uniqueness of solutions for some integer range of \(n\).
- Print subsets \(X\) that yield uniqueness for all these \(n\).

This will give ideas about the structure of such sets and assist in conjecture/proof.

```python
from itertools import combinations
from collections import defaultdict

# Enumerate candidate subsets X of integers in [-3,3]
# We check uniqueness of p1+2*p2=n for n in [-6,6]
# and for p1,p2 in X
# Print all sets X with unique solutions for all n in this range

def unique_solutions(X, n_range):
    for n in n_range:
        solutions = [(p1,p2) for p1 in X for p2 in X if p1 + 2*p2 == n]
        if len(solutions) != 1:
            return False
    return True

def main():
    candidates_printed = 0
    universe = list(range(-3,4))
    n_range = list(range(-6,7))
    # Consider subsets of size at least 2 (otherwise no solutions)
    for size in range(2, 6):
        for X in combinations(universe, size):
            if unique_solutions(X, n_range):
                print(f"Candidate X = {X}")
                candidates_printed += 1
            if candidates_printed >= 8:  # Limit output length
                break
        if candidates_printed >= 8:
            break

if __name__ == "__main__":
    main()
```
