[write_program]
The problem asks to find the least natural number \( n > 10 \) such that the last digit of \( 2^n + n^2 \) equals the last digit of \( 2^{10} + 10^2 \). We will enumerate values of \( n > 10 \), compute the last digit condition, and print candidates up to a threshold, then output the minimum found.

```python
# Enumerate n > 10, compare last digit of 2^n + n^2 to last digit of 2^10 + 10^2
def last_digit(x):
    return x % 10

target = last_digit(pow(2, 10, 10) + 10**2)
print(f"Target last digit: {target}")

candidates = []
for n in range(11, 101):
    val = (pow(2, n, 10) + n*n) % 10
    if val == target:
        print(f"Candidate n = {n} with last digit = {val}")
        candidates.append(n)
if candidates:
    print(f"Minimal candidate: {min(candidates)}")
else:
    print("No candidate found up to 100")
```
