[write_program]
The problem naturally involves enumerating 24th roots of unity and counting how many have purely real 6th powers (imaginary part zero). We can generate all 24th roots of unity, raise each to the 6th power, then check if the imaginary part is zero (within floating point tolerance). We print intermediate results to conjecture the answer.

```python
import cmath

def is_im_zero(z, tol=1e-14):
    return abs(z.imag) < tol

def main():
    # 24th roots of unity: z = exp(2πi k / 24) for k=0..23
    n = 24
    count = 0
    print(f"Enumerating 24th roots of unity and those with (z^6).imag = 0")
    for k in range(n):
        z = cmath.exp(2j * cmath.pi * k / n)
        z6 = z**6
        if is_im_zero(z6):
            count += 1
            # print exact root index and its z^6 value
            print(f"k={k}: z=exp(2πi*{k}/24), (z^6)={z6.real}+{z6.imag}i (imag=0)")
        else:
            # Also print some examples not satisfying to partially verify
            if k in {1, 5, 7}:
                print(f"k={k}: (z^6) imag={z6.imag:.3f} ≠ 0")
    print(f"Total count with (z^6).imag=0: {count}")

if __name__ == "__main__":
    main()
```
