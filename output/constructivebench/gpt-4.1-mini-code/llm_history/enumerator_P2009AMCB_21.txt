[write_program]
The problem asks for the count of injective functions \( f: \{0,\dots,9\} \to \{0,\dots,9\} \) such that for each \( i \), \( f(i) \in \{i-1, i, i+1\} \) (within bounds), and \( f \) is injective. We enumerate these functions by backtracking over all possible choices for each index \( i \), respecting the adjacency and injectivity constraints.

```python
def enumerate_injective_adjacent(n=10):
    # For each i in 0..n-1, f(i) ∈ {i-1, i, i+1} ∩ [0, n-1]
    answers = 0
    used = [False]*n
    f = [-1]*n

    def backtrack(i=0):
        nonlocal answers
        if i == n:
            answers += 1
            print(f"Found answer #{answers}: {f}")
            return
        for v in (i-1, i, i+1):
            if 0 <= v < n and not used[v]:
                f[i] = v
                used[v] = True
                backtrack(i+1)
                used[v] = False
                f[i] = -1

    print(f"Enumerating injective functions from Fin({n}) to Fin({n}) with f(i) in {{i-1,i,i+1}}:")
    backtrack()
    print(f"Total: {answers}")

if __name__ == "__main__":
    enumerate_injective_adjacent()
```
This will print each valid injection immediately, then print the total count. The size \( n=10 \) is manageable with backtracking and pruning.
