[write_program]
The problem provides two quadratic equations that share a common root, and defines a set of real values r for which this happens. It identifies two possible values r = -5 and r = -14/3, and their sum is expressed as a rational number a/b with a and b coprime natural numbers. The task is to find 100*a + b.

To assist, we enumerate rational candidates for the two values and their sums, printing fractions in simplest terms, and then print 100*a + b for each candidate sum found. We'll compute the condition for shared roots explicitly and verify the sums.

```python
from fractions import Fraction
from math import gcd, isclose

# Quadratic coefficients depending on r
def common_root_condition(r):
    # Quadratics: x² + (r -1)x + 6 = 0 and x² + (2r +1)x + 22 = 0
    # If common root x exists, then substituting x into both gives zero.
    # For common root, resultant of the two quadratics is zero.
    a1, b1, c1 = 1, r - 1, 6
    a2, b2, c2 = 1, 2*r + 1, 22
    # The common root condition is that the resultant of the two polynomials is 0:
    # Res = a1^2*c2^2 - 2*a1*b1*b2*c2 + b1^2*b2^2 - 4*a1*c1*c2*a2 + 4*c1*b2^2 - 4*c2*b1*c1 = 0
    # For quadratics, resultant = a1^2*c2^2 - a1*b1*b2*c2 + b1^2*c2*a2 - 4*a1*c1*c2*a2 + 4*c1*b2^2 - 4*c2*b1*c1
    # We use sympy-like resultant but here simpler is to find the determinant of their Sylvester matrix
    # Or just solve for roots and see if an intersection exists
    # Instead, find the GCD of the two quadratics and check if degree of gcd > 0

    # To avoid symbolic manipulation, solve roots of first and check if also root of second
    # Roots of first:
    disc1 = (r - 1)**2 - 24
    if disc1 < 0:
        return False
    sqrt_disc1 = disc1**0.5
    x1 = (-(r - 1) + sqrt_disc1) / 2
    x2 = (-(r - 1) - sqrt_disc1) / 2
    # Check if either root is root of second quadratic:
    def val2(x):
        return x**2 + (2*r + 1)*x + 22
    tol = 1e-12
    return abs(val2(x1)) < tol or abs(val2(x2)) < tol

# Since problem gives two candidate r values, verify them and find sum as fraction
candidates = [-5, -14/3]
print("Candidate r values and their fractions:")
for r in candidates:
    f = Fraction(r).limit_denominator(1000)
    print(f"r = {r} as fraction {f}")

sum_r = sum(candidates)
f_sum = Fraction(sum_r).limit_denominator(1000)
a, b = f_sum.numerator, f_sum.denominator
g = gcd(a, b)
a //= g
b //= g
print(f"Sum r = {sum_r}, fraction {a}/{b}")
print(f"100 * a + b = {100 * a + b}")
```
