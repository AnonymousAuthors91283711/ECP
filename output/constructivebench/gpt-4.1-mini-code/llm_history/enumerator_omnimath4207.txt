[write_program]
The problem involves finding a set of `n` natural numbers within `[1, M]` such that all pairwise sums are distinct (i.e., no two pairs sum to the same value). For `n = 100` and `M = 25000`, the problem statement sets these as parameters. It wants to confirm the finiteness, cardinality, and distinct sum property. To explore such sets, let's enumerate possible subsets from smaller sample sizes (e.g., n=4,5) and check the unique pairs sum property, then print candidates for these parameters.

```python
# Enumerate subsets of [1,M] of size n with unique pair sums (no repeated sums for any pairs)
# To keep computations feasible, we try small n and smaller M as samples.

from itertools import combinations

def pairwise_sums_unique(S):
    sums = set()
    for x, y in combinations(S, 2):
        s = x + y
        if s in sums:
            return False
        sums.add(s)
    return True

# Sample parameters: smaller n and M for enumeration
samples = [(4, 10), (5, 20), (6, 30)]

for n, M in samples:
    print(f"Checking n = {n}, M = {M}")
    # Generate all subsets of size n in [1..M]
    # To maximize speed, generate combinations and check uniqueness of pair sums
    count = 0
    for subset in combinations(range(1, M + 1), n):
        if pairwise_sums_unique(subset):
            print("Unique pair sums set found:", subset)
            count += 1
        if count >= 5:  # limit output to first 5 findings per sample
            break
```

