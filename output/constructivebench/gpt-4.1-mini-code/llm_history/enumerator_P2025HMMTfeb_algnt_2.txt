[write_program]
The problem is to find all 4-digit numbers \( n = 1000a + 100b + 10c + d \) with \( 1000 \leq n \leq 9999 \), \( a \neq 0 \), such that

\[
\sqrt{n} = a \cdot \sqrt{100b + 10c + d}
\]

where \( a, b, c, d \) are digits. We want to enumerate candidates \( n \) that satisfy this exactly.

Rearranging the equation:

\[
\sqrt{1000a + 100b + 10c + d} = a \sqrt{100b + 10c + d} \implies
1000a + 100b + 10c + d = a^2 (100b + 10c + d)
\]

Substituting \( k = 100b + 10c + d \):

\[
1000a + k = a^2 k \implies 1000 a = (a^2 - 1) k \implies k = \frac{1000 a}{a^2 - 1}
\]

Since \( k \) must be an integer in [0,999], \( a \) is from 1 to 9 and \( b, c, d \) are digits forming \( k \).

We will enumerate \( a \) from 1 to 9, check if \( k \) is integer and a 3-digit or less number, then output the 4-digit number \( n = 1000 a + k \).

```python
# enumerate 4-digit numbers n=1000a+k with a from 1 to 9, k=100b+10c+d
# satisfying sqrt(n) = a * sqrt(k) exactly
# equivalently: k = 1000*a/(a^2 - 1) integer and in [0,999]
def main():
    for a in range(1, 10):
        denom = a * a - 1
        if denom == 0:
            continue  # avoid division by zero when a=1
        if (1000 * a) % denom == 0:
            k = (1000 * a) // denom
            if 0 <= k <= 999:  # k is a valid 3-digit or less number
                n = 1000 * a + k
                # digits b,c,d from k can be inferred but unnecessary to print
                print(f"a={a}, k={k}, n={n}")

if __name__ == "__main__":
    main()
```
This enumerates all possible candidates satisfying the condition exactly.
