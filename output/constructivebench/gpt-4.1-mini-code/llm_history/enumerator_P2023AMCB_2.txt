[write_program]
The problem asks for the greatest real number \( p \) such that \( 0 < p \) and 
\[
(p \times (1 - 0.2)) \times (1 + 0.075) \leq 43.
\]
Rewrite and simplify:
\[
p \times 0.8 \times 1.075 \leq 43 \implies p \leq \frac{43}{0.8 \times 1.075}.
\]

The Python program will compute and print the exact fraction value, the decimal approximation, and confirm the candidates near the bound. This will help conjecture the unique supremum.

```python
# Enumerate candidate p values satisfying 0 < p and p * 0.8 * 1.075 <= 43
# We print the exact fraction and approximate values

def main():
    factor = 0.8 * 1.075  # 0.86
    bound = 43 / factor
    print(f"Computed upper bound for p: 43 / (0.8 * 1.075) = {bound} (approx)")

    # Enumerate values of p approaching bound from below
    # Use fractions with denominator 1000 for demonstration
    from fractions import Fraction

    frac_bound = Fraction(43, 1) / Fraction(86, 100)  # since 0.8*1.075=0.86
    print(f"Exact fractional bound for p: {frac_bound} = {float(frac_bound)}")

    print("\nEnumerating candidate p values (fractions):")
    for denom in [1, 2, 4, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000]:
        numer = int(frac_bound * denom)
        candidate = Fraction(numer, denom)
        val = float(candidate)
        product = val * factor
        if 0 < val <= bound and product <= 43:
            print(f"p = {candidate} ≈ {val:.6f}, p*0.8*1.075 = {product:.6f} ≤ 43")
        # Also test candidate + 1/denom to see if exceeds bound
        candidate_next = Fraction(numer + 1, denom)
        val_next = float(candidate_next)
        product_next = val_next * factor
        if val_next > bound:
            print(f"p = {candidate_next} ≈ {val_next:.6f} (exceeds bound)")
            break

    print(f"\n=> Greatest p satisfying constraints is {frac_bound} ≈ {float(frac_bound):.6f}")

if __name__ == "__main__":
    main()
```
