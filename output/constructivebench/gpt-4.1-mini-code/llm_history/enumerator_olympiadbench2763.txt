[write_program]
The problem investigates natural numbers \( n \) such that the product of the digits of \( n+23 \) equals the product of the digits of \( n \) plus 23. We want to find the smallest such \( n \).

The program enumerates \( n \) from 1 upwards, computes products of digits for \( n \) and \( n+23 \), checks the condition, and prints qualifying \( n \) values immediately (streaming). To control output length, it stops after finding some candidates and highlights the minimal \( n \).

```python
def prod_digits(x):
    p = 1
    while x > 0:
        d = x % 10
        if d == 0:
            return 0  # product zero if any digit zero
        p *= d
        x //=10
    return p

threshold = 10**6  # upper limit for search
found = []

for n in range(1, threshold):
    p_n = prod_digits(n)
    p_n23 = prod_digits(n + 23)
    if p_n23 == p_n + 23:
        print("Found n =", n, "with P(n) =", p_n, "and P(n+23) =", p_n23)
        found.append(n)
        if len(found) >= 5:
            break

if found:
    min_n = min(found)
    print("Minimal n satisfying condition is", min_n)
else:
    print("No solution found up to", threshold)
```
