[write_program]
The problem asks for the least integer \( k \) such that there exist coprime natural numbers \( m, n \) with \( k = m + n \) and the ratio \(\frac{m}{n}\) equal to the simplified rational expression:

\[
\frac{26^3 \cdot 10 + 10^3 \cdot 26 - 26 \cdot 10}{26^3 \cdot 10^3}.
\]

We want to enumerate all coprime pairs \((m, n)\) for this ratio or its multiples (to find integers \(m, n\) in lowest terms), compute their sums \(m+n\), and identify the smallest such sum \(k\).

Plan:
- Calculate the rational number \(\frac{A}{B}\).
- Reduce \(\frac{A}{B}\) to lowest terms.
- Because \(m/n = A/B\), any pair \((m, n) = (A\cdot t, B \cdot t)\) for some natural \( t \) satisfies the ratio.
- Find the smallest \(t\) such that \(\gcd(m, n)=1\). But if \((A,B)\) are already coprime, then \(t=1\) suffices.
- Output \(m, n, k = m + n\).

Since \(m, n\) are natural numbers, start with \(t=1\).

```python
# Program to enumerate candidate (m,n) pairs for given ratio and find minimal sum k=m+n with gcd(m,n)=1

from math import gcd

def RationalNum():
    # Compute numerator and denominator as per problem expression
    # numerator = 26^3 * 10 + 10^3 * 26 - 26 * 10
    # denominator = 26^3 * 10^3
    pow_26_3 = 26**3
    pow_10_3 = 10**3
    numerator = pow_26_3 * 10 + pow_10_3 * 26 - 26 * 10
    denominator = pow_26_3 * pow_10_3
    return numerator, denominator

def reduce_fraction(n, d):
    g = gcd(n, d)
    return n // g, d // g

def main():
    n, d = RationalNum()
    print(f"Original fraction: {n}/{d}")
    n_red, d_red = reduce_fraction(n, d)
    print(f"Reduced fraction: {n_red}/{d_red}")
    # Since m/n = n_red/d_red, m = n_red * t, n = d_red * t, and gcd(m,n) = t * gcd(n_red,d_red) = t*1
    # So gcd(m,n) = t. For coprime, t must be 1.
    # So minimal coprime pair is (n_red, d_red) and sum n_red + d_red
    k = n_red + d_red
    print(f"Candidate pair: m={n_red}, n={d_red}, sum k={k}")

if __name__ == "__main__":
    main()
```

