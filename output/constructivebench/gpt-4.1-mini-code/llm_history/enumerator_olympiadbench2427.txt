[write_program]
The problem involves finding all pairs \((a,b)\) of real numbers satisfying the system:
\[
\sqrt{a} + \sqrt{b} = 8, \quad \log_{10} a + \log_{10} b = 2.
\]
Rearranging, we get \( \log_{10}(ab) = 2 \), so \( ab = 10^2 = 100 \).

We want to enumerate all positive real pairs \( (a,b) \) such that:
\[
\sqrt{a} + \sqrt{b} = 8, \quad ab = 100.
\]

Setting \(x = \sqrt{a}\) and \(y = \sqrt{b}\), then:
\[
x + y = 8, \quad (xy)^2 = 100 \implies xy = 10.
\]
We seek real positive \(x,y\) with \(x+y=8\) and \(xy=10\).

Let's enumerate possible \(x,y\) values from the quadratic \( t^2 - 8t + 10 = 0 \).

The program will:
- Print candidate pairs \((x^2,y^2)\) where \(x,y\) solve the system.
- Also verify numerically for small perturbations if exact roots are found.

```python
import math

# The constraints:
# x = sqrt(a), y = sqrt(b)
# x + y = 8
# x * y = 10
# a = x^2, b = y^2
# ab = 100

def solve_quadratic(a, b, c):
    delta = b*b - 4*a*c
    if delta < 0:
        return []
    sqrt_delta = math.sqrt(delta)
    return [(-b + sqrt_delta) / (2*a), (-b - sqrt_delta) / (2*a)]

def main():
    # Coefficients for x: t^2 - 8t + 10 = 0
    roots = solve_quadratic(1, -8, 10)
    for x in roots:
        if x <= 0:
            continue
        y = 8 - x
        if y <= 0:
            continue
        a = x*x
        b = y*y
        # Check product and sum within tolerance
        prod = a*b
        sum_sqrt = x + y
        if abs(prod - 100) < 1e-9 and abs(sum_sqrt - 8) < 1e-9:
            print(f"(a, b) = ({a}, {b})")
    # Explicitly print extremal answer by symmetry
    # Since (a,b) and (b,a) both satisfy, print both
            print(f"(a, b) = ({b}, {a})")

if __name__ == "__main__":
    main()
```
