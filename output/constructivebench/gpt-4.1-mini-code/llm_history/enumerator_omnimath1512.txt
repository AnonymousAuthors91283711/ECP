[write_program]
This problem involves finding digits \(A, B, C, D\) with \(A, B, C, D \in \mathbb{N}\), \(0 < D < C < B < A < 10\), such that:

\[
(A \times 1000 + B \times 100 + C \times 10 + D) - (D \times 1000 + C \times 100 + B \times 10 + A) = (B \times 1000 + D \times 100 + A \times 10 + C)
\]

and

\[
B + C + D = \text{some constant value}.
\]

We want to test all \(A\) from 1 to 9, and all decreasing triples \(B,C,D\) with \(A > B > C > D > 0\) to find tuples satisfying the above equation, then print each such triple along with \(A\) and their sum \(B+C+D\).

```python
# Enumerate digits A,B,C,D satisfying conditions and given equation
# Print all solutions as we find them with relevant details

def solve():
    for A in range(1, 10):
        for B in range(1, A):
            for C in range(1, B):
                for D in range(1, C):
                    # Left number minus right number
                    left_num = A*1000 + B*100 + C*10 + D
                    right_num = D*1000 + C*100 + B*10 + A
                    diff = left_num - right_num
                    # Middle number
                    mid_num = B*1000 + D*100 + A*10 + C
                    if diff == mid_num:
                        s = B + C + D
                        print(f"A={A}, B={B}, C={C}, D={D}, B+C+D={s}")

if __name__ == "__main__":
    solve()
```

