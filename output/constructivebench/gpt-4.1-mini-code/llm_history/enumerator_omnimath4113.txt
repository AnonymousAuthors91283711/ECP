[write_program]
The problem is to find the greatest lower bound of the set of rational numbers k of the form k = 3 - m/n, where m and n are positive integers with m ≤ 2000, and k > 0.

We want to enumerate possible values of k = 3 - m/n > 0, with m in [1..2000], n in [1..N], for some reasonable range of n, and print these values to observe the minimal positive values.

Since k > 0 ⇒ 3 > m/n ⇒ n > m/3, so for each m, n can start from floor(m/3)+1.

We can, for example, try n in [1..4000] to limit the search, and print all k values found.

We'll print exact fractions and also track the minimal positive k seen.

Here's a Python program that enumerates such k values, prints them as fractions and floating points, and finally prints the minimum positive k found.

```python
from fractions import Fraction

max_m = 2000
max_n = 4000  # limit for n to avoid too long runtime
min_k = None

for m in range(1, max_m + 1):
    start_n = m // 3 + 1  # n must be > m/3 for k>0
    if start_n > max_n:
        continue  # no valid n in range
    for n in range(start_n, max_n + 1):
        k = Fraction(3) - Fraction(m, n)
        if k > 0:
            print(f"k=3 - {m}/{n} = {k} ≈ {float(k):.6f}")
            if (min_k is None) or (k < min_k):
                min_k = k
        else:
            # For larger n, k decreases, so no need to continue for this m
            break

print("\nMinimal positive k found:")
print(f"{min_k} ≈ {float(min_k):.10f}")
```

This will enumerate many possible k values, printing them as they are found, and finally print the minimal positive value. This helps conjecture the infimum (least element) of the set.
