[write_program]
We want to find all three-digit natural numbers \( n \) such that the tens digit of \( n \) equals the average of the hundreds and units digits. More explicitly, for \( n = 100a + 10b + c \) with digits \( a, b, c \), and \( a \neq 0 \), we want \( b = \frac{a + c}{2} \).

To solve this, we enumerate all \( n \) from 100 to 999, extract digits, check the condition (ensuring the average is an integer equal to the tens digit), and print each matching number immediately.

```python
# Enumerate three-digit numbers n = 100a + 10b + c where a,b,c are digits.
# Condition: b = (a + c) / 2 and b is integer.

for n in range(100, 1000):
    a = n // 100      # hundreds digit
    b = (n // 10) % 10  # tens digit
    c = n % 10        # units digit
    if (a + c) % 2 == 0:  # average is integer
        avg = (a + c) // 2
        if b == avg:
            print(n)
```
