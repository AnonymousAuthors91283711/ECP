[write_program]
The problem is to find all triples of positive integers \((a, b, p)\) where \(p\) is prime, satisfying \(a^p = b! + p\). We'll enumerate small primes \(p\), and for each, try small values of \(b\) calculating \(b!\) and check if \(b! + p\) is a perfect \(p\)th power. When found, print the triple.

```python
from math import factorial, isclose

def is_perfect_power(n, p):
    # Check if n is a perfect p-th power
    # Use integer root by binary search for precision
    low, high = 1, n
    while low <= high:
        mid = (low + high) // 2
        val = mid ** p
        if val == n:
            return mid
        elif val < n:
            low = mid + 1
        else:
            high = mid - 1
    return None

def primes_up_to(n):
    sieve = [True] * (n+1)
    sieve[0:2] = [False, False]
    for i in range(2, int(n**0.5)+1):
        if sieve[i]:
            for j in range(i*i, n+1, i):
                sieve[j] = False
    return [p for p in range(2, n+1) if sieve[p]]

def main():
    max_p = 19  # check primes up to 19 for efficiency
    ps = primes_up_to(max_p)
    print("Checking primes p in:", ps)
    max_b = 20  # try b up to 20, factorial grows fast
    for p in ps:
        for b in range(1, max_b+1):
            val = factorial(b) + p
            a = is_perfect_power(val, p)
            if a is not None and a > 0:
                print(f"Found: a={a}, b={b}, p={p} with a^p = {a}^{p} = {val} = {b}! + {p}")

if __name__ == "__main__":
    main()
```
