[write_program]
The problem is to find the smallest natural number \(n\) such that \(1000 < n < 2000\) and \(n \equiv 1 \pmod{k}\) for all \(k \in \{2, 3, 4, 5, 6, 7, 8\}\).

We can interpret the condition \(n \equiv 1 \pmod{k}\) as saying \(n-1\) is divisible by all \(k\) in the set, so \(n-1\) is divisible by the least common multiple (LCM) of \(\{2,3,4,5,6,7,8\}\).

The task boils down to:
- Compute \(\mathrm{lcm}(2,3,4,5,6,7,8)\).
- Find integers \(n\) with \(1000 < n < 2000\) and \(n-1\) divisible by this LCM.
- Print each such \(n\) immediately.
- Then, print the smallest such \(n\).

This program enumerates these possible values respecting the requirements.

```python
# Find numbers n in (1000,2000) with n % k == 1 for k in 2..8
from math import gcd

def lcm(a, b):
    return a * b // gcd(a, b)

def lcm_list(nums):
    current = 1
    for num in nums:
        current = lcm(current, num)
    return current

def main():
    divisors = [2,3,4,5,6,7,8]
    L = lcm_list(divisors)
    print(f"LCM of {divisors} is {L}")
    # n % k ==1 => (n-1) divisible by L
    start = (1000 // L)*L + 1
    # ensure start > 1000
    if start <= 1000:
        start += L
    candidates = []
    for n in range(start, 2000, L):
        # Confirm all conditions (redundant but safe)
        if all(n % k == 1 for k in divisors):
            print(n)
            candidates.append(n)
    if candidates:
        print("Smallest such n:", min(candidates))

if __name__ == "__main__":
    main()
```
