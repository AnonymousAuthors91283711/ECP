[write_program]
The problem describes a polynomial \( P \) of degree \( n \) such that for each integer \( k \) in \( [0, n] \), \( P(k) = \frac{k}{k+1} \). We want to explore \( P(n+1) \) for various \( n \).

To assist, I'll write a Python program that:
- For each small \( n \) (e.g., 1 to 10),
- Constructs the unique interpolating polynomial \( P \) through points \((0,0), (1, \frac{1}{2}), \ldots, (n, \frac{n}{n+1})\),
- Evaluates \( P(n+1) \),
- Prints the exact simplified fraction value.

This helps conjecture a closed form for the answer \( \text{omnimath277\_answer}(n) = P(n+1) \).

```python
from sympy import symbols, Rational, simplify, Matrix

def lagrange_interpolation(x_values, y_values, x):
    n = len(x_values)
    total = Rational(0)
    for i in range(n):
        xi, yi = x_values[i], y_values[i]
        term_num = Rational(1)
        term_den = Rational(1)
        for j in range(n):
            if j != i:
                xj = x_values[j]
                term_num *= (x - xj)
                term_den *= (xi - xj)
        total += yi * term_num / term_den
    return simplify(total)

def main():
    x = symbols('x')
    print("n | P(n+1)")
    for n in range(1, 11):
        xs = [Rational(k) for k in range(n+1)]
        ys = [Rational(k, k+1) if k != 0 else Rational(0) for k in range(n+1)]
        val = lagrange_interpolation(xs, ys, n+1)
        print(f"{n} | {val}")

if __name__ == "__main__":
    main()
```
