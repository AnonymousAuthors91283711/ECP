[write_program]
The problem involves finding all positive integers \( n \) such that \(\varphi(2019 \cdot n) = \varphi(n^2)\), where \(\varphi\) is Euler's totient function. Since \(2019 = 3 \times 673\), both primes, the totient can be expressed in terms of prime factorization. I'll write a Python program to enumerate positive integers \( n \) up to some limit, compute both totients, and print values of \( n \) satisfying the equality.

```python
from math import gcd

def prime_factors(n):
    i = 2
    factors = {}
    while i * i <= n:
        while n % i == 0:
            factors[i] = factors.get(i, 0) + 1
            n //= i
        i += 1
    if n > 1:
        factors[n] = factors.get(n, 0) + 1
    return factors

def totient(n):
    factors = prime_factors(n)
    result = n
    for p in factors:
        result -= result // p
    return result

# 2019 = 3 * 673
M = 2019

print("Enumerating n with 1 <= n <= 200:")
for n in range(1, 201):
    t_left = totient(M * n)
    t_right = totient(n * n)
    if t_left == t_right:
        print("n =", n, "totient(2019*n) =", t_left, "totient(n^2) =", t_right)

# After enumeration, print minimal such n if any found
# The largest enumerated is 200, so minimum printed will be minimal among above
```
