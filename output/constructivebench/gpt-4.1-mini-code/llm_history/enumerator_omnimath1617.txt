[write_program]
The problem appears to investigate natural numbers \( n \geq 2 \) such that the sum of their divisors divided by the largest prime factor equals \( n \) itself. We will enumerate all such numbers \( n \) up to some small bound (like 300) and print those satisfying:

\[
\frac{\sum_{d|n} d}{\max\{\text{prime factors of } n\}} = n
\]

This can be rearranged as:

\[
\sum_{d|n} d = n \times \max(\text{prime factors of } n)
\]

We'll compute prime factors efficiently, sum of divisors, and test the relation for each \( n \). Printed results can help conjecture what the set is.

```python
from math import sqrt

def prime_factors(n):
    # Returns sorted list of distinct prime factors of n
    factors = []
    x = n
    for i in range(2, int(sqrt(x)) + 1):
        if x % i == 0:
            factors.append(i)
            while x % i == 0:
                x //= i
    if x > 1:
        factors.append(x)
    return sorted(set(factors))

def divisors(n):
    # Returns all divisors of n
    divs = set()
    for i in range(1, int(sqrt(n)) + 1):
        if n % i == 0:
            divs.add(i)
            divs.add(n // i)
    return divs

def threshold():
    return 300

print("Enumerating n with n≥2 and sum(divisors(n)) / max_prime_factor(n) = n")
limit = threshold()
for n in range(2, limit + 1):
    pf = prime_factors(n)
    if not pf:
        continue
    max_pf = max(pf)
    sdiv = sum(divisors(n))
    # Check exact equality without floating point
    if sdiv == n * max_pf:
        print(f"n={n}, sum divisors={sdiv}, max prime factor={max_pf}, sum/max_pf = {sdiv}/{max_pf} = {n}")

print("\nAll such n ≤ {} have been enumerated.".format(limit))
```
