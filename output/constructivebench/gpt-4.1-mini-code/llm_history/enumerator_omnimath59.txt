[write_program]
This problem asks for the number of functions \( x : \{0,\dots,99\} \to \mathbb{Z} \) with values in \([1,2017]\) such that both the sum and the sum of squares are divisible by 2017.

We will try small sample sizes and moduli to understand behavior, enumerating all functions \( x \) in the smaller setting that satisfy:

- \( x_i \in [1, m] \)
- \( m \mid \sum x_i \)
- \( m \mid \sum x_i^2 \)

Print all candidates and report their count. This may lead to conjectures about the real answer.

```python
# Enumerate sequences x of length n with x[i] in [1,m], 
# such that m divides sum(x) and sum(x^2).

n = 3  # smaller length for computational feasibility
m = 5  # smaller modulus
from itertools import product

print(f"Parameters: n={n}, m={m}")

valid_count = 0
for x in product(range(1, m+1), repeat=n):
    s = sum(x)
    s2 = sum(v*v for v in x)
    if s % m == 0 and s2 % m == 0:
        print("Valid x:", x, "sum mod m =", s % m, "sum sq mod m =", s2 % m)
        valid_count += 1

print("Total valid sequences:", valid_count)

# Try varying n for fixed m=5
for n2 in range(1, 6):
    valid_count = 0
    for x in product(range(1,m+1), repeat=n2):
        s = sum(x)
        s2 = sum(v*v for v in x)
        if s % m == 0 and s2 % m == 0:
            valid_count += 1
    print(f"For n={n2}, m={m}, valid sequences = {valid_count}")
```

