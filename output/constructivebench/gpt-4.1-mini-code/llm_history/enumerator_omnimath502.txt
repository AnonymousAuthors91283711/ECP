[write_program]
The problem involves a function θ(n) that counts numbers \( x < 2010 \) such that \( 2010 \mid x^2 - n \). We want to analyze the sum \( \sum_{n=0}^{2009} n \cdot \theta(n) \) modulo 2010.

Key observations:
- \( \theta(n) \) counts the number of \( x < 2010 \) with \( x^2 \equiv n \pmod{2010} \).
- Equivalently, \( \theta(n) \) is the number of square roots of \( n \) in \(\mathbb{Z}/2010\mathbb{Z}\).
- The problem asks for the sum over all \( n \) of \( n \times \) (number of square roots of \( n \)) modulo 2010.

We can:
- For each \( x \in [0,2010) \), compute \( r = x^2 \mod 2010 \).
- Count how many \( x \) yield each remainder \( r \) (this is \(\theta(r)\)).
- The sum \( \sum_n n \theta(n) \) can be represented as \( \sum_x x^2 \) mod 2010, since each \( x^2 \equiv n \) contributes \( n \) once for each \( x \).

Thus, the sum equals \( \sum_{x=0}^{2009} x^2 \mod 2010 \).

We enumerate the sum of squares modulo 2010 and print the result. This approach let us conjecture the answer.

```python
# Enumerate sum_{n=0}^{2009} n * θ(n) mod 2010, where θ(n) = count of x with x^2 ≡ n (mod 2010)
# Note: sum_{n} n*θ(n) = sum_{x=0}^{2009} x^2 mod 2010

MOD = 2010
N = 2010

def main():
    total = 0
    for x in range(N):
        sq = (x*x) % MOD
        total = (total + sq) % MOD
        if x % 500 == 0:  # Print partial sums every 500 steps for streaming feedback
            print(f"Sum of squares mod {MOD} up to x={x}: {total}")
    print(f"Final sum of squares mod {MOD}: {total}")

if __name__ == "__main__":
    main()
```
