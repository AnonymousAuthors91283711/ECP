[write_program]
The problem is to find the smallest natural number \( n > 2023 \) such that there exists an integer \( x \) satisfying the quadratic equation

\[
x^2 - T x - n = 0
\]

where \( T = 13 \) (given).

Rearranging, for integer \( x \):

\[
x^2 - 13x - n = 0 \implies n = x^2 - 13 x
\]

To find such \( n \), \( n \) must be positive and \( n > 2023 \).

We want the smallest \( n > 2023 \) of the form \( n = x^2 - 13 x \) with integer \( x \).

We can enumerate values of \( x \), compute \( n \) and check which \( n > 2023 \). Then print all such \( n \) and find their minimum.

Since \( x \) is an integer, and \( n = x^2 - 13x \), \( n \) is quadratic in \( x \). We can try \( x \) in a range, say from 50 to 100 (because for \( x \approx 13 \), \( n \) will be near zero; we want \( n > 2023 \)).

We'll enumerate candidates, print them, and finally print the minimal one.

```python
# Enumerate n = x^2 - 13*x for integer x, n > 2023
# Find minimal such n

def main():
    T = 13
    threshold = 2023
    candidates = []
    print(f"Enumerating n of form x^2 - {T}*x for n > {threshold}")
    # x^2 - 13 x grows approximately x^2, so start at x where x^2 - 13 x > 2023
    # Solve approximately x^2 - 13 x - 2023 = 0
    # Discriminant = 169 + 4*2023 = 169 + 8092 = 8261
    # sqrt(8261) ~ 90.9
    # x = (13 + 90.9)/2 ~ 51.95
    start = int((T + 90) // 2)
    for x in range(start, start + 50):  # Check 50 values
        n = x*x - T*x
        if n > threshold:
            print(f"x = {x}, n = {n}")
            candidates.append(n)
    if candidates:
        print(f"Minimal n > {threshold} is {min(candidates)}")

if __name__ == "__main__":
    main()
```
