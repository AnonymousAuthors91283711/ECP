[write_program]
The problem involves finding a positive real number \( d \) and \( v > 20 \) satisfying two equations relating to speeds and distances. To get insights, we enumerate rational candidates for \( d \) and \( v \) with small denominators, verify the conditions numerically, and print plausible values. Finally, we print the candidate for \( d \) with minimal difference in the key equalities. This will assist in conjecturing the correct \( d \).

```python
# Enumerate candidates for d and v to satisfy
# 180/60 = d/v and 276/60 = (d/3)/v + (2d/3)/(v-20), v>20, d>0

def main():
    from fractions import Fraction

    target1 = Fraction(180, 60)  # 3
    target2 = Fraction(276, 60)  # 4.6

    # We'll try d in range 10 to 100 (step 1) and v in range 21 to 50
    # because v > 20 and d/v = 3  => v = d/3, so v around d/3
    # So only try v near d/3

    candidates = []

    for d_num in range(10, 101):
        d = Fraction(d_num)
        v_approx = d / target1  # v = d/3

        # Try v in fractions around v_approx, with denominator <=5 to limit search
        for denom in range(1,6):
            v_num = int(v_approx * denom)
            # v candidate fractions around v_approx
            for vn in range(v_num-1, v_num+2):
                if vn <= 0:
                    continue
                v = Fraction(vn, denom)
                if v <= 20:
                    continue
                lhs = d/v
                if abs(lhs - target1) > Fraction(1,100):  # error tolerance 0.01
                    continue
                rhs = (d/3)/v + (2*d/3)/(v - 20)
                diff = abs(rhs - target2)
                if diff < Fraction(1,100):
                    # Print fractions and approximate floats
                    print(f"d={float(d):.4f} ({d}), v={float(v):.4f} ({v}), lhs={float(lhs):.4f}, rhs={float(rhs):.4f}, diff={float(diff):.6f}")
                    candidates.append((float(diff), float(d)))

    # If any candidates found, print minimal difference candidate
    if candidates:
        candidates.sort()
        best_d = candidates[0][1]
        print(f"Best candidate for d (minimal difference): {best_d:.4f}")
    else:
        print("No candidates found with given search parameters.")

if __name__ == "__main__":
    main()
```
