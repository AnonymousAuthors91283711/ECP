[write_program]
The problem involves the sum of terms \((10^k - 1)/9\) for \( k = 0 \) to \( n \). These are repunits (numbers consisting of k ones in base 10). The task is to conjecture the closed form or properties of this sum, using enumeration for small \( n \).

We will:
- Iterate \( n \) from 0 to a small max (e.g., 10).
- For each \( n \), compute sum of repunits \(\sum_{k=0}^n \frac{10^k - 1}{9}\).
- Print exact values as fractions and integers.
- Also test some simplified forms (e.g., multiplying, factoring) to see if some pattern emerges.

```python
# Enumerate sums of repunits: S(n) = sum_{k=0}^n (10^k - 1)/9
# Print exact sums for small n to help find closed form.

from fractions import Fraction

def repunit(k):
    # (10^k - 1)//9 as int if k>0 else 0 since (10^0 -1)/9 = 0
    if k == 0:
        return 0
    return (10**k - 1)//9

max_n = 10
print("n | sum (as Fraction) | sum (as int)")

for n in range(max_n + 1):
    s = Fraction(0,1)
    for k in range(n+1):
        # Repunit as Fraction to keep exact value
        term = Fraction(10**k - 1, 9)
        s += term
    print(f"{n} | {s} | {s.numerator // s.denominator}")

# Also print numerator and denominator to observe pattern:
print("\nLooking at numerator and denominator:")
for n in range(max_n+1):
    s = Fraction(sum(Fraction(10**k -1,9) for k in range(n+1)))
    print(f"n={n}: numerator={s.numerator}, denominator={s.denominator}")
```

