[write_program]
The problem appears to characterize integer-coefficient polynomials \(P \in \mathbb{Z}[X]\) for which: for all real numbers \(s, t\), if \(P(s)\) and \(P(t)\) are integers, then \(P(st)\) is also an integer. We want to enumerate possible candidates for such polynomials (elements of `omnimath4010_answer`).

A natural approach is to test polynomials of small degree and coefficients over many pairs \((s,t)\) such that \(P(s), P(t) \in \mathbb{Z}\), then check if \(P(st) \in \mathbb{Z}\).

We can:
- Enumerate polynomials with integer coefficients of degree up to 2 or 3 and small coefficients \(-2,\ldots,2\).
- For each polynomial \(P\), find some sample \(s\) and \(t\) with \(P(s), P(t)\in \mathbb{Z}\).
- Check if \(P(st)\) is always integral for those samples; try a handful of test pairs.
- Print polynomials seen to satisfy the property for all tested pairs.

This enumerates candidate polynomials, helpful for conjecturing their characterization.

```python
# enumerator.py
from sympy import symbols, Poly
from sympy import Rational
from sympy import simplify
import itertools

x = symbols('x')

def eval_poly_at(p, val):
    # Evaluate polynomial p at val (Rational or float)
    return simplify(p.eval(val))

def integer_or_close(val, tol=1e-12):
    # Check if val is integer (exact or approx)
    if val.is_Integer: return True
    try:
        f = float(val)
        return abs(f - round(f)) < tol
    except:
        return False

def test_property(p, test_values):
    # For given polynomial p and test_values (list of s,t pairs),
    # test the property: if P(s), P(t) integers => P(s*t) integer.
    for s,t in test_values:
        Ps = eval_poly_at(p, s)
        Pt = eval_poly_at(p, t)
        # Both must be integers:
        if integer_or_close(Ps) and integer_or_close(Pt):
            Pst = eval_poly_at(p, s*t)
            if not integer_or_close(Pst):
                return False
    return True

def rational_candidates():
    # Generate rational test sample values s,t so that Ps, Pt may be integer
    # We pick values among small rationals like -2,-1,0,1,2,1/2,2/3,3/2
    # but to be efficient, combine some pairs
    values = [Rational(v) for v in [-2, -1, 0, 1, 2, Rational(1,2), Rational(2,3), Rational(3,2)]]
    for s,t in itertools.product(values, repeat=2):
        yield s,t

def polynomial_candidates(deg_max=2, coeff_range=(-2,2)):
    # Generate integer polynomials of degree up to deg_max with coeff in coeff_range
    for deg in range(deg_max+1):
        # Get all coeff tuples for degree deg: from highest deg to constant
        # Example deg=2: coeffs = (a2,a1,a0)
        for coeffs in itertools.product(range(coeff_range[0], coeff_range[1]+1), repeat=deg+1):
            # Skip zero polynomial
            if all(c == 0 for c in coeffs):
                continue
            # Construct polynomial: highest degree coeff first
            p = Poly(list(coeffs), x, domain='ZZ')
            yield p

def main():
    print("Enumerating candidate polynomials P satisfying property (sample test)...")
    max_tests = 20  # number of (s,t) pairs tested each
    # Pre-generate test pairs from rational values
    test_pairs = list(itertools.islice(rational_candidates(), max_tests))
    count = 0
    for p in polynomial_candidates():
        # Only test p for property
        if test_property(p, test_pairs):
            print("Candidate polynomial:", p.as_expr())
            count += 1
            if count >= 20:
                break
    print("Enumeration stopped after 20 candidates or exhausting search.")

if __name__ == "__main__":
    main()
```
This script enumerates integer polynomials of degree â‰¤ 2 with coefficients in [-2,2], tests the property on a small set of rational values, and prints candidates immediately on discovery, enabling conjecture about the solution set.
