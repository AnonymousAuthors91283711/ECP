[write_program]
The problem involves finding bases \( b \) and two-digit numbers \( n \) in base \( b \) such that:
- \( 2 \leq b \leq n < b^2 \),
- \( n \) has exactly two digits in base \( b \),
- The sum of the digits of \( n \) in base \( b \) equals \( \sqrt{n} \),
- And the base \( b \) must have more than 10 such numbers \( n \).

The goal is to find the least base \( b \) for which there are more than 10 beautiful numbers \( n \).

We will enumerate all \( b \) from 2 up to a reasonable threshold (say 30),
and for each \( b \), enumerate all two-digit numbers \( n \) (i.e., \( n \) from \( b \) to \( b^2 - 1 \)),
check if the sum of the two digits equals \( \sqrt{n} \), and count how many such \( n \) exist.
We print all bases with their beautiful \( n \), focusing on exact checks, and also print the base with more than 10 such numbers and is minimal.

```python
import math

def digits_base_b(n, b):
    # Get digits of n in base b, two digits guaranteed by assumption
    return [n // b, n % b]

def is_beautiful(b, n):
    if not (2 <= b <= n < b*b):
        return False
    d = digits_base_b(n, b)
    if len(d) != 2:
        return False
    s = d[0] + d[1]
    sqrt_n = math.isqrt(n)
    return s == sqrt_n and sqrt_n*sqrt_n == n

max_b = 30
threshold = 10
candidates = []
for b in range(2, max_b+1):
    beautiful_ns = []
    for n in range(b, b*b):
        if is_beautiful(b, n):
            print(f"Base {b} beautiful number: {n} digits {digits_base_b(n,b)} sum={sum(digits_base_b(n,b))}")
            beautiful_ns.append(n)
    if len(beautiful_ns) > threshold:
        candidates.append((b, len(beautiful_ns)))

if candidates:
    min_b = min(candidates, key=lambda x:x[0])
    print(f"Least base with more than {threshold} beautiful numbers: {min_b[0]} count: {min_b[1]}")
else:
    print(f"No base up to {max_b} has more than {threshold} beautiful numbers.")
```
