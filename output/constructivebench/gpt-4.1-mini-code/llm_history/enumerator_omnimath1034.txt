[write_program]
The problem counts the number of 4x4 boolean matrices where each row and each column has exactly 2 `true` and 2 `false`. This is equivalent to counting all 4x4 (0/1) matrices with row and column sums equal to 2.

I'll enumerate all such 4x4 boolean matrices using itertools. For all rows, generate combinations of positions to put 2 `True`s; then check column sums to ensure each column also sums to 2. Print found solutions and finally their count.

```python
from itertools import combinations, product

N = 4
row_ones = 2

# Generate all combinations of positions with exactly 2 True per row
row_patterns = list(combinations(range(N), row_ones))

count = 0
# We'll build matrices by choosing one row pattern for each row
for rows in product(row_patterns, repeat=N):
    # Count how many times a column is chosen for True in each row
    col_sums = [0]*N
    for r in range(N):
        for c in rows[r]:
            col_sums[c] += 1
    # Check if each column has exactly 2 trues
    if all(cs == row_ones for cs in col_sums):
        count += 1
        print(f"Matrix #{count}:")
        for r in range(N):
            row_str = ''.join('1' if c in rows[r] else '0' for c in range(N))
            print(row_str)
        print()

print(f"Total count: {count}")
```
