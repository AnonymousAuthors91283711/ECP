[write_program]
The problem involves finding polynomial sequences \( P_n \) over integers (degree ≤ 2) that satisfy:
- \( P_n = P_{n-1} + P_{n-2} \) for \( n \ge 2 \),
- \( P_0 \) has all rational roots,
- \( P_1 \) does *not* vanish at those roots,
- each \( P_n \) has at least one integer root,

We want to explore such polynomial sequences to find potential examples or verify contradictions.

This code enumerates quadratic polynomials \( P_0, P_1 \) with small integer coefficients, checks the recurrence to generate \( P_n \), and tests the root conditions, printing candidates.

```python
from sympy import symbols, Poly, Eq, solve, Rational, gcd, degree

x = symbols('x')

def polynomial_int_roots(poly):
    # Find integer roots of polynomial with integer coeffs
    coeffs = poly.all_coeffs()
    coeffs = [int(c) for c in coeffs]
    # Possible integer roots divide constant term
    c0 = coeffs[-1]
    if c0 == 0:
        # zero is root
        roots = [0]
    else:
        roots = []
        for d in range(1, abs(c0)+1):
            if c0 % d == 0:
                roots.extend([d, -d])
        roots = list(set(roots))  # unique

    roots_found = []
    for r in roots:
        if poly.eval(r) == 0:
            roots_found.append(r)
    return roots_found

def check_sequence(P0, P1, max_n=7):
    # Check the sequence (P_n) defined by recurrence P_n = P_{n-1} + P_{n-2}
    # Each P_n degree ≤ 2; if degree grows beyond 2 return False
    # Condition: P0 roots rational zeros only are roots of P0; P1 doesn't vanish at these roots
    # Also each P_n has an integer root
    P = [P0, P1]

    # Find rational roots of P0
    rts0 = solve(Eq(P0.as_expr(), 0), x)
    rat_roots0 = []
    for r in rts0:
        if r.is_rational:
            rat_roots0.append(r.evalf())

    # P1 must not vanish at these roots
    for r in rat_roots0:
        if P1.eval(r) == 0:
            return False

    # each P_n has integer root
    for n in range(2, max_n+1):
        new_poly = Poly(P[n-1].as_expr() + P[n-2].as_expr(), x).as_poly()
        if degree(new_poly) > 2:
            return False
        roots_int = polynomial_int_roots(new_poly)
        if not roots_int:
            return False
        P.append(new_poly)

    return True

def poly_from_coeffs(a,b,c):
    # Construct monic/quadratic polynomial a x^2 + b x + c; at most degree 2 (could be lower)
    return Poly(a*x*x + b*x + c, x)

print("Enumerating polynomial pairs P0, P1 with degree ≤ 2, integer coeffs in [-2..2]:")

for a0 in range(0,3):  # degree ≤ 2, so leading coeff 0 or 1 or 2 to keep small
    for b0 in range(-2,3):
        for c0 in range(-2,3):
            # degree check: skip if degree > 2
            if a0 == 0 and b0 == 0 and c0 == 0:
                continue
            P0 = poly_from_coeffs(a0,b0,c0)
            # Get roots of P0 over rationals
            roots0 = solve(Eq(P0.as_expr(),0), x)
            if not roots0:
                continue
            # Check all roots are rational
            if any(not r.is_rational for r in roots0):
                continue

            for a1 in range(0,3):
                for b1 in range(-2,3):
                    for c1 in range(-2,3):
                        if a1 == 0 and b1 == 0 and c1 == 0:
                            continue
                        P1 = poly_from_coeffs(a1,b1,c1)
                        # Check condition: P1 does not vanish on roots of P0
                        vanish = False
                        for r in roots0:
                            if P1.eval(r) == 0:
                                vanish = True
                                break
                        if vanish:
                            continue

                        if check_sequence(P0, P1):
                            # Found candidate
                            print("P0 =", P0.as_expr(), ", P1 =", P1.as_expr())
                            # For brevity, limit to few results
```
This enumeration helps discover or disprove existence of such \(P_n\). Adjust ranges or max_n to explore further if needed.
