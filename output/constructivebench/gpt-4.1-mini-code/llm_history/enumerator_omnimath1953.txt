[write_program]
The problem counts functions \( f: \{0,\dots,4\} \to \{0,\dots,4\} \) with no 2-cycles \((a \neq b, f(a)=b, f(b)=a)\).

This means we count functions from a 5-element set to itself that have no pair of distinct elements swapped by \( f \).

Strategy: for each function \( f \), check all pairs \((a,b)\) with \( a \neq b \) if \( f(a) = b \) and \( f(b) = a \). Count those with no such pair.

Enumerate all functions \( f: [5] \to [5] \), there are \( 5^5 = 3125 \).

Print all functions that are nasty (no 2-cycle), or just their number.

Since 3125 is small, enumerate all, print each nasty function briefly as a tuple, then at end print the total.

```python
# Enumerate functions f: [0..4] -> [0..4] with no 2-cycle: no distinct a,b with f(a)=b and f(b)=a.
# Print each such function and count total.

from itertools import product

def has_2cycle(f):
    # f is a tuple of length 5 with values in [0..4]
    for a in range(5):
        for b in range(a+1,5):
            if f[a] == b and f[b] == a:
                return True
    return False

count = 0
for f in product(range(5), repeat=5):
    if not has_2cycle(f):
        print(f)  # print the function as a tuple
        count += 1
print("Total:", count)
```
