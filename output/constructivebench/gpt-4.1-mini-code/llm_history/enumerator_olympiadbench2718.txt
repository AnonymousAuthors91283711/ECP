[write_program]
We want to find the smallest positive integer \( n \) such that \( 13 \mid n^2 + n^0 + n^1 + n^3 \).

Rewrite the expression:
\[
n^2 + 1 + n + n^3 = n^3 + n^2 + n + 1
\]

We need to find positive \( n \) where:
\[
13 \mid n^3 + n^2 + n + 1
\]

The program will test small values \( n = 1, 2, \dots, 100 \) and print those where the divisibility condition holds, streaming results. Finally, it will print the minimal such \( n \).

```python
# Enumerate positive integers n up to 100 and check if 13 divides n^3 + n^2 + n + 1.
# Print all such n as we find them.

def main():
    divisor = 13
    candidates = []
    for n in range(1, 101):
        val = n**3 + n**2 + n + 1
        if val % divisor == 0:
            print(f"n = {n}, value = {val}")
            candidates.append(n)
    if candidates:
        print(f"Minimum n such that 13 divides n^3 + n^2 + n + 1: {min(candidates)}")
    else:
        print("No n found up to 100.")

if __name__ == "__main__":
    main()
```
