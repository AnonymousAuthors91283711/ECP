[write_program]
The problem involves permutations π of {0, 1, ..., n-1} with two statistics on π:  
- f(π): number of inversions (i < j and π(i) > π(j))  
- g(π): count of elements k with π(k) ≡ k ± 1 mod n  

We want the sum over all π of (-1)^(f(π) + g(π)) for n=999. Since 999 is large, we cannot compute directly. Instead, we enumerate smaller n values, print n and the sum to observe a pattern. We'll only go up to n=5 for feasibility.

We enumerate all permutations of [0..n-1], compute f(π), g(π), then sum (-1)^(f+g). We print partial sums streaming.

```python
import math
from itertools import permutations

def inversions(perm):
    inv = 0
    n = len(perm)
    for i in range(n):
        pi = perm[i]
        for j in range(i+1, n):
            if pi > perm[j]:
                inv += 1
    return inv

def g_stat(perm):
    # Count k with perm[k] ≡ k±1 mod n
    n = len(perm)
    count = 0
    for k in range(n):
        if (perm[k] - (k+1)) % n == 0 or (perm[k] - (k-1)) % n == 0:
            count += 1
    return count

def parity(x):
    return x % 2

def signed_sum(n):
    total = 0
    count = 0
    perms = permutations(range(n))
    for pi in perms:
        f = inversions(pi)
        g = g_stat(pi)
        sign = (-1)**(f + g)
        total += sign
        count += 1
        print(f"perm={pi}, f={f}, g={g}, sign={sign}, partial_sum={total}")
    return total

if __name__ == "__main__":
    for n in range(1, 6):
        print(f"n={n}")
        s = signed_sum(n)
        print(f"Sum over S_{n}: {s}\n")
```
This prints each permutation’s computations immediately, enumerates for small n, allowing a pattern conjecture for n=999's sum.
