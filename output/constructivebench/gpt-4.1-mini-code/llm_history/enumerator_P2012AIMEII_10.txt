[write_program]
The problem is to count positive integers \( n < 1000 \) such that there exists a positive real \( x \) with \( n = x \lfloor x \rfloor \). To enumerate we take integers \( k = \lfloor x \rfloor \geq 1 \), and for each \(k\), find positive \(x\) with

\[
n = xk, \quad k = \lfloor x \rfloor.
\]

Since \(\lfloor x \rfloor = k\), \(x \in [k, k+1)\). Substitute \(x = \frac{n}{k}\). For valid \(x\),

\[
k \leq \frac{n}{k} < k+1
\implies k^2 \leq n < k^2 + k.
\]

So for each integer \(k \geq 1\), all integers \(n\) in \([k^2, k^2 + k - 1]\) satisfy the condition. Our task reduces to enumerating all such \(n < 1000\).

We'll print all \(n\) found in ascending order and also print the total count.

```python
# Enumeration for numbers n < 1000 with n = x * floor(x) for some x > 0
# For each k ≥ 1, n ∈ [k^2, k^2 + k - 1] are solutions provided n < 1000

def main():
    limit = 1000
    solutions = set()
    k = 1
    while True:
        start = k*k
        end = k*k + k - 1
        if start >= limit:
            break
        for n in range(start, min(end+1, limit)):
            print(n)
            solutions.add(n)
        k += 1
    print(f"Total count: {len(solutions)}")

if __name__ == "__main__":
    main()
```
