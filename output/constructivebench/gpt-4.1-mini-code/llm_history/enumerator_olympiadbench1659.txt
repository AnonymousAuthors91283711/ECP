[write_program]
The problem involves characterizing all functions \( f: \mathbb{R}_{>0} \to \mathbb{R} \) that satisfy the functional equation
\[
f(x + f(y)) = f(x + y) + f(y)
\]
for all positive \( x, y \), and such that \( f(y) > 0 \) for all \( y > 0 \).

To explore solutions, the idea is to:
- Test simple forms of functions, such as linear functions \( f(y) = c y \).
- Check behaviour by enumerating sample points.
- Print functions \( f \) and validate the equation approximately on chosen samples.

We try candidate functions for constants \( c \) and see which satisfy the equation numerically, streaming any that "work". This hints at the possible form of the function.

```python
# Enumerate candidate functions f(y) = c*y for positive c, test the functional equation on samples

def f_linear(c, y):
    return c * y

def check_equation(c, samples):
    # Check f(x + f(y)) ?= f(x + y) + f(y)
    for x in samples:
        for y in samples:
            lhs = f_linear(c, x + f_linear(c, y))
            rhs = f_linear(c, x + y) + f_linear(c, y)
            if abs(lhs - rhs) > 1e-12:
                return False
    return True

def main():
    samples = [0.1, 1, 2, 5]
    cs = [round(c/10,1) for c in range(1,21)]  # c in 0.1 to 2.0
    print("Testing functions f(y) = c*y for c in", cs)
    for c in cs:
        if check_equation(c, samples):
            print(f"Candidate function: f(y) = {c} * y satisfies the equation on samples")
    # Check c=1 explicitly as most natural candidate
    c = 1.0
    print(f"Testing special case c = {c}")
    if check_equation(c, samples):
        print(f"Function f(y) = {c} * y satisfies the equation exactly on samples")

if __name__ == "__main__":
    main()
```
This program tests linear functions and prints candidates fitting the functional equation on sample points, useful for conjecturing the true form.
