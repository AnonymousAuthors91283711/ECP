[write_program]
The problem asks to find the smallest natural number \( n > 1 \) such that:

\[
\binom{n}{2} \left(\frac{1}{4}\right)^2 \left(\frac{3}{4}\right)^{n-2} = \binom{n}{3} \left(\frac{1}{4}\right)^3 \left(\frac{3}{4}\right)^{n-3}
\]

We want to find all \( n > 1 \) that satisfy this equality and determine the least such \( n \).

This can be simplified to searching for integer \( n > 1 \) where:

\[
\binom{n}{2} \times \frac{1}{16} \times \left(\frac{3}{4}\right)^{n-2} = \binom{n}{3} \times \frac{1}{64} \times \left(\frac{3}{4}\right)^{n-3}
\]

We will enumerate values of \( n \) to find exact equality over rational numbers. To avoid floating-point inaccuracies, the code uses rational arithmetic with Python's `fractions` module.

```python
from fractions import Fraction as F
from math import comb

def main():
    # Enumerate n from 2 to 20 (reasonable range)
    for n in range(2, 21):
        lhs = comb(n, 2) * F(1,4)**2 * F(3,4)**(n-2)
        rhs = comb(n, 3) * F(1,4)**3 * F(3,4)**(n-3)
        if lhs == rhs:
            print(f"n = {n}: equality holds")
    # Find least n satisfying condition
    # Since output is streaming, we'll store minimal n during scan
    # Re-scan to print minimal explicitly
    candidates = [n for n in range(2, 21)
                  if comb(n,2)*F(1,4)**2*F(3,4)**(n-2) == comb(n,3)*F(1,4)**3*F(3,4)**(n-3)]
    if candidates:
        print(f"Least n satisfying the equality: {min(candidates)}")
    else:
        print("No n in range satisfies the equality.")

if __name__ == "__main__":
    main()
```
