[write_program]
The problem asks to find the number of integers \( n \) for which there exists an integer \( k \) such that \(\frac{n}{20 - n} = k^2\), and \(20 - n \neq 0\). To assist in conjecturing the number of such \( n \), we enumerate integers \( n \) in a reasonable range and check if \(\frac{n}{20-n}\) is a perfect square of an integer. We print each such \( n \) and \( k \) pair as soon as found, then finally count the total. 

```python
# Enumerate integers n and check if n/(20-n) = k^2 for some integer k
# Avoid division by zero, and ensure exact perfect square condition
# Limit search to a reasonable range for demonstration

def is_perfect_square(x):
    if x < 0:
        return False
    r = int(x**0.5)
    return r*r == x

count = 0
print("n, k pairs with n/(20-n) = k^2:")

for n in range(-100, 100):
    denom = 20 - n
    if denom == 0:
        continue
    num = n
    # check if num/denom = k^2 with k integer
    # so n = k^2*(20-n) => n = 20 k^2 - n k^2 => n + n k^2 = 20 k^2 =>
    # n(1 + k^2) = 20 k^2 => n = 20 k^2 / (1 + k^2)
    # so n must be integer; check via k to save work
    
    # We'll try integer k values for each n, but this is inefficient.
    # Instead, try k from -100 to 100 (excluding 0)
    found = False
    for k in range(-100, 101):
        if k == 0:
            continue
        lhs = n
        rhs = k*k*(20 - n)
        if lhs == rhs:
            print(f"n={n}, k={k}")
            count += 1
            found = True
            break  # Only one k needed
    
print("Total count:", count)
```
