[write_program]
The problem is to enumerate all ways to tile a 3x5 grid exactly with 5 tiles, each tile being one of the specified 1xk or kx1 strips (k from 1 to 5), with no overlapping and covering all cells. We want to count such tilings.

We will:
- Represent the board as a 3x5 grid (rows 0-2, columns 0-4).
- Generate all possible tiles according to the given shapes.
- Enumerate all 5-tuples of these tiles that are disjoint and cover the entire grid.
- Print each valid tiling's tile sets immediately.
- Finally print the total count.

To keep output short and efficient, we'll represent tiles as sorted tuples of coordinates, and sets of covered cells as sets of tuples. We'll generate all candidate tiles once, then try all combinations of 5 distinct tiles whose union is exactly the full grid.

This is a combinatorial search problem; we'll prune early by checking combined coverage size.

We print partial results as tile sets are found. The total output length should be manageable with limits.

```python
# Enumerate all ways to tile a 3x5 grid with 5 non-overlapping tiles, each tile being a 1xk or kx1 strip (k=1..5)
# Print each tiling immediately (as a list of tiles), then print total count.

def tiles():
    # Generate all valid tiles (sets of (r,c)) fitting in 3x5 grid
    rows, cols = 3, 5
    cur_tiles = []
    # horizontal strips length 1 to 5, height=1
    for length in range(1, 6):
        for r in range(rows):
            for c in range(cols - length + 1):
                cur_tiles.append(frozenset((r, c+i) for i in range(length)))
    # vertical strips length 1 to 5, width=1
    for length in range(1, 6):
        for c in range(cols):
            for r in range(rows - length + 1):
                cur_tiles.append(frozenset((r+i, c) for i in range(length)))
    return cur_tiles

def main():
    total_cells = 3 * 5
    all_cells = frozenset((r, c) for r in range(3) for c in range(5))
    candidate_tiles = tiles()
    # For speed, we keep tiles that cover 1 to 5 cells, no duplicates expected
    n = len(candidate_tiles)

    # We want to select 5 tiles T0..T4 such that:
    # - they are pairwise disjoint
    # - their union is the full grid
    # We enumerate all combinations of 5 different tiles from candidate_tiles.

    from itertools import combinations

    count = 0
    for combo in combinations(range(n), 5):
        sets = [candidate_tiles[i] for i in combo]
        # Check disjointness quickly by merged size
        union_set = set()
        disjoint = True
        for s in sets:
            if union_set.intersection(s):
                disjoint = False
                break
            union_set.update(s)
        if disjoint and len(union_set) == total_cells:
            # Found a valid tiling
            count +=1
            # Print tiles as sorted lists of coordinates for readability
            # Sorted by tile's first cell (row,col)
            sorted_tiles = [tuple(sorted(t)) for t in sets]
            sorted_tiles.sort()
            print(f"Tiling #{count}: {sorted_tiles}")

    print(f"Total number of tilings: {count}")

if __name__ == "__main__":
    main()
```
