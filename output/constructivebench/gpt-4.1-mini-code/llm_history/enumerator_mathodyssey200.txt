[write_program]
The problem deals with characterizing the set of real functions \( f:\mathbb{R}\to\mathbb{R} \) such that \( f \) tends to infinity as the input tends to infinity. To gain insight, let's consider functions from \(\mathbb{N}\) to \(\mathbb{N}\) (discrete version) that tend to infinity, enumerating examples and counterexamples. This will help conjecture what kind of functions satisfy \( \lim_{x \to +\infty}f(x) = +\infty \). We will print sample functions exhibiting various limiting behaviors.

```python
# Enumerate sample functions f: N -> R that "tend to infinity" or not
# Tend to infinity means: for any M, exists N s.t. n > N => f(n) > M

def tends_to_infty(f, max_test=1000, threshold=100):
    # Rough check: for M in range(1,threshold), find N with f(n)>M for all n>N
    for M in range(1, threshold):
        N_found = False
        for N in range(max_test):
            # Check if all f(n) with n > N exceed M
            if all(f(n) > M for n in range(N+1, max_test)):
                N_found = True
                break
        if not N_found:
            return False
    return True

def example_functions():
    # Define functions to test
    funcs = [
        (lambda n: n, "f(n) = n"),
        (lambda n: n**2, "f(n) = n^2"),
        (lambda n: -n, "f(n) = -n"),
        (lambda n: 1, "f(n) = 1"),
        (lambda n: (n % 10), "f(n) = n mod 10"),
        (lambda n: n if n < 500 else 0, "f(n) = n if n<500 else 0"),
        (lambda n: n + (-1)**n * 10, "f(n) = n + (-1)^n * 10"),
        (lambda n: 10**n, "f(n) = 10^n"),
    ]
    return funcs

def main():
    funcs = example_functions()
    print("Testing functions f: N->R for limit at infinity...")
    for f, desc in funcs:
        result = tends_to_infty(f)
        print(f"{desc:25} -> tends to infinity? {result}")

if __name__ == "__main__":
    main()
```
