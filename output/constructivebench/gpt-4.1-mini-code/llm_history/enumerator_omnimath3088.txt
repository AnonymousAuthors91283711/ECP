[write_program]
This problem involves counting the number of bijections (seatings) from 5 chairs to 5 people, with constraints on where David and Pedro sit. We want the ratio of favorable seatings (Pedro in chair 1 or chair 3) to all seatings with David fixed in chair 2.

We'll enumerate all valid seatings (with David in chair 2), count how many have Pedro in chair 1 or 3, and output the ratio as a rational number.

```python
from itertools import permutations
from fractions import Fraction

people = ["Aristotle", "David", "Flora", "Munirah", "Pedro"]
chairs = range(5)  # 0 to 4 chairs, chair 2 is David's fixed position

david_pos = 2
total = 0
favorable = 0

others = [p for p in people if p != "David"]

# Chairs excluding David's chair
chairs_wo_david = [c for c in chairs if c != david_pos]

for seating_perm in permutations(others):
    # Build seating: at chair 2 is David
    seating = [None]*5
    seating[david_pos] = "David"
    for c, p in zip(chairs_wo_david, seating_perm):
        seating[c] = p
    total += 1
    # Check Pedro at chair 1 or 3
    if seating[1] == "Pedro" or seating[3] == "Pedro":
        favorable += 1
        # Print each favorable seating immediately
        print(f"Favorable seating #{favorable}: {seating}")

# Print summary ratio as a fraction
ratio = Fraction(favorable, total)
print(f"Total valid seatings: {total}")
print(f"Favorable seatings: {favorable}")
print(f"Ratio favorable/valid = {ratio} â‰ˆ {float(ratio):.4f}")
```

