[write_program]
The problem asks to find the least positive integer n such that the number of divisors of 214*n equals the number of divisors of 2014*n. Here we enumerate n starting from 1 and check if divisor counts match. We print all such n found up to some reasonable limit and then output the minimum.

```python
from math import gcd
from sympy import divisors

# 214 = 2 * 107, 2014 = 2 * 19 * 53
# We want count_div(214*n) == count_div(2014*n)

def divisor_count(x):
    return len(divisors(x))

def enumerate_ns(limit=10**5):
    for n in range(1, limit+1):
        count_214 = divisor_count(214*n)
        count_2014 = divisor_count(2014*n)
        if count_214 == count_2014:
            print(f"n={n}: divisors(214*n)={count_214}, divisors(2014*n)={count_2014}")
            yield n

def main():
    candidates = list(enumerate_ns(10**5))
    if candidates:
        print(f"Minimum n found: {min(candidates)}")

if __name__ == "__main__":
    main()
```
