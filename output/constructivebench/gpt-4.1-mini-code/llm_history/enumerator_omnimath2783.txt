[write_program]
The problem is to find the unique natural number \( n \) such that the sum \( n + (n+1) + (n+2) = 27 \) and the product \( n \times (n+1) \times (n+2) \) equals some value, which is to be found.

We want to enumerate possible \( n \) values that satisfy the sum condition (or near it), compute the product, and print the product when the sum condition holds exactly.

Since \( n + (n+1) + (n+2) = 3n + 3 = 27 \implies 3n = 24 \implies n=8 \), we expect a unique \( n=8 \). Let's confirm by enumeration around small natural numbers.

```python
# Enumerate natural numbers n around likely candidates and check conditions
for n in range(0, 20):
    s = n + (n+1) + (n+2)
    if s == 27:
        p = n * (n+1) * (n+2)
        print(f"n = {n}, sum = {s}, product = {p}")
```
This enumeration will find all n with the sum 27 and print their products. From this output, we can conjecture and prove the unique answer is the product when n=8.
