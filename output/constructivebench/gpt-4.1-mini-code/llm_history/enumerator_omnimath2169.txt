[write_program]
The problem is about finding the least positive integer \( x = a+b+c \) with positive integers \( a,b,c \) satisfying
\[
\frac{a}{77} + \frac{b}{91} + \frac{c}{143} = 1.
\]
We want to enumerate triples \((a,b,c)\) with \(a,b,c>0\), compute \(x=a+b+c\), and find the smallest such \(x\).

Note that denominators are factored as:
- \(77 = 7 \times 11\),
- \(91 = 7 \times 13\),
- \(143 = 11 \times 13\).

We search over small \(a,b,c\) efficiently and output each solution's sum \(a+b+c\).

```python
# Enumerate positive triples (a,b,c) with (a/77)+(b/91)+(c/143)=1
# Print sums a+b+c immediately and finally the minimal sum found
def main():
    from fractions import Fraction
    solutions = []
    min_sum = None
    # Limits chosen to quickly find minimal sum (try sums up to 150)
    for total in range(3, 151):
        # Enumerate a in [1, total-2]
        for a in range(1, total-1):
            # b in [1, total-a-1]
            for b in range(1, total - a):
                c = total - a - b
                if c <= 0:
                    continue
                val = Fraction(a,77) + Fraction(b,91) + Fraction(c,143)
                if val == 1:
                    print(f"a={a} b={b} c={c} sum={total}")
                    if (min_sum is None) or (total < min_sum):
                        min_sum = total
        if min_sum == total:
            # Found smallest sum, stop searching larger sums
            break
    if min_sum is not None:
        print(f"Minimal sum = {min_sum}")

if __name__ == "__main__":
    main()
```
