[write_program]
The problem is to find the smallest positive integer \( n \) such that:

\[ 2 \cdot n \cdot 4 + 2 \cdot n \cdot (4 + 5) = 2366. \]

This simplifies to:

\[ 8n + 18n = 2366 \]
\[ 26n = 2366 \]
\[ n = \frac{2366}{26} = 91. \]

The answer \( n = 91 \) is exact, and it is the least positive integer satisfying the equation.

The Python enumerator below confirms this by enumerating all positive integers \( n \) up to a threshold (e.g., 100) and printing those that satisfy the equation. It then prints the minimal such \( n \).

```python
# Enumerate positive integers n to find those satisfying 2*n*4 + 2*n*(4+5) = 2366
# Then print the least such n.

TARGET = 2366
express = lambda n: 2*n*4 + 2*n*(4+5)  # = 8n + 18n = 26n

candidates = []
for n in range(1, 101):  # Check n from 1 to 100
    val = express(n)
    if val == TARGET:
        print(f"Candidate n = {n} satisfies the equation.")
        candidates.append(n)

if candidates:
    least = min(candidates)
    print(f"Least positive integer n satisfying the equation is {least}.")
else:
    print("No solution found for n in [1..100].")
```
