[write_program]
The problem can be interpreted as follows:

Find the smallest positive integer \( n \) such that there exists \( k \) with:

\[
75n = k
\]

and

\[
783n = 10 \times \big(k + 6 + 5 + 4 + 3(n - 3)\big)
\]

Since \( k = 75n \), substitute into the second equation:

\[
783n = 10 \times \left(75n + 6 + 5 + 4 + 3(n - 3)\right)
\]

Simplify the inside:

\[
6 + 5 + 4 = 15
\]

So:

\[
783n = 10 \times (75n + 15 + 3n - 9) = 10 \times (78n + 6) = 780n + 60
\]

Rearranged:

\[
783n = 780n + 60 \implies 3n = 60 \implies n = 20
\]

This suggests \( n=20 \) satisfies the condition. To help verify and assist with conjectures, the program will enumerate positive integers \( n \) up to a threshold (say 50), check if the equation holds exactly, and print \( n \) when found.

```python
# Enumerate n in a range, test if 783*n = 10*(75*n + 6+5+4 + 3*(n-3))
# Print n immediately when found

def main():
    for n in range(1, 51):
        k = 75 * n
        lhs = 783 * n
        rhs = 10 * (k + 6 + 5 + 4 + 3 * (n - 3))
        if lhs == rhs:
            print(f"n = {n}")
    # From the above, minimum n found
    # Extract minimum n from printed results
    # Here we only print the minimum explicitly
if __name__ == "__main__":
    main()
```
