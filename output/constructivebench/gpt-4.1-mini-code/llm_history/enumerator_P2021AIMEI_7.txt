[write_program]
The problem concerns counting pairs of natural numbers (m, n) with 1 ≤ m < n ≤ 30 such that there exists a real number x for which sin(m*x) + sin(n*x) = 2. Since sin(θ) ≤ 1 for all real θ, the sum equals 2 only when both sin(m*x) = sin(n*x) = 1 simultaneously. This means m*x and n*x must be congruent to π/2 modulo 2π.

We want to enumerate pairs (m,n) where such an x exists. Given 1 ≤ m < n ≤ 30, for each pair we check if there is an x with sin(m*x) = sin(n*x) = 1, which happens iff both m*x and n*x are congruent to π/2 modulo 2π, i.e., m*x ≡ π/2 (mod 2π) and n*x ≡ π/2 (mod 2π). This is equivalent to saying the system of congruences:
x ≡ π/(2m) mod (2π/m)
x ≡ π/(2n) mod (2π/n)
has a solution x.

Because these are modular congruences on real numbers modulo 2π, the problem reduces to verifying if the angles align for some x.

To simplify, we note that the set of possible x satisfying sin(k*x) = 1 is x = (π/2 + 2π*t) / k for t ∈ ℤ. We want to know if there exists integers t1, t2 such that:

(m*x) = π/2 + 2π*t1
(n*x) = π/2 + 2π*t2

From the first: x = (π/2 + 2π*t1)/m
From the second: x = (π/2 + 2π*t2)/n

Equate:

(π/2 + 2π*t1)/m = (π/2 + 2π*t2)/n
=> n*(π/2 + 2π*t1) = m*(π/2 + 2π*t2)
=> π/2*(n - m) + 2π*(n*t1 - m*t2) = 0
=> π/2*(n - m) = -2π*(n*t1 - m*t2)
=> (n - m)/2 = -2*(n*t1 - m*t2)

Since the right side is an integer (because t1, t2 ∈ ℤ), the left side must be an integer. Thus:

(n - m)/2 ∈ ℤ
=> n - m is even.

So, the pairs (m,n) such that n - m is even satisfy the condition.

Let's enumerate (m,n) with 1 ≤ m < n ≤ 30 and n-m even.

This is a simple, finite enumeration we can do in Python.

```python
# Enumerate pairs (m,n) with 1 <= m < n <= 30,
# check the condition that n - m is even,
# print all such pairs immediately.

def main():
    count = 0
    for m in range(1, 30):
        for n in range(m+1, 31):
            if (n - m) % 2 == 0:
                print(f"({m}, {n})")
                count += 1
    print(f"Total pairs satisfying condition: {count}")

if __name__ == "__main__":
    main()
```
