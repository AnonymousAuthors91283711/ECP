[write_program]
The problem seems to ask for the smallest positive integer \( n \) such that for each \( k \in \{1, 2, 3, 4\} \), there exists some \( m \leq n \) with \( \theta = (m \times 123) \bmod 360 \) lying in a specific quarter-circle interval depending on \( k \).

To help conjecture the answer, we write a Python program that:
- Iterates over \( n \) from 1 upwards (say up to 100 as sample).
- For each \( n \), checks all \( m \leq n \) to see if for each quadrant \( k \), an \( m \) satisfying the quadrant condition on \(\theta\) exists.
- Prints each candidate \( n \) satisfying this property.
- At end, prints the first such minimal \( n \).

```python
# Enumerate n and check for each quadrant if there's an m ≤ n with θ = (m*123) mod 360 in that quadrant

def in_quadrant(theta, k):
    if k == 1:
        return 0 < theta <= 90
    elif k == 2:
        return 90 < theta <= 180
    elif k == 3:
        return 180 < theta <= 270
    else: # k == 4
        return 270 < theta <= 360

def satisfies(n):
    # For each quadrant k in {1,2,3,4}, check if some m ≤ n gives θ in quadrant k
    for k in [1,2,3,4]:
        found = False
        for m in range(1, n+1):
            theta = (m * 123) % 360
            if in_quadrant(theta, k):
                found = True
                break
        if not found:
            return False
    return True

def main():
    max_n = 100
    candidates = []
    for n in range(1, max_n +1):
        if satisfies(n):
            print(f"Candidate n = {n}")
            candidates.append(n)
    if candidates:
        print(f"Minimal n = {candidates[0]}")

if __name__ == "__main__":
    main()
```
