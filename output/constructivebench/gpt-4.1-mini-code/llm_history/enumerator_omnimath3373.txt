[write_program]
The problem asks to find a list of 4 distinct rational numbers, each of the form 1/(n+1) for some natural number n, such that their sum equals 1. We want to enumerate possible quadruples of distinct unit fractions summing to 1.

The program will:
- Try small values of n (e.g., 1 to 20) for each element,
- Enumerate 4-element subsets of these fractions,
- Check if the sum is exactly 1,
- Print each found quadruple,
- Since the problem asks for distinct fractions, make sure n's are distinct,
- Use fractions to keep exact values.

```python
from fractions import Fraction
from itertools import combinations

# Try denominators from 2 to 21 (since fraction is 1/(n+1), n from 1 to 20)
candidates = [Fraction(1, d) for d in range(2, 22)]  # denominators 2..21

threshold = 10  # max number of solutions to print before stopping (to keep output short)

count = 0
for quad in combinations(candidates, 4):
    if sum(quad) == 1:
        count += 1
        print(f"Solution {count}: {quad}")
        if count >= threshold:
            break

if count == 0:
    print("No quadruples found.")
else:
    print(f"Total solutions found (up to threshold): {count}")
```
