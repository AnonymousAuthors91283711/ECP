[write_program]
The problem is to find the number of pairs \((a, b)\) of positive integers such that 
\[
\gcd(a,b) \cdot a + b^2 = 10000.
\]

We will enumerate all possible pairs where \(a,b > 0\), compute the expression, and check for equality. The gcd must be positive; since \(a, b > 0\), gcd is also positive. We'll try all \(b\) up to 100 (since \(b^2 \leq 10000\)), and for each \(b\), we'll try \(a\) such that the value can still be ≤ 10000.

We'll print each valid pair and finally count the total number of solutions.

```python
from math import gcd

limit = 10000
count = 0

# b > 0 and b^2 ≤ limit => b ≤ 100
for b in range(1, 101):
    b2 = b * b
    if b2 > limit:
        break
    # We want gcd(a,b)*a + b^2 = limit
    # So gcd(a,b)*a = limit - b^2
    rhs = limit - b2
    # Since gcd(a,b) divides both a and b, write a = g * x, b = g * y with gcd(x,y)=1
    # but to keep simple, just try a up to the rhs value (since gcd * a ≤ rhs)
    # Because gcd(a,b) ≤ b (since dividing both), and a ≥ 1
    # We'll try a up to rhs (since gcd(a,b)*a ≤ rhs)
    # To save time, try a in [1, rhs]
    for a in range(1, rhs+1):
        if gcd(a,b)*a == rhs:
            print(f"a={a}, b={b}, gcd={gcd(a,b)}, val={gcd(a,b)*a + b2}")
            count += 1

print(f"Total number of solutions: {count}")
```
