[write_program]
The problem defines a function \( f(n) = n^2 + n + 1 \) on natural numbers and asks for the set of positive integers \( n \) such that for every positive divisor \( k \) of \( n \), \( f(k) \) divides \( f(n) \).

To explore this numerically, we'll:
- Enumerate positive integers \( n \) up to some limit.
- For each \( n \), check all positive divisors \( k \).
- Verify if \( f(k) \) divides \( f(n) \) for all \( k \mid n \).
- Print such \( n \) immediately upon finding.

Since the sequence grows quadratically, checking divisibility for all divisors can get heavy for large \( n \), so we'll restrict to, say, \( n \leq 100 \).

```python
def f(x):
    return x*x + x + 1

def divisors(n):
    divs = []
    i = 1
    while i*i <= n:
        if n % i == 0:
            divs.append(i)
            if i != n // i:
                divs.append(n//i)
        i += 1
    return divs

print("Checking n up to 100 for all divisors k: f(k) divides f(n)")

for n in range(1, 101):
    fn = f(n)
    divs = divisors(n)
    # Check if for all positive divisors k of n, f(k) divides f(n)
    if all(fn % f(k) == 0 for k in divs):
        print(f"n = {n} satisfies divisibility condition")
```
This script enumerates candidates \( n \) and prints all satisfying the condition. Running it helps conjecture the form of these special numbers.
