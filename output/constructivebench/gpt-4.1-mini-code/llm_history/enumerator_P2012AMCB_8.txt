[write_program]
The problem counts 7-length sequences (menus) with elements from {0,1,2,3} where no two consecutive elements are equal, and the 6th element (index 5) equals 0.

We want to enumerate and count such sequences. The constraints are:
- The menu is a length-7 sequence.
- Each element in {0,1,2,3}.
- menu[i] â‰  menu[i+1] for i=0..5
- menu[5] = 0

We can write a backtracking generator to enumerate such sequences, print them as we find them, then print the count at the end.

```python
# Enumerate 7-length sequences (menu) from {0,1,2,3}
# with no consecutive repeats and menu[5]==0

def main():
    n = 7
    k = 4
    count = 0
    
    # Helper function to recursively build sequences
    def backtrack(seq):
        nonlocal count
        pos = len(seq)
        if pos == n:
            # Sequence complete
            print(tuple(seq))
            count += 1
            return
        for val in range(k):
            # Enforce menu[5]==0
            if pos == 5 and val != 0:
                continue
            # No two consecutive equal
            if pos > 0 and val == seq[-1]:
                continue
            seq.append(val)
            backtrack(seq)
            seq.pop()
            
    backtrack([])
    print(f"Total sequences: {count}")

if __name__ == '__main__':
    main()
```
