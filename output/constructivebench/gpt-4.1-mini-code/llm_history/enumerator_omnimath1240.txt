[write_program]
The problem defines two polynomials \( f(x) = x^3 + x + 1 \) and \( g(x) \) such that the roots of \( g \) are exactly the squares of the roots of \( f \), and \( g(0) = -1 \). We want to find \( g(9) \).

We can approximate the roots of \( f \), square them, then find a polynomial \( g \) with those squared roots and \( g(0) = -1 \). Finally, evaluate \( g(9) \).

The program below:
- Approximates roots of \( f \)
- Forms \( g(x) = a (x - r_1^2)(x - r_2^2)(x - r_3^2) \)
- Finds \( a \) via \( g(0) = -1 \)
- Evaluates \( g(9) \)

We print intermediate steps and the final answer.

```python
import numpy as np

# f(x) = x^3 + x + 1
# We want roots of f, then g with roots = squared roots of f

def poly_eval(coeffs, x):
    # coeffs in ascending order
    return sum(c * x**i for i, c in enumerate(coeffs))

def poly_mul(p1, p2):
    # Multiply two polynomials given as lists of coefficients (ascending)
    deg = len(p1) + len(p2) - 2
    result = [0]*(deg+1)
    for i, c1 in enumerate(p1):
        for j, c2 in enumerate(p2):
            result[i+j] += c1*c2
    return result

def poly_from_roots(roots):
    # form polynomial from roots: (x - r1)(x - r2)...
    p = [1]
    for r in roots:
        p = poly_mul(p, [-r, 1])
    return p

def poly_eval_on_poly(p, x):
    return poly_eval(p, x)

def main():
    # Coefficients of f(x) = x^3 + x + 1 (ascending)
    f = [1,1,0,1]
    # numpy roots: descending coefficients
    coeffs_f = [1,0,1,1]  # x^3 + 0x^2 + x + 1
    roots_f = np.roots(coeffs_f)  # complex roots
    # Filter only real parts close to real (imag <1e-10)
    real_roots = [r.real for r in roots_f if abs(r.imag)<1e-10]

    print("Roots of f(x):")
    for rt in real_roots:
        print(f"{rt:.6f}")

    # Square roots
    squared_roots = [r**2 for r in real_roots]
    print("\nSquared roots (roots of g):")
    for sr in squared_roots:
        print(f"{sr:.6f}")

    # form g with roots squared_roots: g(x) = a*(x - r1^2)*(x - r2^2)*(x - r3^2)
    # find a with g(0) = -1 --> a * (-r1^2)*(-r2^2)*(-r3^2) = -1
    prod_roots = 1
    for sr in squared_roots:
        prod_roots *= (-sr)
    a = -1 / prod_roots

    g = poly_from_roots(squared_roots)  # monic polynomial with roots squared_roots
    # scale polynomial by a
    g = [a*c for c in g]

    print("\nPolynomial g coefficients (ascending):")
    for i,c in enumerate(g):
        print(f"coeff x^{i}: {c:.6f}")

    # evaluate g(9)
    g9 = poly_eval(g, 9)
    print(f"\ng(9) = {g9:.6f}")

if __name__ == "__main__":
    main()
```
