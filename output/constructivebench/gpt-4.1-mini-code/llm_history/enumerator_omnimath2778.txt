[write_program]
The problem involves finding all real values \( k \) such that the quadratic equation

\[
x^2 + 2kx + 7k - 10 = 0
\]

has a unique solution \( x \). A quadratic equation \( ax^2 + bx + c = 0 \) has a unique solution if its discriminant is zero:

\[
\Delta = b^2 - 4ac = 0.
\]

Here, \( a=1 \), \( b=2k \), and \( c=7k - 10 \). We can find all such \( k \) by solving:

\[
(2k)^2 - 4(1)(7k -10) = 0.
\]

After finding the \( k \) values, we sum them.

The code below enumerates all \( k \) with discriminant zero, prints them exactly, and then prints their sum.

```python
# Enumerate all real k such that x^2 + 2kx + 7k - 10 = 0 has a unique solution.
# Discriminant = (2k)^2 - 4*(7k - 10) = 4k^2 - 28k + 40 = 0

def main():
    # Solve 4k^2 - 28k + 40 = 0
    # k^2 - 7k + 10 = 0
    # roots are k = (7 ± sqrt(49 - 40)) / 2 = (7 ± 3) / 2
    import math
    discriminant = 49 - 40  # 9
    sqrt_disc = math.sqrt(discriminant)
    k1 = (7 + sqrt_disc) / 2
    k2 = (7 - sqrt_disc) / 2
    ks = [k1, k2]

    print("Values of k with unique solution:")
    for k in ks:
        # print exact fractions when possible
        # k1 = 5, k2 = 2
        # So we print integer if close enough to int
        if abs(k - round(k)) < 1e-12:
            print(int(round(k)))
        else:
            print(k)

    s = sum(ks)
    # Sum should be 7
    print("Sum of such k:")
    if abs(s - round(s)) < 1e-12:
        print(int(round(s)))
    else:
        print(s)

if __name__ == "__main__":
    main()
```
