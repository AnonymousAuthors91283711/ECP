[write_program]
This problem seems to ask: Given the list `s` constructed by taking all numbers from 0 to 728 in base 3, dropping leading zeroes, and concatenating their base-3 digit lists, how many indices `i` in `s` have a length-3 sublist starting at `i + j` (for some j in {0,1,2}) equal to `[0,1,2]`? The count of such indices is the answer.

We'll:
- Generate the list `s`.
- For every index i, look forward for j in [0,1,2] if `s[i+j:i+j+3] == [0,1,2]` and if i+j+2 < len(s).
- Collect all such `i`.
- Print each found index i immediately.
- After enumeration, print the total count.

```python
def to_base_3(n):
    if n == 0:
        return [0]
    digits = []
    while n > 0:
        digits.append(n % 3)
        n //=3
    return digits[::-1]

def main():
    # Construct s as specified
    s = []
    for n in range(729):
        digits = to_base_3(n)
        # drop leading zeros:
        while len(digits) > 1 and digits[0] == 0:
            digits.pop(0)
        s.extend(digits)

    n = len(s)
    indices_set = set()
    for i in range(n):
        for j in range(3):
            start = i + j
            if start + 2 < n:
                triple = s[start:start+3]
                if triple == [0,1,2]:
                    indices_set.add(i)
                    print(i)
    total = len(indices_set)
    print("Total count:", total)

if __name__ == "__main__":
    main()
```
