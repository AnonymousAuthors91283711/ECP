[write_program]
The problem involves functions `f` and `g` with digit sums in different bases (base 4, then base 8 of the sum), and a condition on digits in base 16 of `g(n)`. We look for the least positive integer `n` such that some digit of `g(n)` in hexadecimal is at least 10 (i.e., 'A' or greater).

We will:
- Enumerate `n` starting from 1,
- Compute `f(n)` = sum of base-4 digits of `n`,
- Compute `g(n)` = sum of base-8 digits of `f(n)`,
- Convert `g(n)` to base 16 and check if any digit >= 10,
- Print all such `n` up to some upper limit,
- Print the smallest `n` found.

```python
def digits_base(b, x):
    """Return the list of digits of x in base b."""
    if x == 0:
        return [0]
    ds = []
    while x > 0:
        ds.append(x % b)
        x //=b
    ds.reverse()
    return ds

def f(n):
    # sum of base-4 digits
    return sum(digits_base(4, n))

def g(n):
    # sum of base-8 digits of f(n)
    return sum(digits_base(8, f(n)))

def hex_digits(x):
    # digits of x in base 16
    return digits_base(16, x)

max_n = 10000  # upper bound for search
found = []
for n in range(1, max_n+1):
    gn = g(n)
    hd = hex_digits(gn)
    if any(d >= 10 for d in hd):
        print(f"n={n}, g(n)={gn}, hex digits={hd}")
        found.append(n)

if found:
    print(f"Smallest n with a hex digit >=10 in g(n): {min(found)}")
else:
    print(f"No such n found up to {max_n}")
```
