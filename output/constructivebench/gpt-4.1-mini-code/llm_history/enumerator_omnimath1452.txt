[write_program]
The problem considers natural numbers \( n > 0 \) such that there exists an integer \( m \) with \( m^3 = n^3 + 2n^2 + 9n + 8 \). We want to find all such \( n \).

We implement a Python program to enumerate \( n \) over a reasonable range (e.g., 1 to 1000) and check if \( n^3 + 2n^2 + 9n + 8 \) is a perfect cube of some integer \( m \). We print each such \( n \) and the corresponding \( m \) immediately.

We try integer \( m \) by checking if \( m = \sqrt[3]{value} \) is integral, using integer cube root calculation. Since the cube root function for general integers can be tricky for negative numbers, and here \( n > 0 \), the expression is positive, \( m \) should be positive as well.

```python
# Enumerate n > 0 up to 1000 to find n with some integer m such that m^3 = n^3 + 2n^2 + 9n + 8

def int_cuberoot(x):
    # Integer cube root of nonnegative x
    if x < 0:
        return -int_cuberoot(-x)
    low, high = 0, x
    while low <= high:
        mid = (low + high) // 2
        cube = mid ** 3
        if cube == x:
            return mid
        elif cube < x:
            low = mid + 1
        else:
            high = mid - 1
    return high  # floor cube root

max_n = 1000

for n in range(1, max_n + 1):
    val = n**3 + 2*n**2 + 9*n + 8
    m = int_cuberoot(val)
    if m**3 == val:
        print(f"n={n}, m={m}, m^3={val}")
```

This will help identify solutions and formulate the set precisely.
