[write_program]
The problem is to count six-digit numbers (from 000000 to 999999 but actually 6-digit numbers start at 100000) with digits in {1,2,3,4,5,6}, all digits distinct, and consecutive digits do not differ by 1. The digits list length is exactly 6, digits are distinct, and all digits are in [1..6].

We must enumerate all 6-digit sequences composed of digits 1 to 6, with no repeated digits, length 6, and no two adjacent digits differing by 1 in absolute value.

We will generate permutations of [1..6], filter by the no-adjacent digits difference = 1 constraint, print each such number immediately, and finally print the count.

Since the problem limits digits to 1-6 and length 6 with distinct digits, it's permutations of [1..6]. There are 6! = 720 permutations to check, which is efficient.

Below is the Python code to enumerate all such numbers and print them immediately.

```python
# Enumerate 6-digit numbers with digits 1 to 6, all distinct,
# no two adjacent digits differ by 1. Print each number immediately.

from itertools import permutations

digits = [1, 2, 3, 4, 5, 6]

count = 0
print("Digits used:", digits)
print("Valid numbers:")

for perm in permutations(digits, 6):
    # Check if no two adjacent digits differ by 1
    if all(abs(perm[i] - perm[i+1]) != 1 for i in range(5)):
        # Convert tuple to number
        num = int(''.join(map(str, perm)))
        print(num)
        count += 1

print("Total count:", count)
print("Maximum number with above properties:", max(
    int(''.join(map(str, perm))) for perm in permutations(digits, 6)
    if all(abs(perm[i] - perm[i+1]) != 1 for i in range(5))
))
```
