[write_program]
The problem involves counting functions \( s: \text{Fin } 36 \to \text{Fin } 10 \) such that \( (\sum s(i)) \bmod 10 \) is not in the range of \( s \). We'll enumerate all functions for small domain sizes and count how many satisfy the property. Due to the huge size when domain=36, we test smaller domain sizes to conjecture the pattern. We'll print the parameters and counts.

```python
# Enumerate functions s: {0,...,n-1} -> {0,...,9} where (sum s mod 10) not in range s
# Since n=36 is too large to brute force, test smaller n to conjecture answer
# Prints counts for n in [1..6], showing number of functions satisfying property

from itertools import product

def count_valid_functions(n, k=10):
    count = 0
    total = k**n
    # Enumerate all functions s: [0..n-1] -> [0..k-1]
    # To reduce printing, only print counts, not each function
    for s in product(range(k), repeat=n):
        smod = sum(s) % k
        if smod not in s:
            count += 1
    return count, total

def main():
    k = 10
    # Test small domain sizes n
    for n in range(1, 7):
        count, total = count_valid_functions(n, k)
        print(f"n={n}, total={total}, valid={count}, ratio={count/total:.6f}")

if __name__ == "__main__":
    main()
```
