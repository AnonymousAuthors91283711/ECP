[write_program]
The problem defines a property isGood(M) for natural numbers M linked to the existence of integers a, b, c, d satisfying certain inequalities and the equation a * d = b * c. We want to find the greatest M such that isGood(M) holds.

We can enumerate values of M, and for each M, check whether there exist integers a, b, c, d satisfying the inequalities:
- M ≤ a < b ≤ c < d ≤ M + 49
- a * d = b * c

Given `a, b, c, d` are integers, but must satisfy strict inequalities and be within [M, M + 49], we can consider only integers in that range for a, b, c, d.

Since a * d = b * c, equivalently ad - bc = 0.

Given the ranges are small (length 50), we can iterate over a, b, c, d in the given intervals.

We want to check for each M up to some threshold whether isGood(M) holds.

The problem wants code that enumerates such M, printing M along with whether it is good. From that, we might conjecture the greatest M that is good.

To reduce complexity, we can fix M from 1 to 60 (since plus 49 reaches up to 109, still manageable), print good M, bad M, and the conjectured greatest good M.

We'll optimize by noting some ordering constraints (e.g., a < b, b ≤ c, c < d) and only iterate over possible a,b,c,d that satisfy them.

Here is the python code:

```python
# Enumerate M values up to a threshold.
# For each M, check existence of a,b,c,d in [M,M+49]
# with constraints: M ≤ a < b ≤ c < d ≤ M+49 and a*d == b*c
# Print M and if isGood or not.

def is_good(M):
    start, end = M, M+49
    # Iterate a in [start,end-3], because need room for b,c,d
    for a in range(start, end - 2):
        for b in range(a+1, end -1):  # a < b
            for c in range(b, end):   # b ≤ c
                for d in range(c+1, end+1): # c < d ≤ end
                    if a*d == b*c:
                        return True
    return False

def main():
    max_M = 60
    last_good = None
    print("Enumerating M and checking isGood(M)...")
    for M in range(1, max_M+1):
        good = is_good(M)
        print(f"M={M}: isGood={good}")
        if good:
            last_good = M
    if last_good is not None:
        print(f"Greatest M with isGood(M) = True: {last_good}")
        print(f"Least M with isBad(M) = True: {last_good + 1}")
    else:
        print("No M found with isGood(M) = True")

if __name__ == "__main__":
    main()
```
