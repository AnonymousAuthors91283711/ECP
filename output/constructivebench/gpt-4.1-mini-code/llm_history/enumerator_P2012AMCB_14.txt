[write_program]
The problem involves searching for a natural number \( n < 1000 \) satisfying inequalities involving sequences \( s_1 = 2n \), \( b_2 = s_1 + 50 \), \( s_2 = 2b_2 \) with conditions \( s_2 \geq 1000 \) and \( 2(s_2+50) \geq 1000 \). Then, the goal is to find the smallest such \( n \) and also sum the digits of \( n \).

The program below enumerates \( n \) from 0 to 999, checks the conditions, prints each \( n \) meeting them along with its digit sum, and at the end prints the smallest \( n \) found and its digit sum.

```python
# Enumerate n < 1000 satisfying:
# s1 = 2*n
# b2 = s1 + 50
# s2 = 2*b2
# s2 >= 1000 and 2*(s2+50) >= 1000
# Print all such n with digit sums in ascending order
# Then print the smallest n and its digit sum

def digit_sum(x):
    return sum(int(d) for d in str(x))

candidates = []
for n in range(1000):
    s1 = 2*n
    b2 = s1 + 50
    s2 = 2*b2
    if s2 >= 1000 and 2*(s2 + 50) >= 1000:
        dsum = digit_sum(n)
        print(f"n={n}, digit_sum={dsum}")
        candidates.append((n, dsum))

if candidates:
    n_min, dsum_min = candidates[0]
    print(f"Minimum n: {n_min}, digit_sum: {dsum_min}")
else:
    print("No n found satisfying constraints.")
```
