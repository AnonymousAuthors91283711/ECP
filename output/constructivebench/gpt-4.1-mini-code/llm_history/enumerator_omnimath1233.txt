[write_program]
The problem is to count the three-digit numbers 100 to 999 that use only digits 1 to 7 and satisfy divisibility by 7 in at least one of three cyclic digit rotations: the original number, the rotation moving the first digit to the end, or the rotation moving the last digit to the front.

We enumerate all such numbers, check conditions, print each valid number as we find it, and finally print the count.

```python
def digits(n):
    return [n // 100, (n // 10) % 10, n % 10]

def rotate1(n):
    # rotate digits left: abc -> bca
    d = digits(n)
    return d[1]*100 + d[2]*10 + d[0]

def rotate2(n):
    # rotate digits right: abc -> cab
    d = digits(n)
    return d[2]*100 + d[0]*10 + d[1]

good_digits = set(range(1,8))

count = 0
for n in range(100, 1000):
    d = digits(n)
    if all(dig in good_digits for dig in d):
        if (n % 7 == 0) or (rotate1(n) % 7 == 0) or (rotate2(n) % 7 == 0):
            print(n)
            count += 1
print("Total count:", count)
```
