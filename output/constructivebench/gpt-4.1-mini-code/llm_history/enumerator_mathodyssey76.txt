[write_program]
The problem asks to find the minimal value of the double sum \(\sum_{i=1}^{95} \sum_{j=1}^{95} s_i s_j\), where each \(s_i\) is either 1 or -1.

Note that \(\sum_{i=1}^{95} \sum_{j=1}^{95} s_i s_j = (\sum_{i=1}^{95} s_i)^2\).

Thus, the problem reduces to minimizing \((\sum_i s_i)^2\), where each \(s_i\) is ±1.

Because \(\sum_i s_i\) is an integer between -95 and 95 and must have the same parity as 95 (which is odd), the minimal \(|\sum_i s_i|\) is 1.

Hence the minimal possible sum is \(1^2 = 1\).

To assist in conjecturing, I write a program enumerating all signatures \(s\) with \(s_i=\pm1\), counting the square of the sum, but only for partitions of ±1 counts (to avoid full enumeration).

However, enumerating all \(2^{95}\) sequences is impossible, so instead, I'll enumerate how many entries equal to 1 (denote \(k\)), and calculate \((2k - 95)^2\). Since \(k\) ranges from 0 to 95, I enumerate these values, print them streaming, then print the minimum.

```python
# Enumerate values of (sum s_i)^2 when s_i = ±1, i=1..95
# sum s_i = (#ones)*1 + (#minus_ones)*(-1) = k - (95-k) = 2k - 95
# For k in 0..95, print value = (2k - 95)^2
# Finally, print minimal such value.

def main():
    n = 95
    values = []
    for k in range(n+1):
        ssum = 2*k - n
        val = ssum**2
        print(f"k={k}, sum={ssum}, sum^2={val}")
        values.append(val)
    min_val = min(values)
    print(f"Minimum sum^2 = {min_val}")

if __name__ == "__main__":
    main()
```
