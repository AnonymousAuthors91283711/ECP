[write_program]
The problem involves a polynomial \( P \) of degree at most 2015 that fits the values \( P(n) = \frac{1}{n^2} \) for \( n=1,2,\dots,2016 \). We want to find the integer part of \(2017 \times P(2017)\).

We will:
1. Use Lagrange interpolation over the points \((1, 1/1^2), (2, 1/2^2), \dots, (2016, 1/2016^2)\).
2. Evaluate the polynomial at 2017.
3. Multiply by 2017 and print the floor of this value.

To optimize:
- Use barycentric formula or precompute products to avoid huge operations and overflow.
- Use rational numbers (`fractions.Fraction`) to keep exact values.
- Enumerate partial sums of Lagrange basis and print progress if needed.

Below is an efficient enumerator that prints candidates as it computes partial sums for different degrees and finally prints the integer part asked.

```python
from fractions import Fraction

def main():
    n = 2016
    x_target = 2017
    # Points (k, 1/k^2) for k=1..2016
    xs = list(range(1, n + 1))
    ys = [Fraction(1, k * k) for k in xs]

    # Precompute denominator for Lagrange basis polynomials
    # L_k(x) = prod_{j!=k} (x - x_j) / (x_k - x_j)
    # We want P(2017) = sum ys[k]*L_k(2017)

    # Precompute denominator for each k: denom_k = prod_{j!=k} (x_k - x_j)
    # This is prod_{j!=k} (k - j) = (k-1)! * (n - k)!
    # But careful with sign

    # Compute denominators using factorial to handle sign
    from math import factorial

    factorials = [factorial(i) for i in range(n + 1)]
    denominators = []
    for k in range(1, n + 1):
        denom = factorials[k - 1] * factorials[n - k]
        # sign is (-1)^(n - k) because terms from k+1 to n are negative
        if (n - k) % 2 == 1:
            denom = -denom
        denominators.append(denom)

    # Compute numerator = prod_{j=1}^n (x_target - x_j) = product of (2017 - j)
    numerator = 1
    for j in xs:
        numerator *= (x_target - j)

    # Compute P(2017) = sum_k y_k * numerator / ((2017 - x_k)*denom_k)
    # Use Fraction for exact computation
    total = Fraction(0, 1)
    for k in range(n):
        term = ys[k] * Fraction(numerator, (x_target - xs[k]) * denominators[k])
        total += term
        # Print partial sum for early inspection (limit output)
        if k % 400 == 0 or k == n - 1:
            approx = float(total)
            print(f"Partial sum after {k+1} terms: approx {approx:.10f}")

    value = 2017 * total
    floor_val = value.numerator // value.denominator
    print(f"Integer part of 2017 * P(2017): {floor_val}")

if __name__ == "__main__":
    main()
```
