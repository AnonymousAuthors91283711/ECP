[write_program]
The problem is about finding the greatest number \( n \) such that there exists a number of remaining A's after the first 30 quizzes meeting a certain score condition.

Given:
- totalQuizzes = 50,
- firstA = 22,
- \( firstA + remainingA \geq \frac{4}{5} \times totalQuizzes \),
- \( n = (totalQuizzes - 30) - remainingA \).

We want to enumerate all possible \( n \) for values of remainingA that satisfy the inequalities, then identify the maximum \( n \).

The code below enumerates possible values of remainingA (0 to 20, since totalQuizzes - 30 = 20), checks the condition, prints each qualifying \( n \), and prints the maximum \( n \) found.

```python
# Enumerate possible n for given totalQuizzes=50, firstA=22 satisfying:
# firstA + remainingA >= 4*totalQuizzes/5 = 40
# n = (totalQuizzes - 30) - remainingA
# remainingA in 0..20

def main():
    totalQuizzes = 50
    firstA = 22
    min_score = 4 * totalQuizzes // 5  # 40

    max_n = None
    print(f"Parameters: totalQuizzes={totalQuizzes}, firstA={firstA}")
    for remainingA in range(totalQuizzes - 30 + 1):  # 0 to 20
        if firstA + remainingA >= min_score:
            n = (totalQuizzes - 30) - remainingA
            print(f"Found n={n} with remainingA={remainingA}")
            if max_n is None or n > max_n:
                max_n = n

    print(f"Maximum n found: {max_n}")

if __name__ == "__main__":
    main()
```
