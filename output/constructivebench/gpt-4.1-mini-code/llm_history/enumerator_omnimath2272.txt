[write_program]
The task is to compute the probability that in a function from a 4-element set (Fin 4) to a 6-element set (Fin 6), there exists some value in the codomain that appears at least 3 times among the 4 inputs. This corresponds to counting functions d : Fin 4 → Fin 6 where some x in Fin 6 is the image of at least 3 elements in Fin 4.

We want to:
1. Enumerate all functions from a 4-element set to 6-element set (6^4 = 1296 total).
2. Filter those functions where some value appears at least 3 times.
3. Output count and calculate fraction (count / 6^4).

We'll print all such functions (or a representation of them), and the final count and fraction.

```python
from itertools import product

def main():
    n, m = 4, 6  # domain size 4, codomain size 6
    total = m ** n
    count = 0
    print(f"Parameters: domain size = {n}, codomain size = {m}")
    for f in product(range(m), repeat=n):
        # Count occurrences of each codomain value
        counts = [0]*m
        for val in f:
            counts[val] += 1
        if any(c >= 3 for c in counts):
            count += 1
            print(f"Function: {f} has value with frequency ≥ 3")
    print(f"Count of functions with some value repeated ≥ 3 times: {count}")
    print(f"Probability = {count}/{total} ≈ {count/total:.6f}")

if __name__ == "__main__":
    main()
```
