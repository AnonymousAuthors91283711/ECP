[write_program]
The problem asks us to find all positive integers \( n \) such that there exists a unique integer \( a \) with \( 0 \leq a < n! \) and \( n! \mid a^n + 1 \). The program enumerates for small \( n \), checking all possible \( a \), printing any \( n \) for which exactly one such \( a \) exists.

```python
from math import factorial

# For n in 1 to 9 (factorials get big fast), find unique a with 0 ≤ a < n!, n!|(a^n+1)
for n in range(1, 10):
    fact = factorial(n)
    valid_as = []
    # To optimize, compute a^n mod fact using pow with 3 arguments
    for a in range(fact):
        if pow(a, n, fact) == (fact - 1) % fact:  # a^n ≡ -1 mod n!
            valid_as.append(a)
            if len(valid_as) > 1:
                break  # no uniqueness; stop early
    if len(valid_as) == 1:
        print(f"n={n}, unique a={valid_as[0]}")
    elif len(valid_as) > 1:
        print(f"n={n}, multiple valid a's: {valid_as}")
    else:
        print(f"n={n}, no valid a")
```
