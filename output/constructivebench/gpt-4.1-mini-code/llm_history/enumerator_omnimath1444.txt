[write_program]
This problem involves evaluating or simplifying the floor of the expression:  
\[ \left\lfloor \frac{2005^3}{2003 \cdot 2004} - \frac{2003^3}{2004 \cdot 2005} \right\rfloor \]

To conjecture the answer, we can write a program to compute this difference exactly or approximately for values around 2003, 2004, 2005, and see if a pattern emerges. Because the numbers are large, it's best to try with smaller integers around these values first to guess a general formula or behavior.

We will implement a Python program that:

- Enumerates candidates for \( n \) around 2003 and computes the floor of the analogous expression for \( n-1, n, n+1 \).
- Prints each partial result immediately.
- Prints the actual value for the given n=2004 to guide conjecture.

This serves as a tool to understand how the expression behaves and to guess the integer floor values. 

```python
# Enumerate floor values of floor( ((n+1)^3)/( (n-1)*n ) - ((n-1)^3)/(n*(n+1)) ) for n near 2004.

def compute_expr(n):
    # Compute each fraction exactly using integer arithmetic where possible
    # to avoid floating point inaccuracies.
    numerator1 = (n+1)**3
    denominator1 = (n-1)*n
    numerator2 = (n-1)**3
    denominator2 = n*(n+1)
    val = numerator1/denominator1 - numerator2/denominator2
    return val

def main():
    # Test for sample n values around 2004 to detect pattern
    for n in range(2002, 2007):
        val = compute_expr(n)
        floor_val = int(val // 1)  # floor
        print(f"n={n}, expression={val}, floor={floor_val}")
    # Also print exact value for the problem's n=2004 case as requested
    n = 2004
    val = compute_expr(n)
    floor_val = int(val // 1)
    print(f"\nFinal value for n=2004: {floor_val}")

if __name__ == "__main__":
    main()
```
