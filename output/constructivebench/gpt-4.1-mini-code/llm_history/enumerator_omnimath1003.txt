[write_program]
The problem involves finding all positive triples \((x,y,z)\) such that
\[
x y + z = (x + z)(y + z),
\]
and then maximizing \(xyz\).

Rearranging, this condition is equivalent to
\[
x y + z = x y + x z + y z + z^2,
\]
which simplifies to
\[
z = x z + y z + z^2 \implies 0 = z^2 + z (x + y - 1).
\]
Since \(z > 0\), the factor \(z^2 + z(x+y-1) = 0\) gives
\[
z + (x+y -1) = 0 \implies z = 1 - x - y.
\]
Note \(z > 0\) implies \(1-x-y > 0\), i.e., \(x + y < 1\).

We want to maximize
\[
xyz = x y (1 - x - y)
\]
subject to
\[
x > 0, y > 0, x + y < 1.
\]

To explore candidates numerically, we can enumerate \(x,y\) in \((0,1)\) with a small step, compute \(z=1 - x - y\) if positive, and output the product \(x y z\).

```python
# Enumerate positive triples (x,y,z) with x,y in (0,1) step 0.01, z=1-x-y>0,
# compute xyz and print when valid, to explore max xyz = x y (1 - x - y).

def main():
    step = 0.01
    candidates = []
    for i in range(1, 100):  # x in (0.01,0.99)
        x = i * step
        for j in range(1, 100):
            y = j * step
            z = 1 - x - y
            if z <= 0:
                break  # y only gets bigger, z nonpositive further
            # Product
            prod = x * y * z
            print(f"x={x:.2f}, y={y:.2f}, z={z:.2f}, xyz={prod:.5f}")
            candidates.append((prod, x, y, z))

    # Find max
    max_val, mx, my, mz = max(candidates)
    print(f"Maximum xyz = {max_val:.5f} at x={mx:.4f}, y={my:.4f}, z={mz:.4f}")

if __name__ == "__main__":
    main()
```
