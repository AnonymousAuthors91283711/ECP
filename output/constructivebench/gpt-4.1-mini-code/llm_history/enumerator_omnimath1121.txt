[write_program]
The problem involves computing the expected number of coins after 100 rounds, starting with 1 coin, where each round the number of coins increases by a factor of (1 + 1/100). This suggests a geometric growth: expected_coins = 1 * (1 + 1/100)^100. The goal is to print values of (1 + 1/n)^n for small n to observe the behavior approaching e, then compute for n=100 as in the problem.

```python
# Enumerate values of (1 + 1/n)^n for small n to observe pattern approaching e
for n in range(1, 21):
    val = (1 + 1/n)**n
    print(f"n={n}, (1+1/n)^n = {val:.10f}")

# Compute expected_coins for rounds=100, initial_coins=1
rounds = 100
initial_coins = 1
expected_coins = initial_coins * (1 + 1/rounds)**rounds
print(f"Expected coins after {rounds} rounds: {expected_coins:.10f}")
```
