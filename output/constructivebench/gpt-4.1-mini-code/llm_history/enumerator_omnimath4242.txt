[write_program]
The problem involves finding natural numbers \( a \) for which there exist \( b, c, d \) satisfying certain digit manipulations and equalities related to squaring \( a \) and \( b \). Specifically:

- Let the digits of \( a \) in base 10 be \( digitsA \).
- Define \( b \) by moving the last digit of \( a \) to the front.
- \( c = b^2 \).
- Define \( d \) by moving the first digit of \( c \) to the end.
- We want \( d = a^2 \).

The task is to enumerate candidates for \( a \) up to some limit, compute the corresponding \( b, c, d \), and print those that satisfy the condition.

Weâ€™ll test \( a \) from 10 to 1000 (since single digits rotate trivially), print all that satisfy the condition.

```python
def digits(n):
    return list(map(int, str(n)))

def of_digits(ds):
    return int(''.join(map(str, ds)))

for a in range(10, 1000):
    digitsA = digits(a)
    if len(digitsA) < 2:
        continue
    # b: last digit of a moved to front
    b_digits = [digitsA[-1]] + digitsA[:-1]
    b = of_digits(b_digits)
    c = b * b
    digitsC = digits(c)
    if len(digitsC) < 2:
        continue
    # d: first digit of c moved to the end
    d_digits = digitsC[1:] + [digitsC[0]]
    d = of_digits(d_digits)
    if d == a * a:
        print(f"a={a}, b={b}, c={c}, d={d}")
```
