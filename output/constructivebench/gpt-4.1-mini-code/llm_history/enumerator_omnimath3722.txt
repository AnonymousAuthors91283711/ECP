[write_program]
The problem seems to concern natural numbers \( n \) (with \( n \geq 1 \)) such that the sum of the squares of its decimal digits equals \( n \) itself. We want to find all such numbers \( n \). To assist in conjecturing these numbers, the program enumerates \( n \) in a reasonable range and checks the condition.

Given the growth rates, such numbers are rare and fairly small, so we can check up to a few thousand or ten thousand. We print each \( n \) that satisfies the condition immediately.

```python
# Enumerate all n â‰¥ 1 up to a chosen limit,
# checking if n equals the sum of the squares of its decimal digits.

def sum_of_digit_squares(n):
    return sum(int(d)**2 for d in str(n))

MAX_N = 10000  # Sample upper bound; can increase if needed.

for n in range(1, MAX_N + 1):
    s = sum_of_digit_squares(n)
    if s == n:
        print(n)
```
