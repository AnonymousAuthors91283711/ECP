[write_program]
The problem considers a sequence \( S(L) = \sum_{n=1}^L \lfloor n/2 \rfloor \) and asks for the set of positive integers \( L \) such that \( S(L) \) is a perfect square. We want to enumerate values of \( L \) and check if \( S(L) \) is a perfect square to guess and verify the answer set.

```python
# Enumerate values L > 0 and check if S(L) = sum of floor(n/2) from 1 to L is a perfect square.
# Print all such L and S(L). Then identify any minimum or maximum if relevant.

import math

def S(L):
    # sum of floor(n/2) for n=1 to L
    total = 0
    for n in range(1, L+1):
        total += n//2
    return total

def is_square(x):
    r = int(math.isqrt(x))
    return r*r == x

max_L = 50
print("L, S(L), is S(L) a perfect square?")
for L in range(1, max_L+1):
    val = S(L)
    if is_square(val):
        print(f"{L}, {val}, YES")
    else:
        print(f"{L}, {val}")

# Highlight all L with perfect square S(L)
print("\nValues of L with S(L) a perfect square:")
for L in range(1, max_L+1):
    val = S(L)
    if is_square(val):
        print(L, val)
```
