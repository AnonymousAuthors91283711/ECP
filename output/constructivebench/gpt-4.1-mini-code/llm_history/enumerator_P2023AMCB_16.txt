[write_program]
The problem involves finding natural numbers \( x \) that cannot be expressed as \( 6a + 10b + 15c \) for nonnegative integers \( a, b, c \). We want to find the greatest such \( x \), which is suggested to be 29, and check the sum of the digits of 29. 

This is a classical Frobenius coin problem with three denominations, where we enumerate numbers and check if they can be formed. The program below enumerates \( x \) from 0 to 50, prints those that cannot be expressed, and identifies the greatest such number and its digit sum.

```python
# Enumerate numbers x = 0 to 50 to find those not representable as 6a + 10b + 15c
def can_represent(x):
    for a in range(x//6 + 1):
        for b in range((x - 6*a)//10 + 1):
            rem = x - 6*a - 10*b
            if rem < 0:
                break
            if rem % 15 == 0:
                return True
    return False

max_check = 50
non_reps = []
print("Numbers not representable as 6a+10b+15c:")
for x in range(max_check + 1):
    if not can_represent(x):
        print(x)
        non_reps.append(x)

if non_reps:
    greatest = max(non_reps)
    digit_sum = sum(int(d) for d in str(greatest))
    print(f"Greatest non-representable number: {greatest}")
    print(f"Sum of its digits: {digit_sum}")
```
