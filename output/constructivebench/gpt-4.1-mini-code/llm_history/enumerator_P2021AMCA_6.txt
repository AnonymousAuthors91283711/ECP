[write_program]
The problem is to find the smallest positive integer \( n = r + b \) for which there exist nonnegative integers \( r, b \) such that:

\[
\frac{r}{r+b} = \frac{1}{3} \quad \text{and} \quad \frac{r}{r + b + 4} = \frac{1}{4}.
\]

We want to find the minimum such \( n \), and to assist in conjecturing, we'll enumerate possible \( (r,b) \) and check these conditions exactly.

```python
# Enumerate (r,b) pairs with r+b = n, check conditions:
#  r/(r+b) = 1/3 and r/(r+b+4) = 1/4.
# Print all candidates with exact fractions, and at the end print minimum n found.

from fractions import Fraction

def check_conditions(n):
    # r + b = n, r > 0, b >=0
    # Conditions:
    # r/(r+b)=1/3
    # r/(r+b+4)=1/4
    # Since r+b = n:
    # r/n = 1/3 => r = n/3, must be integer
    # r/(n+4) = 1/4
    # => r = (n+4)/4, must be integer
    # So r = n/3 = (n+4)/4
    # Equate: n/3 = (n+4)/4 => 4n = 3n + 12 => n=12
    # r = 12/3=4
    # b = n - r = 8
    # So n=12, r=4, b=8 satisfies
    pass

def main():
    min_n = None
    for n in range(1, 41):
        for r in range(1, n+1):
            b = n - r
            # Check r/(r+b) == 1/3
            if Fraction(r, n) == Fraction(1,3):
                # Check r/(r+b+4) == 1/4
                if Fraction(r, n + 4) == Fraction(1,4):
                    print(f"n={n}, r={r}, b={b} satisfy conditions exactly")
                    if (min_n is None) or (n < min_n):
                        min_n = n
    if min_n is not None:
        print(f"Minimum n found: {min_n}")

if __name__ == "__main__":
    main()
```
