[write_program]
The problem concerns integer values \( k \) between 1 and 201 for which there exists a natural number \( n \) such that the sum of fractional parts \(\sum_{i=1}^k \mathrm{fract}\left(\frac{i n}{202}\right) = \frac{k}{2}\).

To explore this, the program will:
- For each \( k \) in the range 1 to 201:
- Try small values of \( n \) up to a threshold (e.g., 202) because the denominator is fixed at 202, so multiples mod 202 repeat.
- For each pair, calculate the sum of fractional parts exactly using `fractions.Fraction`.
- Print each (k, n) where the sum equals exactly \( k/2 \).
- After enumerating all candidates, print the list of all such \( k \) values found.

This will help conjecture the exact set `omnimath3647_answer`.

```python
from fractions import Fraction

def fract(x: Fraction) -> Fraction:
    return x - x.numerator // x.denominator

def main():
    max_k = 201
    max_n = 202  # period to check multiples up to denominator
    candidates = set()
    for k in range(1, max_k + 1):
        half = Fraction(k, 2)
        for n in range(1, max_n + 1):
            s = Fraction(0)
            for i in range(1, k + 1):
                val = Fraction(i * n, 202)
                s += fract(val)
            if s == half:
                print(f"k={k}, n={n}, sum={s}")
                candidates.add(k)
    # After enumeration print the candidate k values sorted
    print("\nPossible k values (omnimath3647_answer) =", sorted(candidates))

if __name__ == "__main__":
    main()
```
