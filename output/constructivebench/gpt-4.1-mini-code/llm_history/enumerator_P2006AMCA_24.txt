[write_program]
The problem is to count the number of triples \((a, b, c) \in \mathbb{N}^3\) such that \(a+b+c = 2006\) and \(b+c\) is even. Note \(a, b, c \geq 0\) since they are natural numbers (including zero).

Key observations:
- \(b+c\) even means \(b+c \equiv 0 \pmod{2}\).
- Since \(a + b + c = 2006\), then \(a \equiv 2006 - (b+c)\).
- \(a\) is a natural number, so once \(b, c\) are fixed, \(a = 2006 - b - c\).
- Count triples where \(0 \leq b,c \leq 2006\), \(b+c \leq 2006\), and \(b+c\) even.

We can enumerate pairs \((b,c)\) respecting these conditions and count valid \(a\).

Below is a Python program enumerating valid triples and printing the count.

```python
# Count triples (a,b,c) with a,b,c in N, a+b+c=2006, and (b+c) even

def main():
    total = 0
    N = 2006
    for b in range(N+1):
        for c in range(N+1 - b):
            if (b+c) % 2 == 0:
                a = N - b - c
                # a >= 0 guaranteed by c <= N - b
                # print each valid triple immediately
                print(f"(a,b,c)=({a},{b},{c})")
                total += 1
    print("Total valid triples:", total)

if __name__ == "__main__":
    main()
```
