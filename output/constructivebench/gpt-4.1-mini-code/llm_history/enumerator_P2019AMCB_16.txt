[write_program]
This problem involves finding a sequence \(p(n)\) of rational numbers satisfying certain boundary conditions and a recurrence relation except at some points (3, 6, 10).

We'll attempt to find \(p(n)\) for \(n=0,\ldots,11\) that satisfy the conditions, focusing on rational arithmetic. The main unknowns are \(p(1), p(2), p(4), p(5), p(7), p(8), p(9)\), since \(p(0), p(3), p(6), p(10), p(11)\) are fixed.

We can solve the system of linear equations arising from the relation:
\[
p(n) = \frac{p(n+1) + p(n+2)}{2}
\]
for \(n\) not in \(\{3,6,10\}\).

We'll try all rational values with small denominators and numerators within some small range, then check for consistency step by step, printing candidates as they appear.

```python
from fractions import Fraction

# Fixed values given by problem
fixed = {0: Fraction(1), 3: Fraction(0), 6: Fraction(0), 10: Fraction(1), 11: Fraction(0)}

# n values: 0 to 11
# Unknowns: 1,2,4,5,7,8,9
unknowns = [1,2,4,5,7,8,9]

# Conditions: For n <10, nâ‰ 3,6,10
# p(n) = (p(n+1)+p(n+2))/2
# Write these equations for n=0..9 excluding 3,6,10:
# n=0: p0 = (p1+p2)/2 => 1 = (p1+p2)/2 => p1+p2=2
# n=1: p1 = (p2+p3)/2 => p1 = (p2+0)/2 => 2p1 = p2
# n=2: p2 = (p3+p4)/2 => p2 = (0 + p4)/2 => 2p2 = p4
# n=4: p4 = (p5+p6)/2 => p4 = (p5 + 0)/2 => 2p4 = p5
# n=5: p5 = (p6+p7)/2 => p5 = (0 + p7)/2 => 2p5 = p7
# n=7: p7 = (p8+p9)/2 => 2p7 = p8 + p9
# n=8: p8 = (p9+p10)/2 => 2p8 = p9 + 1
# n=9: p9 = (p10+p11)/2 => 2p9 = 1 + 0 =1

# We'll solve these stepwise using substitution to find exact values.

def main():
    # From n=9: 2p9 =1 => p9=1/2
    p9 = Fraction(1,2)
    print("p9 =", p9)
    # From n=8: 2p8 = p9 +1 = 1/2 +1 = 3/2 => p8=3/4
    p8 = Fraction(3,4)
    print("p8 =", p8)
    # From n=7: 2p7 = p8 + p9 = 3/4 + 1/2 = 5/4 => p7=5/8
    p7 = Fraction(5,8)
    print("p7 =", p7)
    # From n=5: 2p5 = p7 => p5 = p7/2 = 5/16
    p5 = Fraction(5,16)
    print("p5 =", p5)
    # From n=4: 2p4 = p5 => p4 = p5/2 = 5/32
    p4 = Fraction(5,32)
    print("p4 =", p4)
    # From n=2: 2p2 = p4 => p2 = p4/2 = 5/64
    p2 = Fraction(5,64)
    print("p2 =", p2)
    # From n=1: 2p1 = p2 => p1 = p2/2 = 5/128
    p1 = Fraction(5,128)
    print("p1 =", p1)
    # From n=0: p1 + p2 = 2
    s = p1 + p2
    print("p1 + p2 =", s, "should be 2")

    # This is contradiction since p1+p2=5/128+5/64=15/128 !=2
    # Means we must reconsider n=0's relation

    # n=0: p0=1=(p1+p2)/2 => p1+p2=2

    # So the values from above contradict the condition at n=0.
    # Let's solve equations more carefully.

    # Define variables:
    # p1 = x
    # p2 = y

    # From n=9: p9=1/2
    # From n=8: 2p8 = p9+1 => p8 = (1/2+1)/2=3/4
    # n=7: 2p7 = p8+p9 => 2p7 = 3/4 +1/2=5/4 => p7=5/8
    # n=5: 2p5 = p7 => p5=p7/2=5/16
    # n=4: 2p4 = p5 => p4=p5/2=5/32
    # n=2: 2p2 = p4 => 2y=5/32 => y=5/64
    # n=1: 2x = y => x=y/2=5/128

    # Check n=0: x + y = 5/128 + 5/64 = 15/128 !=2

    # Contradiction implies some step is invalid.
    # This is because the condition at n=0 is p0=1 = (p1+p2)/2 => p1+p2=2,
    # but from propagation we get p1+p2=15/128.

    # So the problem is the condition at n=0 is not with the recursion (n=0 is in the "forall n <10 except 3,6,10")
    # So nice.

    # Hence, need to solve system of linear equations:
    # Equations for n in {0,1,2,4,5,7,8,9}:
    #
    # 0: 1 = (p1 + p2)/2   => 2 = p1 + p2
    # 1: p1 = (p2 + 0)/2   => 2p1 = p2
    # 2: p2 = (0 + p4)/2   => 2p2 = p4
    # 4: p4 = (p5 + 0)/2   => 2p4 = p5
    # 5: p5 = (0 + p7)/2   => 2p5 = p7
    # 7: p7 = (p8 + p9)/2  => 2p7 = p8 + p9
    # 8: p8 = (p9 + 1)/2   => 2p8 = p9 + 1
    # 9: p9 = (1 + 0)/2    => 2p9 = 1

    # Solve bottom up:

    p9 = Fraction(1,2)
    p8 = (p9 + 1)/2  # (1/2 + 1)/2 = 3/4
    # Let p7 be unknown for now.
    # p7 = (p8 + p9)/2 = (3/4 + 1/2)/2 = 5/8

    # from 5: 2p5 = p7 => p5 = p7/2 = 5/16
    # from 4: 2p4 = p5 => p4 = p5/2 = 5/32
    # from 2: 2p2 = p4 => p2 = p4/2 = 5/64
    # from 1: 2p1 = p2 => p1 = p2/2 = 5/128

    # check 0: p1 + p2 = 5/128 + 5/64 = 15/128 != 2

    # Contradicts 0.

    # Hence, system inconsistent. Let's try solving 0 and 1 simultaneously:

    # From 1: p2 = 2p1
    # From 0: p1 + p2 = 2 => p1 + 2p1 = 2 => 3p1 = 2 => p1 = 2/3, p2 = 4/3

    # from 2: 2p2 = p4 => p4 = 2p2 = 8/3

    # from 4: 2p4 = p5 => p5 = 2p4 = 16/3

    # from 5: 2p5 = p7 => p7 = 2p5 = 32/3

    # from 7: 2p7 = p8 + p9 => p8 = 2p7 - p9 = 2*(32/3) - p9

    # from 8: 2p8 = p9 + 1 => using previous gives 2p8 = p9 +1

    # substitute p8 from above:
    # 2p8 = 2*(2p7 - p9) = 2*(2*(32/3) - p9) = 4*(32/3) - 2p9 = 128/3 - 2p9

    # but 2p8 = p9 +1 from 8, so:
    # p9 +1 = 128/3 - 2p9
    # 3p9 = 128/3 -1 = (128 -3)/3 = 125/3
    # p9 = 125/9

    print("\nSolving updated equations:")
    p1 = Fraction(2,3)
    p2 = Fraction(4,3)
    p4 = Fraction(8,3)
    p5 = Fraction(16,3)
    p7 = Fraction(32,3)
    p9 = Fraction(125,9)
    p8 = Fraction(p9 + 1, 2)

    print(f"p1={p1}, p2={p2}, p4={p4}, p5={p5}, p7={p7}, p8={p8}, p9={p9}")
    # Check p8:
    # 2p8 = p9 +1 => 2*(p9+1)/2 = p9+1, OK
    # from 7: 2p7 = p8 + p9
    lhs = 2*p7
    rhs = p8 + p9
    print("Check n=7:", lhs, "==", rhs)

    # p9 and p8 too large compared to p10=1 and p11=0 which are fixed
    # So no contradiction from conditions about p10, p11 except fixed.

    # Final check: p0=1, correct; p3=0, p6=0; p10=1, p11=0 fixed.
    # Check all recurrences for n<10 and n != 3,6,10:
    print("Recurrences for n in [0..9] except 3,6,10:")
    for n in [0,1,2,4,5,7,8,9]:
        if n == 0:
            lhs = fixed[0]
            rhs = (p1 + p2)/2
        elif n == 1:
            lhs = p1
            rhs = (p2 + fixed.get(3, 0))/2
        elif n == 2:
            lhs = p2
            rhs = (fixed.get(3, 0) + p4)/2
        elif n == 4:
            lhs = p4
            rhs = (p5 + fixed.get(6, 0))/2
        elif n == 5:
            lhs = p5
            rhs = (fixed.get(6, 0) + p7)/2
        elif n == 7:
            lhs = p7
            rhs = (p8 + p9)/2
        elif n == 8:
            lhs = p8
            rhs = (p9 + fixed.get(10,1))/2
        elif n == 9:
            lhs = p9
            rhs = (fixed.get(10,1) + fixed.get(11,0))/2
        else:
            continue
        print(f"p({n}) = {lhs} ?= (p({n+1}) + p({n+2}))/2 = {rhs} => {lhs == rhs}")

if __name__ == "__main__":
    main()
```
