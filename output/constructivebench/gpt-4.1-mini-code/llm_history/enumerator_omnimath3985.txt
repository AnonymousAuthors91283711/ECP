[write_program]
The problem revolves around counting values m (1 ≤ m ≤ n³) for which the condition holds:

distance(n, m * (n / m)) = distance(n³, m * (n³ / m))

where division is integer division.

Our task is to enumerate A(n) = count of such m's for sample n, to conjecture the parity pattern or properties of A(n).

We'll:
- Enumerate n from 2 to some small value (e.g., 5).
- For each n, enumerate m from 1 to n³.
- Evaluate the condition exactly using integer arithmetic.
- Print n, each valid m, the current count A(n), and finally whether A(n) is odd.

```python
def distance(a: int, b: int) -> int:
    return abs(a - b)

def satisfies_condition(n: int, m: int) -> bool:
    # Integer division truncates toward zero here as in ℤ
    left = distance(n, m * (n // m)) if m != 0 else -1
    right = distance(n**3, m * (n**3 // m)) if m != 0 else -1
    return left == right

def A(n: int) -> int:
    count = 0
    print(f"n={n}")
    for m in range(1, n**3 + 1):
        if satisfies_condition(n, m):
            count += 1
            print(f"  m={m} satisfies condition; A({n})={count}")
    print(f"A({n})={count} {'(Odd)' if count %2 == 1 else '(Even)'}\n")
    return count

def main():
    for n in range(2, 6):
        A(n)

if __name__ == "__main__":
    main()
```
