[write_program]
The problem deals with counting the number of functions \( f : \{0,\dots,n-1\} \to \{0,\dots,n-1\} \) such that for all \( i < j \), we have: 
\[
f(j) < f(i) + (j - i).
\]
This is a strict inequality that strongly restricts how much \( f \) can increase. 
We want to enumerate all such functions for small \( n \), printing them and counting.

```python
# Enumerate the functions f: [0..n-1] -> [0..n-1] 
# s.t. for all i < j: f(j) < f(i) + (j - i)

def satisfies_condition(f):
    n = len(f)
    for i in range(n):
        for j in range(i+1, n):
            if not (f[j] < f[i] + (j - i)):
                return False
    return True

def print_functions(n):
    print(f"n = {n}")
    from itertools import product
    count = 0
    for f in product(range(n), repeat=n):
        if satisfies_condition(f):
            count += 1
            print(f"f = {f}")
    print(f"Count for n={n}: {count}")
    return count

def main():
    # Test small n values to conjecture the number of such functions
    for n in range(1,6):
        print_functions(n)

if __name__=="__main__":
    main()
```
