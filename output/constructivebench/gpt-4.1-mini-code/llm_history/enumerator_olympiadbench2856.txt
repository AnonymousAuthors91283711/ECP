[write_program]
The problem asks about the greatest real number \( x \) satisfying the equation:

\[
(\log x)^2 - \log(\sqrt{x}) = T
\]

with \( T = 10 \).

Rewrite the equation as:
\[
(\log x)^2 - \frac{1}{2} \log x = 10
\]

Let \( y = \log x \), then:
\[
y^2 - \frac{1}{2} y = 10
\]
or
\[
y^2 - \frac{1}{2} y - 10 = 0
\]

We look for real roots \( y \) of this quadratic, then \( x = e^{y} \).

The program below enumerates roots for a set of \( T \) values, shows roots for \( y \) (with exact quadratic formula), and computes corresponding \( x \). It prints the greatest \( x \) for each \( T \).

```python
import math

def enumerate_roots(T_values):
    for T in T_values:
        print(f"T = {T}")
        # Quadratic: y^2 - 0.5 y - T = 0
        a, b, c = 1.0, -0.5, -T
        disc = b*b - 4*a*c  # discriminant
        if disc < 0:
            print("  No real roots for y")
            continue
        sqrt_disc = math.sqrt(disc)
        y1 = (-b + sqrt_disc) / (2*a)
        y2 = (-b - sqrt_disc) / (2*a)
        # Corresponding x values
        x1 = math.exp(y1)
        x2 = math.exp(y2)
        print(f"  Roots y: {y1:.6f}, {y2:.6f}")
        print(f"  Corresponding x: {x1:.6f}, {x2:.6f}")
        max_x = max(x1, x2)
        print(f"  Greatest x: {max_x:.6f}")

if __name__ == "__main__":
    Ts = [8, 9, 10, 11, 12]  # sample T near 10
    enumerate_roots(Ts)
```
This enumerates roots for T values near 10 to assist in conjecturing the greatest solution \( x \) for the problem.
