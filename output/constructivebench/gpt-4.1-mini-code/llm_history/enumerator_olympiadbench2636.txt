[write_program]
The problem asks to find a four-digit natural number \( n \) with \( 1000 \leq n < 10000 \) such that the square root of \( n \) equals three times the sum of its digits in base 10. We want to enumerate such numbers \( n \) and print each candidate found.

Key points:
- \( n \) is four-digit: 1000 to 9999.
- \( \sqrt{n} = 3 \times \) (sum of digits of \( n \)).
- So \( \sqrt{n} \) must be an integer. Let \( s = \sqrt{n} \).
- Then \( s = 3 \times \text{sum\_digits}(n) \) and \( n = s^2 \).
- Iterate over four-digit \( n \), check condition, print valid solutions.

Since \( \sqrt{n} \leq 99 \) (since 99^2=9801), \( s \in [32,99] \) to keep \( s^2 \geq 1000 \).

This approach ensures faster enumeration iterating over \(s\), check if \( s = 3 \times \text{sum\_digits}(s^2) \).

```python
# Enumerate four-digit numbers n = s^2 where s = 3 * sum_of_digits(n)

def sum_digits(x):
    return sum(int(d) for d in str(x))

def main():
    for s in range(32, 100):  # s^2 in [1024, 9801]
        n = s*s
        if 1000 <= n < 10000:
            sd = sum_digits(n)
            if s == 3 * sd:
                print(f"n = {n}, sqrt(n) = {s}, sum_digits(n) = {sd}")

if __name__ == "__main__":
    main()
```
