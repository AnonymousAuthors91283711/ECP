[write_program]
The problem describes the set S of natural numbers greater than zero whose positive divisors are only 2 or 2017. This means each element s ∈ S is of the form s = 2^a * 2017^b with a,b ≥ 0, but s > 0, so a,b are non-negative integers (not both zero, since s > 0). 

We want to find the sum of 1/s over all s in S. Hence:

S = {2^a * 2017^b | a,b ≥ 0}

Since 1/s = 1/(2^a * 2017^b), the sum over all s is

∑_{a=0}^∞ ∑_{b=0}^∞ 1/(2^a * 2017^b)

This is a product of two geometric series:

(∑_{a=0}^∞ 1/2^a) * (∑_{b=0}^∞ 1/2017^b) = (1/(1 - 1/2)) * (1/(1 - 1/2017)) = 2 * (2017/2016) = 4034/2016

Simplify fraction: gcd(4034,2016) = 2, so sum = 2017/1008.

Therefore, the infinite sum of 1/s for s in S equals 2017/1008 exactly.

I will write a Python program enumerating these numbers for small powers of a,b, computing partial sums and printing these partial sums as approximation, then print the exact sum as a fraction.

```python
from fractions import Fraction

def main():
    print("Enumerating partial sums of sum_{a,b≥0} 1/(2^a * 2017^b):")
    max_power = 5  # small limit for exponent to avoid large computations
    for max_a in range(1, max_power + 1):
        for max_b in range(1, max_power + 1):
            partial_sum = Fraction(0,1)
            for a in range(max_a):
                for b in range(max_b):
                    term = Fraction(1, (2**a)*(2017**b))
                    partial_sum += term
            # print exact fractional partial sum
            print(f"Partial sum up to a<{max_a}, b<{max_b} = {partial_sum} ≈ {float(partial_sum):.8f}")
    # print exact infinite sum from formula
    exact_sum = Fraction(1, 1 - Fraction(1,2)) * Fraction(1, 1 - Fraction(1,2017))
    print(f"Exact infinite sum = {exact_sum} ≈ {float(exact_sum):.8f}")

if __name__ == "__main__":
    main()
```
This will generate partial sums for small cutoffs and output the exact value in lowest terms at the end.
