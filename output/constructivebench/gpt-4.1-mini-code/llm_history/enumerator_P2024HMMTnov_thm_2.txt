[write_program]
The problem asks for the least natural number \( n \ge 2 \) such that for every decomposition \( n = a + b \) with \( a, b > 0 \), the sum of the digits of \( a \) or the sum of the digits of \( b \) (in base 10) is at least 7.

The program will:
- Enumerate \( n \) starting from 2 upwards.
- For each \( n \), check all pairs \( (a,b) \) with \( a+b=n, a>0,b>0 \).
- Check if \( \text{digitsum}(a) \geq 7 \) or \( \text{digitsum}(b) \geq 7 \).
- If for every pair it holds, print \( n \) and stop.

The digit sum function is straightforward; we avoid heavy imports and define a helper function.

We'll print any \( n \) that satisfies all pairs. To respect the token limit, the program stops when the first such \( n \) is found.

```python
# Enumerate natural numbers n>=2 and check the digit sum condition for all decompositions a+b=n
def digitsum(x):
    s = 0
    while x > 0:
        s += x % 10
        x //=10
    return s

def condition_holds(n):
    for a in range(1, n):
        b = n - a
        if digitsum(a) < 7 and digitsum(b) < 7:
            return False
    return True

def main():
    n = 2
    while True:
        if condition_holds(n):
            print("Candidate n:", n)
            print("This is the least such n.")
            break
        n += 1

if __name__=="__main__":
    main()
```
