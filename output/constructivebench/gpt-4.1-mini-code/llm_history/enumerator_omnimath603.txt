[write_program]
The problem involves counting integers \(k\) in the range \([1,2013]\) such that \(k^k\) ends with the digit 1. We want to enumerate and count these \(k\).

Key observations:
- The last digit of \(k^k\) depends only on \(k \mod 10\) because last digits cycle every 4 or so powers.
- For each last digit \(d \in \{0,1,2,...,9\}\), efficiently determine the pattern of the last digit of \(d^e\) for various exponents \(e\).
- Only output each qualifying \(k\) immediately to obey streaming output.
- Then print the total count.

```python
# Enumerate k in [1,2013] with last digit of k^k = 1.

def last_digit_pow(base, exp):
    # Compute last digit of base^exp using cyclicity of last digits.
    # Cycles depend on base mod 10:
    # Precomputed cycles for last digits 0-9
    cycles = {
        0: [0],
        1: [1],
        2: [2,4,8,6],
        3: [3,9,7,1],
        4: [4,6],
        5: [5],
        6: [6],
        7: [7,9,3,1],
        8: [8,4,2,6],
        9: [9,1],
    }
    c = cycles[base]
    idx = (exp % len(c)) - 1  # -1 for zero-based index
    return c[idx]

count = 0
for k in range(1, 2014):
    ld = k % 10
    if last_digit_pow(ld, k) == 1:
        print(k)
        count += 1
print("Count:", count)
```
