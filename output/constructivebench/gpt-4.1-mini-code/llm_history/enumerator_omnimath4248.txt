[write_program]
The problem is to find all real triples \((a,b,c)\) such that:
\[
a+b+c = \frac{1}{a} + \frac{1}{b} + \frac{1}{c}
\quad\text{and}\quad
a^2 + b^2 + c^2 = \frac{1}{a^2} + \frac{1}{b^2} + \frac{1}{c^2}
\]

We enumerate triples \(a,b,c\) from a small symmetric set avoiding zero to avoid division by zero. We print all triples satisfying the conditions exactly (checking equality with rationals as much as possible).

```python
from fractions import Fraction

def check_conditions(a,b,c):
    # avoid zeros and denominators zero
    if a == 0 or b == 0 or c == 0:
        return False
    lhs1 = a + b + c
    rhs1 = 1/a + 1/b + 1/c
    if lhs1 != rhs1:
        return False
    lhs2 = a*a + b*b + c*c
    rhs2 = 1/(a*a) + 1/(b*b) + 1/(c*c)
    return lhs2 == rhs2

# Use fractions for exact computations and small range
vals = [Fraction(x,y) for x in range(-3,4) for y in range(1,4) if not (x==0)]

printed = set()
print("Enumerating triples (a,b,c) with a,b,c in [-3,3], denominators<=3, skipping zero")

for a in vals:
    for b in vals:
        for c in vals:
            if (a,b,c) in printed:
                continue
            if check_conditions(a,b,c):
                print(f"a={a}, b={b}, c={c}")
                printed.add((a,b,c))
                # Also add permutations to avoid duplicates
                printed.add((a,c,b))
                printed.add((b,a,c))
                printed.add((b,c,a))
                printed.add((c,a,b))
                printed.add((c,b,a))
```
