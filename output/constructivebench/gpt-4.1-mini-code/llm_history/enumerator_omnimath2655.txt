[write_program]
This problem involves an integer \( n \) satisfying that the product \((n-1001)(n-2001)(n-2002)(n-3001)(n-3002)(n-3003) > 0\), and we want to find the minimal number of digits in the absolute value of the product for all such \( n \). The code will enumerate integer values of \( n \), check the product sign condition, compute the absolute value of the product, and count the digits of that product, printing all observed digit lengths to help conjecture the minimum digit length.

```python
# Enumerate n in a range covering all intervals defined by the roots: 1001, 2001, 2002, 3001, 3002, 3003.
# For each n, check if the product condition > 0 holds, then print digit length of absolute product.
# Since the polynomial has 6 roots, the product is sign positive outside the 3 intervals:
# (-∞, 1001), (2001, 2002), (3003, ∞)
# We check these intervals thoroughly for minimum digit length.

def product(n):
    return (n - 1001)*(n - 2001)*(n - 2002)*(n - 3001)*(n - 3002)*(n - 3003)

def digits_len(x):
    return len(str(abs(x)))

intervals = [
    range(990, 1001),       # Just below 1001
    range(2002, 2003 + 1),  # Between 2002 and 2003, but product >0 only in (2001,2002) so check interior
    range(3004, 3010)       # Just above 3003
]

print("n, product, digit_length")
# Check left side interval (-inf, 1001), test from 990 to 1000
for n in range(990, 1001):
    p = product(n)
    if p > 0:
        d = digits_len(p)
        print(f"{n}, {p}, {d}")

# Check middle interval (2001, 2002), must be n=2002 or close
for n in range(2002, 2003):
    p = product(n)
    if p > 0:
        d = digits_len(p)
        print(f"{n}, {p}, {d}")

# Check right interval (3003, +inf), test 3004-3009
for n in range(3004, 3010):
    p = product(n)
    if p > 0:
        d = digits_len(p)
        print(f"{n}, {p}, {d}")
```
