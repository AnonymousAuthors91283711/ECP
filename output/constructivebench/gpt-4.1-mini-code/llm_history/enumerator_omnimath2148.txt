[write_program]
To explore the problem, we want to find natural numbers \( n > 0 \) such that there exists an integer \( k \) satisfying

\[
k = \sqrt{100 + \sqrt{n}} + \sqrt{100 - \sqrt{n}}.
\]

Since \( k \) is an integer, and the expression involves nested square roots, we can try enumerating values of \( n \) and check whether \( k \) computed this way is an integer (within floating point tolerance). We will consider \( n \) to be perfect squares to ensure \( \sqrt{n} \) is real and possibly rational, and iterate \( n \) over squares up to some bound.

Let's enumerate \( n = m^2 \) for \( m = 1, 2, \dots, 50 \), compute \( k \), and print \( n \) and \( k \) whenever \( k \) is close to an integer.

We also print candidates immediately and finally output the minimal such \( n \).

```python
import math

def is_integer_approx(x, tol=1e-9):
    return abs(x - round(x)) < tol

def main():
    print("Enumerating n = m^2 and checking integer values of k:")
    candidates = []
    for m in range(1, 51):
        n = m * m
        sqrt_n = math.sqrt(n)
        val1 = 100 + sqrt_n
        val2 = 100 - sqrt_n
        if val2 < 0:  # sqrt(100 - sqrt(n)) must be real
            continue
        sqrt_val1 = math.sqrt(val1)
        sqrt_val2 = math.sqrt(val2)
        k = sqrt_val1 + sqrt_val2
        if is_integer_approx(k):
            k_int = round(k)
            print(f"n={n}, k â‰ˆ {k} (integer k={k_int})")
            candidates.append((n, k_int))
    if candidates:
        min_n = min(c[0] for c in candidates)
        print(f"Minimal n found: {min_n}")
    else:
        print("No suitable n found in range.")

if __name__ == "__main__":
    main()
```
