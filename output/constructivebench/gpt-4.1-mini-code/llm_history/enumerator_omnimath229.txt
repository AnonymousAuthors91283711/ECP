[write_program]
The problem is to characterize all functions \( f:\mathbb{R} \to \mathbb{R} \) satisfying the functional equation
\[
(f(x) + x y) f(x - 3 y) + (f(y) + x y) f(3 x - y) = (f(x + y))^2
\]
for all real \( x, y \).

To investigate, we will enumerate some candidate functions \( f \) defined by simple formulas (e.g., linear, quadratic, constants), and check the functional equation at many sampled real points \( (x,y) \). This heuristics can suggest the form of \( f \).

We print each candidate function name when checked, then print success for those satisfying the equation up to a numerical tolerance. This will assist in conjecturing a closed-form characterization.

```python
import math

def check_eq(f, xs, ys, tol=1e-8):
    # Check the functional equation on grid points xs Ã— ys
    for x in xs:
        for y in ys:
            lhs = (f(x) + x*y) * f(x - 3*y) + (f(y) + x*y) * f(3*x - y)
            rhs = (f(x + y))**2
            if abs(lhs - rhs) > tol:
                return False
    return True

def main():
    # Sample points to test the functional equation
    points = [-2, -1, 0, 1, 2]
    
    # Candidate functions defined as Python functions
    candidates = [
        ("f(x)=0", lambda x: 0),
        ("f(x)=1", lambda x: 1),
        ("f(x)=x", lambda x: x),
        ("f(x)=-x", lambda x: -x),
        ("f(x)=x^2", lambda x: x**2),
        ("f(x)=c*x for c=3", lambda x: 3*x),
        ("f(x)=c*x, c=0.5", lambda x: 0.5*x),
        ("f(x)=x+c, c=1", lambda x: x+1),
        ("f(x)=x^2+1", lambda x: x**2 + 1)
    ]
    
    for name, f in candidates:
        print(f"Testing {name}")
        if check_eq(f, points, points):
            print(f"{name} satisfies the functional equation on sample points.")
        else:
            print(f"{name} does NOT satisfy the functional equation.")
            
if __name__ == "__main__":
    main()
```
This program attempts basic function forms and reports which ones satisfy the equation approximately on a sample grid. It can be expanded with more candidates as needed.
