[write_program]
The problem asks: how many numbers n from 100000 to 999999 satisfy that the first three digits are strictly decreasing (d1 > d2 > d3) and the last three digits are strictly decreasing (d4 > d5 > d6)?

I will write a Python program to enumerate all such 6-digit numbers and print them immediately when found. We also want to print the final count.

Since 6-digit numbers run from 100000 to 999999, iterate through these numbers, extract the digits, check the condition, and print the number whenever it satisfies it.

To be efficient, we can generate all decreasing triples for the first three digits and last three digits separately, then combine them. This reduces the search space.

Digits d1, d2, d3 are from 1 to 9 (since d1 can't be zero) and strictly decreasing.

Digits d4, d5, d6 are from 0 to 9 strictly decreasing.

Then generate all such triples and combine.

I will print each number found immediately to fulfill streaming output requirement, then print the total count at the end.

```python
# Enumerate all 6-digit numbers n = d1 d2 d3 d4 d5 d6 such that
# d1>d2>d3 with d1>=1 and d4>d5>d6 (digits 0-9)

def main():
    count = 0
    # Generate all strictly decreasing triples for first three digits (d1>d2>d3), d1 in 1..9
    first_triples = []
    for d1 in range(1,10):
        for d2 in range(0,d1):
            for d3 in range(0,d2):
                first_triples.append((d1,d2,d3))
    # Generate all strictly decreasing triples for last three digits (d4>d5>d6), digits 0..9
    last_triples = []
    for d4 in range(9,-1,-1):
        for d5 in range(d4-1,-1,-1):
            for d6 in range(d5-1,-1,-1):
                last_triples.append((d4,d5,d6))
    # Combine and print matching numbers
    for (d1,d2,d3) in first_triples:
        for (d4,d5,d6) in last_triples:
            n = d1*100000 + d2*10000 + d3*1000 + d4*100 + d5*10 + d6
            print(n)
            count += 1
    print("Total count:", count)
if __name__ == "__main__":
    main()
```
