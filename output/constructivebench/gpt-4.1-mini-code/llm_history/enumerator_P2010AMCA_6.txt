[write_program]
This problem involves finding a three-digit number \( x \) (between 100 and 999) such that:
- \( x \) is a palindrome (first digit \( d_1 \) equals last digit \( d_3 \)).
- \( x + 32 \) is a four-digit palindrome (digits satisfy \( d_1 = d_4 \) and \( d_2 = d_3 \)).
- The sum of the digits of \( x \) equals some value \( P2010AMCA_6\_answer \).

We will enumerate all 3-digit palindromes \( x \), check if \( x + 32 \) is a 4-digit palindrome, and print the digit sums for each valid \( x \).

```python
# Enumerate 3-digit palindromes x with 100 ≤ x ≤ 999
# Check if x + 32 is a 4-digit palindrome
# Print x and sum of digits(x) when conditions hold

def is_palindrome(num):
    s = str(num)
    return s == s[::-1]

def digits_sum(num):
    return sum(int(d) for d in str(num))

def main():
    for d1 in range(1, 10):        # first digit of 3-digit number
        for d2 in range(0, 10):    # middle digit of 3-digit number
            d3 = d1               # last digit equals first digit (palindrome)
            x = d1 * 100 + d2 * 10 + d3
            x_plus_32 = x + 32
            if 1000 <= x_plus_32 <= 9999:  # must be 4-digit
                s = str(x_plus_32)
                # Check 4-digit palindrome conditions: d1==d4 and d2==d3
                if s[0] == s[3] and s[1] == s[2]:
                    # Conditions satisfied, print immediately
                    ssum = d1 + d2 + d3
                    print(f"x = {x}, sum of digits = {ssum}")

if __name__ == "__main__":
    main()
```
