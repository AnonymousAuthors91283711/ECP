[write_program]
The problem is to find all natural numbers \( n \geq 1 \) for which there exists an integer \( k \) such that

\[
k^2 = n \cdot 2^{n+1} + 1.
\]

We want to enumerate values of \( n \) and check whether \( n \cdot 2^{n+1} + 1 \) is a perfect square.

Below is a Python program enumerating \( n \) from 1 up to 100 to detect such numbers, printing the matching pairs \((n, k)\) as soon as found. It outputs the parameter \( n \) and the corresponding \( k \in \mathbb{Z} \). This will assist in conjecturing the full solution set.

```python
import math

# Enumerate n from 1 up to 100 to find integers k with k^2 = n * 2^(n+1) + 1
max_n = 100
print("Checking n from 1 to", max_n)
for n in range(1, max_n + 1):
    val = n * 2**(n + 1) + 1
    k = int(math.isqrt(val))
    if k * k == val:
        print(f"n = {n}, k = {k}, k^2 = {val}")
```
