[write_program]
The problem is to find the smallest natural number \( n \) such that

\[
\sum_{k=0}^{n-1} (k+1) i^{k+1} = 48 + 49i
\]

where \( i = \sqrt{-1} \). The program enumerates \( n \) starting from 1, computes the sum term, and checks if the real and imaginary parts match (48,49). It prints each matching \( n \) found and finally prints the minimal \( n \).

```python
# Enumerate n to find the least n with sum_{k=0}^{n-1} (k+1)*i^{k+1} = 48 + 49i
# Since i^k cycles every 4, we use this to evaluate efficiently

def i_pow(k):
    # i^k cycles: i^0=1, i^1=i, i^2=-1, i^3=-i
    cycle = [1, 1j, -1, -1j]
    return cycle[k % 4]

target = complex(48, 49)

sum_val = 0+0j
n = 1
max_n = 1000  # upper limit for search

print("Searching for n such that sum_{k=0}^{n-1} (k+1)*i^{k+1} = 48+49i")

while n <= max_n:
    term = n * i_pow(n)
    sum_val += term
    if abs(sum_val.real - target.real) < 1e-12 and abs(sum_val.imag - target.imag) < 1e-12:
        print(f"Match found at n={n}: sum = {sum_val}")
        print(f"Least such n is {n}")
        break
    n += 1
else:
    print(f"No match found up to n={max_n}")
```
