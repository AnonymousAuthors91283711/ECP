[write_program]
The problem is to find primes \( p \) such that \( p^2 = 3 + \) the concatenation of the decimal digits of two primes \( q \) and \( r \). We want to enumerate such primes \( p \) with small sample values, printing each \( p \) meeting the condition immediately.

The approach:
- Enumerate primes \( p, q, r \) up to a reasonable limit (e.g., 100).
- Convert \( q \) and \( r \) to decimal digit lists, concatenate, convert back to integer.
- Check if \( p^2 = 3 + \) that concatenation value.
- Print \( p, q, r \) triples satisfying the relation.

```python
# enumerator.py
from sympy import primerange
from math import isqrt

def digits(n):
    return list(map(int, str(n)))

def of_digits(ds):
    return int("".join(map(str, ds)))

def main():
    max_prime = 100  # small bound to keep output short
    primes = list(primerange(2, max_prime+1))
    for p in primes:
        p2 = p*p
        # Try all pairs q,r
        for q in primes:
            for r in primes:
                concat_num = of_digits(digits(q) + digits(r))
                if p2 == 3 + concat_num:
                    print(f"p={p}, q={q}, r={r}, p^2={p2}, concat= {concat_num}+3")
                    
if __name__ == "__main__":
    main()
```
