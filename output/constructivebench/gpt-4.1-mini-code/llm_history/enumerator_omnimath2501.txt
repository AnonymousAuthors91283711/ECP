[write_program]
The problem asks to find \( n > 0 \) such that the number of divisors of \( n^n \) is 861. Since the number of divisors function for \( n = p_1^{a_1} p_2^{a_2} \cdots p_k^{a_k} \) is 
\[ d(n) = \prod_{i=1}^k (a_i + 1), \]
and for \( n^n \) the exponents become \( n a_i \), so
\[ d(n^n) = \prod_{i=1}^k (n a_i + 1) = 861. \]

We will try to find candidates \( n \) by iterating over factorizations \( p_i^{a_i} \) of \( n \) with small primes and exponents to match divisor count 861. We then print each candidate \( n \) found and print the final answer (extremal or unique).

```python
import math
from sympy import factorint

# Number of divisors of n^n is product of (n * a_i + 1) over i,
# where a_i are exponents of prime factorization of n.

target_divisors = 861

def divisors_count_npow(n):
    factors = factorint(n)
    prod = 1
    for a in factors.values():
        prod *= (n * a + 1)
    return prod

candidates = []

print(f"Searching n with number_of_divisors(n^n) = {target_divisors} ...")

# Iterate over small n, say up to 50, to find matches
for n in range(1, 51):
    count = divisors_count_npow(n)
    if count == target_divisors:
        print(f"Found n = {n} with divisors(n^n) = {count}")
        candidates.append(n)

if candidates:
    answer = min(candidates)
    print(f"Minimum n with divisors count {target_divisors} is {answer}")
else:
    print("No n found up to 50 matching divisor count")
```
