[write_program]
The problem defines a sequence \(a_n\) with \(a_0 = 2\) and recursive relation \(a_{n+1} = \frac{a_n}{1+a_n}\). We want to find \(a_{2012}\).

To assist conjecturing, let's generate and print values of \(a_n\) for \(n=0\) to \(20\). We focus on exact values where possible or fractional approximations, not floating-point decimals. The sequence seems rational at each step, so expressing \(a_n\) as a fraction is suitable. We check for a pattern that might simplify the recursion.

```python
from fractions import Fraction

def main():
    a = [Fraction(2,1)]  # a0=2
    print(f"a0 = {a[0]}")
    for n in range(1, 21):
        an = a[n-1]/(1 + a[n-1])
        a.append(an)
        print(f"a{n} = {a[n]}")  # Print fraction form
    
    # Optionally continue for larger n to guess general formula
    # Below print a few later values approximately to check convergence
    print("Approximations for n=100, 500, 2012:")
    for N in [100, 500, 2012]:
        an = a[0]
        for _ in range(N):
            an = an/(1 + an)
        print(f"a{N} â‰ˆ {float(an):.12f}")

if __name__ == "__main__":
    main()
```
