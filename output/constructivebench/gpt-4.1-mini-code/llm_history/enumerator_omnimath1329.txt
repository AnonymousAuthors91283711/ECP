[write_program]
Analyzing the problem: Given the polynomial equation \( z^5 + 2004 z = 1 \), find a degree 5 polynomial \( P \) such that whenever \( z \) satisfies the equation, then \( P(z^2) = 0 \). Then compute the ratio \( \frac{P(1)}{P(-1)} \).

We want to find candidates for \( P \), which must be degree 5, with roots \( z^2 \) where \( z \) solves \( z^5 + 2004z = 1 \), so \( P(X) = \prod (X - z_i^2) \), \( z_i \) roots of the quintic.

So, fully expanding \( P \) is complicated. Instead, numerically compute roots \( z_i \) for small sample coefficients (e.g., 2004), compute the 5 values \( z_i^2 \), and build the polynomial \( P \), then compute \( P(1)/P(-1) \).

We enumerate the roots, compute \( P \), and print \( P(1)/P(-1) \).

```python
import numpy as np

# Parameters: try the problem's coefficient 2004 and a smaller sample for exploration
for a in [2004, 2]:  # parameter a for z^5 + a z = 1
    print(f"Parameter a = {a}")

    # Define polynomial for z: z^5 + a z - 1 = 0
    # Coefficients in descending powers: z^5 + a z -1 = 0
    coeffs = [1] + [0]*3 + [a, -1]

    # Compute roots of polynomial
    roots = np.roots(coeffs)

    # Compute squared roots to be roots of P
    z_squares = roots**2

    # Build polynomial P having roots z_squares
    P_coeffs = np.poly(z_squares)

    # Evaluate P at 1 and -1
    P1 = np.polyval(P_coeffs, 1)
    Pm1 = np.polyval(P_coeffs, -1)

    print("Roots z solving z^5 + a z = 1:")
    for i, z in enumerate(roots):
        print(f" z[{i}] = {z}")

    print("Squares z^2 (roots of P):")
    for i, zs in enumerate(z_squares):
        print(f" z^2[{i}] = {zs}")

    print(f"P(1) = {P1}")
    print(f"P(-1) = {Pm1}")
    if Pm1 != 0:
        ratio = P1 / Pm1
        print(f"P(1)/P(-1) = {ratio}")
    else:
        print("P(-1) = 0, cannot compute ratio")

    print("-" * 40)
```
