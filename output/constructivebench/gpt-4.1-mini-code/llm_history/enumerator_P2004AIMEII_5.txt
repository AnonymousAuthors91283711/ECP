[write_program]
This problem involves finding the smallest nonnegative integer \( x \) such that for some natural number \( w \), the inequality

\[
(800 + x) \cdot \frac{w}{4} \geq 1000w - \left(1000 \cdot \frac{w}{4} + 900 \cdot \frac{w}{4} + 800 \cdot \frac{w}{4} \right)
\]

holds. The goal is to enumerate \( x \) and \( w \) values to find the minimal \( x \) satisfying the problem condition.

The program below iterates over small \( w \) values divisible by 4 to simplify \( w/4 \), and for each \( w \), increments \( x \) until the inequality is satisfied. When found, it prints candidates \( x \). Finally, it prints the minimum \( x \) found within the tested range.

```python
# Enumerate values of x and w to find minimal x for which the given inequality holds.
# Uses small sample values of w divisible by 4 for simplicity.

def main():
    candidates = set()
    max_w = 40  # search up to w=40 (divisible by 4)
    max_x = 50  # limit x to 50 for enumeration

    for w in range(4, max_w + 1, 4):  # w divisible by 4
        total_w = 1000 * w
        quarter = w // 4
        first_q = 1000 * quarter
        second_q = 900 * quarter
        third_q = 800 * quarter
        remaining = total_w - (first_q + second_q + third_q)
        # Remaining simplifies to: 1000*w - (1000*(w/4) + 900*(w/4) + 800*(w/4))
        # = 1000*w - (2700 * (w/4)) = 1000*w - 675*w = 325*w
        # So remaining = 325 * w exactly

        for x in range(max_x + 1):
            # check if (800 + x) * (w/4) >= remaining
            if (800 + x) * quarter >= remaining:
                print(f'Found x={x} for w={w}')
                candidates.add(x)
                break  # minimal x for this w found, no need to try bigger x

    if candidates:
        min_x = min(candidates)
        print(f'\nMinimal x found: {min_x}')
    else:
        print('No suitable x found up to thresholds.')

if __name__ == '__main__':
    main()
```
