[write_program]
The problem involves an \( n \times n \) grid colored black/white. For white cells, we count how many black neighbors (including diagonals) it has, sum this over all white cells, and want to maximize this sum.

I'll write a Python program to:
- Iterate over small \( n \) (e.g., 3 to 5),
- Enumerate all \( 2^{n^2} \) colorings if feasible (for \( n=3 \), \( 2^{9}=512 \) configurations),
- For each coloring, compute the sum,
- Print each sum found,
- Also print the maximal sum at the end.

To stay efficient, I limit to \( n=3 \) only to avoid combinatorial explosion.

```python
# Enumerate all nxn grids colored black(True)/white(False)
# For each white cell, count black neighbors (8 directions),
# sum over whites, print each sum found, and max sum.

def neighbors(n, r, c):
    # Return neighbors within 0<=r,c<n, including diagonals
    for dr in [-1,0,1]:
        for dc in [-1,0,1]:
            if dr==0 and dc==0:
                continue
            nr,nc = r+dr,c+dc
            if 0<=nr<n and 0<=nc<n:
                yield nr,nc

def grid_sum(grid, n):
    total=0
    for r in range(n):
        for c in range(n):
            if not grid[r][c]: # white cell
                blacks=0
                for nr,nc in neighbors(n,r,c):
                    if grid[nr][nc]:
                        blacks+=1
                total+=blacks
    return total

def to_grid(bits, n):
    grid = [[False]*n for _ in range(n)]
    for i in range(n*n):
        r,c = divmod(i,n)
        grid[r][c] = ((bits>>i)&1)==1
    return grid

def main():
    print("Enumerating for n=3")
    n=3
    max_s = -1
    max_configs = []
    for bits in range(1<<(n*n)):
        grid = to_grid(bits,n)
        s = grid_sum(grid,n)
        print(s)
        if s>max_s:
            max_s=s
            max_configs=[bits]
        elif s==max_s:
            max_configs.append(bits)
    print("Max sum:", max_s)
    print("Number of configs achieving max:", len(max_configs))

if __name__=="__main__":
    main()
```
