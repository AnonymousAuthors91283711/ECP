[write_program]
The problem is to find the minimum value of the expression \(\frac{ab + c}{a + b + c}\) where \(a, b, c\) are integers between 1 and 2011 inclusive.

We will enumerate all such triples \((a, b, c)\) with these constraints. For each triple, we compute the rational value and print it immediately when found. We'll use the `fractions.Fraction` class for exact rational arithmetic.

Because the search space is large (2011³ ≈ 8 billion), full enumeration is impractical here. Instead, we'll test all triples with \(a, b, c\) up to 20 to get a flavor of possible values and observe candidates for minimal value.

At the end, we'll print the minimal value found among enumerated samples.

```python
from fractions import Fraction

def main():
    max_val = 20  # sample parameter, smaller than 2011 for efficiency
    
    min_value = None
    min_triples = []
    
    print(f"Enumerating for a, b, c in 1..{max_val}")
    
    for a in range(1, max_val + 1):
        for b in range(1, max_val + 1):
            for c in range(1, max_val + 1):
                numerator = a * b + c
                denominator = a + b + c
                value = Fraction(numerator, denominator)
                print(f"Value={value} at (a,b,c)=({a},{b},{c})")
                
                if (min_value is None) or (value < min_value):
                    min_value = value
                    min_triples = [(a, b, c)]
                elif value == min_value:
                    min_triples.append((a,b,c))
    
    print("\nCandidates for minimal value found:")
    for triple in min_triples:
        val = Fraction(triple[0]*triple[1] + triple[2], sum(triple))
        print(f"Value={val} at {triple}")
    
    print(f"\nMinimum value among enumerated samples: {min_value}")

if __name__ == "__main__":
    main()
```
