[write_program]
The problem involves finding positive integers p.1 and p.2 satisfying a specific equation:

\[
\frac{(p_1 + p_2 - 1)(p_1 + p_2)}{2} - p_1 + 1 = 2015
\]

We will enumerate values of p_1 and p_2 over a reasonable range guided by the equation, and print all pairs that satisfy the equation exactly.

```python
# Enumerate positive integers p1, p2 to satisfy 
# ((p1+p2-1)*(p1+p2)//2) - p1 + 1 == 2015
# Print all solutions.

target = 2015

print(f"Enumerating (p1, p2) with p1,p2>0 satisfying the equation equal to {target}:")

# Reasoning about upper bound:
# The main term is sum of first (p1+p2-1) integers ~ (p1+p2)^2/2,
# which is roughly 2015, so p1+p2 ~ sqrt(2*2015) ~ 63.5.
max_sum = 65

for s in range(2, max_sum+1):  # s = p1 + p2
    triangular = (s-1)*s//2
    # Equation: triangular - p1 + 1 = 2015   =>   p1 = triangular + 1 - 2015
    # p1 must be positive
    p1 = triangular + 1 - target
    if 1 <= p1 < s:
        p2 = s - p1
        if p2 > 0:
            left_side = ((p1 + p2 - 1)*(p1 + p2))//2 - p1 + 1
            if left_side == target:
                print(f"p1 = {p1}, p2 = {p2}, check = {left_side}")

# Explicit final answer (smallest or unique) can be read from output
```
