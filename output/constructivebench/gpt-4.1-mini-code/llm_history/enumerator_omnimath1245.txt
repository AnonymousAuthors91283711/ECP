[write_program]
The problem is to find integers \(a \in [0,4]\), \(b \in [0,12]\), and \(c \in \mathbb{Z}\) such that

\[
\frac{1}{2015} = \frac{a}{5} + \frac{b}{13} + \frac{c}{31}
\]

and for which the solution \((a,b,c)\) is unique. Then, we want to find the sum \(a+b\).

This is a Diophantine equation in rationals with bounded \(a,b\). We'll enumerate all \(a,b\) in the specified ranges, try to solve for \(c\) if it is integral, print all valid \((a,b,c)\), and check uniqueness. Finally, print the value of \(a+b\) for the unique solution.

```python
# Enumerate integers a in [0..4], b in [0..12]
# Solve c from the equation and check integrality
# Equation: 1/2015 = a/5 + b/13 + c/31
# => c = 31 * (1/2015 - a/5 - b/13)

from fractions import Fraction

target = Fraction(1,2015)

candidates = []

for a in range(0,5):
    for b in range(0,13):
        val = target - Fraction(a,5) - Fraction(b,13)
        # c = val * 31
        c_frac = val * 31
        # Check if c_frac is integer
        if c_frac.denominator == 1:
            c = c_frac.numerator
            # print candidate immediately
            print(f'a={a}, b={b}, c={c}, a+b={a+b}')
            candidates.append((a,b,c))

# Check if unique solution
if len(candidates) == 1:
    a,b,c = candidates[0]
    print(f'Unique solution found with a+b={a+b}')
else:
    print(f'Total solutions found: {len(candidates)}')
    sums = [a+b for a,b,c in candidates]
    print(f'Sums a+b: {sums}')
```

