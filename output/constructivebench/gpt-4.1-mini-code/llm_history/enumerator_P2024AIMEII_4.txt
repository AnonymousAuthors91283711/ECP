[write_program]
The problem involves positive real numbers \(x, y, z\) satisfying:
\[
x + y + z = 6, \quad x^2 + y^2 + z^2 = 14, \quad x^3 + y^3 + z^3 = 36.
\]
We want to find \(m, n \in \mathbb{N}\) coprime such that \(\left|\frac{\log(x^4 y^3 z^2)}{\log 2}\right| = \frac{m}{n}\) and then \(m+n\).

We first try to find \(x,y,z\) numerically given symmetric sums, then compute \(x^4 y^3 z^2\) and find its base-2 log as a rational approximation. We attempt small integer solutions using Newton iteration on the system or approximation by symmetric polynomials. Finally, print candidates and the sum \(m+n\).

```python
import math
from fractions import Fraction

# Given system symmetric sums: s1 = x+y+z=6, s2 = x^2+y^2+z^2=14, s3=x^3+y^3+z^3=36.
# We use Newton's method to solve for roots of cubic with symmetric poly:
# Let roots be x,y,z with sum s1=6, sum squares s2=14, cubes s3=36.
# Use Newton's identities to get symmetric sums:
# a = x+y+z = 6
# b = xy + yz + zx = (s1^2 - s2)/2 = (36-14)/2 = 11
# c = xyz = ?
# From Newton's sums, s3 = a s2 - b s1 + 3c, so 36 = 6*14 - 11*6 + 3c -> 36 = 84 - 66 + 3c -> 3c=18 -> c=6
a, b, c = 6, 11, 6

# Cubic polynomial: t^3 - a t^2 + b t - c = 0
# Solve this cubic numerically to find roots x,y,z
def cubic_roots(a,b,c):
    # Depressed cubic with p,q
    p = b - a*a/3
    q = 2*(a/3)**3 - a*b/3 + c
    discriminant = (q/2)**2 + (p/3)**3
    roots = []
    if discriminant > 0:
        # one real root
        A = (-q/2 + math.sqrt(discriminant))**(1/3)
        B = (-q/2 - math.sqrt(discriminant))**(1/3)
        root = A + B + a/3
        roots.append(root)
    elif abs(discriminant) < 1e-14:
        # triple or double root
        u = (-q/2)**(1/3)
        roots.append(2*u + a/3)
        roots.append(-u + a/3)
    else:
        # three real roots
        r = math.sqrt(-p/3)
        phi = math.acos(-q/(2*r**3))
        for k in range(3):
            root = 2*r*math.cos((phi+2*math.pi*k)/3) + a/3
            roots.append(root)
    return roots

roots = cubic_roots(a,b,c)
roots = [r.real if isinstance(r, complex) else r for r in roots]
# Sort roots
roots.sort()

# Compute val = x^4 * y^3 * z^2 and find |log2(val)|
val = roots[0]**4 * roots[1]**3 * roots[2]**2
log2_val = abs(math.log(val)/math.log(2))

print(f"x, y, z approx = {roots[0]:.6f}, {roots[1]:.6f}, {roots[2]:.6f}")
print(f"x^4 * y^3 * z^2 ≈ {val:.6f}")
print(f"|log2(x^4 y^3 z^2)| ≈ {log2_val:.6f}")

# Find rational approx m/n for log2_val with denominator <= 40 (reasonable for AIME)
best_frac = None
best_err = 1e9
for denom in range(1,41):
    num = round(log2_val * denom)
    frac = Fraction(num, denom).limit_denominator()
    err = abs(log2_val - frac)
    if err < best_err:
        best_err = err
        best_frac = frac

m, n = best_frac.numerator, best_frac.denominator
print(f"Best rational approx m/n = {m}/{n} with error {best_err}")
print(f"m + n = {m + n}")
```
