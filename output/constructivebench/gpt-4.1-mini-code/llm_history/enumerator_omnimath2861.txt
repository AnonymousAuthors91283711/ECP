[write_program]
The problem involves counting the number of 4-tuples of natural numbers \( (q_0, q_1, q_2, q_3) \) that satisfy two linear equations:

- For set \(S\): \(2q_0 + q_1 + q_2 + q_3 = 4\),
- For set \(T \subseteq S\): additionally \(q_0 + q_1 + q_2 + q_3 = 3\).

We want to compute the ratio \(\frac{|T|}{|S|}\).

The program enumerates all tuples in \(S\), checks which satisfy the extra sum condition for \(T\), counts them, and prints each found tuple. Finally, it prints the ratio.

Since \(q_i \in \mathbb{N}\) (natural numbers including 0), we try all \(q_0, q_1, q_2, q_3\) bounded by 4 and filter by the constraints.

```python
# Enumerate solutions to:
# 2*q0 + q1 + q2 + q3 = 4  (defining S)
# T is solutions in S where q0 + q1 + q2 + q3 = 3

def main():
    S = []
    T = []
    print("Enumerating tuples (q0,q1,q2,q3) in S:")
    # q0 possible values 0..2 (2*2=4 max)
    for q0 in range(3):
        # sum of q1+q2+q3 = 4 - 2*q0
        rem = 4 - 2*q0
        # q1, q2, q3 each >=0 and sum to rem (<=4)
        for q1 in range(rem+1):
            for q2 in range(rem - q1 +1):
                q3 = rem - q1 - q2
                # q3 >=0 guaranteed
                tuple_s = (q0,q1,q2,q3)
                S.append(tuple_s)
                print(f"S: {tuple_s}")
                if q0 + q1 + q2 + q3 == 3:
                    T.append(tuple_s)
                    print(f"T: {tuple_s}")
    print(f"Count S: {len(S)}")
    print(f"Count T: {len(T)}")
    ratio = len(T)/len(S) if len(S) > 0 else 0
    print(f"Ratio |T|/|S| = {ratio}")

if __name__ == "__main__":
    main()
```
