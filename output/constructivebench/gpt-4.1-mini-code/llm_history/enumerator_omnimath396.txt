[write_program]
The problem is to find the least positive integer \( c \) such that \( c = a \times b \), where both \( a \) and \( b \) are sums of two integer cubes, but \( c \) itself is not a sum of two integer cubes.

We will enumerate \( a, b \) as sums of two cubes \( x^3 + y^3 \) with small integers \( x,y \), compute their products \( c \), and check if \( c \) can be written as a sum of two cubes. We print all such candidates and finally identify the minimal \( c \).

```python
# Enumerate sums of two cubes for |x|,|y| <= limit, store unique positive values
limit = 50
from collections import defaultdict

def sums_of_two_cubes(limit):
    sums = set()
    for x in range(-limit, limit+1):
        for y in range(-limit, limit+1):
            s = x**3 + y**3
            if s > 0:
                sums.add(s)
    return sorted(sums)

def can_be_sum_of_two_cubes(n, sums_set):
    # Check if n is in the precomputed sums_set
    return n in sums_set

def main():
    sums = sums_of_two_cubes(limit)
    sums_set = set(sums)
    candidates = []
    for i, a in enumerate(sums):
        for b in sums[i:]:  # a <= b to avoid duplicates
            c = a * b
            if c == 0:
                continue
            if c not in sums_set:
                print(f"Candidate c = {c} as a={a}, b={b}, a*b=c, but c not sum of two cubes")
                candidates.append(c)
    if candidates:
        min_c = min(candidates)
        print("\nMinimal c found:", min_c)

if __name__ == "__main__":
    main()
```
