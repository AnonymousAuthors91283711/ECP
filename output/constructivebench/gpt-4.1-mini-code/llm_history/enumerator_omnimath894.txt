[write_program]
The problem asks to find the greatest lower bound (infimum) of rational numbers r/s satisfying two linear inequalities involving integers r, s:
 3r ≥ 2s - 3
 4s ≥ r + 12
with s ≠ 0 (since r/s is defined).

We want to enumerate pairs (r, s) of integers, with s positive (to avoid division by zero and sign ambiguity), satisfying the inequalities, and print r/s values to see what rationals appear and conjecture the infimum value.

We'll:
- Enumerate s from 1 to some max (like 50)
- For each s, compute the feasible range of r from inequalities
- For integer r in this range, compute r/s and print it.

By observing outputs, we may guess the infimum. The program prints each found r/s as a Fraction for exactness.

```python
from fractions import Fraction

MAX_S = 50

print("Enumerating r/s with 1 ≤ s ≤", MAX_S)
for s in range(1, MAX_S + 1):
    # From 3r ≥ 2s - 3 => r ≥ (2s - 3)/3
    r_min = (2 * s - 3 + 2) // 3  # ceiling division for integers: (a+b-1)//b for a/b rounded up

    # From 4s ≥ r + 12 => r ≤ 4s - 12
    r_max = 4 * s - 12

    # Only consider r_min ≤ r ≤ r_max
    if r_min > r_max:
        continue

    for r in range(r_min, r_max + 1):
        val = Fraction(r, s)
        print(val)
```
