[write_program]
This problem is about arithmetic progressions of length 15 with terms ≤ 999, maximizing the common difference d, and then finding the maximal sum of such a progression.

The conditions are:  
- There exists a progression a, a+d, ..., a+14d all ≤ 999.  
- d is maximal (no larger d' makes such a progression).  
- s is the sum of the 15 terms of the progression.

We want to enumerate possible pairs (a,d) to maximize d, then sum the progression and print all candidate sums for the maximum d.

Constraints:  
- 0 ≤ a ≤ 999  
- d ≥ 0, integer  
- a+14*d ≤ 999

Approach:  

- Find max d such that there's some a with a+14*d ≤ 999 → d ≤ floor(999/14) = 71  
- For d from 71 down to 0:  
  - Check if exists a with a+14*d ≤ 999 → a ≤ 999 - 14*d  
  - For a in [0..999-14*d], compute sum and print  
- Once at max d with solutions, print all sums for that d, then print the max sum and exit.

We’ll print all sums for d=71 to satisfy the problem condition.

```python
# Enumerate arithmetic progressions of length 15, max difference with terms ≤ 999.

def main():
    n = 15
    max_term = 999
    max_d = max_term // (n - 1)  # max common difference
    # Find max d with at least one valid a
    for d in range(max_d, -1, -1):
        max_a = max_term - (n - 1) * d
        if max_a < 0:
            continue
        found = False
        max_sum = None
        for a in range(max_a + 1):
            # sum of 15 terms in arithmetic progression: n*a + n*(n-1)/2*d
            s = n * a + (n * (n -1) //2) * d
            print(f"d={d}, a={a}, sum={s}")
            found = True
            if max_sum is None or s > max_sum:
                max_sum = s
        if found:
            print(f"Max d with solutions: {d}")
            print(f"Max sum for d={d}: {max_sum}")
            break

if __name__ == "__main__":
    main()
```
