[write_program]
The problem involves a discrete probability distribution on k = 0,1,2,3 with rational probabilities. We want to compute the probability that two independent draws have the same k, i.e., sum of (prob k)^2, then express this probability in lowest terms m/n.

We will enumerate the 4 values of k, compute prob k exactly as given, square, sum, and then reduce the fraction. We print intermediate values and final reduced fraction.

```python
from fractions import Fraction
from math import gcd

# Define prob(k) as per given formulas
def prob(k):
    # p = 4/7, but only used inside expressions below
    if k == 0:
        # (1/2)*(1/2)*(3/7)
        return Fraction(1,2)*Fraction(1,2)*Fraction(3,7)
    elif k == 1:
        # (1/2*1/2*3/7) + (1/2*1/2*3/7) + (1/2*1/2*4/7)
        return Fraction(1,2)*Fraction(1,2)*Fraction(3,7) + Fraction(1,2)*Fraction(1,2)*Fraction(3,7) + Fraction(1,2)*Fraction(1,2)*Fraction(4,7)
    elif k == 2:
        # (1/2*1/2*3/7) + (1/2*1/2*4/7) + (1/2*1/2*4/7)
        return Fraction(1,2)*Fraction(1,2)*Fraction(3,7) + Fraction(1,2)*Fraction(1,2)*Fraction(4,7) + Fraction(1,2)*Fraction(1,2)*Fraction(4,7)
    elif k == 3:
        # (1/2)*(1/2)*(4/7)
        return Fraction(1,2)*Fraction(1,2)*Fraction(4,7)
    else:
        return Fraction(0,1)

# Enumerate k
sum_squares = Fraction(0,1)
print("Enumerating prob(k) and (prob(k))^2 for k=0..3:")
for k in range(4):
    pk = prob(k)
    sq = pk*pk
    print(f"k={k}, prob={pk} = {float(pk):.6f}, prob^2={sq}")
    sum_squares += sq

# sum_squares is a fraction; reduce it to lowest terms
m, n = sum_squares.numerator, sum_squares.denominator
g = gcd(m, n)
m //= g
n //= g

print(f"Sum of squares = {sum_squares} = {float(sum_squares):.6f}")
print(f"Reduced fraction: m/n = {m}/{n}")
```

