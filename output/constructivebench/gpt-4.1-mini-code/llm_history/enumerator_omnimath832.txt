[write_program]
The problem defines two sequences squirrel and rabbit with given recurrences and initial values. We want to find the unique positive index y where rabbit y surpasses squirrel y for the first and only time.

Let's enumerate terms for small y and check when rabbit y > squirrel y occurs. We'll print the values and detect this unique crossing index.

```python
# Enumerate sequences to find unique y > 0 with rabbit y > squirrel y
def main():
    # Initial values
    s0, r0 = 1, 1
    squirrel = [s0]
    rabbit = [r0]

    # We'll check up to n = 50, enough to see crossing
    for n in range(1, 51):
        s_next = 2 * squirrel[-1] + 2019
        r_next = 4 * rabbit[-1] - 2
        squirrel.append(s_next)
        rabbit.append(r_next)
        print(f"n={n}: squirrel={s_next}, rabbit={r_next}")
        if r_next > s_next:
            print(f"rabbit({n}) > squirrel({n}) for the first time")
            # We keep enumerating to confirm unique crossing
            # Check if rabbit > squirrel holds only at this n
            break

    # Verify if later indices have rabbit <= squirrel to confirm uniqueness
    unique_crossing = True
    for m in range(n+1, 51):
        s_m = 2 * squirrel[m-1] + 2019
        r_m = 4 * rabbit[m-1] - 2
        if r_m <= s_m:
            continue
        else:
            unique_crossing = False
            print(f"Another crossing at n={m}: rabbit={r_m}, squirrel={s_m}")
            break

    if unique_crossing:
        print(f"Unique crossing at y = {n}")

if __name__ == "__main__":
    main()
```
