[write_program]
The problem involves the icosahedron graph with 12 vertices and counting triples of distinct vertices (a,b,c) where the distance from a to b is greater than the distance from b to c. We'll enumerate all such triples on the icosahedron graph and count how many satisfy the inequality, then print the ratio as a simplified fraction.

We will represent the icosahedron's adjacency by its edges or use a known distance matrix. Then we enumerate all triples of distinct vertices and compute the ratio.

```python
from math import gcd

# Icosahedron graph adjacency by vertex indices 0..11
# Each vertex has degree 5, vertices defined as:
# Using known adjacency list for icosahedron (12 vertices)
adj = [
    [1,4,5,6,9],    # 0
    [0,2,6,7,10],   # 1
    [1,3,7,8,11],   # 2
    [2,4,8,9,10],   # 3
    [0,3,5,9,11],   # 4
    [0,4,6,10,11],  # 5
    [0,1,5,7,10],   # 6
    [1,2,6,8,11],   # 7
    [2,3,7,9,11],   # 8
    [0,3,4,8,10],   # 9
    [1,3,5,6,9],    # 10
    [2,4,5,7,8],    # 11
]

# Precompute all pairs shortest distances using Floyd-Warshall
N = 12
INF = 10**9
dist = [[INF]*N for _ in range(N)]
for i in range(N): dist[i][i] = 0
for u in range(N):
    for v in adj[u]:
        dist[u][v] = 1
# Floyd-Warshall
for k in range(N):
    for i in range(N):
        di = dist[i]
        dik = di[k]
        dk = dist[k]
        for j in range(N):
            val = dik + dk[j]
            if val < di[j]:
                di[j] = val

num = 0
den = 0

for a in range(N):
    for b in range(N):
        if b == a: continue
        for c in range(N):
            if c == a or c == b: continue
            den += 1
            if dist[a][b] > dist[b][c]:
                num += 1
                print(f"Triple (a,b,c)=({a},{b},{c}) with d(a,b)={dist[a][b]} > d(b,c)={dist[b][c]}")

# Simplify the fraction
g = gcd(num, den)
print(f"Result: {num//g}/{den//g}")
```

