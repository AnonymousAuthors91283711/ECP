[write_program]
The problem defines a sequence \(a_n\) with \(a_0=3\), \(a_1=2\), and the recurrence \(a_{n+2}=a_{n+1}+a_n\). We want to compute the sum

\[
S = \sum_{n=0}^{8} \frac{a_n}{a_{n+1} a_{n+2}}.
\]

I'll write a Python program to generate the first 11 terms (to support denominators up to \(a_{10}\)) and compute partial sums, printing each partial sum exactly as a fraction using Python's `fractions.Fraction` for exact rational arithmetic.

```python
from fractions import Fraction

# Initial values of the sequence
a = [3, 2]
# Generate terms up to n = 10 needed for denominator at n+2 = 10
for n in range(2, 11):
    a.append(a[n-1] + a[n-2])

print("Sequence a_n (n=0..10):", a)

partial_sum = Fraction(0, 1)
for n in range(9):
    term = Fraction(a[n], a[n+1] * a[n+2])
    partial_sum += term
    print(f"n={n}, term = {term}, partial_sum = {partial_sum}")

print("Final sum S =", partial_sum)
```
