[write_program]
The problem involves integers \(H, M, T\) satisfying \(H M^2 T = H + 2M + T\), and we're interested in the set of values \(x = H M^2 T\) arising this way. We want to find the greatest such integer.

To explore, we'll iterate over small integer values for \(H, M, T\) (say \(-10\) to \(10\) excluding zero for \(M\) because \(M=0\) trivializes the product), check the equation, and collect \(x\). We'll print each found \(x\) immediately and then print the maximum at the end.

```python
# Enumerate integer triples (H,M,T) with small bounds
# For each, check if H*M^2*T == H + 2*M + T
# Print all such x = H*M^2*T and find maximum

def main():
    found = set()
    min_val, max_val = -10, 10
    for H in range(min_val, max_val +1):
        for M in range(min_val, max_val +1):
            if M == 0:
                continue
            for T in range(min_val, max_val +1):
                left = H * (M**2) * T
                right = H + 2*M + T
                if left == right:
                    x = left
                    if x not in found:
                        print(f"x = {x}, (H,M,T)=({H},{M},{T})")
                        found.add(x)
    if found:
        print("Greatest x =", max(found))
    else:
        print("No solutions found.")

if __name__ == "__main__":
    main()
```
