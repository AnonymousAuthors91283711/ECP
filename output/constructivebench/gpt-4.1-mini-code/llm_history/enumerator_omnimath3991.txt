[write_program]
The problem involves finding rational numbers \(cake\_price\), \(cupcake\_price\), and \(bagel\_price\) satisfying a system of linear equations and expressing a particular ratio (omnimath3991_answer) in lowest terms. We'll enumerate possible rational values for cake and cupcake prices in a small range and solve for bagel_price and the desired ratio, printing any consistent rational solutions found.

```python
from fractions import Fraction

# We want to find cake_price, cupcake_price, bagel_price in Q satisfying:
# 1*cake + 2*cupcake + 3*bagel = 3*cake + 1*bagel
# 3*cake + 1*bagel = 6*cupcake
# 2*cake + 2*bagel = omnimath3991_answer * cupcake

# From the first equation:
# cake + 2*cupcake + 3*bagel = 3*cake + bagel
# Rearranged:
# 2*cupcake + 2*bagel = 2*cake
# So,
# cupcake + bagel = cake  (1)

# From the second:
# 3*cake + bagel = 6*cupcake  (2)

# Use (1): cake = cupcake + bagel
# Substitute in (2):
# 3*(cupcake + bagel) + bagel = 6*cupcake
# 3*cupcake + 3*bagel + bagel = 6*cupcake
# 3*cupcake + 4*bagel = 6*cupcake
# 4*bagel = 3*cupcake
# bagel = (3/4)*cupcake  (3)

# Then cake = cupcake + (3/4)*cupcake = (7/4)*cupcake

# Finally,
# omnimath3991_answer = (2*cake + 2*bagel)/cupcake = 2*cake/cupcake + 2*bagel/cupcake
# = 2*(7/4) + 2*(3/4) = (14/4)+(6/4) = 20/4 = 5

# We'll enumerate cupcakes to confirm, then output the answer fraction 5.

# Enumerate cupcakes as fractions with denominator up to 10, numerator up to 20 for demonstration,
# print rational values for cake, bagel, and omnimath3991_answer to confirm it is always 5.

print("Enumerating rational cupcake prices and corresponding values:")
for den in range(1, 11):
    for num in range(1, 21):
        cupcake = Fraction(num, den)
        bagel = Fraction(3,4)*cupcake
        cake = cupcake + bagel
        ratio = (2*cake + 2*bagel) / cupcake  # Should always be 5
        print(f"cupcake={cupcake}, cake={cake}, bagel={bagel}, ratio={ratio}")
print("Conjectured omnimath3991_answer =", Fraction(5))
```
