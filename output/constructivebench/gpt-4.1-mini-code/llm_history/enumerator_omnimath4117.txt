[write_program]
The problem is to find the minimum number k of "marked" squares in an n×n grid (where n is even and positive), such that every square x has a neighbor y marked true, adjacent either horizontally or vertically. We want to enumerate possible values of k for small even n and check if a configuration exists meeting the conditions.

The approach:
- For n = 2, 4, 6 (small samples),
- Enumerate subsets of the n² grid squares,
- For each subset (marked squares),
  - Check if for every square there exists a marked neighbor,
- Print feasible k values as found.

This will allow us to conjecture the minimum number of marked squares needed.

```python
from itertools import combinations

def neighbors(n, x, y):
    # Return list of adjacent cells (within grid)
    for nx, ny in [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]:
        if 0 <= nx < n and 0 <= ny < n:
            yield (nx, ny)

def covers_all(n, marked_set):
    # Check if every cell has a marked neighbor
    marked = set(marked_set)
    for x in range(n):
        for y in range(n):
            # Check for a marked neighbor of (x,y)
            if not any((nx,ny) in marked for (nx,ny) in neighbors(n,x,y)):
                return False
    return True

def main():
    for n in [2,4,6]:  # small even n samples
        print(f"n = {n}")
        all_cells = [(x,y) for x in range(n) for y in range(n)]
        found = False
        # From smallest k upwards to n^2, enumerate subsets and check coverage
        for k in range(1, n*n+1):
            for subset in combinations(all_cells, k):
                if covers_all(n, subset):
                    print(f"  k = {k}, example marked cells: {subset}")
                    found = True
                    break
            if found:
                print(f"Minimum k for n={n} is {k}")
                break

if __name__ == "__main__":
    main()
```
