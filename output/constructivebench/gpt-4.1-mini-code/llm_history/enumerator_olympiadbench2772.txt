[write_program]
The problem is to find the least natural number \( n \) greater than 2023 such that the sum of its base-10 digits equals 17.

We'll enumerate \( n \) starting from 2024 upwards and compute the digit sum. We print each candidate (the ones meeting the digit sum condition) immediately. Finally, we print the least such \( n \).

To keep output length in check, we cap enumeration at some range (e.g., up to 2050), but note that if no solution found there, we continue enumerating further.

```python
# enumerate numbers n > 2023 with digit sum 17, print each found, print least at end

def digit_sum(n):
    return sum(int(d) for d in str(n))

def main():
    start = 2024
    end = 2050  # initial cap to control output

    candidates = []
    print("Candidates with digit sum 17 and n > 2023:")
    for n in range(start, end + 1):
        if digit_sum(n) == 17:
            print(n)
            candidates.append(n)

    if candidates:
        print("\nLeast such n:", min(candidates))
    else:
        print("\nNo candidates found in range", start, "to", end)

if __name__ == "__main__":
    main()
```
