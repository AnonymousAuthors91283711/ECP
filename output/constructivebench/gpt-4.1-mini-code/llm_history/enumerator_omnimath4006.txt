[write_program]
The problem involves finding all natural numbers \( n > 0 \) such that \(\text{digitSum}(n) \times (\text{digitSum}(n) - 1) = n - 1\). Here, \(\text{digitSum}\) is the sum of base-10 digits of \( n \).

We want to enumerate candidates \( n \), compute their digit sum \( s = \text{digitSum}(n) \), and check if \( s(s-1) = n-1 \). Rearranged: \( n = s(s-1) + 1 \).

Since \( s = \text{digitSum}(n) \), \( n \)'s digit sum must be \( s \), and \( n = s^2 - s + 1 \).

To find all \( n \) satisfying this, for each candidate \( s \), check if \(\text{digitSum}(s^2 - s + 1) = s\).

We will try small values for \( s \) (say \( s = 1 \) to 100) and enumerate the numbers \( n = s^2 - s + 1 \) that satisfy the condition.

```python
# Enumerate all n > 0 such that digitSum(n)*(digitSum(n)-1) == n-1
# Equivalently, n = s*(s-1)+1, where s = digitSum(n), so check digitSum(n) == s

def digit_sum(n):
    return sum(int(d) for d in str(n))

# We'll try s in a reasonable range to find all such n
# Since digit sum of n is s, and n = s*(s-1) + 1,
# the digit sum of that number should equal s

max_s = 100  # Search limit; can be increased

print("s, n = s*(s-1)+1, digitSum(n)")
for s in range(1, max_s + 1):
    n = s * (s - 1) + 1
    ds = digit_sum(n)
    if ds == s:
        print(f"s={s}, n={n}, digitSum={ds}")
```

