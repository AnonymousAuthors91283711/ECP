[write_program]
The problem involves counting colorings \( c: \{0,\ldots,7\} \to \{0,1,2\} \) such that for any \( i < j \) where \( i+2 \mid j+2 \), the colors differ at \( i \) and \( j \).

We will enumerate all functions from Fin 8 to Fin 3 (i.e., 3^8 = 6561 cases), check the divisibility and inequality condition, and count valid colorings.

```python
# Enumerate colorings c: {0..7} -> {0,1,2} with c[i] != c[j]
# whenever i<j and (i+2)|(j+2). Print valid colorings count.

def divides(a, b):
    return b % a == 0

def valid_coloring(c):
    for i in range(8):
        for j in range(i+1, 8):
            if divides(i+2, j+2) and c[i] == c[j]:
                return False
    return True

def main():
    from itertools import product

    valid_count = 0
    # Enumerate all 3^8 colorings
    for c in product(range(3), repeat=8):
        if valid_coloring(c):
            valid_count += 1
            print(f"Valid coloring #{valid_count}: {c}")
    print(f"Total valid colorings: {valid_count}")

if __name__ == "__main__":
    main()
```
