[write_program]
The problem asks to find the greatest natural number \( n \) such that:

\[
n = k^2 + 5 \quad \text{for some } k \in \mathbb{N}
\]
and
\[
n = m(m+7) \quad \text{for some } m \in \mathbb{N}.
\]

Equivalently, we want \( n \) such that:

\[
k^2 + 5 = m^2 + 7m.
\]

We'll enumerate \( k, m \) over some small range to find such \( n \), print all solutions found, and then print the maximum \( n \).

```python
# Enumerate n = k^2 + 5 and n = m(m+7), check equality for k,m in range(1, 100)
# Then print all n found, finally print the maximum.

max_k = 100
solutions = set()

for k in range(1, max_k+1):
    n = k*k + 5
    # For given n, check if there exists m such that m(m+7) = n
    # m^2 + 7m - n = 0
    # Solve quadratic for m: m = [-7 Â± sqrt(49 + 4n)] / 2
    D = 49 + 4*n
    sqrt_D = int(D**0.5)
    if sqrt_D*sqrt_D == D:
        # Two possible m
        m1 = (-7 + sqrt_D)//2
        m2 = (-7 - sqrt_D)//2
        # Check if m1 or m2 are natural numbers
        for m in (m1, m2):
            if m >= 0 and m*(m+7) == n:
                solutions.add(n)
                print(f"Found n={n} with k={k} and m={m}")

if solutions:
    max_n = max(solutions)
    print(f"Maximum n found: {max_n}")
else:
    print("No solutions found.")
```
