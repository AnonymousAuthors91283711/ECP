[write_program]
The problem involves summing over all functions from {1,...,n} to {1,...,n} and for each function, counting the size of its image, then averaging over all such functions. We'll enumerate for small n to conjecture the average and possibly guess a formula for n=2013. The total number of functions is n^n.

We compute the average image size by generating all functions from [n] to [n], counting the image size, summing and dividing by n^n. We print partial results and averages for n=1 to 5.

```python
from itertools import product

def average_image_size(n):
    domain = range(n)
    codomain = range(n)
    total_functions = n ** n
    sum_images = 0
    count = 0

    # Enumerate all functions f: domain -> codomain
    for values in product(codomain, repeat=n):
        image_size = len(set(values))
        sum_images += image_size
        count += 1
        # Print partial results periodically
        if count % (max(1, total_functions // 10)) == 0 or count == total_functions:
            print(f"n={n}, checked={count}/{total_functions}, partial average={(sum_images/count):.6f}")
    avg = sum_images / total_functions
    print(f"n={n}, total functions={total_functions}, average image size={avg:.6f}")
    return avg

if __name__ == "__main__":
    for n in range(1, 6):
        av = average_image_size(n)
```

