[write_program]
The problem involves finding the probability that the product of four integers (each from 1 to 6) is a perfect square. We enumerate all quadruples (a,b,c,d) with each in [1..6], compute the product (a)*(b)*(c)*(d), check if itâ€™s a perfect square, count such cases, and print the fraction in lowest terms.

```python
from math import gcd, isqrt

# Enumerate quadruples (a,b,c,d) with each in 1..6
# Check if a*b*c*d is a perfect square
# Count total and favorable cases
# Print favorable/total and reduce fraction

def is_square(n):
    r = isqrt(n)
    return r*r == n

def gcd_reduce(a,b):
    g = gcd(a,b)
    return a//g, b//g

def main():
    total = 6**4
    count = 0
    for a in range(1,7):
        for b in range(1,7):
            for c in range(1,7):
                for d in range(1,7):
                    prod = a*b*c*d
                    if is_square(prod):
                        count += 1
                        print(f"Quadruple ({a},{b},{c},{d}) product {prod} is a perfect square")

    num, den = gcd_reduce(count, total)
    print(f"Count of perfect squares: {count}")
    print(f"Total quadruples: {total}")
    print(f"Probability = {num}/{den}")

if __name__ == "__main__":
    main()
```
