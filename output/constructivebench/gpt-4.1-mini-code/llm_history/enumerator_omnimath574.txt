[write_program]
The problem defines a sequence \( a_n \) with initial values and a recurrence involving squares, and asks for \( a_{2006} \mod 100 \).

We will write a Python program to compute \( a_n \mod 100 \) efficiently up to \( n=2006 \) using the given recurrence:
\[
a_{n+2} = 4 a_{n+1} - 4 a_n + n^2
\]
with
\[
a_0 = 21, \quad a_1 = 35.
\]

We print \( a_n \mod 100 \) as we compute values and finally print \( a_{2006} \mod 100 \).

```python
# Enumerate a_n mod 100 for n up to 2006 according to:
# a_0 = 21, a_1 = 35
# a_{n+2} = 4*a_{n+1} - 4*a_n + n^2

def main():
    mod = 100
    a = [0]*(2007)
    a[0] = 21 % mod
    a[1] = 35 % mod
    print(f"a(0) mod 100 = {a[0]}")
    print(f"a(1) mod 100 = {a[1]}")
    for n in range(2, 2007):
        # Use recurrence
        val = (4*a[n-1] - 4*a[n-2] + (n-2)**2) % mod
        a[n] = val
        if n % 200 == 0 or n == 2006:  # print intermittently for brevity
            print(f"a({n}) mod 100 = {a[n]}")
    print(f"Answer a(2006) mod 100 = {a[2006]}")

if __name__ == "__main__":
    main()
```
