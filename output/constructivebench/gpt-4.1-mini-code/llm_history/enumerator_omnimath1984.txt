[write_program]
The problem is to find the greatest natural number \( n < 2012 \) such that for every divisor \( d \) of \( n \), the binary representation of \( d \) contains at most two 1's.

In other words, each divisor of \( n \) must be a number whose binary form has at most two 1 bits (either a power of two or the sum of two distinct powers of two).

The program will:
- Iterate over \( n \) from 1 to 2011.
- For each \( n \), check all divisors.
- For each divisor \( d \), check if the binary representation has at most two 1's.
- Print all \( n \) that satisfy the condition.
- Print the maximum \( n \) found.

```python
def count_ones_in_binary(x):
    return bin(x).count('1')

def divisors(n):
    divs = []
    i = 1
    while i * i <= n:
        if n % i == 0:
            divs.append(i)
            if i != n // i:
                divs.append(n // i)
        i += 1
    return divs

max_n = -1
print("Enumerating numbers n < 2012 with divisors having â‰¤2 ones in binary:")
for n in range(1, 2012):
    divs = divisors(n)
    if all(count_ones_in_binary(d) <= 2 for d in divs):
        print(n)
        if n > max_n:
            max_n = n

print("Maximum n found:", max_n)
```
