[write_program]
This problem involves summing \( \sum_{k=1}^{2011} \frac{k-1}{k! \cdot (2011-k)!} \). To analyze this, I'll write a Python program that enumerates partial sums and corresponding terms for smaller values of n, aiming to identify patterns or closed forms. The program will print each partial sum exactly (using fractions) and also decimal approximations to help conjecture the sum.

```python
from math import factorial
from fractions import Fraction

def compute_sum(n):
    total = Fraction(0)
    for k in range(1, n+1):
        numerator = k - 1
        denominator = factorial(k) * factorial(n - k)
        term = Fraction(numerator, denominator)
        total += term
        print(f"k={k}, term={term}, partial_sum={total} (approx {float(total):.6f})")
    return total

def main():
    # Test small values to conjecture formula
    for n in [5, 10, 15, 20]:
        print(f"Summation for n={n}:")
        s = compute_sum(n)
        print(f"Sum for n={n} = {s} â‰ˆ {float(s):.10f}\n")

if __name__ == "__main__":
    main()
```
