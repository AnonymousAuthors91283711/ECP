[write_program]
The problem seems to involve finding the least \( k \) such that the sum of the first \( k \) odd numbers equals \( n \). Since the sum of the first \( k \) odd numbers is \( k^2 \), the problem reduces to finding the smallest \( k \) such that \( k^2 = n \). For \( n = 100 \), we want the least \( k \) with \( k^2 = 100 \), i.e., \( k = 10 \).

Below I enumerate \( k \) for some sample \( n \) values and print when the sum of the first \( k \) odd numbers hits \( n \). This helps verify the minimal \( k \) for which the sum equals exactly \( n \), confirming the known formula.

```python
# Enumerate k to find minimal k with sum of first k odd numbers = n
# sum of first k odd numbers = k^2
def find_min_k(n):
    k = 0
    sum_odds = 0
    while sum_odds < n:
        sum_odds += 2*k + 1
        k += 1
        if sum_odds == n:
            print(f"n = {n}, minimal k = {k} with sum = {sum_odds}")
            return k
    print(f"n = {n} not a perfect square sum of first k odd numbers.")
    return None

# Sample n values including 100
sample_ns = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 150]
for n in sample_ns:
    find_min_k(n)
```

