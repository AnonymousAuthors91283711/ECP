[write_program]
This problem is about finding two natural numbers \(a, b\) such that:
- \(10 \leq a < 100\),
- \( ((a \% 10) * 10 + a // 10) * b = 161 \),
- and \( a * b \) equals some number \(P2011AMCB\_4\_answer\).

The transformation \(\text{swap}(a) = (a \% 10) * 10 + a // 10\) swaps the digits of the two-digit number \(a\). We want to find all pairs \((a,b)\) with \(a\) two-digit and their swapped number times \(b\) equal 161, and then compute \(a*b\).

We'll enumerate all \(a\) from 10 to 99, compute swapped \(a\), check if 161 is divisible by swapped \(a\), get \(b\), check \(b \in \mathbb{N}\), and then print the solutions and values of \(a*b\).

```python
# Enumerate a in [10,99], for each, find swapped(a),
# if swapped(a)*b = 161 for some b integer, print a,b and a*b.

def swap_digits(n):
    return (n % 10)*10 + n // 10

def main():
    print("Looking for (a,b) with 10 <= a < 100, swap(a)*b=161:")
    for a in range(10, 100):
        sw = swap_digits(a)
        if sw == 0:
            continue
        if 161 % sw == 0:
            b = 161 // sw
            if b > 0:
                print(f"a={a}, b={b}, swap(a)={sw}, a*b={a*b}")
    print("Enumerated all candidates.")

if __name__ == "__main__":
    main()
```
