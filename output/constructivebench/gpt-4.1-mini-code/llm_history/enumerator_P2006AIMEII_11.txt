[write_program]
The problem defines a sequence \(a_n\) with initial conditions \(a_1 = a_2 = a_3 = 1\) and recurrence \(a_{n+3} = a_{n+2} + a_{n+1} + a_n\). It gives \(a_{28}, a_{29}, a_{30}\), and asks for the last three digits of \(\sum_{k=1}^{28} a_k\).

We will write a Python program to compute terms of the sequence up to \(n=30\), verify the given terms, and then compute the sum and its remainder modulo 1000. The program will print each term and the partial sums as it proceeds.

```python
# Compute the tribonacci sequence starting with 1,1,1 and sum first 28 terms modulo 1000
def tribonacci_sequence(n):
    a = [1, 1, 1]
    for i in range(3, n):
        next_val = a[i-1] + a[i-2] + a[i-3]
        a.append(next_val)
    return a

def main():
    n = 30
    a = tribonacci_sequence(n)
    # Verify given terms
    given = {28: 6090307, 29: 11201821, 30: 20603361}
    for k in range(27, 30):
        print(f"a[{k+1}] = {a[k]} (given: {given[k+1]})")
    # Compute sum of first 28 terms
    total_sum = sum(a[:28])
    print(f"Sum of a[1] to a[28]: {total_sum}")
    print(f"Sum modulo 1000: {total_sum % 1000}")

if __name__ == "__main__":
    main()
```
