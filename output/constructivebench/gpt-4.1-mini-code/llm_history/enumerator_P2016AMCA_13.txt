[write_program]
The problem asks to find the smallest positive multiple of 5, say \(N\), such that
\[
P(N) = \frac{2 \sum_{i=0}^{2k} \binom{N}{i}}{N+1} < \frac{321}{400}
\]
where \(k = N/5\), and also the sum of the base-10 digits of that \(N\) is 12.

We will enumerate multiples of 5, compute \(P(N)\), and print those that satisfy \(P(N) < 321/400\). We also check the digit sum = 12. We print candidates, then finally print the minimal such \(N\).

```python
from math import comb

def digit_sum(n):
    return sum(int(d) for d in str(n))

TARGET = 321/400
candidates = []

print("N \t P(N) \t digit_sum(N)")
for N in range(5, 1000, 5):  # scan multiples of 5 up to 1000
    k = N // 5
    total = sum(comb(N, i) for i in range(2*k + 1))
    P = 2 * total / (N + 1)
    if P < TARGET:
        s = digit_sum(N)
        print(f"{N} \t {P:.6f} \t {s}")
        if s == 12:
            candidates.append(N)

if candidates:
    answer = min(candidates)
    print("\nMinimal N with P(N)<321/400 and digit_sum=12 is:", answer)
else:
    print("\nNo N found with given conditions up to 1000.")
```
