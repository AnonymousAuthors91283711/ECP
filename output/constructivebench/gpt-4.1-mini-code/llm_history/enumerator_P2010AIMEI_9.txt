[write_program]
The problem involves real numbers \(a, b, c\) satisfying a system of cubic equations involving their cubes and the product \(abc\), and asks for the greatest possible value of \(s = a^3 + b^3 + c^3\) under those constraints.

To explore this, the Python program will:

- Enumerate possible triples \((a,b,c)\) over a reasonable range of values, given this is a high-school level problem and the numbers 2, 6, 20 suggest integer or simple rational values might work.
- For each triple, check if the system is satisfied.
- Compute \(s = a^3 + b^3 + c^3\) and print it immediately when a solution triple is found.
- Keep track of the maximum \(s\).

Since it's difficult to solve exactly for real numbers through enumeration, we'll try rational \((a,b,c)\) where \(a,b,c\) are integers or simple fractions within some range, and test the system numerically with a tolerance. We output values of \(s\) found and the parameters.

```python
# Enumerate triples (a,b,c) over small integer ranges and check the system:
# a^3 - a*b*c = 2
# b^3 - a*b*c = 6
# c^3 - a*b*c = 20
# sum = a^3 + b^3 + c^3

# Print each s found immediately

from fractions import Fraction
import sys

def check_eqs(a, b, c, tol=1e-6):
    abc = a * b * c
    c1 = abs(a**3 - abc - 2) < tol
    c2 = abs(b**3 - abc - 6) < tol
    c3 = abs(c**3 - abc - 20) < tol
    return c1 and c2 and c3

# We search for rational a,b,c with numerator, denominator in small ranges
max_s = None
solutions = set()

def print_sol(a,b,c):
    s = a**3 + b**3 + c**3
    print(f"a={a} b={b} c={c} sum={s}")
    return s

# We'll try integers from -10 to 10 for simplicity* and fractions with denominator 1 only (integers).
# Since the problem looks special, integers should suffice for initial exploration.

for a in range(-10, 11):
    # Skip a=0 to avoid division by zero or trivial cases
    if a == 0:
        continue
    for b in range(-10, 11):
        if b == 0:
            continue
        for c in range(-10, 11):
            if c == 0:
                continue
            if check_eqs(a, b, c):
                s = print_sol(a,b,c)
                if (max_s is None) or (s > max_s):
                    max_s = s
                    max_sol = (a, b, c)

if max_s is not None:
    print("\nMaximum sum found:")
    print(f"a={max_sol[0]} b={max_sol[1]} c={max_sol[2]} sum={max_s}")
else:
    print("No solutions found within search domain.")
```

*We choose this domain to keep enumeration within output limits and reasonable runtime. Expanding the domain or to rationals can be done if no solutions are found.
