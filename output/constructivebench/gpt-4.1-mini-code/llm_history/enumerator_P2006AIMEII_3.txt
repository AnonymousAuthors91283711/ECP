[write_program]
The problem is about finding the highest exponent \( k \) such that \( 3^k \mid P \), where
\[ P = \prod_{i=0}^{99} (2i + 1) \]
is the product of the first 100 odd numbers. Our goal is to enumerate the powers of 3 dividing each odd number, sum them up, and output the total exponent \( k \).

We can compute the 3-adic valuation (exponent of 3) of each factor \( 2i+1 \) and sum all to get the total exponent of 3 in the product.

```python
# Enumerate the exponent of 3 dividing product of first 100 odd numbers:
# P = product_{i=0}^{99} (2i + 1)
# Goal: find max k with 3^k divides P

def v3(n):
    # exponent of 3 dividing n
    count = 0
    while n % 3 == 0 and n > 0:
        n //= 3
        count += 1
    return count

total_exponent = 0
for i in range(100):
    val = 2 * i + 1
    exp = v3(val)
    if exp > 0:
        print(f"3^{exp} divides {val}")
    total_exponent += exp

print(f"Total power of 3 dividing P: {total_exponent}")
```
This prints each factor divisible by powers of 3 immediately and finally outputs the total highest power dividing the product.
