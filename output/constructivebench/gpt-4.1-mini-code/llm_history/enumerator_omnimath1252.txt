[write_program]
The problem is to find the smallest positive integer \( n \) that can be expressed as the sum of three cubes in two distinct ways (counting multisets of cubes). We will enumerate positive integers and search for at least two distinct triples \((a,b,c)\) such that \(a^3+b^3+c^3=n\). We'll print all such \(n\) candidates when found, then output the minimal one after enumeration.

We'll fix a small search bound for \(a,b,c\) to keep output short but indicative, say up to 20.

```python
from collections import defaultdict

def cube_sums(limit=20, max_n=20000):
    # dictionary mapping n -> list of multisets of cubes (sorted tuples)
    sums = defaultdict(list)
    for a in range(limit+1):
        a3 = a**3
        for b in range(a, limit+1):
            b3 = b**3
            for c in range(b, limit+1):
                s = a3 + b3 + c**3
                if s > max_n or s == 0:
                    continue
                triple = tuple(sorted([a,b,c]))
                sums[s].append(triple)

    candidates = []
    for n in sorted(sums.keys()):
        multisets = set(sums[n])
        if len(multisets) >= 2:
            # check distinctness of multisets
            # already multisets different by construction if len>=2
            print(f"Found n={n} with distinct triples: {multisets}")
            candidates.append(n)
    if candidates:
        print(f"Minimal n: {min(candidates)}")
    else:
        print("No candidates found with given bounds.")

if __name__ == "__main__":
    cube_sums()
```
