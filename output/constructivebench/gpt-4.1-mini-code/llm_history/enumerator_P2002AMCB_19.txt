[write_program]
The problem gives a system of symmetric equations in three positive variables \(a, b, c\):
\[
\begin{cases}
a(b+c) = 152 \\
b(c+a) = 162 \\
c(a+b) = 170
\end{cases}
\]
and asks to find \(abc\).

Our program will:
- Enumerate positive integer triples \((a,b,c)\) with some reasonable upper bound,
- Check if the equations hold exactly,
- Calculate \(abc\) when all three equalities hold,
- Print each satisfying triple and their product immediately.

This enumeration will help conjecture the correct product value \(abc\).

```python
# Enumerate triples (a,b,c) with positive integers up to a small bound,
# check the given equations exactly, print (a,b,c,abc).
# Because the system is symmetric but with different RHS, the variables differ.
# We'll try rational values by checking integer candidates with division.

def approx_equal(x, y, tol=1e-8):
    return abs(x-y) < tol

max_val = 200
for a_int in range(1, max_val+1):
    for b_int in range(1, max_val+1):
        # Compute c from first equation: a*(b+c) =152 => c = 152/a - b
        c = 152 / a_int - b_int
        if c <= 0:
            continue
        # Check second: b*(c+a) = 162 ?
        if not approx_equal(b_int*(c + a_int), 162):
            continue
        # Check third: c*(a + b) = 170 ?
        if not approx_equal(c*(a_int + b_int), 170):
            continue
        abc = a_int * b_int * c
        print(f"a={a_int}, b={b_int}, c={c:.6f}, abc={abc:.6f}")
```
This prints all triples fitting the equations exactly (within tolerance), which can help conjecture the exact value of \(abc\).
