[write_program]
The problem counts Boolean functions on the vertices of a cube (8 vertices, labeled by Fin 8) such that no two adjacent vertices are both assigned True. This is equivalent to counting all independent sets (vertex subsets with no edges) in the cube graph. The question is to enumerate and count these independent sets.

Our Python program will:
- Represent vertices 0 to 7.
- Encode adjacency based on the 3D cube coordinate differences.
- Enumerate all subsets of {0..7}, filter those where no two adjacent vertices are both in the subset.
- Print each independent set (represented as a sorted list or bitstring).
- Finally, print the total count of such independent sets.

Since the graph has 8 vertices, there are 2^8=256 subsets to test, which is feasible.

We'll output each independent set as a bitstring for clarity, then total count.

```python
# Enumerate all independent sets (no adjacent True) in the 3D cube graph with 8 vertices.
# Vertices labeled 0..7 as (x,y,z) bits: vertex i has coordinates (i//4, (i//2)%2, i%2).
# Two vertices adjacent iff coordinate difference sum of abs 1.

def cube_coords(v):
    return (v // 4, (v // 2) % 2, v % 2)

def adj(u,v):
    x1,y1,z1 = cube_coords(u)
    x2,y2,z2 = cube_coords(v)
    diff = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2)
    return diff == 1

# Precompute adjacency list for vertices 0..7
adj_list = []
for i in range(8):
    adj_i = []
    for j in range(8):
        if i != j and adj(i,j):
            adj_i.append(j)
    adj_list.append(adj_i)

count = 0
# Iterate all subsets as bitmasks from 0 to 255
for subset in range(1 << 8):
    # Check if subset is independent: no edge between two vertices in subset
    # For each vertex in subset, check neighbors not in subset
    independent = True
    for v in range(8):
        if (subset & (1 << v)) != 0:
            # v in subset
            for w in adj_list[v]:
                if (subset & (1 << w)) != 0:
                    independent = False
                    break
            if not independent:
                break
    if independent:
        count += 1
        # print bitstring representation, '1' for True vertex, '0' for False
        print(bin(subset)[2:].zfill(8))
print("Total independent sets:", count)
```
