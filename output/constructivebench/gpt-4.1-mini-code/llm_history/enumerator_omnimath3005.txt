[write_program]
The problem asks for the sum of the digits (in base 10) of a number \(N\) where \(N\) is between 100 and 999, and \(N\) leaves a remainder 7 when divided by 10, 11, and 12 simultaneously.

We want to find all such \(N\), output them with their digit sums, then conjecture the sum of digits based on enumeration.

```python
# Enumerate all N between 100 and 999 inclusive that satisfy:
# N % 10 == 7, N % 11 == 7, N % 12 == 7
# Then print each N with its digit sum.
# Finally, print the distinct digit sums found.

def digit_sum(n):
    return sum(int(d) for d in str(n))

print("Checking N from 100 to 999 with constraints:")
valid_digit_sums = set()
for N in range(100, 1000):
    if N % 10 == 7 and N % 11 == 7 and N % 12 == 7:
        s = digit_sum(N)
        print(f"N={N}, digit sum={s}")
        valid_digit_sums.add(s)

if valid_digit_sums:
    min_sum = min(valid_digit_sums)
    max_sum = max(valid_digit_sums)
    print(f"Distinct digit sums: {sorted(valid_digit_sums)}")
    print(f"Minimum digit sum = {min_sum}")
    print(f"Maximum digit sum = {max_sum}")
else:
    print("No numbers found matching all remainders.")
```
