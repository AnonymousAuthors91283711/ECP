[write_program]
The problem is to find the smallest positive integer \( n \) for which there exist positive integers \( b \) and \( r \) with \( b + r = n \) and satisfying the equation:

\[
\frac{b \cdot r \cdot (b + r - 2)}{2} = 25.
\]

We want to enumerate triples \((b, r, n)\) (with \(n = b+r\)) that satisfy this equation, for small values of \( n \), and output all solutions found as well as the smallest \( n \) found with a solution.

```python
# Enumerate all positive integers n = b + r such that
# b * r * (b + r - 2) / 2 = 25, with b, r > 0.
# We search for n starting from 2 upwards.
# Once we pass some upper bound (e.g., n=50), we stop.
# We print all solutions and finally print the minimal n found.

def main():
    TARGET = 25
    max_n = 50
    solutions = []
    min_n = None

    for n in range(2, max_n + 1):
        # For each n, try b from 1 to n-1, r = n - b
        for b in range(1, n):
            r = n - b
            val = b * r * (n - 2)  # b * r * (b + r - 2)
            if val % 2 == 0 and val // 2 == TARGET:
                print(f"Solution: n={n}, b={b}, r={r}, val={val // 2}")
                solutions.append(n)
                if min_n is None or n < min_n:
                    min_n = n
                # no break, print all (b,r) for a given n

    if min_n is not None:
        print(f"Minimum n with a solution is {min_n}")
    else:
        print("No solution found for n up to", max_n)

if __name__ == "__main__":
    main()
```
