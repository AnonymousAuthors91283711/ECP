[write_program]
The problem involves real numbers \(a, b, c\) with \(a+b+c=0\), all nonzero, satisfying the equality \(a^3+b^3+c^3 = a^5 + b^5 + c^5\), and asks for the value of \(a^2 + b^2 + c^2\).

To assist in conjecturing the answer, the program enumerates triples \((a,b,c)\) with small rational values summing to zero and all nonzero, checks the condition \(a^3+b^3+c^3 = a^5 + b^5 + c^5\), and if so, prints the triple and the corresponding \(a^2+b^2+c^2\).

We'll test with fractions having denominators up to 5 and numerators from -5 to 5, avoiding zero and trivial sums. The program prints candidates immediately upon finding them.

```python
from fractions import Fraction

# Enumerate triples (a,b,c) with a,b,c nonzero rationals, a+b+c=0,
# and check if a^3+b^3+c^3 == a^5+b^5+c^5. If so, print (a,b,c) and sum of squares.

def power(x, n):
    # Efficient rational power
    return x**n

values = [Fraction(n, d) for d in range(1,6) for n in range(-5,6) if n != 0]

seen = set()

print("Enumerating candidates (a, b, c) with a+b+c=0, all nonzero, satisfying a^3+b^3+c^3 = a^5+b^5+c^5")
for a in values:
    for b in values:
        c = -a - b
        if c == 0:
            continue
        # To avoid duplicates, sort triple absolute values as tuple key
        key = tuple(sorted([a,b,c], key=lambda x: (x.numerator/x.denominator)))
        if key in seen:
            continue
        seen.add(key)
        lhs = power(a,3) + power(b,3) + power(c,3)
        rhs = power(a,5) + power(b,5) + power(c,5)
        if lhs == rhs:
            sum_sq = power(a,2) + power(b,2) + power(c,2)
            print(f"a={a}, b={b}, c={c}, a^2+b^2+c^2 = {sum_sq}")
```

