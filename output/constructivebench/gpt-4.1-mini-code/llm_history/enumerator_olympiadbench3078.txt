[write_program]
The problem gives a set of real numbers s defined by s = x + y where y = x² and y - x = 3 - y. We want to find the greatest such s.

From y - x = 3 - y, we get 2y = x + 3 => y = (x + 3)/2.

Since y = x² also, x² = (x + 3)/2.

Multiply both sides by 2: 2x² = x + 3 => 2x² - x - 3 = 0.

Solve quadratic: x = [1 ± sqrt(1 + 24)] / 4 = [1 ± 5]/4.

Roots: (1 + 5)/4 = 6/4 = 1.5, (1 - 5)/4 = -4/4 = -1.

So x can be 1.5 or -1, y = x² = 2.25 or 1.

Then s = x + y = (1.5 + 2.25) = 3.75 or (-1 + 1) = 0.

We expect the maximum s to be 3.75.

We write a program to enumerate numerical approximations for x in a small range to confirm this maximum.

```python
import math

# Enumerate candidate x values in range [-2, 3] with step 0.01
# For each x, check if y = x^2 satisfies y = (x+3)/2 approximately
# Then compute s = x + y and print candidates

def is_close(a, b, tol=1e-9):
    return abs(a - b) < tol

print("Enumerating s = x + y, where y = x^2 and y - x = 3 - y")

candidates = []

for i in range(-200, 301):  # -2.00 to 3.00
    x = i / 100
    y = x ** 2
    left = y - x
    right = 3 - y
    if is_close(left, right):
        s = x + y
        print(f"x={x:.2f}, y={y:.2f}, s={s:.2f}")
        candidates.append(s)

if candidates:
    max_s = max(candidates)
    print(f"Maximum s found: {max_s:.2f}")

```
