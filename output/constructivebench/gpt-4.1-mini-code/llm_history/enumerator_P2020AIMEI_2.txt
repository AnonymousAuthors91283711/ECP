[write_program]
The problem involves finding a positive real number x such that with a = log base 8 of (2x), b = log base 4 of x, c = log base 2 of x, the ratio b/a equals c/b and is positive. Additionally, x must be a fraction m/n in lowest terms with m + n = 17. We are to enumerate all fractions m/n with m, n positive integers, m + n = 17, m and n coprime, and check the condition b/a = c/b > 0.

```python
from math import log
from fractions import Fraction
from math import gcd

def log_base(b, x):
    return log(x) / log(b)

def approx_equal(a, b, tol=1e-12):
    return abs(a - b) < tol

def main():
    # We have m + n = 17, with m,n positive integers, coprime fractions m/n.
    # Enumerate all such fractions
    for m in range(1, 17):
        n = 17 - m
        if gcd(m, n) != 1:
            continue
        x = Fraction(m, n)
        x_val = float(x)
        if x_val <= 0:
            continue
        # Calculate logs
        try:
            a = log_base(8, 2 * x_val)  # log base 8 (2x)
            b = log_base(4, x_val)      # log base 4 x
            c = log_base(2, x_val)      # log base 2 x
        except ValueError:
            # log of non-positive number
            continue
        if a == 0:
            continue
        lhs = b / a
        rhs = c / b if b != 0 else None
        if rhs is None:
            continue
        if lhs <= 0:
            continue
        if approx_equal(lhs, rhs):
            # Print exact fraction and numeric value and values of a,b,c and ratios
            print(f"x = {m}/{n} = {x_val:.12f}")
            print(f"a = {a:.12f}, b = {b:.12f}, c = {c:.12f}")
            print(f"b/a = {lhs:.12f}, c/b = {rhs:.12f}\n")
    # After enumeration, print the unique found value(s)
    print("Enumerated candidates with m + n = 17 that satisfy the condition above.")

if __name__ == "__main__":
    main()
```
