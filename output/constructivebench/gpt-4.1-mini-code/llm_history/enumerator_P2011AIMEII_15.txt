[write_program]
The problem concerns the measure (length) of the set of real numbers \( x \in [5,15] \) such that the floor of \(\sqrt{x^2 - 3x - 9}\) equals \(\sqrt{\lfloor x \rfloor^2 - 3 \lfloor x \rfloor - 9}\).

To analyze and conjecture the answer, we:
- Consider integer intervals \([n, n+1)\) for \( n = 5,\dots,14 \).
- On each interval, \(\lfloor x \rfloor = n\), so the right side is constant \(\sqrt{n^2 - 3n -9}\).
- We seek all \(x \in [n,n+1)\) such that \(\lfloor \sqrt{x^2-3x-9} \rfloor = \sqrt{n^2 - 3n - 9}\).
- We enumerate \(n\) and find the subset of \([n,n+1]\) satisfying the floor condition and sum their lengths.
- We print each partial measure immediately.

```python
import math

def floor_sqrt_expr(x):
    val = x*x - 3*x - 9
    if val < 0:
        return None
    return math.floor(math.sqrt(val))

def exact_sqrt_floor(n):
    val = n*n - 3*n - 9
    if val < 0:
        return None
    root = math.sqrt(val)
    if abs(root - round(root)) < 1e-12:
        return int(round(root))
    else:
        return root  # irrational, keep as float

def interval_length(n):
    # On [n, n+1], right side floor = floor_sqrt_floor = floor(sqrt(n² - 3n - 9))
    rhs_val = n*n - 3*n - 9
    if rhs_val < 0:
        return 0.0
    rhs_sqrt = math.sqrt(rhs_val)
    rhs_floor = math.floor(rhs_sqrt)
    # Find x in [n,n+1] with floor(sqrt(x² -3x -9)) == rhs_floor
    # i.e. sqrt(x²-3x-9) in [rhs_floor, rhs_floor+1)
    # Square and solve:
    # rhs_floor² ≤ x² -3x -9 < (rhs_floor+1)²
    low = rhs_floor**2 + 3*n + 9  # we rearrange inequalities to find x

    # But easier: solve inequalities directly:
    # x² -3x -9 ≥ rhs_floor²
    # and x² -3x -9 < (rhs_floor+1)²

    # Solve x² -3x - (9 + rhs_floor²) ≥ 0 (≥ for left inequality)
    a, b, c1 = 1, -3, -(9 + rhs_floor**2)
    disc1 = b*b - 4*a*c1
    if disc1 < 0:
        return 0.0
    sqrt_disc1 = math.sqrt(disc1)
    x1 = (3 - sqrt_disc1)/2
    x2 = (3 + sqrt_disc1)/2
    # Because a>0, inequality ≥0 means x ≤ x1 or x ≥ x2

    # Solve x² -3x - (9 + (rhs_floor+1)²) < 0
    c2 = -(9 + (rhs_floor+1)**2)
    disc2 = b*b - 4*a*c2
    if disc2 < 0:
        return 0.0
    sqrt_disc2 = math.sqrt(disc2)
    y1 = (3 - sqrt_disc2)/2
    y2 = (3 + sqrt_disc2)/2
    # inequality <0 means y1 < x < y2

    intervals = []
    # Combine intervals where floor condition holds:
    # floor condition means sqrt(...) ∈ [rhs_floor, rhs_floor+1),
    # so x in intersection of [n,n+1] and (x ≤ x1 or x ≥ x2) and (y1 < x < y2)
    # Actually since sqrt(...) increasing after vertex let's check intervals:

    # From quadratic shape, between y1 and y2 expression < upper bound,
    # and outside (x ≤ x1 or x ≥ x2) expression ≥ lower bound

    # So intersection where floor condition holds is:
    # ( [n,n+1] ∩ [x ≤ x1 or x ≥ x2] ) ∩ (y1 < x < y2)
    # = ( [n,n+1] ∩ (([−∞,x1] or [x2,∞)) ∩ (y1,y2) )

    # So intersections:
    # [n,n+1] ∩ [−∞, x1] ∩ (y1,y2)
    low_int_start = n
    low_int_end = n+1

    # Intersect intervals:
    # low part: [n,n+1] ∩ (−∞, x1] ∩ (y1,y2) = [n, min(x1, n+1)] ∩ (y1,y2)
    left_start = max(low_int_start, y1)
    left_end = min(x1, low_int_end)
    length = 0.0
    if left_start < left_end:
        length += left_end - left_start

    # high part: [n,n+1] ∩ [x2, ∞) ∩ (y1,y2) = [max(n,x2), n+1] ∩ (y1,y2)
    right_start = max(low_int_start, x2, y1)
    right_end = min(low_int_end, y2)
    if right_start < right_end:
        length += right_end - right_start

    return length

def main():
    total = 0.0
    for n in range(5, 15):
        length = interval_length(n)
        total += length
        print(f"n={n}, interval length={length:.10f}")
    total_length = 15 - 5
    ratio = total / total_length
    print(f"Total length: {total:.10f}")
    print(f"Ratio total/length(5..15) = {ratio:.10f}")

if __name__ == "__main__":
    main()
```
