[write_program]
The problem involves finding a 4-digit number \( N \) with the form \( N = 10 \times abc + d \) where \(abc\) is a 3-digit number and \(d < 10\), such that \( N^2 \equiv N \pmod{10000} \) (i.e., \(N\) is automorphic mod 10000), and the leading digit of \(N\) is nonzero. The goal is to find the least such \(abc\).

We'll enumerate all \(abc\) in [100..999] and \(d\) in [0..9], compute \(N\), and check the automorphic condition efficiently. We'll print each \(abc\) found that meets the criteria along with \(d\) and \(N\), then print the minimum \(abc\) at the end.

```python
# Enumerate 4-digit numbers N = 10*abc + d, with abc in [100..999], d in [0..9]
# such that N^2 ends with N (mod 10000). Print all such abc,d,N and minimum abc.

min_abc = None

for abc in range(100, 1000):
    for d in range(10):
        N = 10 * abc + d
        if 1000 <= N < 10000:
            # Check if N is automorphic mod 10000: N^2 % 10000 == N
            if (N * N) % 10000 == N:
                print(f"abc={abc}, d={d}, N={N}")
                if (min_abc is None) or (abc < min_abc):
                    min_abc = abc

if min_abc is not None:
    print(f"Minimum abc satisfying condition: {min_abc}")
else:
    print("No abc found satisfying the condition")
```
