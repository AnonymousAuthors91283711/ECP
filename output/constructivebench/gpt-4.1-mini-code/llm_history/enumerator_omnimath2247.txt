[write_program]
The problem defines a property P(m, n) with m between 1 and 49, and m divides n^(n+1) + 1. We want to count the distinct m in [1..49] for which there exists some n with m dividing n^{n+1} + 1. Let's enumerate m = 1..49 and for each, try small n = 1..20 to check divisibility. We print every pair (m,n) found and the m values found. Finally print the count of such m.

```python
# Enumerate m in [1..49], and small n in [1..20], check if m divides n^(n+1)+1
# Print each (m,n) immediately when division holds. Then print m found and total count.

def main():
    max_m = 49
    max_n = 20
    ms_found = set()
    for m in range(1, max_m+1):
        for n in range(1, max_n+1):
            val = pow(n, n+1, m)  # compute n^{n+1} mod m efficiently
            if (val + 1) % m == 0:
                # m divides n^{n+1} + 1
                print(f"m={m} divides {n}^{n+1}+1")
                ms_found.add(m)
                break  # no need to find more n for this m

    print("Values of m found:", sorted(ms_found))
    print("Total distinct m:", len(ms_found))

if __name__ == "__main__":
    main()
```
