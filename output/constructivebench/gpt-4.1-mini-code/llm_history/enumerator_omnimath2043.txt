[write_program]
The problem is to count the cardinality of the set of injective functions from a 3-element finite set (Fin 3) to a 4-element finite set (Fin 4). Such functions assign distinct outputs to distinct inputs, so the count is the number of injective maps (one-to-one functions) from a 3-element set to a 4-element set.

The formula for the number of injections from a set of size k to a set of size n (with n ≥ k) is P(n, k) = n! / (n-k)!.

For Fin 3 → Fin 4, the number is 4 * 3 * 2 = 24.

The program below enumerates all such injections by generating all 3-length permutations of values from 0 to 3 (representing Fin 4 = {0,1,2,3}), prints each injection as a tuple (c 0, c 1, c 2), and finally prints the total count for verification.

```python
# Enumerate injective functions from Fin 3 to Fin 4
from itertools import permutations

def main():
    n = 4  # size of codomain (Fin 4)
    k = 3  # size of domain (Fin 3)
    print(f"Enumerating injective functions from Fin {k} to Fin {n}:")
    count = 0
    # permutations of length k from n elements represent injective maps
    for p in permutations(range(n), k):
        print(p)  # print injection immediately
        count += 1
    print(f"Total injective functions count: {count}")

if __name__ == "__main__":
    main()
```
