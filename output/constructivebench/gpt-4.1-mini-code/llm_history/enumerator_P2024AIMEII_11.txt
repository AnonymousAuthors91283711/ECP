[write_program]
The problem involves finding the number of ordered triples (a, b, c) of natural numbers such that a + b + c = 300. This is a classic stars-and-bars combinatorial problem.

To provide insight for solving or verifying the number of such triples, we'll enumerate all triples (a, b, c) with a, b, c â‰¥ 0 and a + b + c = 10 as a smaller sample (instead of 300 to keep output manageable). We'll print each triple and the count, illustrating how you might approach the general problem.

```python
# Enumerate triples (a,b,c) of non-negative integers summing to sum_val
# Here sum_val=10 for demonstration; original problem is sum_val=300 which is large to print
sum_val = 10

count = 0
print(f"Enumerating triples (a, b, c) with a+b+c={sum_val}:")
for a in range(sum_val+1):
    for b in range(sum_val - a + 1):
        c = sum_val - a - b
        print(f"(a, b, c) = ({a}, {b}, {c})")
        count += 1
print(f"Total number of such triples: {count}")

# For nonnegative integers a,b,c with a+b+c = n, count = (n+2 choose 2)
from math import comb
exact_count = comb(sum_val+2, 2)
print(f"Verified by combinatorial formula: C({sum_val+2}, 2) = {exact_count}")
```

