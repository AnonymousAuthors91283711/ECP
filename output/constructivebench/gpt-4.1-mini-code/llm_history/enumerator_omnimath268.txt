[write_program]
The problem seeks all non-negative integral solutions \( n : \text{Fin }14 \rightarrow \mathbb{Z} \) such that \(\sum_{i=0}^{13} n_i^4 = 1599\).

Since \(n_i \geq 0\), and \(n_i^4\) grows quickly, we can enumerate all tuples with \(n_i\) up to the 4th root of 1599 (which is about 6.3). So, \(n_i\) ranges from 0 to 6.

We want to print all solutions immediately as we find them, which sum up exactly to 1599.

We must be efficient, so we will use a backtracking approach with pruning.

We expect no or very few solutions.

```python
from itertools import product

# We'll search for tuples (n0, ..., n13) with each ni in 0..6 s.t. sum(ni^4) = 1599.
# 6^4 = 1296, so max per coordinate.

N = 14
TARGET = 1599
MAX_VAL = 6
powers = [i**4 for i in range(MAX_VAL+1)]

def backtrack(idx, current_sum, current_tuple):
    if current_sum > TARGET:
        return
    if idx == N:
        if current_sum == TARGET:
            print(current_tuple)
        return
    # Remaining coords: N - idx - 1
    for val in range(MAX_VAL+1):
        # Prune if sum exceeds target
        new_sum = current_sum + powers[val]
        if new_sum <= TARGET:
            backtrack(idx+1, new_sum, current_tuple + (val,))

def main():
    backtrack(0, 0, ())

if __name__ == "__main__":
    main()
```
