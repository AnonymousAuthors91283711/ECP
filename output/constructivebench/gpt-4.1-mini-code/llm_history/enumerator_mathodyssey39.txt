[write_program]
We want to find all natural numbers \( k \) such that
\[
\text{digitProduct}(k) = \frac{25k}{8} - 211,
\]
where \(\text{digitProduct}(k)\) is the product of the digits of \(k\).

Key observations:
- The right side must be an integer, so \(25k/8\) must be an integer, implying \(k\) is divisible by 8.
- \(\text{digitProduct}(k)\) is at most \(9^d\) where \(d\) is the number of digits of \(k\).
- For large \(k\), the right side grows approximately linearly but digit product grows slower.
- To be safe and efficient, limit \(k\) from 0 to 10,000 where checking divisibility by 8 further reduces candidates.

The program enumerates possible \(k\), checks the equality, prints matching \(k\) immediately, and keeps track of their sum for the final total.

```python
def digit_product(n):
    product = 1
    if n == 0:
        return 0
    while n > 0:
        d = n % 10
        if d == 0:
            return 0
        product *= d
        n //=10
    return product

matches = []
total = 0
# k must be divisible by 8 so that 25*k/8 is integer
for k in range(0, 10001, 8):
    right = 25 * k // 8 - 211
    if right < 0:
        continue
    left = digit_product(k)
    if left == right:
        print(k)
        matches.append(k)
        total += k

print("Sum of all matches:", total)
```
