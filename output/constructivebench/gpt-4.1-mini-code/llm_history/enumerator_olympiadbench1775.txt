[write_program]
The problem involves analyzing sums of the form \(\sum_{i=1}^n \frac{a(i)}{i}\) where \(a\) is a bijection on \(\{1, \ldots, n\}\) (we use zero-based indexing carefully). We want to find the minimal such sum over all permutations \(a\).

To assist in conjecturing the form of the minimal sum, we'll:
- Enumerate permutations for small \(n\) (say, \(1 \leq n \leq 5\)).
- Compute the sum \(\sum_{i=1}^n \frac{a(i)}{i}\) where here \(a(i)\) are the values from \(1\) to \(n\) permuted.
- Print all sums and the minimum sum for each \(n\).

Since the problem indexes from \(0\) in the original Lean code, and denominators are \(i+1\), we'll do the same: for index \(i\) zero-based, denominator is \(i+1\), numerator is the value at position \(i\), with values from \(1\) to \(n\).

We will print sums as exact fractions for readability using Python's `fractions.Fraction`, then also print the minimal sum per \(n\).

```python
from fractions import Fraction
from itertools import permutations

def sum_permutation(p):
    # p is a permutation of 1..n (list of ints)
    return sum(Fraction(val, i+1) for i, val in enumerate(p))

def main():
    max_n = 5
    for n in range(1, max_n+1):
        print(f"n = {n}")
        values = list(range(1, n+1))
        sums = []
        for perm in permutations(values):
            s = sum_permutation(perm)
            print(f"permutation={perm} sum={s}")
            sums.append(s)
        min_sum = min(sums)
        print(f"Minimum sum for n={n}: {min_sum}\n")

if __name__ == "__main__":
    main()
```
