[write_program]
The problem is to find a 3-element subset \( T \) of \( S = \{1, 2, 4, 8, 16, 20\} \) such that the product of elements in \( T \) is 80, and then find the sum of elements in such \( T \). We want to enumerate all 3-element subsets of \( S \), check the product condition, and print the sums of valid subsets. Finally, print the extremal (minimum/maximum) sum found.

```python
from itertools import combinations
import math

S = [1, 2, 4, 8, 16, 20]
target_product = 80

valid_sums = []

print(f"Set S: {S}")
print(f"Target product: {target_product}")

for T in combinations(S, 3):
    prod = math.prod(T)
    if prod == target_product:
        s = sum(T)
        valid_sums.append(s)
        print(f"Found subset {T} with product {prod} and sum {s}")

if valid_sums:
    min_sum = min(valid_sums)
    max_sum = max(valid_sums)
    print(f"Minimum sum of subsets with product {target_product}: {min_sum}")
    print(f"Maximum sum of subsets with product {target_product}: {max_sum}")
else:
    print("No subsets found with the given product.")
```
