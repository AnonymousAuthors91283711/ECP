[write_program]
The problem asks to study the sum over positive integers n such that 2n divides Euler's totient φ(n), of 1/n. We'll write a Python program to find such n up to some bound, print the terms 1/n for these n, and accumulate partial sums to identify potential values of the series.

```python
from math import gcd
from sympy import totient

def main():
    print("Enumerating n with 0 < n and 2n | φ(n), n ≤ 100000")
    partial_sum = 0
    limit = 100000  # upper bound for search
    for n in range(1, limit + 1):
        phi = totient(n)
        if (2 * n) != 0 and phi % (2 * n) == 0:
            term = 1 / n
            partial_sum += term
            # Print n and 1/n exactly as a fraction string if possible
            print(f"n={n}, 1/n=1/{n}")
    # Print partial sum as float for convenience
    print(f"Partial sum up to n={limit} is approximately {partial_sum:.10f}")

if __name__ == "__main__":
    main()
```
