[write_program]
The problem involves finding a real number \( t \) such that \( S \cdot t + M \cdot t = \text{distance} \), with given values \( S = 15 \), \( M = 10 \), and \(\text{distance} = 100\). The goal is to find \( t \) satisfying these and then compute \( S \cdot t \).

Since \( S, M, \text{distance} \) are fixed, we can solve the linear equation \( (S + M) t = \text{distance} \) exactly for \( t \) and then compute \( S \cdot t \).

Here's a simple Python script that enumerates \( t \) values satisfying the equation (symbolically) and prints \( S \cdot t \):

```python
# Enumerate t that satisfy (S + M)*t = distance for given S, M, distance.
# S=15, M=10, distance=100.

def main():
    S = 15
    M = 10
    distance = 100

    # Compute t exactly
    total_speed = S + M
    t = distance / total_speed  # exact value
    S_t = S * t

    # Print the values as fraction if possible using fractions module
    from fractions import Fraction
    t_frac = Fraction(distance, total_speed)
    S_t_frac = S * t_frac

    print(f"S = {S}, M = {M}, distance = {distance}")
    print(f"t = {t_frac} = {float(t_frac):.6f}")
    print(f"S * t = {S_t_frac} = {float(S_t_frac):.6f}")

    # Enumerate some approximate alternative t values near solution to show no others satisfy closely
    for numerator in range(distance - 5, distance + 6):
        for denominator in range(total_speed - 2, total_speed + 3):
            if denominator != 0:
                t_try = Fraction(numerator, denominator)
                left = (S + M) * t_try
                if abs(float(left) - distance) < 1e-6:
                    print(f"Alternative t: {t_try} = {float(t_try):.6f}, (S+M)*t = {left}")
                    print(f"S*t = {S * t_try}")

if __name__ == "__main__":
    main()
```
