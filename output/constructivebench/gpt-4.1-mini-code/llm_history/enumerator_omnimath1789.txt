[write_program]
The problem asks for the last two digits of 1032^1032, which is equivalent to finding (1032^1032) mod 100. Since 1032 % 100 = 32, this reduces to (32^1032) mod 100. To handle this efficiently, we'll use modular exponentiation and print intermediate values for some smaller exponents to conjecture the pattern or final answer.

```python
def mod_exp(base, exponent, mod):
    result = 1
    x = base % mod
    for e in range(exponent):
        result = (result * x) % mod
        # Print some early powers to observe pattern
        if e < 10 or e in {100, 200, 500, 1000}:
            print(f"32^{e+1} mod 100 = {result}")
    return result

def main():
    base = 1032
    mod = 100
    exp = 1032

    # Since 1032 % 100 = 32, simplify base
    base_mod = base % mod
    print(f"Using base = {base_mod} mod {mod}")

    # Perform modular exponentiation with streaming prints
    answer = mod_exp(base_mod, exp, mod)
    print(f"(1032^{exp}) mod {mod} = {answer}")

if __name__ == "__main__":
    main()
```
