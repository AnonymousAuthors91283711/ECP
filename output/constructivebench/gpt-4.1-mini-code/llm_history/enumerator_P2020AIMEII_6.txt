[write_program]
The problem defines a sequence \( t_n \) of rationals by:
- \( t_1 = 20 \)
- \( t_2 = 21 \)
- for \( n \geq 1 \), \( t_{n+3} = \frac{t_{n+2} + t_n + 1}{t_{n+1}} \).

We want to find \( t_{2020} \) numerically or in a form where we can get its numerator and denominator, then sum them.

Let's write a Python program to:
- Enumerate \( t_n \) from 1 to 2020 inclusively.
- Use Python's `fractions.Fraction` for exact arithmetic.
- Print some intermediate values to detect patterns if any.
- Finally print numerator + denominator for \( t_{2020} \).

We will store and update the sequence efficiently to avoid excessive memory.

```python
from fractions import Fraction

def t_sequence(n_max):
    # Initialize base cases:
    t = [None, Fraction(20), Fraction(21)]  # 1-based indexing, t[0] unused
    # We need t[3] onwards, so define t[3] by the recurrence or set dummy first:
    # But our recurrence starts at n+3, so first compute t[3], from n=0:
    # t[3] = (t[2] + t[0] + 1) / t[1], but t[0] = 0 (dummy)
    # So t[3] = (21 + 0 + 1)/20 = 22/20 = 11/10
    t.append(Fraction(22, 20))
    
    for i in range(4, n_max + 1):
        # recurrence: t[i] = (t[i-1] + t[i-3] + 1) / t[i-2]
        val = (t[i - 1] + t[i - 3] + 1) / t[i - 2]
        t.append(val)
        # Print some values periodically to check:
        if i <= 10 or i == 2020:
            print(f"t[{i}] = {val} (num={val.numerator}, den={val.denominator})")

    return t[n_max]

def main():
    n = 2020
    val = t_sequence(n)
    print(f"Answer t[{n}] numerator + denominator = {val.numerator + val.denominator}")

if __name__ == "__main__":
    main()
```

This will print the first 10 values and the 2020th value and sum numerator and denominator of the last fraction.
