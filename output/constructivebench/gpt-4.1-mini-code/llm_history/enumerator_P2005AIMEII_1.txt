[write_program]
This problem asks for the smallest natural number \( n \geq 6 \) satisfying \(\binom{n}{6} = 6 \cdot \binom{n}{3}\).

We enumerate \( n \) from 6 upward, compute both binomial coefficients exactly using Python's `math.comb`, and check the equality. We print all candidates found until finding the smallest, which we print separately as the answer.

```python
from math import comb

def main():
    # Enumerate n starting from 6 upwards to search for equality
    found = []
    for n in range(6, 1000):  # 1000 chosen as a reasonable upper bound
        c6 = comb(n, 6)
        c3 = comb(n, 3)
        if c6 == 6 * c3:
            print(f"n={n}: C(n,6)={c6}, 6*C(n,3)={6*c3}")
            found.append(n)
            # Since we want the least n, stop at first found
            break

    if found:
        print(f"Smallest n satisfying C(n,6) = 6*C(n,3): {found[0]}")
    else:
        print("No n found up to 999 satisfying the equation.")

if __name__ == "__main__":
    main()
```
