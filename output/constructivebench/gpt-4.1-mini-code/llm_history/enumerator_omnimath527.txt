[write_program]
The problem defines two sequences \(a_n\) and \(b_n\) with initial values and recursive relations, and asks for the sum of a series involving these sequences. To explore the behavior and guess the sum, I'll implement a Python program that generates these sequences for small \(n\), computes partial sums of the series, and prints the results. This will help conjecturing the closed form or the value of the sum.

```python
# Enumerate terms of sequences a_n, b_n and partial sums of sum_{n=1}^\infty b_n * (1/a_{n+1} - 1/a_{n+3})

def main():
    a = {1: 2015, 2: 2015}
    b = {1: 2013, 2: 2013}
    
    def a_n(n):
        # compute a_n recursively with memoization
        if n in a:
            return a[n]
        # for n>=3, a_{n+1} = (a_{n-1} -1)*(b_n +1)
        # so a_n = (a_{n-2} -1)*(b_{n-1} +1) for n>=3
        val = (a_n(n-2) - 1) * (b_n(n-1) + 1)
        a[n] = val
        return val
    
    def b_n(n):
        # compute b_n recursively with memoization
        if n in b:
            return b[n]
        # b_{n+1} = a_n * b_{n-1} - 1 for n>=2
        val = a_n(n) * b_n(n-2) - 1
        b[n] = val
        return val

    # Compute and print partial sums S_N = sum_{n=1}^N b_n * (1/a_{n+1} - 1/a_{n+3})
    print("n, b_n, a_{n+1}, a_{n+3}, term, partial_sum")
    partial_sum = 0
    max_n = 10  # small for brevity

    for n in range(1, max_n + 1):
        bn = b_n(n)
        a_np1 = a_n(n+1)
        a_np3 = a_n(n+3)
        term = bn * (1 / a_np1 - 1 / a_np3)
        partial_sum += term
        print(f"{n}, {bn}, {a_np1}, {a_np3}, {term:.6f}, {partial_sum:.6f}")

    print(f"Partial sums for n=1..{max_n} suggest limit around {partial_sum:.6f}")

if __name__ == "__main__":
    main()
```
