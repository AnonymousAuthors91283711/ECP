[write_program]
We want to find all real numbers \( x \in [0,2020] \) such that 

\[
f(f(f(x))) = 17,
\]

where \( f(x) = x(x - \lfloor x \rfloor) \).

The function depends heavily on the fractional part of \( x \). For any \( x \), denote its integer part by \( n = \lfloor x \rfloor \) and fractional part by \( r = x - n \in [0,1) \). Then

\[
f(x) = x \cdot r = (n + r) r = n r + r^2.
\]

We want to enumerate all such \( x \in [0,2020] \) for which the triple iteration of \( f \) is 17.

Approach to enumerate:
- \( x \) can be written as \( n + r \) with \( n = 0,1,2,\dots,2020 \) and \( r \in [0,1) \).
- For fixed \( n, r \), compute \( f(x) = n r + r^2 \).
- Then iterate two more times, keeping track of fractional and integer parts for the composed function.
- Count how many distinct \( x \in [0,2020] \) satisfy \( f(f(f(x))) = 17 \).

Since the fractional part is in [0,1), we'll discretize \( r \) finely (e.g., steps of 0.001) for enumeration.

We'll print each \( x \) satisfying the equation, then print the count modulo 1000.

```python
# Enumerate x = n + r in [0,2020], r in [0,1) with step 0.001,
# compute f(x)=x*(x-floor(x)), and iterate thrice,
# print each x where f(f(f(x)))=17 exactly (within a tiny tolerance),
# then print the count modulo 1000.

def f(x):
    from math import floor
    n = floor(x)
    r = x - n
    return x * r

def approx_eq(a,b,eps=1e-12):
    return abs(a-b) < eps

def main():
    count = 0
    # To avoid too long output, use step 0.01 (about 2e5 points)
    # Fraction step smaller to check precision
    step = 0.01
    from math import floor
    # Since 17 is integer, let's consider x such that after triple f evaluation result is exactly 17
    # We'll accept a small tolerance for floating errors

    # To speed up, precompute f for discrete possible values could help but here direct computation.
    for n in range(0, 2021):
        r = 0.0
        while r < 1:
            x = n + r
            y1 = f(x)
            y2 = f(y1)
            y3 = f(y2)
            if approx_eq(y3,17):
                print(f"x={x:.3f} → f³(x)={y3:.12f}")
                count += 1
            r += step
    print("Count mod 1000 =", count % 1000)

if __name__ == "__main__":
    main()
```
