[write_program]
This problem involves characterizing all functions \( f: \mathbb{N} \to \mathbb{N} \) such that for all positive \( a,b \) with \( a+b>2019 \),
\[
a + f(b) \mid a^2 + b f(a).
\]

We want to enumerate possible \( f \) for small domains and spot patterns to conjecture the form of \( f \).

We'll test functions \( f: \{1,\dots,20\} \to \{1,\dots,20\} \) satisfying the divisibility condition for all \( a,b \) in that domain with \( a,b>0 \) and \( a+b>2019 \) replaced by \( a+b>20 \) (adapted for feasible checks). We print each candidate \( f \) found. 

Since enumerating all functions on 20 points is impossible, we'll restrict to linear or simple forms \( f(n) = c \cdot n \), \( f(n) = c \), \( f(n) = n \), \( f(n) = 1 \), and check these.

```python
# Enumerate candidate functions f: ℕ→ℕ satisfying 
# a + f(b) | a^2 + b f(a) for all a,b>0 with a+b>threshold.
# We adapt threshold to 20 for feasibility.

def divides(x, y):
    return y % x == 0

def check_const(c, max_n=20, thresh=20):
    for a in range(1, max_n+1):
        for b in range(1, max_n+1):
            if a+b <= thresh:
                continue
            left = a + c
            right = a*a + b*c
            if not divides(left, right):
                return False
    return True

def check_identity(max_n=20, thresh=20):
    # f(n)=n
    for a in range(1, max_n+1):
        for b in range(1, max_n+1):
            if a+b <= thresh:
                continue
            left = a + b
            right = a*a + b*a
            if not divides(left, right):
                return False
    return True

def check_linear(c, max_n=20, thresh=20):
    # f(n) = c*n
    for a in range(1, max_n+1):
        for b in range(1, max_n+1):
            if a+b <= thresh:
                continue
            left = a + c*b
            right = a*a + b*c*a
            if not divides(left, right):
                return False
    return True

print("Testing constant functions f(n)=c for c=1..10")
for c in range(1,11):
    if check_const(c):
        print(f"f(n) = {c} constant satisfies condition")

print("Testing f(n) = n (identity)")
if check_identity():
    print("f(n) = n satisfies condition")

print("Testing linear functions f(n) = c*n for c=2..5")
for c in range(2,6):
    if check_linear(c):
        print(f"f(n) = {c}*n satisfies condition")
```
This program will print all candidate functions found among simple forms and help conjecture the final set of solutions.
