[write_program]
The problem is related to finding the least real number \( M \) such that for all real \( a,b,c \):

\[
|a b (a^2 - b^2) + b c (b^2 - c^2) + c a (c^2 - a^2)| \le M (a^2 + b^2 + c^2)^2
\]

We want to experimentally estimate candidates for \(M\) by enumerating over small integer triples \((a,b,c)\), computing the ratio:

\[
\frac{|a b (a^2 - b^2) + b c (b^2 - c^2) + c a (c^2 - a^2)|}{(a^2 + b^2 + c^2)^2}
\]

since this ratio should be bounded by \(M\). We will print all candidate ratios and keep track of the maximum encountered ratio over integer triples with small norm. This will help conjecture the value of \(M\).

```python
# Enumerate integer triples (a,b,c) with small coordinates (excluding all zero)
# Compute ratio = |expr| / (a²+b²+c²)², print when positive, track max ratio.

def expr(a,b,c):
    return abs(a*b*(a**2 - b**2) + b*c*(b**2 - c**2) + c*a*(c**2 - a**2))

def norm2(a,b,c):
    return a**2 + b**2 + c**2

def main():
    max_ratio = 0
    print("Enumerating candidate M values from integer triples (a,b,c):")
    # Enumerate a,b,c in [-5,5], exclude zero vector
    for a in range(-5,6):
        for b in range(-5,6):
            for c in range(-5,6):
                if a == 0 and b == 0 and c == 0:
                    continue
                d = norm2(a,b,c)
                denom = d**2
                val = expr(a,b,c)
                if denom == 0:
                    continue
                ratio = val / denom
                if ratio > 1e-12:  # skip near zero
                    print(f"a={a}, b={b}, c={c}, ratio={ratio:.6f}")
                    if ratio > max_ratio:
                        max_ratio = ratio
    print(f"Maximum candidate M found: {max_ratio:.6f}")

if __name__ == "__main__":
    main()
```
