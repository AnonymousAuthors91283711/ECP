[write_program]
The problem involves enumerating integers formed by a linear combination of digits and summing certain values in a set. To assist in conjecturing and proving the true answer, I'll enumerate candidates of the form 100*a + 10*b + c for small integers a, b, c in a certain range and print the sums for given sets.

```python
# Enumerate numbers of the form 100*a + 10*b + c for a,b,c in range(-20,21)
# and identify sums of given triples similar to the problem's solutions set.
# Then print each sum found.

def candidates():
    for a in range(-20, 21):
        for b in range(-20, 21):
            for c in range(-20, 21):
                yield 100*a + 10*b + c

# Given solutions from the problem (could vary a,b,c triples)
triples = [
    (6, 6, 3),
    (6, 2, 9),
    (-6, -18, 21)
]

print("Enumerating given solutions and their sum:")
values = []
for t in triples:
    val = 100*t[0] + 10*t[1] + t[2]
    print(f"Value for a={t[0]}, b={t[1]}, c={t[2]}: {val}")
    values.append(val)

total = sum(values)
print(f"Sum of given solutions: {total}")

# Let's also check if any other triples with nearby digits produce the same sum
print("\nOther candidate triples with sum matching:", total)
for a in range(-10, 11):
    for b in range(-30, 1):
        for c in range(-10, 31):
            val = 100*a + 10*b + c
            if val == total and (a,b,c) not in triples:
                print(f"a={a}, b={b}, c={c} => {val}")
```
