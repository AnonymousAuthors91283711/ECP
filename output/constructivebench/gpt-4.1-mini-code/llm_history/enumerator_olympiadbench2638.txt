[write_program]
The problem is to find a digit \( Y < 10 \) such that for every \( X < 10 \), the number \( 1230000 + X \times 1000 + 5 \times 100 + Y \times 10 + 7 \) is **not** divisible by 11. We want to enumerate all such \( Y \) values and print those, then identify the unique \( Y \) that satisfies this condition.

```python
# Enumerate Y in 0..9
# For each Y, check all X in 0..9 to see if any number (1230000 + X*1000 + 500 + Y*10 +7) divisible by 11
# Print each Y with a note whether all X fail divisibility by 11

def divisible_by_11(n):
    # Divisibility rule for 11: difference between sum of digits in odd positions and even positions divisible by 11
    # Let's just do n % 11 == 0
    return n % 11 == 0

print("Checking Y in 0..9 for condition:")
candidates = []
for Y in range(10):
    fails = False
    for X in range(10):
        val = 1230000 + X * 1000 + 5 * 100 + Y * 10 + 7
        if divisible_by_11(val):
            # Divisible by 11 for some X
            print(f"Y={Y}: divisible by 11 when X={X}, val={val}")
            fails = True
            break
    if not fails:
        print(f"Y={Y}: no X in 0..9 yields divisible by 11 -> candidate")
        candidates.append(Y)

print("\nCandidates Y that satisfy condition (unique?):", candidates)
if len(candidates) == 1:
    print("Unique answer:", candidates[0])
else:
    print("No unique Y satisfying the condition.")
```
