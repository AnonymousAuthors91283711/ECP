[write_program]
The problem involves finding all natural numbers \( n \) for which there exists a sequence \( a(i) \) of natural numbers such that:
\[
\sum_{i=0}^{n-1} \frac{1}{2^{a(i)}} = 1 \quad \text{and} \quad \sum_{i=0}^{n-1} \frac{i+1}{3^{a(i)}} = 1.
\]
To assist in guessing \( n \) values for which this is possible, I will enumerate sequences \( a(i) \) for small \( n \) and values \( a(i) \) in some reasonable range. The program will print each \( n \) and sequences \( a \) found satisfying both conditions exactly.

Because the sums involve powers, I prioritize exact values, so I use fractions. I limit \( a(i) \) values up to 12 to keep compute feasible and print results immediately when found.

```python
from fractions import Fraction

# For n from 1 to 5 (small samples, increase if time permits)
max_n = 5  
max_exp = 12

def conditions_hold(a):
    # Check sum 1
    s1 = sum(Fraction(1, 2**ai) for ai in a)
    if s1 != 1:
        return False
    # Check sum 2
    s2 = sum(Fraction(i+1, 3**a[i]) for i in range(len(a)))
    return s2 == 1

def search_for_n(n):
    # Enumerate sequences a of length n with a[i] in [0, max_exp]
    stack = [(0, [])]  # pos, partial a
    while stack:
        pos, partial = stack.pop()
        if pos == n:
            if conditions_hold(partial):
                print(f"n={n}, a={partial}")
            continue
        for expo in range(max_exp+1):
            stack.append((pos+1, partial+[expo]))

print("Searching for n and sequences a satisfying:")
print("sum_i 1/2^{a[i]} = 1 and sum_i (i+1)/3^{a[i]}=1\n")

for n in range(1, max_n+1):
    print(f"Trying n = {n} ...")
    search_for_n(n)
```

This program should help find candidate values of \( n \) and sequences \( a \) satisfying the conditions exactly.
