[write_program]
The problem asks to count two-digit numbers \( n \) (10 ≤ \( n \) ≤ 99) such that:
- \( n \) is prime
- the tens digit (\( n / 10 \)) is prime
- the units digit (\( n \% 10 \)) is prime

We enumerate two-digit numbers and print those matching, then print the count.

```python
# Enumerate two-digit numbers n with 10 <= n <= 99 where:
# n, floor(n/10), and n mod 10 are all prime.
# Print each matching number immediately and finally print the count.

def is_prime(x):
    if x < 2:
        return False
    if x == 2:
        return True
    if x % 2 == 0:
        return False
    for i in range(3,int(x**0.5)+1,2):
        if x % i == 0:
            return False
    return True

count = 0
for n in range(10, 100):
    t, u = divmod(n, 10)
    if is_prime(n) and is_prime(t) and is_prime(u):
        print(n)
        count += 1
print("Count:", count)
```
