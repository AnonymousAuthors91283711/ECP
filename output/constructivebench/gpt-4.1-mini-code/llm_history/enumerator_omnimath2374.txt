[write_program]
The problem defines a sequence \( x_n \) with initial values \( x_1 = 1 \), \( x_2 = 2 \), and recurrence relation:
\[
x_{n+2} = 2 x_{n+1} - x_n + 2^n \quad \text{for } n \geq 1
\]

We want to conjecture the exact value of \( x_{2012} \).

To help conjecture the formula, we'll:
- Enumerate the first few terms \( x_n \) for \( n=1 \ldldots 20 \).
- Print each value immediately.
- Check if a closed form emerges or fits a pattern.

```python
# Enumerate terms of the sequence defined by:
# x_1 = 1
# x_2 = 2
# x_{n+2} = 2*x_{n+1} - x_n + 2^n for n >= 1

def main():
    x = {1: 1, 2: 2}
    print(f"x(1) = {x[1]}")
    print(f"x(2) = {x[2]}")

    # Compute up to n=20 to look for patterns
    for n in range(1, 19):
        x[n+2] = 2 * x[n+1] - x[n] + 2**n
        print(f"x({n+2}) = {x[n+2]}")

if __name__ == "__main__":
    main()
```
