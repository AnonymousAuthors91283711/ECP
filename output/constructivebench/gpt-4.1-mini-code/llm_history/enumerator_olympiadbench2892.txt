[write_program]
The problem is to find a unique number n between 2009 and 3009 whose sum of its odd divisors is exactly 1024. To help conjecture the answer, we can enumerate n in this range, compute the sum of its odd divisors, and print n whenever this sum equals 1024.

To optimize:
- The sum of odd divisors of n depends only on its odd part.
- For each n, we can factor out powers of 2, get the odd part m = n / (2^k).
- The sum of odd divisors of n is then the sum of divisors of m (since odd divisors of n = divisors of m).
- We only need to compute sum of divisors of m, where m is odd.
- Since sums can be expensive, we precompute sum of divisors for numbers up to 3009 using a sieve method.

We proceed as follows:
- Precompute sum of divisors for all numbers up to 3009.
- For n from 2010 to 3008:
    - Extract odd part m by dividing out factors of 2.
    - sumOddDivisors = sumDivisors[m]
    - If sumOddDivisors == 1024, print n

Finally, after enumerating, print the unique candidate if exactly one was found.

```python
# Enumerate n in (2009, 3009) with sum of odd divisors = 1024

MAX_N = 3009

def sum_of_divisors_sieve(limit):
    # sumDiv[i] = sum of divisors of i
    sumDiv = [1]*(limit+1)
    sumDiv[0] = 0
    for i in range(2, limit+1):
        for j in range(i, limit+1, i):
            sumDiv[j] += i
    return sumDiv

def odd_part(x):
    while x % 2 == 0:
        x //= 2
    return x

def main():
    sumDiv = sum_of_divisors_sieve(MAX_N)
    candidates = []
    for n in range(2010, 3009):
        m = odd_part(n)
        s = sumDiv[m]
        if s == 1024:
            print(n)
            candidates.append(n)
    if len(candidates) == 1:
        print("Unique answer:", candidates[0])
    else:
        print("Candidates count:", len(candidates))

if __name__ == "__main__":
    main()
```
