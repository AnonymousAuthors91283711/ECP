[write_program]
The problem seems to involve counting the non-real roots of a polynomial \( q(x) = x^{12} + a x^8 + b x^4 + c \) where \( a, b, c \) are complex numbers, and \( p(x) = x^3 + a x^2 + b x + c \) is related. We want to explore how many roots of \( q \) have nonzero imaginary parts.

To assist with conjecturing and proving, I will:
- Enumerate over small integer values for \( a, b, c \) to see the count of non-real roots of \( q \).
- Use exact roots where possible (using SymPy) and count roots with nonzero imaginary parts.
- Print parameters and results immediately.
- Limit output length by focusing on small integer parameters in \([-2, 2]\).

```python
# Enumerating the number of non-real roots of q(x) = x^12 + a x^8 + b x^4 + c
# for small integer parameters a,b,c in [-2..2].
# This assists conjecturing the relationship.

from sympy import symbols, Poly, roots, I
from sympy.abc import x

def count_nonreal_roots(poly):
    rts = roots(poly, multiple=True)
    count = 0
    for rt in rts:
        if rt.as_real_imag()[1] != 0:
            count += 1
    return count

def main():
    vals = range(-2, 3)
    total = 0
    for a in vals:
        for b in vals:
            for c in vals:
                p = Poly(x**3 + a*x**2 + b*x + c, x)
                q = Poly(x**12 + a*x**8 + b*x**4 + c, x)
                nr = count_nonreal_roots(q)
                # Print immediately
                print(f"a={a}, b={b}, c={c} -> non-real roots of q: {nr}")

if __name__ == "__main__":
    main()
```
