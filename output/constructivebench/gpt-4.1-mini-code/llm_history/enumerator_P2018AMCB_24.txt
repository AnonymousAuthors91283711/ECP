[write_program]
The problem asks for the number of real solutions \( x \) to the equation
\[
x^2 + 10000 \lfloor x \rfloor = 10000 x.
\]
To solve this, we enumerate integers \( n = \lfloor x \rfloor \) around the expected range (since the quadratic involves \( 10000 \)), solve the quadratic for each fixed \( n \), check whether the solutions satisfy \(\lfloor x \rfloor = n\) exactly, and count the valid solutions.

Below is a Python program that tries \( n \) values around 0 (for example, between \(-10\) and \(10\)), solves the quadratic,
\[
x^2 - 10000 x + 10000 n = 0,
\]
and prints all valid solutions as soon as they are found, along with their floor value. It also counts and prints the total number of solutions at the end (the answer).

```python
import math

def enum_solutions():
    solutions = []
    # Try n in a reasonable range around 0, since beyond that
    # solutions will not satisfy floor(x) = n
    for n in range(-10, 11):
        # Quadratic: x^2 - 10000 x + 10000 n = 0
        a = 1
        b = -10000
        c = 10000 * n
        disc = b*b - 4*a*c
        if disc < 0:
            continue  # no real roots
        sqrt_disc = math.sqrt(disc)
        for sign in [+1, -1]:
            x = (b * -1 + sign * sqrt_disc) / (2 * a)
            # check floor(x) == n exactly
            if math.floor(x) == n:
                print(f"Found solution x = {x} with floor(x) = {n}")
                solutions.append(x)
    print(f"Total number of solutions found: {len(solutions)}")

if __name__ == "__main__":
    enum_solutions()
```
