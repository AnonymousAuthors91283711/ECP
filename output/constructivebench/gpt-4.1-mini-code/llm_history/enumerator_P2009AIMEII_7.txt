[write_program]
The problem involves summing terms of the form (doubleFactorial(2*i - 1)) / (doubleFactorial(2*i)) for i from 0 to 2008, and then analyzing the denominator of the sum in lowest terms, extracting powers of 2, and finally computing a * b / 10 where a is the 2-adic valuation of the denominator and b is the odd part. 

To assist, I will write a Python program to:
- Define double factorials for odd and even numbers.
- Compute partial sums of the series for small i (say up to 20 or 30 to keep computations feasible).
- Simplify each partial sum fraction using Python's fractions module.
- Extract the denominator and factor out powers of 2.
- Compute a * b // 10 for these partial sums.

This should help conjecture the pattern and possibly the final answer.

```python
from fractions import Fraction

def double_factorial(n):
    # Returns n!!
    if n <= 0:
        return 1
    result = 1
    while n > 0:
        result *= n
        n -= 2
    return result

def p_adic_val_2(x):
    # Compute the highest power of 2 dividing x (x is integer)
    if x == 0:
        return 0
    count = 0
    while x % 2 == 0:
        x //= 2
        count += 1
    return count

print("Enumerating partial sums for i=0 to 20:")

sum_frac = Fraction(0)
for i in range(21):
    # (2i -1)!! / (2i)!!
    numerator = double_factorial(2*i - 1) if i > 0 else 1  # (2*0 -1)!! = (-1)!! = 1 by convention
    denominator = double_factorial(2*i)
    term = Fraction(numerator, denominator)
    sum_frac += term

    denom = sum_frac.denominator
    a = p_adic_val_2(denom)
    b = denom // (2 ** a)
    val = a * b // 10

    print(f"i={i:2d}, sum={sum_frac}, denom={denom}, 2-adic val a={a}, odd part b={b}, a*b//10={val}")
```
