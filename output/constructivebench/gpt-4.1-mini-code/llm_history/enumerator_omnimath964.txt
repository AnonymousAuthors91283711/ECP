[write_program]
The problem is about finding the least natural number \( n > 0 \) such that for every \( m \in \mathbb{N} \), there exists a finite subset \( s \subseteq \{0, \ldots, n-1\} \) so that the product of \( (x+1) \) over \( x \in s \) is congruent to \( m \) modulo 100. In other words, the set of all products of subsets of \(\{1, 2, \ldots, n\}\) covers all residues mod 100.

We need to enumerate candidates \( n \), test all residues mod 100, and verify if each residue can be represented as a product of a subset of \(\{1, 2, \ldots, n\}\) modulo 100.

To do this efficiently, we can use a breadth-first search on the achievable residues modulo 100 by including or excluding the next number at each step.

Below is the Python script enumerating possible \( n \) starting from 1 upwards and printing immediately when the condition holds.

```python
# Enumerate n to find the minimal n such that the set of products of subsets of {1,...,n}
# covers all residues modulo 100

def full_coverage(n):
    # Start with product 1 from empty subset
    reachable = {1}
    for x in range(1, n+1):
        new_reachable = set(reachable)
        for r in reachable:
            new_reachable.add((r * x) % 100)
        reachable = new_reachable
        if len(reachable) == 100:
            return True
    return len(reachable) == 100

def main():
    for n in range(1, 50):  # Arbitrary upper limit for search
        if full_coverage(n):
            print(f"n = {n} covers all residues mod 100")
            print(f"Minimal n seems to be {n}")
            break
        else:
            print(f"n = {n} does not cover all residues mod 100")

if __name__ == "__main__":
    main()
```
