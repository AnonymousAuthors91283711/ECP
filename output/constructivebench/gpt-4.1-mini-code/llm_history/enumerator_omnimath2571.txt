[write_program]
The problem counts functions \( f : \{0,1,2\} \times \{0,1,2\} \to \{\text{True}, \text{False}\} \) such that for every fixed \( p \in \{0,1,2\} \), exactly two values of \( s \in \{0,1,2\} \) satisfy \( f(p,s) = \text{True} \), and for every fixed \( s \in \{0,1,2\} \), exactly two values of \( p \in \{0,1,2\} \) satisfy \( f(p,s) = \text{True} \).

In other words, the \(3 \times 3\) boolean matrix has exactly two True entries in each row and each column.

The program will enumerate all such \(3 \times 3\) boolean matrices, print each that meets the conditions, and finally print the total count.

```python
# Enumerate all 3x3 boolean matrices with exactly two True per row and two True per column.
# Rows and columns indexed 0..2.

def count_booleans_3x3():
    from itertools import combinations

    count = 0
    row_indices = [0,1,2]
    col_indices = [0,1,2]

    # For each row, select two columns that are True.
    # We generate all possible row patterns: each row has exactly two True.
    row_possibilities = list(combinations(col_indices, 2))  # 3 choices per row

    # For each triple of rows, assign the two True positions.
    for row0 in row_possibilities:
        for row1 in row_possibilities:
            for row2 in row_possibilities:
                # Build matrix as set of True positions
                # Represent matrix as a 3x3 boolean list
                matrix = [[False]*3 for _ in range(3)]
                for c in row0:
                    matrix[0][c] = True
                for c in row1:
                    matrix[1][c] = True
                for c in row2:
                    matrix[2][c] = True

                # Check column counts: each column must have exactly two Trues
                col_counts = [0,0,0]
                for r in range(3):
                    for c in range(3):
                        if matrix[r][c]:
                            col_counts[c] +=1
                if all(count==2 for count in col_counts):
                    count +=1
                    # Print actual matrix as 0/1 rows
                    for r in range(3):
                        print(''.join('1' if matrix[r][c] else '0' for c in range(3)))
                    print() # blank line

    print(f"Total count: {count}")

if __name__=="__main__":
    count_booleans_3x3()
```
