[write_program]
This problem counts functions \( f: \{0,\dots,4\} \to \{0,\dots,4\} \) such that no value in the image has more than 2 preimages (fibers of size ≤ 2).

We enumerate all such functions by iterating over all 5-tuples from \(\{0,\dots,4\}\)^5 and count those where no value appears more than twice.

We print every function and count as we go. At the end, print total count.

```python
# Count functions f: {0..4} -> {0..4} with fibers of size ≤ 2
from collections import Counter
def main():
    count = 0
    domain = range(5)
    codomain = range(5)
    # To reduce verbosity, only print when a function is valid
    for f0 in codomain:
        for f1 in codomain:
            for f2 in codomain:
                for f3 in codomain:
                    for f4 in codomain:
                        vals = [f0,f1,f2,f3,f4]
                        freq = Counter(vals)
                        if all(v<=2 for v in freq.values()):
                            count += 1
                            print(f"Function: {vals}, count so far: {count}")
    print(f"Total count of such functions: {count}")

if __name__ == "__main__":
    main()
```
