[write_program]
The problem asks to find the greatest integer \( c \) for which there exist integers \( a, b, d \) satisfying the system:
\[
\begin{cases}
a + b c = 20 \\
-a + c d = 19
\end{cases}
\]
We rewrite the system and try integer values of \( c \) to check feasibility. We'll enumerate \( c \) values in a range (e.g. -50 to 50) to identify all satisfying \( c \), then find the maximum.

```python
# Enumerate integers c in [-50,50], and for each c check if integers a,b,d exist satisfying:
# a + b*c = 20 and -a + c*d = 19
# From the equations: a = 20 - b*c
# Substitute into second: -a + c*d = 19 -> -(20 - b*c) + c*d = 19
# => -20 + b*c + c*d = 19
# => c*(b + d) = 39
# We want integer b,d with c*(b + d) = 39
# If c = 0, no solution since 0*(b+d)=39 impossible
# For c != 0, b+d = 39/c must be an integer
# So 39 must be divisible by c

from math import gcd

def divisors(n):
    divs = []
    for i in range(1, abs(n)+1):
        if n % i == 0:
            divs.extend([i, -i])
    return set(divs)

candidates = []
target = 39

print("Checking integer c in [-50,50]:")
for c in range(-50,51):
    if c == 0:
        continue
    if target % c == 0:
        s = target // c  # b + d = s
        # a = 20 - b*c
        # Choose b=0 => a=20, d=s
        a = 20 - 0*c
        b = 0
        d = s
        # satisfies both equations with these integers
        print(f"c={c} works with a={a}, b={b}, d={d}")
        candidates.append(c)

if candidates:
    max_c = max(candidates)
    print(f"Maximum c is {max_c}")
else:
    print("No integer c found satisfying the conditions in range.")
```
