[write_program]
The problem is to find all integer triples \((a,b,c)\) satisfying the equation:

\[
a^2 + b^2 + c^2 = a^2 b^2
\]

We want to enumerate such triples efficiently. Since the equation is symmetric in \(a,b\) but not necessarily in \(c\), and \(a, b, c \in \mathbb{Z}\), we can iterate over small integer values and print candidate triples.

Key observations:

- \(a^2 b^2 \ge 0\).
- Each of \(a,b,c\) is integer, so squares are nonnegative.
- For large \(a,b\), \(a^2 b^2\) grows faster than \(a^2+b^2+c^2\), so only small values are relevant.
- \(a,b,c\) can be negative or positive, but since squares are symmetric, we can restrict \(a,b,c \ge 0\) and add sign combinations if needed.
- To keep output short and satisfy token limits, we test \(a,b,c\) in a small range, say \(-10\) to 10.
- We print each satisfying triple upon discovery.

The code enumerates triples \((a,b,c)\) over integers from -10 to 10, tests the equation, and prints results immediately.

```python
# Enumerate integer triples (a,b,c) in range -10..10 satisfying:
# a^2 + b^2 + c^2 = a^2 * b^2
# Print each triple as found.

def main():
    R = range(-10,11)  # -10 to 10
    for a in R:
        a2 = a*a
        if a2 == 0:  # avoid division by zero issues if any
            # then LHS = b^2 + c^2, RHS = 0, so only possible if b=c=0
            for b in R:
                if b == 0:
                    for c in R:
                        if a2 + b*b + c*c == a2 * b*b:
                            print((a,b,c))
            continue
        for b in R:
            b2 = b*b
            rhs = a2 * b2
            # Since LHS = a2 + b2 + c2 = rhs, so c2 = rhs - a2 - b2 >= 0
            c2 = rhs - a2 - b2
            if c2 < 0:
                continue
            # c2 is perfect square integer
            # check if c2 is a perfect square
            c_sqrt = int(round(c2**0.5))
            if c_sqrt * c_sqrt == c2:
                for c in (c_sqrt, -c_sqrt):
                    print((a,b,c))

if __name__=="__main__":
    main()
```
