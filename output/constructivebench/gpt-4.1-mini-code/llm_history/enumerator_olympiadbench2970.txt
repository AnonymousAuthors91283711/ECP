[write_program]
The sequence is defined by:  
A(0)=1, A(1)=1, A(2)=1, and for n≥0, A(n+3)=A(n)+A(n+2).  
We want to find the smallest n such that A(n) ≥ sum of digits of T=98721. The sum of digits is 9+8+7+2+1=27.  
The program below computes A(n) for n≥0 incrementally, prints values as it goes, and stops when A(n)≥27, printing that n.

```python
# Enumerate A(n) to find least n with A(n) >= sum of digits of T=98721 (which is 27)
def A_sequence(limit):
    A = [1,1,1]  # A(0),A(1),A(2)
    print(f"A(0)=1")
    print(f"A(1)=1")
    print(f"A(2)=1")
    n = 3
    while True:
        val = A[n-3] + A[n-1]  # A(n) = A(n-3) + A(n-1)
        A.append(val)
        print(f"A({n})={val}")
        if val >= limit:
            print(f"Least n with A(n) >= {limit} is {n}")
            break
        n += 1

def main():
    T = 98721
    K = sum(int(d) for d in str(T))
    print(f"T={T}, sum of digits K={K}")
    A_sequence(K)

if __name__ == "__main__":
    main()
```
