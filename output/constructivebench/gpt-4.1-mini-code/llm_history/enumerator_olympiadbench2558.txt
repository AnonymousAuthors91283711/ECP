[write_program]
The problem defines a sequence \( t: \mathbb{N} \to \mathbb{Q} \) with conditions:
- \( t(1) = 1 \)
- \( t(2) = -1 \)
- For all \( n \geq 3 \), \( t(n) = \frac{n-3}{n-1} t(n-2) \).

We want to find \( t(1998) \).

This sequence only references terms with a difference of 2, so \( t(n) \) depends on \( t(n-2), t(n-4), \ldots \). We can separate the sequence into even and odd indices.

We will write a Python program that:
- Computes \( t(n) \) for \( n \) up to 2000 using rational arithmetic (fractions).
- Prints each term \( t(n) \) as soon as it is computed.
- Prints \( t(1998) \) explicitly.

This enumeration and printout will help conjecture or prove the closed form.

```python
# Enumerate terms of the sequence:
# t(1) = 1
# t(2) = -1
# t(n) = ((n-3)/(n-1)) * t(n-2) for n >= 3

from fractions import Fraction

def main():
    t = {}
    t[1] = Fraction(1)
    print(f"t(1) = {t[1]}")  # print immediately
    t[2] = Fraction(-1)
    print(f"t(2) = {t[2]}")

    # compute up to 2000
    for n in range(3, 2001):
        if n >= 3:
            t[n] = Fraction(n-3, n-1) * t[n-2]
            print(f"t({n}) = {t[n]}")

    print(f"\nAnswer: t(1998) = {t[1998]}")

if __name__ == "__main__":
    main()
```
