[write_program]
The problem involves finding natural numbers \( n \) such that the 10-adic valuation of \( n! \) equals 1987, i.e., the number of trailing zeros in \( n! \) is exactly 1987. The 10-adic valuation \( v_{10}(n!) \) counts the number of factors 10 in \( n! \), which equals the minimum of the count of 2's and 5's in \( n! \). Since 2's are more frequent, the count of 5's governs the number of trailing zeros.

To solve this, we enumerate \( n \) and compute the number of trailing zeros using \( v_5(n!) = \sum_{k=1}^\infty \lfloor \frac{n}{5^k} \rfloor \). We look for \( n \) with exactly 1987 trailing zeros and print them immediately. We'll test \( n \) near the theoretical range \( 5 \times 1987 = 9935 \), check a window around it, and find all \( n \) with valuation 1987. Finally, indicate the smallest such \( n \).

```python
def trailing_zeros(n):
    # Count the number of factors 5 in n! to get trailing zeros
    count = 0
    divisor = 5
    while divisor <= n:
        count += n // divisor
        divisor *= 5
    return count

target = 1987
# The smallest n should be near 5*1987=9935. We'll check a range around it.
start = target * 5 - 50
end = target * 5 + 50

candidates = []
print(f"Searching n with trailing_zeros(n!) = {target} in range [{start}, {end}]")
for n in range(start, end + 1):
    tz = trailing_zeros(n)
    if tz == target:
        print(n)
        candidates.append(n)

if candidates:
    print(f"Minimum n with trailing zeros {target}: {min(candidates)}")
else:
    print("No n found with the exact trailing zeros count.")
```
