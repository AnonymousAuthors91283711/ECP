[write_program]
The problem asks to characterize all functions \( f : \mathbb{R} \to \mathbb{R} \) satisfying the functional equation
\[
f(xy)(f(x) - f(y)) = (x - y) f(x) f(y)
\]
for all real numbers \( x, y \). To get insight, we enumerate candidate functions \( f \) over a limited domain and numerical checks to identify possible forms, focusing on exact expressions like linear, constant, or reciprocal functions.

```python
# Enumerate function candidates f:R->R satisfying f(xy)(f(x)-f(y))=(x-y)f(x)f(y) at sampled points
# Print candidates as soon as verified at all points.
import math

# Sample points (avoid zero to prevent division issues)
xs = [1, 2, 3]
ys = [1, 2, 3]
pairs = [(x, y) for x in xs for y in ys if x != y]

def check_func(f):
    # check at all pairs, return True only if exactly satisfied
    for x, y in pairs:
        lhs = f(x*y)*(f(x)-f(y))
        rhs = (x - y)*f(x)*f(y)
        if abs(lhs - rhs) > 1e-12:
            return False
    return True

print("Testing candidate functions f(x)...")

# Candidate 1: f(x)=0
f1 = lambda x: 0
if check_func(f1):
    print("Candidate: f(x)=0")

# Candidate 2: f(x)=1
f2 = lambda x: 1
if check_func(f2):
    print("Candidate: f(x)=1")

# Candidate 3: f(x)=x
f3 = lambda x: x
if check_func(f3):
    print("Candidate: f(x)=x")

# Candidate 4: f(x)=1/x (avoid zero)
def f4(x):
    if x==0:
        return 0
    return 1/x
if check_func(f4):
    print("Candidate: f(x)=1/x")

# Candidate 5: f(x)=c*x for selected constants c
for c in [2, -1]:
    f = lambda x, c=c: c*x
    if check_func(f):
        print(f"Candidate: f(x)={c}*x")

# Candidate 6: f(x)=x+1
f6 = lambda x: x+1
if check_func(f6):
    print("Candidate: f(x)=x+1")

# Summary of found candidates printed immediately above.
```
