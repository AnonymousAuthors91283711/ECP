[write_program]
The problem asks for natural numbers n such that the equation
x^n + (2+x)^n + (2 - x)^n = 0 
has an integer solution x.

We will test small values of n and for each n check integer x in a reasonable range (e.g. -10 to 10). Whenever the equation holds, we print (n, x) as a found solution, then at the end print all n with at least one integer solution.

```python
# Enumerate n and integer x, find solutions to x^n + (2+x)^n + (2 - x)^n = 0
# for small n and x in -10..10. Print solutions immediately, then list n with any solutions.

def main():
    max_n = 20  # test first 20 natural numbers
    solution_ns = set()
    for n in range(1, max_n+1):
        found_for_n = False
        # x must be integer, try range -10 to 10
        for x in range(-10, 11):
            lhs = x**n + (2 + x)**n + (2 - x)**n
            if lhs == 0:
                print(f"Solution: n={n}, x={x}")
                found_for_n = True
                solution_ns.add(n)
        if found_for_n:
            print(f"n = {n} has at least one integer solution x.")
    # Report all n with solutions
    print("All n with integer solution x:")
    print(sorted(solution_ns))

if __name__ == "__main__":
    main()
```
