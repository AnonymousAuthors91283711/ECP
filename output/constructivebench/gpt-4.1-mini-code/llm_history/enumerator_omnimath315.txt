[write_program]
The problem involves nested sums of harmonic numbers (S), their partial sums (T), and a further weighted sum (U). We want to explore the relations:

- \( T(n) = (n + 1) \cdot S(n + 1) - (n + 1) \)
- \( U(n) = (n + 2) \cdot S(n + 1) - 2(n + 1) \)

for \( n = 1988 \), and verify the tuple \((n + 1, n + 1, n + 2, 2(n + 1))\).

We'll enumerate values of \( S, T, U \) for small n to conjecture and verify the formulas, printing normalized tuple and sum values exactly using fractions.

```python
from fractions import Fraction
from math import gcd

def harmonic(n):
    # S(n) = sum_{k=1}^n 1/k
    s = Fraction(0)
    for k in range(1, n+1):
        s += Fraction(1, k)
    return s

def T(n):
    # T(n) = sum_{k=1}^n S(k)
    t = Fraction(0)
    for k in range(1, n+1):
        t += harmonic(k)
    return t

def U(n):
    # U(n) = sum_{k=1}^n T(k)/(k+1)
    u = Fraction(0)
    for k in range(1, n+1):
        u += T(k) / (k+1)
    return u

print("n  S(n)             T(n)                   U(n)                  (n+1)*S(n+1)-(n+1)  (n+2)*S(n+1)-2*(n+1)")
for n in range(1, 11):
    S_n = harmonic(n)
    T_n = T(n)
    U_n = U(n)
    lhs_T = (n+1)*harmonic(n+1) - (n+1)
    lhs_U = (n+2)*harmonic(n+1) - 2*(n+1)
    # Print fractions and float approximation to check correctness visually
    print(f"{n:<2}", f"{S_n} ({float(S_n):.5f})", f"{T_n} ({float(T_n):.5f})",
          f"{U_n} ({float(U_n):.5f})", f"{lhs_T} ({float(lhs_T):.5f})", f"{lhs_U} ({float(lhs_U):.5f})")
    
# Finally print the tuple for large n=1988 (just print parameters)
n = 1988
# (n+1, n+1, n+2, 2*(n+1)) tuple from the theorem statement
print("\nParameters for n=1988:")
print(f"(n+1, n+1, n+2, 2*(n+1)) = ({n+1}, {n+1}, {n+2}, {2*(n+1)})")
```
