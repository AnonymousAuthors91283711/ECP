[write_program]
The problem counts the number of functions from a 6-element set to a 4-element set such that no two adjacent values are equal, where adjacent is defined with wrap-around (mod 6).

We enumerate all functions \( f: \{0,1,2,3,4,5\} \to \{0,1,2,3\} \) with \( f(i) \neq f(i+1 \mod 6) \). There are \(4^6 = 4096\) possible functions, so a direct enumeration is feasible to count valid functions.

We'll print every valid function mapping immediately to help conjecture the answer.

```python
# Enumerate functions f: {0,...,5} -> {0,...,3} with f(i) != f(i+1 mod 6)
# For i in [0..5], adjacent means (i, (i+1)%6)

def valid_functions():
    n = 6
    k = 4
    # We'll generate all sequences of length 6 over 0..3
    from itertools import product

    for f in product(range(k), repeat=n):
        # Check adjacency with wrap-around
        if all(f[i] != f[(i+1)%n] for i in range(n)):
            print(f)

def main():
    count = 0
    from itertools import product
    n = 6
    k = 4
    for f in product(range(k), repeat=n):
        if all(f[i] != f[(i+1)%n] for i in range(n)):
            print(f)
            count += 1
    print('Total valid functions:', count)

if __name__ == '__main__':
    main()
```
