[write_program]
The problem is to find how many natural numbers \( n \) with \( 0 < n < 10! \) can be expressed as a sum of four factorials of natural numbers \( a,b,c,d \). We want to count the distinct values representable as \( a! + b! + c! + d! \) under the given constraints.

Since \( 10! = 3628800 \), enumerating all combinations of \( a,b,c,d \) with \( a,b,c,d \leq 9 \) is feasible because \( 9! = 362880 \), factorials grow quickly, so this won't be too large.

We will:
1. Precompute factorials for 0 to 9.
2. Enumerate all quadruples \( (a,b,c,d) \in \{0,...,9\}^4 \).
3. Compute \( s = a! + b! + c! + d! \) and keep track of values \( s \) where \( 0 < s < 10! \).
4. Print each newly found value immediately.
5. After enumeration, print the total count.

This satisfies streaming partial results and efficiency.

```python
# Enumerate numbers representable as sum of four factorials 0! to 9! below 10!
def factorial(n):
    f = 1
    for i in range(2, n+1):
        f *= i
    return f

def main():
    limit = factorial(10)  # 10!
    facts = [factorial(i) for i in range(10)]
    seen = set()

    print(f"Factorials 0! to 9!: {facts}")
    print(f"Enumerating sums a!+b!+c!+d! with a,b,c,d in [0..9], values < {limit}")

    for a in range(10):
        fa = facts[a]
        for b in range(10):
            fb = facts[b]
            for c in range(10):
                fc = facts[c]
                for d in range(10):
                    fd = facts[d]
                    s = fa + fb + fc + fd
                    if 0 < s < limit and s not in seen:
                        seen.add(s)
                        print(s)

    print(f"Total distinct numbers representable: {len(seen)}")

if __name__ == "__main__":
    main()
```
