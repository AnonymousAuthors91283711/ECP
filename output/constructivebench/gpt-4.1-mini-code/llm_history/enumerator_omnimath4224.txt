[write_program]
The problem involves iterating a piecewise function \( f \) defined on integers, depending on parameters \( a, b \) with \(1 \le a \le b\), starting from 0, and finding the minimal number \( k>0 \) such that \( f^k(0) = 0 \).

To explore this:
- For sample pairs \((a,b)\), enumerate \(k\) from 1 upwards,
- Compute \( f^k(0) \),
- Print all \(k\) where \(f^k(0) = 0\),
- Identify the minimal such \(k\).

The function \( f \) is:
\[
f(n) = \begin{cases} n + a & n \le M \\ n - b & n > M \end{cases}
\]
where \( M = \lfloor (a+b)/2 \rfloor \).

We sample small values for \(a,b\) such as 1..4 for \(a\) and \(a..4\) for \(b\), efficiently computing \(f^k(0)\) until a cycle or a large \(k\) cutoff (e.g., 100) to avoid infinite loops.

```python
# Enumerate minimal k > 0 with f^[k](0)=0 where f(n)=n+a if n ≤ M else n−b, M=(a+b)//2, 1 ≤ a ≤ b
# Print all such k for small (a,b), then minimal k

def f(n,a,b,M):
    return n + a if n <= M else n - b

def iterate_f(k,a,b,M):
    n = 0
    for _ in range(k):
        n = f(n,a,b,M)
    return n

def find_k_for_ab(a,b,max_k=100):
    M = (a + b) // 2
    ks = []
    # To avoid infinite loops if no k found, limit max_k
    for k in range(1,max_k+1):
        if iterate_f(k,a,b,M) == 0:
            print(f'a={a}, b={b}, k={k}')
            ks.append(k)
            # Do not break: print all k ≤ max_k
    if ks:
        print(f'a={a}, b={b}, minimal k={min(ks)}\n')
    else:
        print(f'a={a}, b={b}, no k ≤ {max_k} with f^[k](0)=0\n')

def main():
    for a in range(1,5):
        for b in range(a,5):
            find_k_for_ab(a,b)

if __name__ == "__main__":
    main()
```
