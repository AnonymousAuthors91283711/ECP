[write_program]
We want to explore values for m, s, and d satisfying the system:
m = 1.2 * s,
s = 0.6 * d,
and m + s + d = 23.2.
From the equations, we can express m and s in terms of d or s and enumerate approximate candidate values for d, then compute s and m exactly. We'll print these exact values and their sums to see which solutions satisfy the sum equation closely.

```python
# Enumerate values of d, compute s and m from relations, and check sum condition close to 23.2.

def approx_eq(a, b, eps=1e-9):
    return abs(a - b) < eps

print("d, s = 0.6 * d, m = 1.2 * s, sum m+s+d")
for d_times_10 in range(10, 1000):  # d from 1.0 to 99.9 with step 0.1
    d = d_times_10 / 10
    s = 0.6 * d
    m = 1.2 * s
    total = m + s + d
    # Print only sums very close to 23.2
    if abs(total - 23.2) < 1e-5:
        # Print exact values as fractions where possible, else float.
        print(f"d={d}, s={s}, m={m}, sum={total}")

# From algebra: replace m and s in sum=m+s+d=23.2 with m=1.2s, s=0.6d
# sum = 1.2 s + s + d = 2.2 s + d
# but s=0.6 d => sum = 2.2*(0.6 d) + d = (1.32+1)d=2.32 d=23.2 => d=10 exactly
# so s=6, m=7.2 sum=23.2 exactly.

print("\nExact derived solution:")
d = 10
s = 0.6 * d
m = 1.2 * s
sum_ = m + s + d
print(f"d={d}, s={s}, m={m}, sum={sum_}")
```
