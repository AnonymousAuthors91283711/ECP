[write_program]
The problem is about finding the smallest positive integer \( n \) such that the fractional part of \(\sqrt{n}^{1/4}\) (the fourth root of \(\sqrt{n}\)) lies between 0 and \(1/2015\). That is, the difference between \(\sqrt{n}^{1/4}\) and its floor is in the interval \((0, 1/2015)\).

We want to find the minimal such \( n \).

Let \(x = n^{1/8} = (\sqrt{n})^{1/4}\). The fractional part of \(x\) is \(x - \lfloor x \rfloor\).

Our approach:

- Enumerate values of \( n \) starting from 1.
- Compute \( x = n^{1/8} \).
- Calculate the fractional part \( f = x - \lfloor x \rfloor \).
- Check if \( 0 < f < 1/2015 \).
- For efficiency, note that \( x \) increases very slowly, so we can enumerate floors \( k \) of \( x \) and search within ranges \( [k^{8}, (k+1)^8) \).
- Print all \( n \) with fractional part in that range up to some maximal \( n \) or until we find the minimal \( n \).
- Output any candidates found as we go, then print the minimal.

We print each candidate \( n \) immediately.

To keep output small, cap enumeration up to \( n \leq 10^6 \).

```python
import math

threshold = 1/2015

def frac_part(x):
    return x - math.floor(x)

max_n = 10**6
found = []
for n in range(1, max_n+1):
    x = n**(1/8)
    f = frac_part(x)
    if 0 < f < threshold:
        print(f"n={n}, frac_part(n^(1/8))={f}")
        found.append((n,f))
        # Stop if minimal found--since we enumerate ascending n, first is minimal
        break

if found:
    n_min, f_min = found[0]
    print(f"\nMinimal n found: {n_min} with fractional part {f_min}")
else:
    print("No n found up to", max_n)
```

