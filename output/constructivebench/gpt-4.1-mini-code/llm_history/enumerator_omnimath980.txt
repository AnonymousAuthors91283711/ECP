[write_program]
This problem enumerates symmetric 5×5 matrices with values in {0,1,2} and specific constraints. The diagonal is fixed to 2. We interpret 0 as "friend", 1 as "enemy", 2 as "frenemy". Conditions impose transitivity and interaction rules.

We want to enumerate all such functions r : Fin5 × Fin5 → Fin3 satisfying all conditions and count them.

We will:
- Iterate over upper-triangular entries (10 pairs excluding diagonal since diagonal is fixed).
- Values per entry: 0, 1, or 2.
- Check symmetric extension, diagonal = 2.
- Check the four given conditions.
- Print each valid matrix found.
- Print total count at the end.

To reduce complexity, represent matrix as list of 10 entries corresponding to (0,1),(0,2),...,(3,4).
Check conditions efficiently on the reconstructed adjacency matrix.

```python
# Enumerate symmetric 5x5 matrices r: {0..4}^2 → {0,1,2} with given constraints:
# r symmetric, r(a,a)=2,
# (a,b) thrice-quantified conditions.
# We'll generate all candidate upper-triangular r and validate.
# Print each valid matrix and finally count.

def is_valid(r):
    # r is 5x5 matrix with values in {0,1,2}, r[a][a]=2
    # Check all conditions
    for a in range(5):
        if r[a][a] != 2:
            return False
    # Symmetry checked in construction

    # Condition 1: ∀ a,b,c: r a b=0 ∧ r b c=0 ⇒ r a c=0
    for a in range(5):
        for b in range(5):
            for c in range(5):
                if r[a][b]==0 and r[b][c]==0 and r[a][c]!=0:
                    return False

    # Condition 2: ∀ a,b,c: r a b=1 ∧ r b c=1 ⇒ r a c=0
    for a in range(5):
        for b in range(5):
            for c in range(5):
                if r[a][b]==1 and r[b][c]==1 and r[a][c]!=0:
                    return False

    # Condition 3: ∀ a,b,c: r a b=0 ∧ r b c=1 ⇒ r a c=1
    for a in range(5):
        for b in range(5):
            for c in range(5):
                if r[a][b]==0 and r[b][c]==1 and r[a][c]!=1:
                    return False
    return True

def main():
    # Indices of upper-triangular (excluding diagonal) pairs (10 pairs)
    pairs = [(0,1),(0,2),(0,3),(0,4),
             (1,2),(1,3),(1,4),
             (2,3),(2,4),
             (3,4)]
    import sys
    count = 0
    # 3^10 = 59049, feasible to enumerate all
    for code in range(3**10):
        vals = []
        rem = code
        for _ in range(10):
            vals.append(rem%3)
            rem //=3
        # Construct full matrix
        r = [[2]*5 for _ in range(5)]
        for i,(a,b) in enumerate(pairs):
            r[a][b] = vals[i]
            r[b][a] = vals[i]
        if is_valid(r):
            count +=1
            # Print matrix in row order as rows of digits without spaces
            for row in r:
                print(''.join(str(x) for x in row))
            print()  # blank line between matrices
            # We limit total output length in outer code to <400 tokens

    print(f"Total valid matrices: {count}")

if __name__=="__main__":
    main()
```
