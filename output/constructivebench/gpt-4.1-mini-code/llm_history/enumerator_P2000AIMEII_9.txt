[write_program]
The problem involves a complex number \( z \) satisfying
\[
z + \frac{1}{z} = 2 \cos \left(\frac{3\pi}{180}\right) = 2 \cos (3^\circ),
\]
and asks to find the least integer greater than the real part of
\[
z^{2000} + \frac{1}{z^{2000}}.
\]

Since \(z = e^{i\theta}\) for \(\theta = 3^\circ\), we have
\[
z^{n} + \frac{1}{z^{n}} = 2 \cos (n\theta).
\]

Thus the problem reduces to analyzing \( 2 \cos (2000 \times 3^\circ) = 2 \cos (6000^\circ) \).

6000° mod 360° is \(6000 \mod 360 = 240^\circ\), so
\[
2 \cos(240^\circ) = 2 \cos (4\pi/3) = 2 \times (-1/2) = -1.
\]

The answer to the problem is thus the smallest integer greater than \(-1\), which is 0.

To confirm, I will enumerate cosine values for multiples of 3°, print the real part for powers up to 2000, and print candidates for the integer bound.

```python
import math

def deg_to_rad(deg):
    return deg * math.pi / 180

theta_deg = 3
theta_rad = deg_to_rad(theta_deg)

# power n = 2000
n = 2000

# Compute cos(n * theta) modulo 360 degrees
angle_deg = (n * theta_deg) % 360
angle_rad = deg_to_rad(angle_deg)
value = 2 * math.cos(angle_rad)

print(f"z + 1/z = 2*cos({theta_deg}°) = {2*math.cos(theta_rad):.6f}")
print(f"n = {n}, angle = {angle_deg}°, 2*cos(n*theta) = {value:.6f}")

# Output candidate integers greater than the value:
candidate_int = math.ceil(value)
print(f"Smallest integer > {value} is {candidate_int}")

# Enumerate for small multiples for hint:
print("\nEnumerating 2*cos(k*3°) for k = 1..20:")
for k in range(1,21):
    val = 2*math.cos(deg_to_rad((k*3)%360))
    print(f"k={k:3d}, angle={(k*3)%360:6.1f}°, 2*cos(k*3°)={val:8.5f}")

# Explicitly state the answer from enumeration
print(f"\n=> The answer is {candidate_int}")
```
