[write_program]
The problem counts functions from a 9-element set to {0,1,2} (representing chocolate, vanilla, strawberry) such that each flavor count is positive and chocolate > vanilla > strawberry. We want to enumerate all valid triples (chocolate, vanilla, strawberry) with c+v+s=9, c>v>s>0, then count the ways to assign flavors accordingly, and print counts % 1000.

```python
from math import comb

# Enumerate positive triples (c,v,s) with c+v+s=9 and c>v>s>0
# For each, count ways = multinomial coefficient: 9!/(c! v! s!)
# Print each valid count mod 1000 and keep track of sum mod 1000

def multinomial(n, counts):
    res = 1
    for x in counts:
        res *= comb(n, x)
        n -= x
    return res

total = 0
print("Enumerating valid assignments counts mod 1000:")

for s in range(1, 8):     # strawberry >0, max 7
    for v in range(s+1, 9): # vanilla > strawberry
        for c in range(v+1, 10): # chocolate > vanilla
            if c + v + s == 9:
                ways = multinomial(9, [c,v,s])
                ways_mod = ways % 1000
                total = (total + ways_mod) % 1000
                print(f"c={c}, v={v}, s={s} => ways mod 1000: {ways_mod}")

print("Total count mod 1000:", total)
```
