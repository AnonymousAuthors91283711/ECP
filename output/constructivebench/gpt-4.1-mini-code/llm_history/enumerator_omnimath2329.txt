[write_program]
The problem concerns primes p for which the cubic congruence a^3 - 3a + 1 ≡ 0 (mod p) has exactly one solution a in [1, p]. We enumerate primes p up to a small limit, check solutions a in [1, p], count unique solutions to the congruence, and print primes with exactly one solution.

```python
# Enumerate primes p ≤ 50; for each p, find a ∈ [1,p] with a^3 - 3a +1 ≡0 mod p,
# counting solutions. Print p and the unique solution a if exactly one solution exists.

def is_prime(n):
    if n < 2: return False
    if n == 2: return True
    if n % 2 == 0: return False
    for i in range(3,int(n**0.5)+1,2):
        if n % i == 0:
            return False
    return True

def solutions(p):
    sols = []
    for a in range(1,p+1):
        if (pow(a,3,p) - 3*a + 1) % p == 0:
            sols.append(a)
    return sols

def main():
    limit = 50
    for p in range(2, limit+1):
        if is_prime(p):
            sols = solutions(p)
            if len(sols) == 1:
                print(f"Prime p={p} has unique solution a={sols[0]}")

if __name__ == "__main__":
    main()
```
