[write_program]
The problem asks to characterize all natural numbers \( n \geq 1 \) for which there exists an integer \( m \) such that \( m^2 = n^2 + 3^n \). I'll write a Python program to enumerate possible \( n \) values within a reasonable range and check if \( n^2 + 3^n \) is a perfect square. This helps in guessing an explicit description of the answer set.

We will:
- Try \( n \) from 1 to 30 (since \( 3^n \) grows quickly, limiting range for efficiency).
- Calculate \( n^2 + 3^n \).
- Check if it's a perfect square by comparing the integer square root squared.
- Print candidates immediately on discovery.

```python
# Enumerate n ≥ 1 for which ∃ m ∈ ℤ: m^2 = n^2 + 3^n

import math

def is_perfect_square(x):
    r = int(math.isqrt(x))
    return r*r == x

def main():
    print("Testing n from 1 to 30:")
    for n in range(1, 31):
        val = n*n + 3**n
        if is_perfect_square(val):
            m = int(math.isqrt(val))
            print(f"n={n}, m={m} because {m}^2 = {n}^2 + 3^{n} = {val}")

if __name__ == "__main__":
    main()
```
