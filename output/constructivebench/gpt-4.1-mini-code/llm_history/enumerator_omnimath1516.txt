[write_program]
The problem defines a recursive probability sequence \( p(n) \) with a given switching probability \(\frac{1}{2 n^2}\) at step \(n\), and asks for \(p(15)\).

We will enumerate \(p(n)\) for \(n=1\) to \(15\) exactly using `fractions.Fraction` for rationals to find \(p(15)\), printing each step's value as a fraction. This lets us conjecture the closed form or numeric value. 

```python
from fractions import Fraction as F

def switch_prob(t): return F(1, 2 * t * t)
def stay_prob(t): return F(1) - switch_prob(t)

p = {0: F(1), 1: F(1)}  # base cases, p(0) unused but set to 1 per problem

for n in range(2, 16):
    sp = stay_prob(n)
    swp = switch_prob(n)
    p[n] = sp * p[n-1] + swp * (1 - p[n-1])
    print(f"p({n}) = {p[n]}")

print("\nExact value of p(15):", p[15])
print("Approximate value of p(15):", float(p[15]))
```
