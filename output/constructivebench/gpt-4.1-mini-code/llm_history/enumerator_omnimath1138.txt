[write_program]
This problem involves functions \( f: \mathbb{N} \to \mathbb{N} \) with domain restricted to the set \( S = \{1,2,\ldots,9\} \), satisfying:
- For every \( s \in S \), \( f(f(f(s))) = s \).
- For every \( s \in S \), \( 3 \nmid (f(s) - s) \).

We want to find the number of such functions \( f \).

We will enumerate all functions \( f: S \to S \) and count those satisfying these conditions.

Key observations for efficiency:

1. The condition \( f(f(f(s))) = s \) implies that the function \( f \) induces a permutation on \( S \) with order dividing 3, i.e., every cycle length divides 3, so cycles of length 1 or 3 only (no 2-cycles).

2. \( S = \{1, \ldots, 9\} \) has size 9; any such permutation is composed of 1-cycles and/or 3-cycles.

3. So \( f \) is a permutation with cycles of length 1 or 3.

4. Additionally, for each element \( s \), \( 3 \nmid (f(s) - s) \) means the difference between \( f(s) \) and \( s \) is not divisible by 3.

Given that 9 elements can be split into exactly three 3-element cycles, or some fixed points plus some 3-cycles.

We'll enumerate all possible decompositions of \( S \) into cycles of length 1 or 3, and all such functions, filtering those satisfying the divisibility condition.

We'll print each function by its images \( f(s) \) for \( s=1,\ldots,9 \) when they satisfy both conditions.

Finally, we'll print the total count.

Because this is quite a large search space, the code exploits the structure to generate only functions that correspond to allowed permutations.

```python
# Enumerate functions f: S -> S with S={1,...,9} 
# satisfying:
# 1) f(f(f(s))) = s for all s in S 
# 2) 3 does not divide f(s)-s
# Condition (1) implies f is a permutation with cycle lengths 1 or 3 only.
# We'll enumerate such permutations and count those satisfying (2).

from itertools import combinations, permutations

S = list(range(1, 10))

# Precompute modulo classes to quickly check differences mod 3
mod3 = {x: x % 3 for x in S}

# Check if the difference f(s)-s is divisible by 3
def diff_div_3(x, y):
    return (y - x) % 3 == 0

# Generate all partitions of S into cycles of length 1 or 3 only
# Algorithm:
# - We try to select subsets of size 3 until none remain, rest are fixed points
def partitions_into_1_and_3(s):
    if not s:
        yield []
        return
    # Try fixed point
    first = s[0]
    for part in partitions_into_1_and_3(s[1:]):
        yield [[first]] + part
    # Try subsets of size 3 including first
    if len(s) >= 3:
        for triple in combinations(s[1:], 2):
            cycle = [first] + list(triple)
            rest = [x for x in s if x not in cycle]
            for part in partitions_into_1_and_3(rest):
                yield [cycle] + part

all_count = 0

def cycles_to_permutations(cycles):
    # Generate all permutations with these cycles (each cycle can be permuted by rotations)
    # For 1-cycle: only one option
    # For 3-cycle: 2 possible permutations (rotations) per cycle 
    # Because cycle (a,b,c) can be:
    # (a->b,b->c,c->a) or (a->c,c->b,b->a)
    from itertools import product
    options_per_cycle = []
    for c in cycles:
        if len(c) == 1:
            # fixed point mapping
            options_per_cycle.append([{c[0]: c[0]}])
        else:
            # two possible 3-cycles
            c1 = {c[0]: c[1], c[1]: c[2], c[2]: c[0]}
            c2 = {c[0]: c[2], c[2]: c[1], c[1]: c[0]}
            options_per_cycle.append([c1, c2])
    # Cartesian product of choices
    for choice in product(*options_per_cycle):
        # Merge dictionaries
        f = {}
        for d in choice:
            f.update(d)
        yield f

for partition in partitions_into_1_and_3(S):
    for f in cycles_to_permutations(partition):
        # check condition (2): no s with f(s)-s divisible by 3
        if all(not diff_div_3(s, f[s]) for s in S):
            all_count += 1
            # print function values as list
            print([f[s] for s in S])

print("Total count:", all_count)
```
