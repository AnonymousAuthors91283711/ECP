[write_program]
The problem involves three distinct digits \(P, Q, R < 10\) satisfying the equation:
\[
100P + 70 + R + 300 + 90 + R = 100R + 10Q
\]
i.e.,
\[
100P + 7 \times 10 + R + (300 + 9 \times 10 + R) = 100R + 10Q + 0
\]

We want to find all such triples \((P, Q, R)\) meeting these constraints and verify the sum \(P+Q+R\) is constant.

The program enumerates possible digits, filters by constraints, prints all fits, and then prints the sum \(P+Q+R\).

```python
# Enumerate digits P, Q, R from 0 to 9, distinct
# Check the equation:
# 100*P + 70 + R + 300 + 90 + R = 100*R + 10*Q
# Simplify left side: (100P + 70 + R) + (300 + 90 + R) = 100P + 70 + R + 300 + 90 + R = 100P + 460 + 2R
#
# So equation: 100P + 460 + 2R = 100R + 10Q
# Rearranged: 100P + 460 + 2R = 100R + 10Q
# 100P + 460 + 2R - 100R - 10Q = 0
# 100P + 460 - 98R - 10Q = 0
#
# For each distinct P,Q,R in [0..9], test the equation

for P in range(10):
    for Q in range(10):
        if Q == P:
            continue
        for R in range(10):
            if R == P or R == Q:
                continue
            left = 100*P + 460 + 2*R
            right = 100*R + 10*Q
            if left == right:
                s = P + Q + R
                print(f"P={P}, Q={Q}, R={R}, sum={s}")

# Collect sums found to check if unique
found_sums = set()
for P in range(10):
    for Q in range(10):
        if Q == P:
            continue
        for R in range(10):
            if R == P or R == Q:
                continue
            if 100*P + 460 + 2*R == 100*R + 10*Q:
                found_sums.add(P+Q+R)
print("Possible sums:", found_sums)
if len(found_sums) == 1:
    print("Unique sum:", found_sums.pop())
```
