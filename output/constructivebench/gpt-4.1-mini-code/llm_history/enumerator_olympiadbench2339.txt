[write_program]
The problem is to find the number of positive divisors \( d \) of 900 such that \( d \) is a perfect square.

We will enumerate all positive divisors of 900, check which are perfect squares, print them, and count the total number.

```python
# Enumerate positive divisors d of 900 where d is a perfect square.
# Print each such d immediately and finally print the total count.

def is_perfect_square(n):
    r = int(n**0.5)
    return r*r == n

def divisors(n):
    # Efficient divisor enumeration
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            yield i
            if i*i != n:
                yield n // i

def main():
    n = 900
    squares = []
    # Use a set to avoid duplicates, since divisors function yields both i and n//i
    divs = set(divisors(n))
    count = 0
    for d in sorted(divs):
        if is_perfect_square(d):
            print(d)
            count += 1
    print("Total count of perfect square divisors of 900:", count)

if __name__ == "__main__":
    main()
```
