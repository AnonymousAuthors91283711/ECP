[write_program]
The problem asks to find the natural number \(n\) such that \(2^n = 8^{20}\) and prove uniqueness. We will write a Python program to enumerate powers of 2 and compare with \(8^{20}\), printing results and verifying the uniqueness condition.

```python
# Enumerate n with 2^n = 8^20 and show uniqueness

def main():
    target = 8 ** 20
    print(f"Target (8^20): {target}")
    found = None
    # Since 8 = 2^3, we expect n = 3*20 = 60
    # Enumerate around expected value for verification
    for n in range(55, 66):
        val = 2 ** n
        if val == target:
            print(f"2^{n} = 8^{20} = {val}")
            if found is None:
                found = n
            else:
                # Found a second n with same value (shouldn't happen)
                print(f"Unexpected duplicate n = {n}")
        else:
            # Optionally print mismatches for information
            pass

    if found is not None:
        print(f"Unique solution n = {found}")
    else:
        print("No solution found")

if __name__ == "__main__":
    main()
```
